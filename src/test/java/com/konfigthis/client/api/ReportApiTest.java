/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateReport;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.Report;
import com.konfigthis.client.model.ReportCount;
import com.konfigthis.client.model.ReportDataStreamResults;
import com.konfigthis.client.model.ReportFilter;
import com.konfigthis.client.model.ReportQuery;
import com.konfigthis.client.model.ReportResult;
import com.konfigthis.client.model.ReportSeriesQuery;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateReport;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportApi
 */
@Disabled
public class ReportApiTest {

    private static ReportApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReportApi(apiClient);
    }

    /**
     * Delete a set of reports
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkDeleteTest() throws ApiException {
        String orgId = null;
        Process response = api.bulkDelete(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an exact copy of an existing report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExactCopyTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        Report response = api.createExactCopy(orgId, reportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewReportTest() throws ApiException {
        String label = null;
        String orgId = null;
        String description = null;
        String filter = null;
        String share = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        List<String> chartIds = null;
        Report response = api.createNewReport(label, orgId)
                .description(description)
                .filter(filter)
                .share(share)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .chartIds(chartIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Duplicate a set of reports
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateReportsTest() throws ApiException {
        String orgId = null;
        Process response = api.duplicateReports(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a particular chart in a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportChartCsvTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String chartId = null;
        String startDate = null;
        String endDate = null;
        String interval = null;
        String scenarioId = null;
        Boolean projectHires = null;
        String filter = null;
        String changeGroupingType = null;
        String changeGroupingId = null;
        Process response = api.exportChartCsv(orgId, reportId, chartId)
                .startDate(startDate)
                .endDate(endDate)
                .interval(interval)
                .scenarioId(scenarioId)
                .projectHires(projectHires)
                .filter(filter)
                .changeGroupingType(changeGroupingType)
                .changeGroupingId(changeGroupingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular report by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findReportByIdTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        Report response = api.findReportById(orgId, reportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all reports in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPaginatedTest() throws ApiException {
        String orgId = null;
        String fromId = null;
        Integer limit = null;
        String sort = null;
        String filter = null;
        String fields = null;
        String format = null;
        String returnAccess = null;
        ReportDataStreamResults response = api.getAllPaginated(orgId)
                .fromId(fromId)
                .limit(limit)
                .sort(sort)
                .filter(filter)
                .fields(fields)
                .format(format)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Query all the charts in a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllReportChartsTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String startDate = null;
        String endDate = null;
        String interval = null;
        String scenarioId = null;
        Boolean projectHires = null;
        String filter = null;
        String changeGroupingType = null;
        String changeGroupingId = null;
        List<ReportResult> response = api.getAllReportCharts(orgId, reportId)
                .startDate(startDate)
                .endDate(endDate)
                .interval(interval)
                .scenarioId(scenarioId)
                .projectHires(projectHires)
                .filter(filter)
                .changeGroupingType(changeGroupingType)
                .changeGroupingId(changeGroupingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return count of reports in an organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCountOfReportsInOrganizationTest() throws ApiException {
        String orgId = null;
        ReportCount response = api.getCountOfReportsInOrganization(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        api.removeById(orgId, reportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return timeseries data from arbitrary queries
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeseriesDataArbitraryQueriesTest() throws ApiException {
        Object options = null;
        String orgId = null;
        List<ReportSeriesQuery> series = null;
        List<ReportFilter> filters = null;
        String content = null;
        String startDate = null;
        String endDate = null;
        String interval = null;
        List<LocalDate> intervalDates = null;
        List<ReportResult> response = api.timeseriesDataArbitraryQueries(options, orgId)
                .series(series)
                .filters(filters)
                .content(content)
                .startDate(startDate)
                .endDate(endDate)
                .interval(interval)
                .intervalDates(intervalDates)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingReportTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String description = null;
        String label = null;
        String filter = null;
        String share = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        List<String> chartIds = null;
        String referencedReportUrl = null;
        api.updateExistingReport(orgId, reportId)
                .description(description)
                .label(label)
                .filter(filter)
                .share(share)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .chartIds(chartIds)
                .referencedReportUrl(referencedReportUrl)
                .execute();
        // TODO: test validations
    }

}
