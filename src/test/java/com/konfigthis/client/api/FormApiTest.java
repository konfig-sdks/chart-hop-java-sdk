/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateForm;
import com.konfigthis.client.model.Form;
import com.konfigthis.client.model.FormBlock;
import com.konfigthis.client.model.FormCollectRequest;
import com.konfigthis.client.model.FormDraft;
import com.konfigthis.client.model.FormField;
import com.konfigthis.client.model.FormRender;
import com.konfigthis.client.model.FormRerender;
import com.konfigthis.client.model.FormStatusUpdateRequest;
import com.konfigthis.client.model.FormSubmitRequest;
import com.konfigthis.client.model.ResultsForm;
import com.konfigthis.client.model.ResultsFormSummary;
import com.konfigthis.client.model.UpdateForm;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FormApi
 */
@Disabled
public class FormApiTest {

    private static FormApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FormApi(apiClient);
    }

    /**
     * Create a form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFormTest() throws ApiException {
        String label = null;
        List<FormField> fields = null;
        List<FormBlock> blocks = null;
        String status = null;
        String orgId = null;
        String description = null;
        String type = null;
        String targetType = null;
        String targetFilter = null;
        String submitFilter = null;
        String responseReadFilter = null;
        Boolean useFieldAccess = null;
        String approval = null;
        String authorSensitive = null;
        Object options = null;
        Form response = api.createNewForm(label, fields, blocks, status, orgId)
                .description(description)
                .type(type)
                .targetType(targetType)
                .targetFilter(targetFilter)
                .submitFilter(submitFilter)
                .responseReadFilter(responseReadFilter)
                .useFieldAccess(useFieldAccess)
                .approval(approval)
                .authorSensitive(authorSensitive)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFormByIdTest() throws ApiException {
        String orgId = null;
        String formId = null;
        api.deleteFormById(orgId, formId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete forms
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFormById_0Test() throws ApiException {
        String orgId = null;
        api.deleteFormById_0(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete the given form draft
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFormDraftTest() throws ApiException {
        String orgId = null;
        String draftId = null;
        FormDraft response = api.deleteFormDraft(orgId, draftId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all active forms applicable to a particular person
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicableFormsForPersonTest() throws ApiException {
        String orgId = null;
        String personId = null;
        ResultsForm response = api.getApplicableFormsForPerson(orgId, personId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular form by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String evalJobId = null;
        Form response = api.getById(orgId, formId)
                .evalJobId(evalJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the current state of form draft data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentStateOfDraftDataTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String personId = null;
        FormDraft response = api.getCurrentStateOfDraftData(orgId, formId)
                .personId(personId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all active forms applicable to a particular entity
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailableFormsTest() throws ApiException {
        String orgId = null;
        String targetId = null;
        String targetType = null;
        ResultsFormSummary response = api.listAvailableForms(orgId)
                .targetId(targetId)
                .targetType(targetType)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all forms in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrgFormsTest() throws ApiException {
        String orgId = null;
        String status = null;
        String from = null;
        Integer limit = null;
        ResultsForm response = api.listOrgForms(orgId)
                .status(status)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Render a form for display
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renderForDisplayTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String targetId = null;
        String targetType = null;
        String formResponseId = null;
        String formResponseChangeId = null;
        String formVersionId = null;
        FormRender response = api.renderForDisplay(orgId, formId)
                .targetId(targetId)
                .targetType(targetType)
                .formResponseId(formResponseId)
                .formResponseChangeId(formResponseChangeId)
                .formVersionId(formVersionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Re-render form blocks based on changes to the form values
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rerenderQuestionUpdateTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String updateQuestionId = null;
        String targetId = null;
        String targetType = null;
        String formVersionId = null;
        FormRerender response = api.rerenderQuestionUpdate(orgId, formId, updateQuestionId)
                .targetId(targetId)
                .targetType(targetType)
                .formVersionId(formVersionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Collect data for an existing form, sending emails and chat notifications to people being requested
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailsAndChatNotificationsTest() throws ApiException {
        Boolean preview = null;
        String orgId = null;
        String formId = null;
        String assessmentId = null;
        String targetFilter = null;
        String submitFilter = null;
        String message = null;
        Form response = api.sendEmailsAndChatNotifications(preview, orgId, formId)
                .assessmentId(assessmentId)
                .targetFilter(targetFilter)
                .submitFilter(submitFilter)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Sends reminder for a form with existing tasks, sending emails/chat notifications to people being requested
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReminderNotificationTest() throws ApiException {
        Boolean preview = null;
        String orgId = null;
        String formId = null;
        String assessmentId = null;
        String targetFilter = null;
        String submitFilter = null;
        String message = null;
        Form response = api.sendReminderNotification(preview, orgId, formId)
                .assessmentId(assessmentId)
                .targetFilter(targetFilter)
                .submitFilter(submitFilter)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit draft data from a form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitDraftDataTest() throws ApiException {
        String personId = null;
        Map<String, Object> data = null;
        String orgId = null;
        String formId = null;
        Map<String, Object> blocksData = null;
        FormDraft response = api.submitDraftData(personId, data, orgId, formId)
                .blocksData(blocksData)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit data from a form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitFormDataTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String targetId = null;
        String targetType = null;
        api.submitFormData(orgId, formId)
                .targetId(targetId)
                .targetType(targetType)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit data from a form draft
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitFormDraftTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String targetId = null;
        String targetType = null;
        FormDraft response = api.submitFormDraft(orgId, formId)
                .targetId(targetId)
                .targetType(targetType)
                .execute();
        // TODO: test validations
    }

    /**
     * Submit data from a form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitFormResponseTest() throws ApiException {
        String personId = null;
        Map<String, Object> data = null;
        String orgId = null;
        String formId = null;
        Map<String, Object> blocksData = null;
        api.submitFormResponse(personId, data, orgId, formId)
                .blocksData(blocksData)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing form
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingFormTest() throws ApiException {
        String orgId = null;
        String formId = null;
        String description = null;
        String label = null;
        List<FormField> fields = null;
        List<FormBlock> blocks = null;
        String status = null;
        String type = null;
        String targetType = null;
        String targetFilter = null;
        String submitFilter = null;
        String responseReadFilter = null;
        Boolean useFieldAccess = null;
        String approval = null;
        String authorSensitive = null;
        Object options = null;
        api.updateExistingForm(orgId, formId)
                .description(description)
                .label(label)
                .fields(fields)
                .blocks(blocks)
                .status(status)
                .type(type)
                .targetType(targetType)
                .targetFilter(targetFilter)
                .submitFilter(submitFilter)
                .responseReadFilter(responseReadFilter)
                .useFieldAccess(useFieldAccess)
                .approval(approval)
                .authorSensitive(authorSensitive)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Update status for existing forms
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFormStatusTest() throws ApiException {
        String updateStatus = null;
        List<String> formIds = null;
        String orgId = null;
        api.updateFormStatus(updateStatus, formIds, orgId)
                .execute();
        // TODO: test validations
    }

}
