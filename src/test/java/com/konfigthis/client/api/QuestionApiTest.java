/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateQuestion;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.Question;
import com.konfigthis.client.model.ResultsQuestion;
import com.konfigthis.client.model.UpdateQuestion;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuestionApi
 */
@Disabled
public class QuestionApiTest {

    private static QuestionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new QuestionApi(apiClient);
    }

    /**
     * Create a question
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String question = null;
        String orgId = null;
        String orgId = null;
        String fieldId = null;
        String type = null;
        String plural = null;
        List<EnumValue> values = null;
        Object options = null;
        Question response = api.create(question, orgId)
                .orgId(orgId)
                .fieldId(fieldId)
                .type(type)
                .plural(plural)
                .values(values)
                .options(options)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all questions in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInOrgTest() throws ApiException {
        String orgId = null;
        String from = null;
        Integer limit = null;
        String ids = null;
        ResultsQuestion response = api.getAllInOrg(orgId)
                .from(from)
                .limit(limit)
                .ids(ids)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular question by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String questionId = null;
        Question response = api.getById(orgId, questionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a question
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTest() throws ApiException {
        String orgId = null;
        String questionId = null;
        api.remove(orgId, questionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing question
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateByOrgAndIdTest() throws ApiException {
        String orgId = null;
        String questionId = null;
        String question = null;
        String fieldId = null;
        String type = null;
        String plural = null;
        List<EnumValue> values = null;
        Object options = null;
        api.updateByOrgAndId(orgId, questionId)
                .question(question)
                .fieldId(fieldId)
                .type(type)
                .plural(plural)
                .values(values)
                .options(options)
                .execute();
        // TODO: test validations
    }

}
