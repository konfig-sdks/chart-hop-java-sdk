/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateTable;
import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsTable;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.Table;
import com.konfigthis.client.model.UpdateTable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TableApi
 */
@Disabled
public class TableApiTest {

    private static TableApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TableApi(apiClient);
    }

    /**
     * Create a table
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTableTest() throws ApiException {
        String name = null;
        Boolean effectiveDated = null;
        String orgId = null;
        String label = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        Table response = api.createNewTable(name, effectiveDated, orgId)
                .label(label)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an existing row
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRowTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        String keyColumn = null;
        String keyValue = null;
        LocalDate date = null;
        String scenarioId = null;
        ResultsData response = api.deleteRow(orgId, tableId, keyColumn, keyValue)
                .date(date)
                .scenarioId(scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an existing row, purging from history entirely
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRowFromHistoryTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        String keyColumn = null;
        String keyValue = null;
        LocalDate date = null;
        ResultsData response = api.deleteRowFromHistory(orgId, tableId, keyColumn, keyValue)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Export table data to CSV file
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDataToCsvTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        Process response = api.exportDataToCsv(orgId, tableId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve all rows from the table
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRowsTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        LocalDate date = null;
        String scenarioId = null;
        String columns = null;
        String format = null;
        ResultsData response = api.getAllRows(orgId, tableId)
                .date(date)
                .scenarioId(scenarioId)
                .columns(columns)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a particular row
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRowByColumnTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        String keyColumn = null;
        String keyValue = null;
        LocalDate date = null;
        String scenarioId = null;
        String columns = null;
        String format = null;
        ResultsData response = api.getRowByColumn(orgId, tableId, keyColumn, keyValue)
                .date(date)
                .scenarioId(scenarioId)
                .columns(columns)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular table by id or name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableByIdOrNameTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        Table response = api.getTableByIdOrName(orgId, tableId)
                .execute();
        // TODO: test validations
    }

    /**
     * Import data from CSV file
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importDataFromCsvFileTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        File _file = null;
        LocalDate date = null;
        String importFromProcessId = null;
        String parentProcessId = null;
        Process response = api.importDataFromCsvFile(orgId, tableId)
                ._file(_file)
                .date(date)
                .importFromProcessId(importFromProcessId)
                .parentProcessId(parentProcessId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all tables in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInOrgPaginatedTest() throws ApiException {
        String orgId = null;
        String from = null;
        Integer limit = null;
        Boolean includeBuiltIns = null;
        String names = null;
        ResultsTable response = api.listInOrgPaginated(orgId)
                .from(from)
                .limit(limit)
                .includeBuiltIns(includeBuiltIns)
                .names(names)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a table
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        api.removeById(orgId, tableId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing row
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingRowDataTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        String keyColumn = null;
        String keyValue = null;
        LocalDate date = null;
        String scenarioId = null;
        ResultsData response = api.updateExistingRowData(orgId, tableId, keyColumn, keyValue)
                .date(date)
                .scenarioId(scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing table
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingTableTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        String name = null;
        String label = null;
        String labelColumnId = null;
        Boolean effectiveDated = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        api.updateExistingTable(orgId, tableId)
                .name(name)
                .label(label)
                .labelColumnId(labelColumnId)
                .effectiveDated(effectiveDated)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Upsert row data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertRowDataTest() throws ApiException {
        String orgId = null;
        String tableId = null;
        LocalDate date = null;
        String scenarioId = null;
        ResultsData response = api.upsertRowData(orgId, tableId)
                .date(date)
                .scenarioId(scenarioId)
                .execute();
        // TODO: test validations
    }

}
