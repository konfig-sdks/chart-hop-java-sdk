/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApproveChange;
import com.konfigthis.client.model.BulkChangeRequest;
import com.konfigthis.client.model.BulkUpdateRequest;
import com.konfigthis.client.model.Change;
import com.konfigthis.client.model.ChangeStatusResponse;
import com.konfigthis.client.model.CreateChange;
import com.konfigthis.client.model.JobUpdate;
import java.time.LocalDate;
import com.konfigthis.client.model.PartialJob;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsChange;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ScenarioChangesWithBudgetRollup;
import com.konfigthis.client.model.UpdateChange;
import com.konfigthis.client.model.UpdateScenarioChangeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChangeApi
 */
@Disabled
public class ChangeApiTest {

    private static ChangeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChangeApi(apiClient);
    }

    /**
     * Amend a change within a scenario, and potentially return the updated data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void amendScenarioChangeTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String changeId = null;
        String fields = null;
        Boolean includeUpdatedFields = null;
        String format = null;
        UpdateScenarioChangeResponse response = api.amendScenarioChange(orgId, scenarioId, changeId)
                .fields(fields)
                .includeUpdatedFields(includeUpdatedFields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve or reject a change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveOrRejectTest() throws ApiException {
        String status = null;
        String orgId = null;
        String changeId = null;
        String approvalNote = null;
        String changeId = null;
        api.approveOrReject(status, orgId, changeId)
                .approvalNote(approvalNote)
                .changeId(changeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a bulk update on a number of jobs
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkUpdateJobsTest() throws ApiException {
        Set<String> jobIds = null;
        JobUpdate update = null;
        LocalDate date = null;
        String orgId = null;
        String scenarioId = null;
        String note = null;
        Process response = api.bulkUpdateJobs(jobIds, update, date, orgId)
                .scenarioId(scenarioId)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Given a of change id, see if the person can approve/reject
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkApproverEligibilityTest() throws ApiException {
        String orgId = null;
        String changeId = null;
        LocalDate date = null;
        Boolean response = api.checkApproverEligibility(orgId, changeId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a depart-rehire pair of changes, for filling in historical data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDepartRehirePairTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String orgId = null;
        String scenarioId = null;
        String personId = null;
        String otherJobId = null;
        String type = null;
        LocalDate date = null;
        LocalDate announceDate = null;
        String departType = null;
        String departRegret = null;
        String reason = null;
        String promotionType = null;
        PartialJob job = null;
        JobUpdate update = null;
        String note = null;
        LocalDate startDate = null;
        Change response = api.createDepartRehirePair(orgId)
                .jobId(jobId)
                .orgId(orgId)
                .scenarioId(scenarioId)
                .personId(personId)
                .otherJobId(otherJobId)
                .type(type)
                .date(date)
                .announceDate(announceDate)
                .departType(departType)
                .departRegret(departRegret)
                .reason(reason)
                .promotionType(promotionType)
                .job(job)
                .update(update)
                .note(note)
                .startDate(startDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Sync a change (create the change only if it does not already exist)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIfNotExistsTest() throws ApiException {
        String orgId = null;
        String type = null;
        String jobId = null;
        String orgId = null;
        String scenarioId = null;
        String personId = null;
        String otherJobId = null;
        String type = null;
        LocalDate date = null;
        LocalDate announceDate = null;
        String departType = null;
        String departRegret = null;
        String reason = null;
        String promotionType = null;
        PartialJob job = null;
        JobUpdate update = null;
        String note = null;
        String processId = null;
        Change response = api.createIfNotExists(orgId, type)
                .jobId(jobId)
                .orgId(orgId)
                .scenarioId(scenarioId)
                .personId(personId)
                .otherJobId(otherJobId)
                .type(type)
                .date(date)
                .announceDate(announceDate)
                .departType(departType)
                .departRegret(departRegret)
                .reason(reason)
                .promotionType(promotionType)
                .job(job)
                .update(update)
                .note(note)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewChangeTest() throws ApiException {
        String orgId = null;
        String type = null;
        String jobId = null;
        String orgId = null;
        String scenarioId = null;
        String personId = null;
        String otherJobId = null;
        String type = null;
        LocalDate date = null;
        LocalDate announceDate = null;
        String departType = null;
        String departRegret = null;
        String reason = null;
        String promotionType = null;
        PartialJob job = null;
        JobUpdate update = null;
        String note = null;
        String source = null;
        String processId = null;
        Change response = api.createNewChange(orgId, type)
                .jobId(jobId)
                .orgId(orgId)
                .scenarioId(scenarioId)
                .personId(personId)
                .otherJobId(otherJobId)
                .type(type)
                .date(date)
                .announceDate(announceDate)
                .departType(departType)
                .departRegret(departRegret)
                .reason(reason)
                .promotionType(promotionType)
                .job(job)
                .update(update)
                .note(note)
                .source(source)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a previous change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePreviousChangeTest() throws ApiException {
        String orgId = null;
        String changeId = null;
        String processId = null;
        api.deletePreviousChange(orgId, changeId)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all changes for a particular scenario, with before job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findScenarioChangesTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String fields = null;
        String format = null;
        String q = null;
        String returnAccess = null;
        ScenarioChangesWithBudgetRollup response = api.findScenarioChanges(orgId, scenarioId)
                .fields(fields)
                .format(format)
                .q(q)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular change by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String changeId = null;
        String format = null;
        Change response = api.getById(orgId, changeId)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular change by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getById_0Test() throws ApiException {
        String orgId = null;
        String changeId = null;
        String fields = null;
        String format = null;
        api.getById_0(orgId, changeId)
                .fields(fields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return recent changes across an org, or for a particular person or job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentChangesTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        LocalDate endDate = null;
        String type = null;
        String fields = null;
        String personId = null;
        String jobId = null;
        Boolean includeBackfill = null;
        String refs = null;
        String q = null;
        String from = null;
        Integer limit = null;
        String open = null;
        Boolean desc = null;
        Boolean scenarioOnly = null;
        Boolean parentOnly = null;
        Boolean includeGrantSchedule = null;
        Boolean excludeAtsRecruitingFields = null;
        Boolean includeStruck = null;
        String status = null;
        Boolean stripUpdates = null;
        String format = null;
        String fieldEntityTypes = null;
        String returnAccess = null;
        ResultsChange response = api.getRecentChanges(orgId)
                .scenarioId(scenarioId)
                .date(date)
                .endDate(endDate)
                .type(type)
                .fields(fields)
                .personId(personId)
                .jobId(jobId)
                .includeBackfill(includeBackfill)
                .refs(refs)
                .q(q)
                .from(from)
                .limit(limit)
                .open(open)
                .desc(desc)
                .scenarioOnly(scenarioOnly)
                .parentOnly(parentOnly)
                .includeGrantSchedule(includeGrantSchedule)
                .excludeAtsRecruitingFields(excludeAtsRecruitingFields)
                .includeStruck(includeStruck)
                .status(status)
                .stripUpdates(stripUpdates)
                .format(format)
                .fieldEntityTypes(fieldEntityTypes)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Return recent changes across an org, or for a particular person or job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentChangesForOrgOrPersonTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String personId = null;
        String scenarioId = null;
        String type = null;
        String status = null;
        String fields = null;
        String fieldsChanged = null;
        String q = null;
        String open = null;
        Boolean includeGrantSchedule = null;
        LocalDate fromDate = null;
        String from = null;
        Integer limit = null;
        Boolean desc = null;
        String format = null;
        String returnAccess = null;
        ResultsData response = api.getRecentChangesForOrgOrPerson(orgId)
                .jobId(jobId)
                .personId(personId)
                .scenarioId(scenarioId)
                .type(type)
                .status(status)
                .fields(fields)
                .fieldsChanged(fieldsChanged)
                .q(q)
                .open(open)
                .includeGrantSchedule(includeGrantSchedule)
                .fromDate(fromDate)
                .from(from)
                .limit(limit)
                .desc(desc)
                .format(format)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the status of a running change within a scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String changeId = null;
        Integer processId = null;
        ChangeStatusResponse response = api.getStatus(orgId, scenarioId, changeId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a series of changes at once
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performBulkChangeTest() throws ApiException {
        List<CreateChange> changes = null;
        String orgId = null;
        Process response = api.performBulkChange(changes, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Make a change to a change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChangeByIdTest() throws ApiException {
        String orgId = null;
        String changeId = null;
        LocalDate date = null;
        LocalDate announceDate = null;
        String status = null;
        String departType = null;
        String departRegret = null;
        String reason = null;
        String promotionType = null;
        PartialJob job = null;
        JobUpdate update = null;
        String note = null;
        String approvalNote = null;
        String processId = null;
        api.updateChangeById(orgId, changeId)
                .date(date)
                .announceDate(announceDate)
                .status(status)
                .departType(departType)
                .departRegret(departRegret)
                .reason(reason)
                .promotionType(promotionType)
                .job(job)
                .update(update)
                .note(note)
                .approvalNote(approvalNote)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate a change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateChangeOperationTest() throws ApiException {
        String orgId = null;
        String type = null;
        String jobId = null;
        String orgId = null;
        String scenarioId = null;
        String personId = null;
        String otherJobId = null;
        String type = null;
        LocalDate date = null;
        LocalDate announceDate = null;
        String departType = null;
        String departRegret = null;
        String reason = null;
        String promotionType = null;
        PartialJob job = null;
        JobUpdate update = null;
        String note = null;
        Change response = api.validateChangeOperation(orgId, type)
                .jobId(jobId)
                .orgId(orgId)
                .scenarioId(scenarioId)
                .personId(personId)
                .otherJobId(otherJobId)
                .type(type)
                .date(date)
                .announceDate(announceDate)
                .departType(departType)
                .departRegret(departRegret)
                .reason(reason)
                .promotionType(promotionType)
                .job(job)
                .update(update)
                .note(note)
                .execute();
        // TODO: test validations
    }

}
