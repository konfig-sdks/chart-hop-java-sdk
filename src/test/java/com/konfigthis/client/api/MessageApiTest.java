/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Message;
import com.konfigthis.client.model.PartialMessage;
import com.konfigthis.client.model.ResultsMessage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageApi
 */
@Disabled
public class MessageApiTest {

    private static MessageApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MessageApi(apiClient);
    }

    /**
     * Create a new message
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewMessageTest() throws ApiException {
        String orgId = null;
        String title = null;
        String id = null;
        String orgId = null;
        String type = null;
        String notificationType = null;
        String userId = null;
        String content = null;
        String messageUrl = null;
        String key = null;
        String readAt = null;
        String seenAt = null;
        String createId = null;
        String createAt = null;
        Message response = api.createNewMessage(orgId)
                .title(title)
                .id(id)
                .orgId(orgId)
                .type(type)
                .notificationType(notificationType)
                .userId(userId)
                .content(content)
                .messageUrl(messageUrl)
                .key(key)
                .readAt(readAt)
                .seenAt(seenAt)
                .createId(createId)
                .createAt(createAt)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all messages for a particular user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForUserTest() throws ApiException {
        String orgId = null;
        String type = null;
        Boolean unreadOnly = null;
        String from = null;
        Integer limit = null;
        ResultsMessage response = api.getAllForUser(orgId)
                .type(type)
                .unreadOnly(unreadOnly)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular message by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageByIdTest() throws ApiException {
        String orgId = null;
        String messageId = null;
        Message response = api.getMessageById(orgId, messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular message by key
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageByKeyTest() throws ApiException {
        String orgId = null;
        String messageKey = null;
        Message response = api.getMessageByKey(orgId, messageKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Marks each message as &#x60;seen&#x60;
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markBulkAsSeenTest() throws ApiException {
        String orgId = null;
        api.markBulkAsSeen(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets each of the designated message&#39;s &#x60;readAt&#x60; property
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markMessagesAsReadTest() throws ApiException {
        String orgId = null;
        api.markMessagesAsRead(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the designated message&#39;s &#x60;readAt&#x60; property
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setReadStatusTest() throws ApiException {
        String orgId = null;
        String messageId = null;
        api.setReadStatus(orgId, messageId)
                .execute();
        // TODO: test validations
    }

}
