/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BulkJobUpdateRequest;
import com.konfigthis.client.model.GraphCountsResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.OrgCount;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.UpdateOperation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobApi
 */
@Disabled
public class JobApiTest {

    private static JobApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new JobApi(apiClient);
    }

    /**
     * Create a job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewJobTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.createNewJob(orgId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular job by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInOrganizationTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        String fields = null;
        String format = null;
        Object response = api.findInOrganization(orgId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .fields(fields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Find jobs in the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInOrganization_0Test() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String compReviewId = null;
        String approvalChainId = null;
        LocalDate date = null;
        String q = null;
        String from = null;
        Integer limit = null;
        String fields = null;
        List<String> fieldsList = null;
        String format = null;
        Boolean useScenarioChanges = null;
        String returnAccess = null;
        ResultsData response = api.findInOrganization_0(orgId)
                .scenarioId(scenarioId)
                .compReviewId(compReviewId)
                .approvalChainId(approvalChainId)
                .date(date)
                .q(q)
                .from(from)
                .limit(limit)
                .fields(fields)
                .fieldsList(fieldsList)
                .format(format)
                .useScenarioChanges(useScenarioChanges)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Count jobs or people in the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationJobCountTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        String q = null;
        OrgCount response = api.getOrganizationJobCount(orgId)
                .scenarioId(scenarioId)
                .date(date)
                .q(q)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve jobs from a region of the job graph
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRegionJobsGraphTest() throws ApiException {
        String orgId = null;
        String start = null;
        Integer depth = null;
        Integer approxLimit = null;
        String scenarioId = null;
        String q = null;
        LocalDate date = null;
        String fields = null;
        String format = null;
        String returnAccess = null;
        ResultsData response = api.getRegionJobsGraph(orgId)
                .start(start)
                .depth(depth)
                .approxLimit(approxLimit)
                .scenarioId(scenarioId)
                .q(q)
                .date(date)
                .fields(fields)
                .format(format)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a map of jobId to their sibling and direct counts and the corresponding ids
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiblingsAndDirectsMapTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        String q = null;
        GraphCountsResponse response = api.getSiblingsAndDirectsMap(orgId)
                .scenarioId(scenarioId)
                .date(date)
                .q(q)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of positions occupied by a job on specific date
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOccupiedPositionsByJobAndDateTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        String from = null;
        Integer limit = null;
        String positionFields = null;
        String format = null;
        ResultsData response = api.listOccupiedPositionsByJobAndDate(orgId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .from(from)
                .limit(limit)
                .positionFields(positionFields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a bulk update on a number of jobs
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performBulkUpdateTest() throws ApiException {
        List<UpdateOperation> updates = null;
        LocalDate date = null;
        String orgId = null;
        String scenarioId = null;
        String note = null;
        Process response = api.performBulkUpdate(updates, date, orgId)
                .scenarioId(scenarioId)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        api.removeById(orgId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobDetailsTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        api.updateJobDetails(orgId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

}
