/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessTokenRequest;
import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.IdpAccessTokenResponse;
import com.konfigthis.client.model.OauthAuthorizeUserTokenRequest;
import java.net.URI;
import com.konfigthis.client.model.ViewAsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OauthApi
 */
@Disabled
public class OauthApiTest {

    private static OauthApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OauthApi(apiClient);
    }

    /**
     * Return an Oauth2 Authorization bearer token, given a username and password
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeUserTokenTest() throws ApiException {
        String grantType = null;
        String username = null;
        String password = null;
        String scope = null;
        String code = null;
        URI redirectUri = null;
        String clientId = null;
        String refreshToken = null;
        AccessTokenResponse response = api.authorizeUserToken()
                .grantType(grantType)
                .username(username)
                .password(password)
                .scope(scope)
                .code(code)
                .redirectUri(redirectUri)
                .clientId(clientId)
                .refreshToken(refreshToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Exchange a one-time use Auth Code for the IDP access token response
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exchangeIdpAccessTokenResponseTest() throws ApiException {
        String idp = null;
        String authCode = null;
        IdpAccessTokenResponse response = api.exchangeIdpAccessTokenResponse(idp)
                .authCode(authCode)
                .execute();
        // TODO: test validations
    }

    /**
     * Return an Oauth2 Authorization bearer token, given a SSO id token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateBearerTokenFromSSOTest() throws ApiException {
        String idToken = null;
        String scope = null;
        String type = null;
        String fromToken = null;
        Boolean createOrg = null;
        String signupSource = null;
        String utmParams = null;
        String email = null;
        AccessTokenResponse response = api.generateBearerTokenFromSSO(idToken, scope, type)
                .fromToken(fromToken)
                .createOrg(createOrg)
                .signupSource(signupSource)
                .utmParams(utmParams)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Login via the auth endpoint
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginViaIdpTest() throws ApiException {
        String idp = null;
        api.loginViaIdp(idp)
                .execute();
        // TODO: test validations
    }

    /**
     * Process an Oauth2 redirect request from an access request for an app installation, storing the accessToken and refreshToken as secrets for the app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void processOauthRedirectRequestTest() throws ApiException {
        String appName = null;
        String token = null;
        String state = null;
        String code = null;
        api.processOauthRedirectRequest(appName)
                .token(token)
                .state(state)
                .code(code)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a view-as token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void returnViewTokenTest() throws ApiException {
        String orgId = null;
        String scope = null;
        String personId = null;
        String userId = null;
        String roleId = null;
        AccessTokenResponse response = api.returnViewToken(orgId, scope)
                .personId(personId)
                .userId(userId)
                .roleId(roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete the current Oauth2 bearer token (for signout)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeBearerTokenTest() throws ApiException {
        api.revokeBearerToken()
                .execute();
        // TODO: test validations
    }

}
