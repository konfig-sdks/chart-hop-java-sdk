/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.GroupCount;
import com.konfigthis.client.model.GroupGraphResults;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupApi
 */
@Disabled
public class GroupApiTest {

    private static GroupApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new GroupApi(apiClient);
    }

    /**
     * Create a group
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewGroupTest() throws ApiException {
        String orgId = null;
        String type = null;
        String scenarioId = null;
        LocalDate date = null;
        api.createNewGroup(orgId, type)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Find groups in the organization of a certain type
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInOrgOfTypeTest() throws ApiException {
        String orgId = null;
        String start = null;
        Integer depth = null;
        Integer groupApproxLimit = null;
        Integer jobLimit = null;
        String scenarioId = null;
        String jobFilter = null;
        String groupFilter = null;
        LocalDate date = null;
        String groupFields = null;
        String jobFields = null;
        String positionFields = null;
        String kind = null;
        String format = null;
        GroupGraphResults response = api.findInOrgOfType(orgId)
                .start(start)
                .depth(depth)
                .groupApproxLimit(groupApproxLimit)
                .jobLimit(jobLimit)
                .scenarioId(scenarioId)
                .jobFilter(jobFilter)
                .groupFilter(groupFilter)
                .date(date)
                .groupFields(groupFields)
                .jobFields(jobFields)
                .positionFields(positionFields)
                .kind(kind)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Find groups in the organization of a certain type
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOfTypeTest() throws ApiException {
        String orgId = null;
        String type = null;
        String scenarioId = null;
        LocalDate date = null;
        String from = null;
        Integer limit = null;
        String fields = null;
        String jobFields = null;
        String positionFields = null;
        Boolean includeAll = null;
        String search = null;
        String format = null;
        ResultsData response = api.findOfType(orgId, type)
                .scenarioId(scenarioId)
                .date(date)
                .from(from)
                .limit(limit)
                .fields(fields)
                .jobFields(jobFields)
                .positionFields(positionFields)
                .includeAll(includeAll)
                .search(search)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Find groups in the organization that have no child groups
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrphanedGroupsTest() throws ApiException {
        String orgId = null;
        String start = null;
        Integer groupLimit = null;
        Integer jobLimit = null;
        String scenarioId = null;
        String jobFilter = null;
        String groupFilter = null;
        LocalDate date = null;
        String groupFields = null;
        String jobFields = null;
        String positionFields = null;
        String kind = null;
        String format = null;
        GroupGraphResults response = api.findOrphanedGroups(orgId)
                .start(start)
                .groupLimit(groupLimit)
                .jobLimit(jobLimit)
                .scenarioId(scenarioId)
                .jobFilter(jobFilter)
                .groupFilter(groupFilter)
                .date(date)
                .groupFields(groupFields)
                .jobFields(jobFields)
                .positionFields(positionFields)
                .kind(kind)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular group by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String type = null;
        String groupId = null;
        String scenarioId = null;
        LocalDate date = null;
        String fields = null;
        String jobFields = null;
        String positionFields = null;
        String format = null;
        Map<String, Object> response = api.getById(orgId, type, groupId)
                .scenarioId(scenarioId)
                .date(date)
                .fields(fields)
                .jobFields(jobFields)
                .positionFields(positionFields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Get organized group counts
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizedGroupCountsTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String groupFilter = null;
        LocalDate date = null;
        String kind = null;
        GroupCount response = api.getOrganizedGroupCounts(orgId)
                .scenarioId(scenarioId)
                .groupFilter(groupFilter)
                .date(date)
                .kind(kind)
                .execute();
        // TODO: test validations
    }

    /**
     * Import data from CSV file
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCsvDataTest() throws ApiException {
        String orgId = null;
        String type = null;
        File _file = null;
        LocalDate date = null;
        Process response = api.importCsvData(orgId, type)
                ._file(_file)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark multiple groups as deleted
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markMultipleAsDeletedTest() throws ApiException {
        String orgId = null;
        String type = null;
        String scenarioId = null;
        Process response = api.markMultipleAsDeleted(orgId, type)
                .scenarioId(scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a group
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByGroupIdTest() throws ApiException {
        String orgId = null;
        String type = null;
        String groupId = null;
        String scenarioId = null;
        LocalDate date = null;
        api.removeByGroupId(orgId, type, groupId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a group
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupDetailsTest() throws ApiException {
        String orgId = null;
        String type = null;
        String groupId = null;
        String scenarioId = null;
        LocalDate date = null;
        api.updateGroupDetails(orgId, type, groupId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

}
