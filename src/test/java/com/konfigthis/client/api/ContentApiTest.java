/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Content;
import com.konfigthis.client.model.ContentBlock;
import com.konfigthis.client.model.ContentRender;
import com.konfigthis.client.model.CreateContent;
import com.konfigthis.client.model.HomepageContentRender;
import com.konfigthis.client.model.ResultsContent;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateContent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentApi
 */
@Disabled
public class ContentApiTest {

    private static ContentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContentApi(apiClient);
    }

    /**
     * Create a new piece of content
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPieceTest() throws ApiException {
        String title = null;
        String orgId = null;
        String parentContentId = null;
        String path = null;
        List<ContentBlock> blocks = null;
        String imagePath = null;
        String emoji = null;
        String coverImagePath = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        String status = null;
        Content response = api.createNewPiece(title, orgId)
                .parentContentId(parentContentId)
                .path(path)
                .blocks(blocks)
                .imagePath(imagePath)
                .emoji(emoji)
                .coverImagePath(coverImagePath)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular content by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String contentId = null;
        Content response = api.getById(orgId, contentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular content by path
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByPathTest() throws ApiException {
        String orgId = null;
        String path = null;
        Content response = api.getByPath(orgId, path)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all content in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaginatedTest() throws ApiException {
        String orgId = null;
        String from = null;
        Integer limit = null;
        String returnAccess = null;
        ResultsContent response = api.getPaginated(orgId)
                .from(from)
                .limit(limit)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a content
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String contentId = null;
        api.removeById(orgId, contentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular content by path, and render its contents
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renderByPathTest() throws ApiException {
        String orgId = null;
        String path = null;
        ContentRender response = api.renderByPath(orgId, path)
                .execute();
        // TODO: test validations
    }

    /**
     * Render the contents of the homepage
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renderHomepageContentsTest() throws ApiException {
        String orgId = null;
        HomepageContentRender response = api.renderHomepageContents(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the homepage content
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHomepageContentTest() throws ApiException {
        String orgId = null;
        String title = null;
        String parentContentId = null;
        String path = null;
        List<ContentBlock> blocks = null;
        String imagePath = null;
        String emoji = null;
        String coverImagePath = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        String status = null;
        api.updateHomepageContent(orgId)
                .title(title)
                .parentContentId(parentContentId)
                .path(path)
                .blocks(blocks)
                .imagePath(imagePath)
                .emoji(emoji)
                .coverImagePath(coverImagePath)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing piece of content
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePieceByIdTest() throws ApiException {
        String orgId = null;
        String contentId = null;
        String title = null;
        String parentContentId = null;
        String path = null;
        List<ContentBlock> blocks = null;
        String imagePath = null;
        String emoji = null;
        String coverImagePath = null;
        String sensitive = null;
        List<ShareAccess> shareAccess = null;
        String status = null;
        api.updatePieceById(orgId, contentId)
                .title(title)
                .parentContentId(parentContentId)
                .path(path)
                .blocks(blocks)
                .imagePath(imagePath)
                .emoji(emoji)
                .coverImagePath(coverImagePath)
                .sensitive(sensitive)
                .shareAccess(shareAccess)
                .status(status)
                .execute();
        // TODO: test validations
    }

}
