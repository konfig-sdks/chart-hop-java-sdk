/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateRole;
import com.konfigthis.client.model.ResultsRole;
import com.konfigthis.client.model.Role;
import com.konfigthis.client.model.UpdateRole;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoleApi
 */
@Disabled
public class RoleApiTest {

    private static RoleApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RoleApi(apiClient);
    }

    /**
     * Copy an existing role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void copyExistingRoleTest() throws ApiException {
        String orgId = null;
        String roleId = null;
        api.copyExistingRole(orgId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewRoleTest() throws ApiException {
        String label = null;
        String orgId = null;
        String description = null;
        String orgId = null;
        Set<String> policyIds = null;
        Role response = api.createNewRole(label, orgId)
                .description(description)
                .orgId(orgId)
                .policyIds(policyIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all or a set of roles in the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInOrgTest() throws ApiException {
        String orgId = null;
        String ids = null;
        String type = null;
        ResultsRole response = api.getAllInOrg(orgId)
                .ids(ids)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular role by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleByIdTest() throws ApiException {
        String orgId = null;
        String roleId = null;
        Role response = api.getRoleById(orgId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String roleId = null;
        api.removeById(orgId, roleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing role
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingTest() throws ApiException {
        String orgId = null;
        String roleId = null;
        String description = null;
        String label = null;
        Set<String> policyIds = null;
        api.updateExisting(orgId, roleId)
                .description(description)
                .label(label)
                .policyIds(policyIds)
                .execute();
        // TODO: test validations
    }

}
