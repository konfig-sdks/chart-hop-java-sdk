/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApprovalChain;
import com.konfigthis.client.model.ApprovalChainStage;
import com.konfigthis.client.model.ApprovalGroup;
import com.konfigthis.client.model.ApprovalRequest;
import com.konfigthis.client.model.ApprovalRequestCreateBody;
import com.konfigthis.client.model.ApprovalRequestDeleteBody;
import com.konfigthis.client.model.ApprovalRequestPatchBody;
import com.konfigthis.client.model.CreateApprovalChain;
import com.konfigthis.client.model.CreateApprovalChainStage;
import com.konfigthis.client.model.DefaultChainCreateBody;
import com.konfigthis.client.model.ReassignApproverPatchBody;
import com.konfigthis.client.model.ResultsApprovalChain;
import com.konfigthis.client.model.ResultsApprovalChainStage;
import com.konfigthis.client.model.ResultsApprovalRequest;
import com.konfigthis.client.model.ResultsApprovalRequestCompReviewResponse;
import com.konfigthis.client.model.ResultsApprovalRequestScenarioResponse;
import com.konfigthis.client.model.SendReminderBody;
import com.konfigthis.client.model.UpdateApprovalChain;
import com.konfigthis.client.model.UpdateApprovalChainStage;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApprovalApi
 */
@Disabled
public class ApprovalApiTest {

    private static ApprovalApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApprovalApi(apiClient);
    }

    /**
     * Create an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChainTest() throws ApiException {
        String name = null;
        Boolean isPreview = null;
        Set<String> approvalNotifierUserIds = null;
        String orgId = null;
        String entityId = null;
        String entityType = null;
        String fallbackApproverJobId = null;
        String fallbackApproverJobError = null;
        Boolean createDefaultStages = null;
        ApprovalChain response = api.createChain(name, isPreview, approvalNotifierUserIds, orgId)
                .entityId(entityId)
                .entityType(entityType)
                .fallbackApproverJobId(fallbackApproverJobId)
                .fallbackApproverJobError(fallbackApproverJobError)
                .createDefaultStages(createDefaultStages)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an approval chain stage
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChainStageTest() throws ApiException {
        String rejectBehavior = null;
        String status = null;
        Boolean approvalCommentRequired = null;
        Boolean rejectionCommentRequired = null;
        Integer order = null;
        List<ApprovalGroup> groups = null;
        String orgId = null;
        String approvalChainId = null;
        String inclusionExpression = null;
        String inclusionBehavior = null;
        String expandExpression = null;
        ApprovalChainStage response = api.createChainStage(rejectBehavior, status, approvalCommentRequired, rejectionCommentRequired, order, groups, orgId, approvalChainId)
                .inclusionExpression(inclusionExpression)
                .inclusionBehavior(inclusionBehavior)
                .expandExpression(expandExpression)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an approval request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRequestTest() throws ApiException {
        String entityId = null;
        String orgId = null;
        String approvalChainId = null;
        Boolean dryRun = null;
        ApprovalRequest response = api.createRequest(entityId, orgId, approvalChainId)
                .dryRun(dryRun)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an approval chain stage
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApprovalChainStageTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String approvalChainStageId = null;
        api.deleteApprovalChainStage(orgId, approvalChainId, approvalChainStageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChainByIdTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        api.deleteChainById(orgId, approvalChainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an approval request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRequestApprovalTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String approvalRequestId = null;
        String message = null;
        api.deleteRequestApproval(orgId, approvalChainId, approvalRequestId)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Build a default approval chain based on entity type
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDefaultChainStagesTest() throws ApiException {
        String entityType = null;
        String orgId = null;
        ApprovalChainStage response = api.generateDefaultChainStages(entityType, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all approval requests for an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllApprovalRequestsForApprovalChainTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        Integer limit = null;
        String entityType = null;
        String entityIds = null;
        ResultsApprovalRequest response = api.getAllApprovalRequestsForApprovalChain(orgId, approvalChainId)
                .limit(limit)
                .entityType(entityType)
                .entityIds(entityIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all approval chain stages for an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllStagesForChainTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String approvalChainStageId = null;
        ApprovalChainStage response = api.getAllStagesForChain(orgId, approvalChainId, approvalChainStageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular approval chain by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovalChainByIdTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        ApprovalChain response = api.getApprovalChainById(orgId, approvalChainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all approval chain stages for an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovalChainStagesTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        Integer limit = null;
        ResultsApprovalChainStage response = api.getApprovalChainStages(orgId, approvalChainId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return approval chains
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApprovalChainsTest() throws ApiException {
        String orgId = null;
        String entityType = null;
        String entityId = null;
        Integer limit = null;
        ResultsApprovalChain response = api.getApprovalChains(orgId)
                .entityType(entityType)
                .entityId(entityId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all approval request comp review responses for an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompReviewResponsesForChainTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        Integer limit = null;
        List<String> entityIds = null;
        ResultsApprovalRequestCompReviewResponse response = api.getCompReviewResponsesForChain(orgId, approvalChainId)
                .limit(limit)
                .entityIds(entityIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all approval request scenario responses for an approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScenarioResponsesTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        Integer limit = null;
        String entityIds = null;
        ResultsApprovalRequestScenarioResponse response = api.getScenarioResponses(orgId, approvalChainId)
                .limit(limit)
                .entityIds(entityIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Reassigning an approver at a stage
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reassignApproverAtStageTest() throws ApiException {
        Integer stageOrder = null;
        String initialJobId = null;
        String reassignJobId = null;
        String message = null;
        String orgId = null;
        String approvalChainId = null;
        String approvalRequestId = null;
        api.reassignApproverAtStage(stageOrder, initialJobId, reassignJobId, message, orgId, approvalChainId, approvalRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return an approval request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestApprovalRequestTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String approvalRequestId = null;
        ApprovalRequest response = api.requestApprovalRequest(orgId, approvalChainId, approvalRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a reminder for a stage reviewer in an existing approval request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendStageReviewerReminderTest() throws ApiException {
        String jobId = null;
        String orgId = null;
        String approvalChainId = null;
        String approvalRequestId = null;
        api.sendStageReviewerReminder(jobId, orgId, approvalChainId, approvalRequestId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a approval chain
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChainTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String name = null;
        Boolean isPreview = null;
        String fallbackApproverJobId = null;
        String fallbackApproverJobError = null;
        Set<String> approvalNotifierUserIds = null;
        api.updateChain(orgId, approvalChainId)
                .name(name)
                .isPreview(isPreview)
                .fallbackApproverJobId(fallbackApproverJobId)
                .fallbackApproverJobError(fallbackApproverJobError)
                .approvalNotifierUserIds(approvalNotifierUserIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing approval request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingRequestTest() throws ApiException {
        String status = null;
        String orgId = null;
        String approvalChainId = null;
        String approvalRequestId = null;
        String message = null;
        String previewJobId = null;
        api.updateExistingRequest(status, orgId, approvalChainId, approvalRequestId)
                .message(message)
                .previewJobId(previewJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing approval chain stage
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStageByIdTest() throws ApiException {
        String orgId = null;
        String approvalChainId = null;
        String approvalChainStageId = null;
        String inclusionExpression = null;
        String inclusionBehavior = null;
        String expandExpression = null;
        String rejectBehavior = null;
        String status = null;
        Boolean approvalCommentRequired = null;
        Boolean rejectionCommentRequired = null;
        Integer order = null;
        List<ApprovalGroup> groups = null;
        api.updateStageById(orgId, approvalChainId, approvalChainStageId)
                .inclusionExpression(inclusionExpression)
                .inclusionBehavior(inclusionBehavior)
                .expandExpression(expandExpression)
                .rejectBehavior(rejectBehavior)
                .status(status)
                .approvalCommentRequired(approvalCommentRequired)
                .rejectionCommentRequired(rejectionCommentRequired)
                .order(order)
                .groups(groups)
                .execute();
        // TODO: test validations
    }

}
