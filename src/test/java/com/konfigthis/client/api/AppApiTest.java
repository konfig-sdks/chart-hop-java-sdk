/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.App;
import com.konfigthis.client.model.AppConfigField;
import com.konfigthis.client.model.Bundle;
import com.konfigthis.client.model.BundleInstallValidate;
import com.konfigthis.client.model.CreateApp;
import com.konfigthis.client.model.CreateUser;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.NotifyRequest;
import com.konfigthis.client.model.OrgAccess;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsApp;
import com.konfigthis.client.model.ResultsUser;
import com.konfigthis.client.model.ScopeRequest;
import java.net.URI;
import com.konfigthis.client.model.UpdateApp;
import com.konfigthis.client.model.UpdateUser;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserEmailSetting;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppApi
 */
@Disabled
public class AppApiTest {

    private static AppApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AppApi(apiClient);
    }

    /**
     * Create a new app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAppTest() throws ApiException {
        String summary = null;
        String title = null;
        String orgId = null;
        String name = null;
        Integer cronOrder = null;
        String minAccess = null;
        String type = null;
        List<String> tags = null;
        String description = null;
        List<URI> redirectUris = null;
        List<String> allowedIps = null;
        List<AppConfigField> configFields = null;
        String setupInstructions = null;
        String cronSchedule = null;
        String cronDayOfWeek = null;
        String imagePath = null;
        String wordmarkImagePath = null;
        String poweredByImagePath = null;
        String status = null;
        String roleId = null;
        URI eventNotifyUrl = null;
        Map<String, String> payload = null;
        Set<String> events = null;
        Bundle bundle = null;
        List<String> scopes = null;
        App response = api.createNewApp(summary, title, orgId, name, cronOrder, minAccess, type)
                .tags(tags)
                .description(description)
                .redirectUris(redirectUris)
                .allowedIps(allowedIps)
                .configFields(configFields)
                .setupInstructions(setupInstructions)
                .cronSchedule(cronSchedule)
                .cronDayOfWeek(cronDayOfWeek)
                .imagePath(imagePath)
                .wordmarkImagePath(wordmarkImagePath)
                .poweredByImagePath(poweredByImagePath)
                .status(status)
                .roleId(roleId)
                .eventNotifyUrl(eventNotifyUrl)
                .payload(payload)
                .events(events)
                .bundle(bundle)
                .scopes(scopes)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an installed app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInstalledAppUsersTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        User response = api.findInstalledAppUsers(orgId, appUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Find installed app users
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInstalledAppUsers_0Test() throws ApiException {
        String orgId = null;
        String type = null;
        String tags = null;
        String statuses = null;
        Boolean includeFormer = null;
        String from = null;
        Integer limit = null;
        ResultsUser response = api.findInstalledAppUsers_0(orgId)
                .type(type)
                .tags(tags)
                .statuses(statuses)
                .includeFormer(includeFormer)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate or regenerate a long-lived access token for the app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateOrRegenerateAccessTokenTest() throws ApiException {
        String scope = null;
        String orgId = null;
        String appUserId = null;
        AccessTokenResponse response = api.generateOrRegenerateAccessToken(scope, orgId, appUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all active apps available for a particular org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActiveAppsByOrgTest() throws ApiException {
        String orgId = null;
        String q = null;
        String type = null;
        String tags = null;
        String from = null;
        Integer limit = null;
        ResultsApp response = api.getActiveAppsByOrg(orgId)
                .q(q)
                .type(type)
                .tags(tags)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular app by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String appId = null;
        App response = api.getById(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular app by name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByNameTest() throws ApiException {
        String appName = null;
        App response = api.getByName(appName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an installed app by name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInstalledAppByNameTest() throws ApiException {
        String orgId = null;
        String appName = null;
        Boolean includeInactive = null;
        User response = api.getInstalledAppByName(orgId, appName)
                .includeInactive(includeInactive)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an Oauth2 authorization code for this app, which can be exchanged for an access token
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOauth2AuthorizationCodeTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        String scope = null;
        AccessTokenResponse response = api.getOauth2AuthorizationCode(orgId, appUserId)
                .scope(scope)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the current token for this app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenForAppTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        AccessTokenResponse response = api.getTokenForApp(orgId, appUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve the current token for this app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTokenForApp_0Test() throws ApiException {
        String orgId = null;
        String appUserId = null;
        String installDataName = null;
        api.getTokenForApp_0(orgId, appUserId, installDataName)
                .execute();
        // TODO: test validations
    }

    /**
     * Install an app for a particular org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void installAppForOrgTest() throws ApiException {
        Set<OrgAccess> orgs = null;
        String orgId = null;
        String appId = null;
        Name name = null;
        String email = null;
        String imagePath = null;
        String status = null;
        Object options = null;
        Object internalOptions = null;
        Object secrets = null;
        List<UserEmailSetting> emailSettings = null;
        api.installAppForOrg(orgs, orgId)
                .appId(appId)
                .name(name)
                .email(email)
                .imagePath(imagePath)
                .status(status)
                .options(options)
                .internalOptions(internalOptions)
                .secrets(secrets)
                .emailSettings(emailSettings)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all publicly visible global apps
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublicGlobalAppsTest() throws ApiException {
        String tag = null;
        String from = null;
        Integer limit = null;
        ResultsApp response = api.listPublicGlobalApps()
                .tag(tag)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String appId = null;
        api.removeById(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Run an installed app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runInstalledAppTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        Process response = api.runInstalledApp(orgId, appUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send an email notification to the configured notify users, on behalf of an app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailNotificationTest() throws ApiException {
        String emailSubject = null;
        String emailContentHtml = null;
        String emailMarkdown = null;
        String chatMarkdown = null;
        String notifyType = null;
        api.sendEmailNotification()
                .emailSubject(emailSubject)
                .emailContentHtml(emailContentHtml)
                .emailMarkdown(emailMarkdown)
                .chatMarkdown(chatMarkdown)
                .notifyType(notifyType)
                .execute();
        // TODO: test validations
    }

    /**
     * Uninstall an app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uninstallAppByUserIdTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        String keepEntityIds = null;
        api.uninstallAppByUserId(orgId, appUserId)
                .keepEntityIds(keepEntityIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingAppTest() throws ApiException {
        String appId = null;
        List<String> tags = null;
        String summary = null;
        String title = null;
        String description = null;
        String name = null;
        List<URI> redirectUris = null;
        List<String> allowedIps = null;
        List<AppConfigField> configFields = null;
        String setupInstructions = null;
        Integer cronOrder = null;
        String cronSchedule = null;
        String cronDayOfWeek = null;
        String imagePath = null;
        String wordmarkImagePath = null;
        String poweredByImagePath = null;
        String status = null;
        String minAccess = null;
        String roleId = null;
        URI eventNotifyUrl = null;
        Map<String, String> payload = null;
        Set<String> events = null;
        String type = null;
        Bundle bundle = null;
        List<String> scopes = null;
        api.updateExistingApp(appId)
                .tags(tags)
                .summary(summary)
                .title(title)
                .description(description)
                .name(name)
                .redirectUris(redirectUris)
                .allowedIps(allowedIps)
                .configFields(configFields)
                .setupInstructions(setupInstructions)
                .cronOrder(cronOrder)
                .cronSchedule(cronSchedule)
                .cronDayOfWeek(cronDayOfWeek)
                .imagePath(imagePath)
                .wordmarkImagePath(wordmarkImagePath)
                .poweredByImagePath(poweredByImagePath)
                .status(status)
                .minAccess(minAccess)
                .roleId(roleId)
                .eventNotifyUrl(eventNotifyUrl)
                .payload(payload)
                .events(events)
                .type(type)
                .bundle(bundle)
                .scopes(scopes)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the settings of an installed app
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInstalledAppTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        String appId = null;
        Name name = null;
        String email = null;
        Set<OrgAccess> orgs = null;
        String imagePath = null;
        String status = null;
        Object options = null;
        Object internalOptions = null;
        Object secrets = null;
        List<UserEmailSetting> emailSettings = null;
        Boolean includeInactive = null;
        api.updateInstalledApp(orgId, appUserId)
                .appId(appId)
                .name(name)
                .email(email)
                .orgs(orgs)
                .imagePath(imagePath)
                .status(status)
                .options(options)
                .internalOptions(internalOptions)
                .secrets(secrets)
                .emailSettings(emailSettings)
                .includeInactive(includeInactive)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate the installation of an app for a particular org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateAppInstallationTest() throws ApiException {
        Set<OrgAccess> orgs = null;
        String orgId = null;
        String appId = null;
        Name name = null;
        String email = null;
        String imagePath = null;
        String status = null;
        Object options = null;
        Object internalOptions = null;
        Object secrets = null;
        List<UserEmailSetting> emailSettings = null;
        BundleInstallValidate response = api.validateAppInstallation(orgs, orgId)
                .appId(appId)
                .name(name)
                .email(email)
                .imagePath(imagePath)
                .status(status)
                .options(options)
                .internalOptions(internalOptions)
                .secrets(secrets)
                .emailSettings(emailSettings)
                .execute();
        // TODO: test validations
    }

}
