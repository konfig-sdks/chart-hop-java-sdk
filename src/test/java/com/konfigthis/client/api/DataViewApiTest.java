/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateDataView;
import com.konfigthis.client.model.DataView;
import com.konfigthis.client.model.ResultsDataView;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateDataView;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataViewApi
 */
@Disabled
public class DataViewApiTest {

    private static DataViewApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DataViewApi(apiClient);
    }

    /**
     * Create a data view
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDataViewTest() throws ApiException {
        String name = null;
        String orgId = null;
        String columns = null;
        String type = null;
        String entityType = null;
        Map<String, Double> columnWidths = null;
        String date = null;
        String startDate = null;
        String endDate = null;
        String filter = null;
        String sort = null;
        String groupBy = null;
        List<ShareAccess> shareAccess = null;
        String sensitive = null;
        DataView response = api.createNewDataView(name, orgId)
                .columns(columns)
                .type(type)
                .entityType(entityType)
                .columnWidths(columnWidths)
                .date(date)
                .startDate(startDate)
                .endDate(endDate)
                .filter(filter)
                .sort(sort)
                .groupBy(groupBy)
                .shareAccess(shareAccess)
                .sensitive(sensitive)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a data  view
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataViewTest() throws ApiException {
        String orgId = null;
        String dataViewId = null;
        api.deleteDataView(orgId, dataViewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all data views in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPaginatedTest() throws ApiException {
        String orgId = null;
        String from = null;
        String type = null;
        Integer limit = null;
        String ids = null;
        String returnAccess = null;
        ResultsDataView response = api.getAllPaginated(orgId)
                .from(from)
                .type(type)
                .limit(limit)
                .ids(ids)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular data view by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String dataViewId = null;
        DataView response = api.getById(orgId, dataViewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing data view
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingViewTest() throws ApiException {
        String orgId = null;
        String dataViewId = null;
        String name = null;
        String columns = null;
        String type = null;
        String entityType = null;
        Map<String, Double> columnWidths = null;
        String date = null;
        String startDate = null;
        String endDate = null;
        String filter = null;
        String sort = null;
        String groupBy = null;
        List<ShareAccess> shareAccess = null;
        String sensitive = null;
        DataView response = api.updateExistingView(orgId, dataViewId)
                .name(name)
                .columns(columns)
                .type(type)
                .entityType(entityType)
                .columnWidths(columnWidths)
                .date(date)
                .startDate(startDate)
                .endDate(endDate)
                .filter(filter)
                .sort(sort)
                .groupBy(groupBy)
                .shareAccess(shareAccess)
                .sensitive(sensitive)
                .execute();
        // TODO: test validations
    }

}
