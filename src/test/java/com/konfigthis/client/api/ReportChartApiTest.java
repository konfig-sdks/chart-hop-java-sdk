/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateReportChart;
import com.konfigthis.client.model.ReportChart;
import com.konfigthis.client.model.ReportMetricsReturnType;
import com.konfigthis.client.model.ReportQuery;
import com.konfigthis.client.model.ResultsReportChart;
import com.konfigthis.client.model.UpdateReportChart;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportChartApi
 */
@Disabled
public class ReportChartApiTest {

    private static ReportChartApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReportChartApi(apiClient);
    }

    /**
     * Clone a chart in a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cloneChartTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String chartId = null;
        String chartLabel = null;
        ReportChart response = api.cloneChart(orgId, reportId, chartId)
                .chartLabel(chartLabel)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new chart in a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewChartTest() throws ApiException {
        String label = null;
        String type = null;
        ReportQuery query = null;
        Integer sort = null;
        String orgId = null;
        String reportId = null;
        String filter = null;
        Boolean filterOverride = null;
        Boolean isAdvancedQueryMode = null;
        ReportChart response = api.createNewChart(label, type, query, sort, orgId, reportId)
                .filter(filter)
                .filterOverride(filterOverride)
                .isAdvancedQueryMode(isAdvancedQueryMode)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a particular chart&#39;s data
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportDataTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String chartId = null;
        String startDate = null;
        String endDate = null;
        String interval = null;
        String scenarioId = null;
        Boolean projectHires = null;
        String format = null;
        api.exportData(orgId, reportId, chartId)
                .startDate(startDate)
                .endDate(endDate)
                .interval(interval)
                .scenarioId(scenarioId)
                .projectHires(projectHires)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all of the charts for a particular report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        ResultsReportChart response = api.getAll(orgId, reportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular report chart by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByChartIdTest() throws ApiException {
        String orgId = null;
        String chartId = null;
        ReportChart response = api.getByChartId(orgId, chartId)
                .execute();
        // TODO: test validations
    }

    /**
     * Query for the underlying data in a chart
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryUnderlyingDataInChartTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        String chartId = null;
        String providedQuery = null;
        String startDate = null;
        String endDate = null;
        String interval = null;
        String scenarioId = null;
        Boolean projectHires = null;
        String changeGroupingType = null;
        String changeGroupingId = null;
        ReportMetricsReturnType response = api.queryUnderlyingDataInChart(orgId, reportId, chartId)
                .providedQuery(providedQuery)
                .startDate(startDate)
                .endDate(endDate)
                .interval(interval)
                .scenarioId(scenarioId)
                .projectHires(projectHires)
                .changeGroupingType(changeGroupingType)
                .changeGroupingId(changeGroupingId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a chart from a report
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String chartId = null;
        api.removeById(orgId, chartId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing report chart
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingChartDataTest() throws ApiException {
        String orgId = null;
        String chartId = null;
        String label = null;
        String type = null;
        String filter = null;
        Boolean filterOverride = null;
        ReportQuery query = null;
        Integer sort = null;
        Boolean isAdvancedQueryMode = null;
        api.updateExistingChartData(orgId, chartId)
                .label(label)
                .type(type)
                .filter(filter)
                .filterOverride(filterOverride)
                .query(query)
                .sort(sort)
                .isAdvancedQueryMode(isAdvancedQueryMode)
                .execute();
        // TODO: test validations
    }

}
