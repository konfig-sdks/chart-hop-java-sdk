/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import java.time.LocalDate;
import com.konfigthis.client.model.PositionImportCsvDataWithFilePathRequest;
import com.konfigthis.client.model.Process;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PositionApi
 */
@Disabled
public class PositionApiTest {

    private static PositionApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PositionApi(apiClient);
    }

    /**
     * Assign a job to a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignJobToPositionTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.assignJobToPosition(orgId, positionId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPositionTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.createNewPosition(orgId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a position and purge it from all history
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAndPurgeTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        Object response = api.deleteAndPurge(orgId, positionId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePositionTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.deletePosition(orgId, positionId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular position by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String scenarioId = null;
        LocalDate date = null;
        String fields = null;
        Boolean includeDeleted = null;
        String format = null;
        Map<String, Object> response = api.getById(orgId, positionId)
                .scenarioId(scenarioId)
                .date(date)
                .fields(fields)
                .includeDeleted(includeDeleted)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Return the history of a particular position by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHistoryByIdTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String scenarioId = null;
        LocalDate date = null;
        String fields = null;
        String format = null;
        Map<String, Object> response = api.getHistoryById(orgId, positionId)
                .scenarioId(scenarioId)
                .date(date)
                .fields(fields)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Import positions as a CSV
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCsvDataWithFilePathTest() throws ApiException {
        String orgId = null;
        String importFromProcessId = null;
        String parentProcessId = null;
        LocalDate date = null;
        File _file = null;
        Process response = api.importCsvDataWithFilePath(orgId)
                .importFromProcessId(importFromProcessId)
                .parentProcessId(parentProcessId)
                .date(date)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a list of positions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String groupId = null;
        LocalDate date = null;
        String from = null;
        Integer limit = null;
        String fields = null;
        Boolean includeDeleted = null;
        String format = null;
        Map<String, Object> response = api.list(orgId)
                .scenarioId(scenarioId)
                .groupId(groupId)
                .date(date)
                .from(from)
                .limit(limit)
                .fields(fields)
                .includeDeleted(includeDeleted)
                .format(format)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a job from a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeJobFromPositionTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.removeJobFromPosition(orgId, positionId, jobId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Update assign or remove date of a job for a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobDatesOnPositionTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String jobId = null;
        String scenarioId = null;
        LocalDate removeDate = null;
        LocalDate assigndate = null;
        Object response = api.updateJobDatesOnPosition(orgId, positionId, jobId)
                .scenarioId(scenarioId)
                .removeDate(removeDate)
                .assigndate(assigndate)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a position
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePositionDetailsTest() throws ApiException {
        String orgId = null;
        String positionId = null;
        String scenarioId = null;
        LocalDate date = null;
        Object response = api.updatePositionDetails(orgId, positionId)
                .scenarioId(scenarioId)
                .date(date)
                .execute();
        // TODO: test validations
    }

}
