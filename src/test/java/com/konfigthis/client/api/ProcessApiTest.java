/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AppProcessStatus;
import com.konfigthis.client.model.CreateProcess;
import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.LogData;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ProcessCreatePendingProcessRequest;
import com.konfigthis.client.model.ProcessEventResponse;
import com.konfigthis.client.model.ResultsProcess;
import com.konfigthis.client.model.UpdateProcess;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProcessApi
 */
@Disabled
public class ProcessApiTest {

    private static ProcessApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProcessApi(apiClient);
    }

    /**
     * Check the status of a particular process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkProcessStatusTest() throws ApiException {
        String orgId = null;
        String processId = null;
        Boolean showState = null;
        Process response = api.checkProcessStatus(orgId, processId)
                .showState(showState)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new process in the pending state
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPendingProcessTest() throws ApiException {
        String orgId = null;
        String label = null;
        String type = null;
        String status = null;
        String runUserId = null;
        Object options = null;
        String orgId = null;
        String filePath = null;
        String parentProcessId = null;
        String message = null;
        Double progress = null;
        String internalError = null;
        Map<String, Object> results = null;
        List<LogData> logDataList = null;
        Object state = null;
        String appId = null;
        String uuid = null;
        Process response = api.createNewPendingProcess(orgId, label, type, status, runUserId, options, orgId)
                .filePath(filePath)
                .parentProcessId(parentProcessId)
                .message(message)
                .progress(progress)
                .internalError(internalError)
                .results(results)
                .logDataList(logDataList)
                .state(state)
                .appId(appId)
                .uuid(uuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new process in the pending state
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPendingProcessTest() throws ApiException {
        String orgId = null;
        String type = null;
        Integer maxRows = null;
        Integer minColumns = null;
        Boolean isSync = null;
        File _file = null;
        Object state = null;
        api.createPendingProcess(orgId)
                .type(type)
                .maxRows(maxRows)
                .minColumns(minColumns)
                .isSync(isSync)
                ._file(_file)
                .state(state)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new process with a specified createId in the pending state
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPendingProcessWithUserIdTest() throws ApiException {
        String orgId = null;
        String label = null;
        String type = null;
        String status = null;
        String runUserId = null;
        Object options = null;
        String orgId = null;
        String createIdOverride = null;
        String filePath = null;
        String parentProcessId = null;
        String message = null;
        Double progress = null;
        String internalError = null;
        Map<String, Object> results = null;
        List<LogData> logDataList = null;
        Object state = null;
        String appId = null;
        String uuid = null;
        Process response = api.createPendingProcessWithUserId(orgId, label, type, status, runUserId, options, orgId, createIdOverride)
                .filePath(filePath)
                .parentProcessId(parentProcessId)
                .message(message)
                .progress(progress)
                .internalError(internalError)
                .results(results)
                .logDataList(logDataList)
                .state(state)
                .appId(appId)
                .uuid(uuid)
                .execute();
        // TODO: test validations
    }

    /**
     * Decrement the step of an asynchronous process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void decrementStepTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.decrementStep(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download the file associated with a particular process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadFileByIdTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.downloadFileById(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Download the newline-delimited JSON log associated with a particular process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadLogTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.downloadLog(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get events associated to a particular process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsByProcessIdTest() throws ApiException {
        String orgId = null;
        String processId = null;
        ProcessEventResponse response = api.getEventsByProcessId(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get last success sync and last sync for given appUserId
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastSyncForAppUserTest() throws ApiException {
        String orgId = null;
        String appUserId = null;
        AppProcessStatus response = api.getLastSyncForAppUser(orgId, appUserId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a number of previously run processes
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPreviouslyRunProcessesTest() throws ApiException {
        String orgId = null;
        Boolean isAppProcess = null;
        String appId = null;
        String parentProcessId = null;
        String type = null;
        Long completedAtStart = null;
        Long completedAtEnd = null;
        String statuses = null;
        Boolean isParentProcess = null;
        String processTypes = null;
        String searchValue = null;
        String from = null;
        Integer limit = null;
        String syncDirections = null;
        String syncCauses = null;
        ResultsProcess response = api.getPreviouslyRunProcesses(orgId)
                .isAppProcess(isAppProcess)
                .appId(appId)
                .parentProcessId(parentProcessId)
                .type(type)
                .completedAtStart(completedAtStart)
                .completedAtEnd(completedAtEnd)
                .statuses(statuses)
                .isParentProcess(isParentProcess)
                .processTypes(processTypes)
                .searchValue(searchValue)
                .from(from)
                .limit(limit)
                .syncDirections(syncDirections)
                .syncCauses(syncCauses)
                .execute();
        // TODO: test validations
    }

    /**
     * Increment the step of an asynchronous process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incrementProcessStepTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.incrementProcessStep(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Resume an asynchronous process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeProcessWithUserIdTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.resumeProcessWithUserId(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Resume an asynchronous process
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeWithFileTest() throws ApiException {
        String orgId = null;
        String processId = null;
        File _file = null;
        api.resumeWithFile(orgId, processId)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

    /**
     * Update process state
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProcessStateTest() throws ApiException {
        String orgId = null;
        String processId = null;
        api.updateProcessState(orgId, processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the status of a process, marking its progress or setting status to DONE or ERROR
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusOfProcessTest() throws ApiException {
        String orgId = null;
        String processId = null;
        String status = null;
        String filePath = null;
        String message = null;
        Double progress = null;
        String internalError = null;
        Object options = null;
        Map<String, Object> results = null;
        List<LogData> logDataList = null;
        Object state = null;
        String appId = null;
        api.updateStatusOfProcess(orgId, processId)
                .status(status)
                .filePath(filePath)
                .message(message)
                .progress(progress)
                .internalError(internalError)
                .options(options)
                .results(results)
                .logDataList(logDataList)
                .state(state)
                .appId(appId)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload a file to be attached to a process, and mark the process as complete
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileAndMarkCompleteTest() throws ApiException {
        String orgId = null;
        String processId = null;
        File _file = null;
        api.uploadFileAndMarkComplete(orgId, processId)
                ._file(_file)
                .execute();
        // TODO: test validations
    }

}
