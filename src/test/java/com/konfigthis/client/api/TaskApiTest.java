/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsTask;
import com.konfigthis.client.model.TaskRemindRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaskApi
 */
@Disabled
public class TaskApiTest {

    private static TaskApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TaskApi(apiClient);
    }

    /**
     * Bulk delete tasks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBulkTasksTest() throws ApiException {
        String orgId = null;
        Process response = api.deleteBulkTasks(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all existing tasks
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTasksTest() throws ApiException {
        String orgId = null;
        String userId = null;
        String assessmentId = null;
        String status = null;
        String type = null;
        String entityId = null;
        String targetId = null;
        Integer limit = null;
        ResultsTask response = api.getAllTasks(orgId)
                .userId(userId)
                .assessmentId(assessmentId)
                .status(status)
                .type(type)
                .entityId(entityId)
                .targetId(targetId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Return the tasks for a given assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssessmentTasksSummaryTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        api.getAssessmentTasksSummary(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return the tasks for the current user
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCurrentUserTasksTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        String status = null;
        String type = null;
        String entityId = null;
        String targetId = null;
        Integer limit = null;
        ResultsTask response = api.getCurrentUserTasks(orgId)
                .assessmentId(assessmentId)
                .status(status)
                .type(type)
                .entityId(entityId)
                .targetId(targetId)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Skip task
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsSkippedTest() throws ApiException {
        String orgId = null;
        String taskId = null;
        api.markAsSkipped(orgId, taskId)
                .execute();
        // TODO: test validations
    }

    /**
     * Query tasks for assessments in the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAssessmentTasksTest() throws ApiException {
        String orgId = null;
        String userId = null;
        String assessmentId = null;
        String status = null;
        String type = null;
        String entityId = null;
        String targetId = null;
        Integer limit = null;
        String fields = null;
        String format = null;
        String from = null;
        String returnAccess = null;
        Boolean returnFormCompletionLinks = null;
        ResultsData response = api.queryAssessmentTasks(orgId)
                .userId(userId)
                .assessmentId(assessmentId)
                .status(status)
                .type(type)
                .entityId(entityId)
                .targetId(targetId)
                .limit(limit)
                .fields(fields)
                .format(format)
                .from(from)
                .returnAccess(returnAccess)
                .returnFormCompletionLinks(returnFormCompletionLinks)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete task
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String taskId = null;
        api.removeById(orgId, taskId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete task
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFormFromAssessmentTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        String formId = null;
        api.removeFormFromAssessment(orgId, assessmentId, formId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a reminder notification for a particular task
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReminderNotificationTest() throws ApiException {
        List<String> taskIds = null;
        String orgId = null;
        String message = null;
        api.sendReminderNotification(taskIds, orgId)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark task done
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusTest() throws ApiException {
        String orgId = null;
        String taskId = null;
        api.updateStatus(orgId, taskId)
                .execute();
        // TODO: test validations
    }

}
