/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Assessment;
import com.konfigthis.client.model.BulkChangeAssessmentTypesBody;
import com.konfigthis.client.model.CreateAssessment;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsAssessment;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateAssessment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssessmentApi
 */
@Disabled
public class AssessmentApiTest {

    private static AssessmentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AssessmentApi(apiClient);
    }

    /**
     * Delete a set of assessments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkDeleteTest() throws ApiException {
        String orgId = null;
        Process response = api.bulkDelete(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Duplicate a set of assessments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkDuplicateAssessmentsTest() throws ApiException {
        String orgId = null;
        Process response = api.bulkDuplicateAssessments(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Complete a assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeAssessmentTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        Assessment response = api.completeAssessment(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAssessmentTest() throws ApiException {
        String label = null;
        String type = null;
        String orgId = null;
        String slug = null;
        Object fields = null;
        List<ShareAccess> shareAccess = null;
        String sensitive = null;
        String color = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String status = null;
        String doneAt = null;
        Integer taskCount = null;
        Integer taskDoneCount = null;
        Integer peopleIncludedCount = null;
        String query = null;
        Assessment response = api.createNewAssessment(label, type, orgId)
                .slug(slug)
                .fields(fields)
                .shareAccess(shareAccess)
                .sensitive(sensitive)
                .color(color)
                .startDate(startDate)
                .endDate(endDate)
                .status(status)
                .doneAt(doneAt)
                .taskCount(taskCount)
                .taskDoneCount(taskDoneCount)
                .peopleIncludedCount(peopleIncludedCount)
                .query(query)
                .execute();
        // TODO: test validations
    }

    /**
     * Expire all pending tasks for a form of an assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expireFormTasksTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        String formId = null;
        Process response = api.expireFormTasks(orgId, assessmentId, formId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all assessments in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPaginatedTest() throws ApiException {
        String orgId = null;
        String type = null;
        String from = null;
        Integer limit = null;
        String ids = null;
        String returnAccess = null;
        ResultsAssessment response = api.getAllPaginated(orgId)
                .type(type)
                .from(from)
                .limit(limit)
                .ids(ids)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular assessment by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        Assessment response = api.getById(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Reactivate a assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateAssessmentTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        Assessment response = api.reactivateAssessment(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        api.removeById(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the types of a set of assessments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssessmentTypesTest() throws ApiException {
        List<String> ids = null;
        String type = null;
        String orgId = null;
        Process response = api.updateAssessmentTypes(ids, type, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing assessment
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingAssessmentTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        String label = null;
        String slug = null;
        String type = null;
        Object fields = null;
        List<ShareAccess> shareAccess = null;
        String sensitive = null;
        String color = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String status = null;
        String doneAt = null;
        Integer taskCount = null;
        Integer taskDoneCount = null;
        Integer peopleIncludedCount = null;
        String query = null;
        Boolean silent = null;
        api.updateExistingAssessment(orgId, assessmentId)
                .label(label)
                .slug(slug)
                .type(type)
                .fields(fields)
                .shareAccess(shareAccess)
                .sensitive(sensitive)
                .color(color)
                .startDate(startDate)
                .endDate(endDate)
                .status(status)
                .doneAt(doneAt)
                .taskCount(taskCount)
                .taskDoneCount(taskDoneCount)
                .peopleIncludedCount(peopleIncludedCount)
                .query(query)
                .silent(silent)
                .execute();
        // TODO: test validations
    }

}
