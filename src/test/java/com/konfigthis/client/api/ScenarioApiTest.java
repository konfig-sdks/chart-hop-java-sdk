/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdjustScenarioDateRequest;
import com.konfigthis.client.model.CombineScenarioRequest;
import com.konfigthis.client.model.CreateScenario;
import java.time.LocalDate;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsScenario;
import com.konfigthis.client.model.Scenario;
import com.konfigthis.client.model.ScenarioMetadata;
import com.konfigthis.client.model.ScenarioSharedViewConfig;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateScenario;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ScenarioApi
 */
@Disabled
public class ScenarioApiTest {

    private static ScenarioApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ScenarioApi(apiClient);
    }

    /**
     * Adjust the dates of the changes in a scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adjustDatesTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        LocalDate date = null;
        Integer days = null;
        Process response = api.adjustDates(orgId, scenarioId)
                .date(date)
                .days(days)
                .execute();
        // TODO: test validations
    }

    /**
     * Archive a set of scenarios
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkArchiveScenariosTest() throws ApiException {
        String orgId = null;
        Process response = api.bulkArchiveScenarios(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Combine multiple scenarios into another scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void combineScenariosTest() throws ApiException {
        Set<String> scenarioIds = null;
        String orgId = null;
        String scenarioId = null;
        Boolean copyOnly = null;
        Boolean useScenarioDateForChanges = null;
        Process response = api.combineScenarios(scenarioIds, orgId, scenarioId)
                .copyOnly(copyOnly)
                .useScenarioDateForChanges(useScenarioDateForChanges)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTest() throws ApiException {
        String name = null;
        String orgId = null;
        String description = null;
        String startDate = null;
        String status = null;
        List<ShareAccess> shareAccess = null;
        String type = null;
        String startDateFixed = null;
        String query = null;
        Set<String> validJobIdSet = null;
        String entityId = null;
        String entityType = null;
        Set<ScenarioSharedViewConfig> sharedViewConfig = null;
        Money budget = null;
        String costCalc = null;
        Boolean silent = null;
        Boolean skipChangeCreation = null;
        Scenario response = api.createNew(name, orgId)
                .description(description)
                .startDate(startDate)
                .status(status)
                .shareAccess(shareAccess)
                .type(type)
                .startDateFixed(startDateFixed)
                .query(query)
                .validJobIdSet(validJobIdSet)
                .entityId(entityId)
                .entityType(entityType)
                .sharedViewConfig(sharedViewConfig)
                .budget(budget)
                .costCalc(costCalc)
                .silent(silent)
                .skipChangeCreation(skipChangeCreation)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a set of scenarios
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBulkScenariosTest() throws ApiException {
        String orgId = null;
        Process response = api.deleteBulkScenarios(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular scenario by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        Scenario response = api.getById(orgId, scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all scenarios in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaginatedScenariosTest() throws ApiException {
        String orgId = null;
        String from = null;
        String status = null;
        Integer limit = null;
        String returnAccess = null;
        ResultsScenario response = api.listPaginatedScenarios(orgId)
                .from(from)
                .status(status)
                .limit(limit)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Manually recalculate a scenario&#39;s metadata
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void manuallyRecalculateMetadataTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        ScenarioMetadata response = api.manuallyRecalculateMetadata(orgId, scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Merge a scenario into the primary timeline
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeIntoPrimaryTimelineTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        Boolean skipErrors = null;
        Process response = api.mergeIntoPrimaryTimeline(orgId, scenarioId)
                .skipErrors(skipErrors)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        api.removeById(orgId, scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unarchive a set of scenarios
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveSetOfScenariosTest() throws ApiException {
        String orgId = null;
        Process response = api.unarchiveSetOfScenarios(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScenarioChangeTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        String description = null;
        String name = null;
        String startDate = null;
        String status = null;
        List<ShareAccess> shareAccess = null;
        String startDateFixed = null;
        Set<String> validJobIdSet = null;
        String entityId = null;
        String entityType = null;
        Set<ScenarioSharedViewConfig> sharedViewConfig = null;
        Money budget = null;
        String costCalc = null;
        Boolean silent = null;
        api.updateScenarioChange(orgId, scenarioId)
                .description(description)
                .name(name)
                .startDate(startDate)
                .status(status)
                .shareAccess(shareAccess)
                .startDateFixed(startDateFixed)
                .validJobIdSet(validJobIdSet)
                .entityId(entityId)
                .entityType(entityType)
                .sharedViewConfig(sharedViewConfig)
                .budget(budget)
                .costCalc(costCalc)
                .silent(silent)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a scenario view config
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSharedViewConfigTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        List<String> customColumnNames = null;
        Map<String, Integer> columnWidths = null;
        String type = null;
        String updateId = null;
        Long updateAt = null;
        api.updateSharedViewConfig(orgId, scenarioId)
                .customColumnNames(customColumnNames)
                .columnWidths(columnWidths)
                .type(type)
                .updateId(updateId)
                .updateAt(updateAt)
                .execute();
        // TODO: test validations
    }

}
