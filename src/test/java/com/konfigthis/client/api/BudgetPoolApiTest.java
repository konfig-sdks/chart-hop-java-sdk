/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.BasisFieldMatrix;
import com.konfigthis.client.model.BudgetPool;
import com.konfigthis.client.model.BudgetTiersResponse;
import com.konfigthis.client.model.CreateBudgetPool;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsGuideline;
import com.konfigthis.client.model.UpdateBudgetPool;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BudgetPoolApi
 */
@Disabled
public class BudgetPoolApiTest {

    private static BudgetPoolApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new BudgetPoolApi(apiClient);
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateGuidelineTest() throws ApiException {
        String orgId = null;
        String id = null;
        String scenarioId = null;
        api.calculateGuideline(orgId, id)
                .scenarioId(scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate tiering &amp; preview with the given budget calculated for the compensation review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateGuideline_0Test() throws ApiException {
        String orgId = null;
        String id = null;
        BudgetTiersResponse response = api.calculateGuideline_0(orgId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new budget pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewPoolTest() throws ApiException {
        String compReviewId = null;
        String label = null;
        String appliedField = null;
        String sourceField = null;
        String basisType = null;
        String orgId = null;
        String participantsExpr = null;
        Money fixedAmount = null;
        Double fixedValue = null;
        BasisFieldMatrix basisFieldMatrix = null;
        Map<String, Money> fixedBudgetMap = null;
        String basisExpr = null;
        String defaultCurrency = null;
        api.createNewPool(compReviewId, label, appliedField, sourceField, basisType, orgId)
                .participantsExpr(participantsExpr)
                .fixedAmount(fixedAmount)
                .fixedValue(fixedValue)
                .basisFieldMatrix(basisFieldMatrix)
                .fixedBudgetMap(fixedBudgetMap)
                .basisExpr(basisExpr)
                .defaultCurrency(defaultCurrency)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a budget pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBudgetPoolByIdTest() throws ApiException {
        String orgId = null;
        String id = null;
        api.deleteBudgetPoolById(orgId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all budget pools for an org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllForOrgTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        ResultsData response = api.getAllForOrg(orgId)
                .compReviewId(compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the guidelines associated with a budget pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGuidelinesForBudgetPoolTest() throws ApiException {
        String orgId = null;
        String id = null;
        ResultsGuideline response = api.getGuidelinesForBudgetPool(orgId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific budget pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpecificPoolTest() throws ApiException {
        String orgId = null;
        String id = null;
        BudgetPool response = api.getSpecificPool(orgId, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a budget pool
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBudgetPoolTest() throws ApiException {
        String orgId = null;
        String id = null;
        String label = null;
        String participantsExpr = null;
        String appliedField = null;
        String sourceField = null;
        String basisType = null;
        Money fixedAmount = null;
        Double fixedValue = null;
        BasisFieldMatrix basisFieldMatrix = null;
        Map<String, Money> fixedBudgetMap = null;
        String basisExpr = null;
        String defaultCurrency = null;
        api.updateBudgetPool(orgId, id)
                .label(label)
                .participantsExpr(participantsExpr)
                .appliedField(appliedField)
                .sourceField(sourceField)
                .basisType(basisType)
                .fixedAmount(fixedAmount)
                .fixedValue(fixedValue)
                .basisFieldMatrix(basisFieldMatrix)
                .fixedBudgetMap(fixedBudgetMap)
                .basisExpr(basisExpr)
                .defaultCurrency(defaultCurrency)
                .execute();
        // TODO: test validations
    }

}
