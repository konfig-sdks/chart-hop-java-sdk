/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApprovalRequestCompReviewResponse;
import com.konfigthis.client.model.ApprovalRequestPatchBody;
import com.konfigthis.client.model.CompReview;
import com.konfigthis.client.model.CompReviewConfig;
import com.konfigthis.client.model.CompReviewMetadata;
import com.konfigthis.client.model.CompReviewVisualizations;
import com.konfigthis.client.model.CreateCompReview;
import com.konfigthis.client.model.GenerateCompReviewOptions;
import com.konfigthis.client.model.GetVisualizationsOptions;
import com.konfigthis.client.model.InCycleChange;
import com.konfigthis.client.model.InCycleViewChanges;
import com.konfigthis.client.model.InCycleViewResponse;
import com.konfigthis.client.model.PartialAppEntities;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsCompReview;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.SendReminderEmailOptions;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.TiersResponse;
import com.konfigthis.client.model.UpdateCompReview;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompReviewApi
 */
@Disabled
public class CompReviewApiTest {

    private static CompReviewApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CompReviewApi(apiClient);
    }

    /**
     * Concludes (or closes) the compensation review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeCompReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Boolean isFullyApproved = null;
        api.closeCompReview(orgId, compReviewId)
                .isFullyApproved(isFullyApproved)
                .execute();
        // TODO: test validations
    }

    /**
     * Duplicate a set of comp reviews
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBulkDuplicateTest() throws ApiException {
        String orgId = null;
        Process response = api.createBulkDuplicate(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompReviewTest() throws ApiException {
        String label = null;
        String orgId = null;
        CompReviewConfig config = null;
        String status = null;
        List<ShareAccess> shareAccess = null;
        api.createCompReview(label, orgId)
                .config(config)
                .status(status)
                .shareAccess(shareAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Get data for visualizations for a comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVisualizationDataTest() throws ApiException {
        Boolean isCollabicientView = null;
        String orgId = null;
        String compReviewId = null;
        Set<String> changeIds = null;
        String viewInCurrency = null;
        Boolean includeCollaborators = null;
        String viewJobId = null;
        Boolean preview = null;
        Boolean includeAllRequests = null;
        CompReviewVisualizations response = api.createVisualizationData(isCollabicientView, orgId, compReviewId)
                .changeIds(changeIds)
                .viewInCurrency(viewInCurrency)
                .includeCollaborators(includeCollaborators)
                .viewJobId(viewJobId)
                .preview(preview)
                .includeAllRequests(includeAllRequests)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a set of comp reviews
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBulkCompReviewsTest() throws ApiException {
        String orgId = null;
        Process response = api.deleteBulkCompReviews(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCompReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        api.deleteCompReview(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Duplicate a comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void duplicateCompReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        CompReview response = api.duplicateCompReview(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a comp review&#39;s audit log
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportAuditLogTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Process response = api.exportAuditLog(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a comp review&#39;s changes
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportChangesTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Process response = api.exportChanges(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a comp review&#39;s comments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportCommentsTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Process response = api.exportComments(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular comp review by ID
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCompReviewByIdTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        CompReview response = api.findCompReviewById(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Find comp reviews in the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCompReviewsTest() throws ApiException {
        String orgId = null;
        String from = null;
        Integer limit = null;
        String returnAccess = null;
        ResultsCompReview response = api.findCompReviews(orgId)
                .from(from)
                .limit(limit)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate a compensation review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateCompReviewTest() throws ApiException {
        Boolean isPreview = null;
        String orgId = null;
        String compReviewId = null;
        Process response = api.generateCompReview(isPreview, orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate tiering &amp; preview for a compensation review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateTieringPreviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        TiersResponse response = api.generateTieringPreview(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the change data and guideline flags associated with an in-cycle change
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangeAndGuidelineFlagsTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        String changeId = null;
        InCycleChange response = api.getChangeAndGuidelineFlags(orgId, compReviewId, changeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the changes for a set of scenarios in an in-cycle comp-review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChangesInCycleTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        String approvalRequestId = null;
        Boolean isPreview = null;
        String jobId = null;
        InCycleViewChanges response = api.getChangesInCycle(orgId, compReviewId)
                .approvalRequestId(approvalRequestId)
                .isPreview(isPreview)
                .jobId(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a collaborator participant reviewer in-cycle comp-review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollabicientInCycleTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Boolean scenariosOnly = null;
        Boolean proposalOnly = null;
        Boolean reviewsOnly = null;
        Boolean columnsOnly = null;
        Boolean isPreview = null;
        String collabicientJobId = null;
        InCycleViewResponse response = api.getCollabicientInCycle(orgId, compReviewId)
                .scenariosOnly(scenariosOnly)
                .proposalOnly(proposalOnly)
                .reviewsOnly(reviewsOnly)
                .columnsOnly(columnsOnly)
                .isPreview(isPreview)
                .collabicientJobId(collabicientJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the necessary caches on a specific date for a compensation review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDateCachesTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        PartialAppEntities response = api.getDateCaches(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of employees eligible for a given comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEligibleEmployeesTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        String filterScenarioIds = null;
        Boolean ineligible = null;
        String from = null;
        Integer limit = null;
        String fields = null;
        String format = null;
        String filter = null;
        ResultsData response = api.getEligibleEmployees(orgId, compReviewId)
                .filterScenarioIds(filterScenarioIds)
                .ineligible(ineligible)
                .from(from)
                .limit(limit)
                .fields(fields)
                .format(format)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Return metadata for a particular comp review by ID
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetadataByIdTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        CompReviewMetadata response = api.getMetadataById(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of approval request responses for a given comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRequestResponsesTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Boolean isPreview = null;
        List<ApprovalRequestCompReviewResponse> response = api.listRequestResponses(orgId, compReviewId)
                .isPreview(isPreview)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an overview for a given user in an in-cycle comp-review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void overviewInCycleCompReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        Boolean scenariosOnly = null;
        Boolean proposalOnly = null;
        Boolean reviewsOnly = null;
        Boolean columnsOnly = null;
        Boolean isPreview = null;
        String jobId = null;
        Boolean includeAllRequests = null;
        Boolean includeFeatures = null;
        InCycleViewResponse response = api.overviewInCycleCompReview(orgId, compReviewId)
                .scenariosOnly(scenariosOnly)
                .proposalOnly(proposalOnly)
                .reviewsOnly(reviewsOnly)
                .columnsOnly(columnsOnly)
                .isPreview(isPreview)
                .jobId(jobId)
                .includeAllRequests(includeAllRequests)
                .includeFeatures(includeFeatures)
                .execute();
        // TODO: test validations
    }

    /**
     * Pauses the compensation review to allow for editing by an admin
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        api.pauseReview(orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a reminder email to someone participating in a comp review 
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReminderEmailTest() throws ApiException {
        String approvalRequestId = null;
        String orgId = null;
        String compReviewId = null;
        api.sendReminderEmail(approvalRequestId, orgId, compReviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update approval request status, including any rollups
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApprovalRequestStatusTest() throws ApiException {
        String status = null;
        String orgId = null;
        String compReviewId = null;
        String approvalRequestId = null;
        String message = null;
        String previewJobId = null;
        Boolean isFinalApproval = null;
        String collaboratorSelectedReviewerJobId = null;
        api.updateApprovalRequestStatus(status, orgId, compReviewId, approvalRequestId)
                .message(message)
                .previewJobId(previewJobId)
                .isFinalApproval(isFinalApproval)
                .collaboratorSelectedReviewerJobId(collaboratorSelectedReviewerJobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a comp review
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCompReviewTest() throws ApiException {
        String orgId = null;
        String compReviewId = null;
        String label = null;
        CompReviewConfig config = null;
        String status = null;
        List<ShareAccess> shareAccess = null;
        Integer reviewerCount = null;
        Integer submittedCount = null;
        CompReview response = api.updateCompReview(orgId, compReviewId)
                .label(label)
                .config(config)
                .status(status)
                .shareAccess(shareAccess)
                .reviewerCount(reviewerCount)
                .submittedCount(submittedCount)
                .execute();
        // TODO: test validations
    }

}
