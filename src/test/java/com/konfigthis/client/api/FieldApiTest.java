/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateField;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.FieldRemoveCategoryRequest;
import com.konfigthis.client.model.FieldRemoveOverrideRequest;
import com.konfigthis.client.model.FieldStatusUpdateRequest;
import com.konfigthis.client.model.ResultsField;
import com.konfigthis.client.model.ResultsPartialField;
import com.konfigthis.client.model.TableRef;
import com.konfigthis.client.model.UpdateField;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FieldApi
 */
@Disabled
public class FieldApiTest {

    private static FieldApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FieldApi(apiClient);
    }

    /**
     * Create a field
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFieldTest() throws ApiException {
        String name = null;
        String label = null;
        String type = null;
        String entityType = null;
        String sensitive = null;
        Boolean isUnique = null;
        Boolean isRequired = null;
        String orgId = null;
        String description = null;
        String orgId = null;
        String question = null;
        Boolean inUse = null;
        String expr = null;
        String exprType = null;
        String plural = null;
        List<EnumValue> values = null;
        Object defaultValue = null;
        Object options = null;
        Boolean hideExpr = null;
        Integer expireDays = null;
        String status = null;
        String tableId = null;
        TableRef tableRef = null;
        Boolean isEffectiveDated = null;
        Set<String> dataFetchTypes = null;
        Set<String> aliases = null;
        String calc = null;
        String categoryId = null;
        String classification = null;
        Integer places = null;
        String tableType = null;
        Field response = api.createNewField(name, label, type, entityType, sensitive, isUnique, isRequired, orgId)
                .description(description)
                .orgId(orgId)
                .question(question)
                .inUse(inUse)
                .expr(expr)
                .exprType(exprType)
                .plural(plural)
                .values(values)
                .defaultValue(defaultValue)
                .options(options)
                .hideExpr(hideExpr)
                .expireDays(expireDays)
                .status(status)
                .tableId(tableId)
                .tableRef(tableRef)
                .isEffectiveDated(isEffectiveDated)
                .dataFetchTypes(dataFetchTypes)
                .aliases(aliases)
                .calc(calc)
                .categoryId(categoryId)
                .classification(classification)
                .places(places)
                .tableType(tableType)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all fields in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPaginatedTest() throws ApiException {
        String orgId = null;
        String from = null;
        Integer limit = null;
        String ids = null;
        String table = null;
        String tableType = null;
        String form = null;
        String builtin = null;
        Boolean includeTtst = null;
        ResultsField response = api.getAllPaginated(orgId)
                .from(from)
                .limit(limit)
                .ids(ids)
                .table(table)
                .tableType(tableType)
                .form(form)
                .builtin(builtin)
                .includeTtst(includeTtst)
                .execute();
        // TODO: test validations
    }

    /**
     * Get built-in fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuiltInFieldsTest() throws ApiException {
        String orgId = null;
        ResultsPartialField response = api.getBuiltInFields(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular field by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String fieldId = null;
        Field response = api.getById(orgId, fieldId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return fields in a particular category
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFieldsInCategoryTest() throws ApiException {
        String orgId = null;
        String categoryId = null;
        ResultsField response = api.getFieldsInCategory(orgId, categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return uncategorized fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUncategorizedFieldsTest() throws ApiException {
        String orgId = null;
        ResultsField response = api.getUncategorizedFields(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTest() throws ApiException {
        String orgId = null;
        api.remove(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a field
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String fieldId = null;
        api.removeById(orgId, fieldId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove overrides from fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFieldOverridesTest() throws ApiException {
        Set<String> fieldIds = null;
        String orgId = null;
        api.removeFieldOverrides(fieldIds, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove field from all associated categories
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFromCategoriesTest() throws ApiException {
        Set<String> fieldIds = null;
        String orgId = null;
        api.removeFromCategories(fieldIds, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing field
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingFieldTest() throws ApiException {
        String orgId = null;
        String fieldId = null;
        String description = null;
        String name = null;
        String label = null;
        String question = null;
        Boolean inUse = null;
        String expr = null;
        String exprType = null;
        String type = null;
        String plural = null;
        List<EnumValue> values = null;
        Object defaultValue = null;
        Object options = null;
        String sensitive = null;
        Boolean hideExpr = null;
        Integer expireDays = null;
        String status = null;
        TableRef tableRef = null;
        Boolean isUnique = null;
        Boolean isRequired = null;
        Boolean isEffectiveDated = null;
        Set<String> dataFetchTypes = null;
        Set<String> aliases = null;
        String calc = null;
        String categoryId = null;
        String classification = null;
        Integer places = null;
        api.updateExistingField(orgId, fieldId)
                .description(description)
                .name(name)
                .label(label)
                .question(question)
                .inUse(inUse)
                .expr(expr)
                .exprType(exprType)
                .type(type)
                .plural(plural)
                .values(values)
                .defaultValue(defaultValue)
                .options(options)
                .sensitive(sensitive)
                .hideExpr(hideExpr)
                .expireDays(expireDays)
                .status(status)
                .tableRef(tableRef)
                .isUnique(isUnique)
                .isRequired(isRequired)
                .isEffectiveDated(isEffectiveDated)
                .dataFetchTypes(dataFetchTypes)
                .aliases(aliases)
                .calc(calc)
                .categoryId(categoryId)
                .classification(classification)
                .places(places)
                .execute();
        // TODO: test validations
    }

    /**
     * Perform a dry-run of an update to an existing field that will require migrations
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldDryRunTest() throws ApiException {
        String orgId = null;
        String fieldId = null;
        String description = null;
        String name = null;
        String label = null;
        String question = null;
        Boolean inUse = null;
        String expr = null;
        String exprType = null;
        String type = null;
        String plural = null;
        List<EnumValue> values = null;
        Object defaultValue = null;
        Object options = null;
        String sensitive = null;
        Boolean hideExpr = null;
        Integer expireDays = null;
        String status = null;
        TableRef tableRef = null;
        Boolean isUnique = null;
        Boolean isRequired = null;
        Boolean isEffectiveDated = null;
        Set<String> dataFetchTypes = null;
        Set<String> aliases = null;
        String calc = null;
        String categoryId = null;
        String classification = null;
        Integer places = null;
        api.updateFieldDryRun(orgId, fieldId)
                .description(description)
                .name(name)
                .label(label)
                .question(question)
                .inUse(inUse)
                .expr(expr)
                .exprType(exprType)
                .type(type)
                .plural(plural)
                .values(values)
                .defaultValue(defaultValue)
                .options(options)
                .sensitive(sensitive)
                .hideExpr(hideExpr)
                .expireDays(expireDays)
                .status(status)
                .tableRef(tableRef)
                .isUnique(isUnique)
                .isRequired(isRequired)
                .isEffectiveDated(isEffectiveDated)
                .dataFetchTypes(dataFetchTypes)
                .aliases(aliases)
                .calc(calc)
                .categoryId(categoryId)
                .classification(classification)
                .places(places)
                .execute();
        // TODO: test validations
    }

    /**
     * Update status for existing fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusForExistingFieldsTest() throws ApiException {
        String updateStatus = null;
        List<String> fieldIds = null;
        List<String> reservedFieldNames = null;
        String orgId = null;
        api.updateStatusForExistingFields(updateStatus, fieldIds, reservedFieldNames, orgId)
                .execute();
        // TODO: test validations
    }

}
