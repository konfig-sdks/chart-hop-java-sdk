/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ExportField;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExportApi
 */
@Disabled
public class ExportApiTest {

    private static ExportApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExportApi(apiClient);
    }

    /**
     * Export a changelog to CSV format
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changelogToCsvTest() throws ApiException {
        String orgId = null;
        Process response = api.changelogToCsv(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a CSV of custom fields
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void csvCustomFieldsTest() throws ApiException {
        String orgId = null;
        Process response = api.csvCustomFields(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a csv log of a scenario comments
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void csvScenarioCommentsTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        Process response = api.csvScenarioComments(orgId, scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a zipfile of files downloaded from some field
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fileZipDownloadTest() throws ApiException {
        String orgId = null;
        String field = null;
        LocalDate date = null;
        String scenarioId = null;
        String q = null;
        String size = null;
        Process response = api.fileZipDownload(orgId)
                .field(field)
                .date(date)
                .scenarioId(scenarioId)
                .q(q)
                .size(size)
                .execute();
        // TODO: test validations
    }

    /**
     * Export org chart to Powerpoint
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgChartToPowerpointTest() throws ApiException {
        String orgId = null;
        LocalDate date = null;
        Process response = api.orgChartToPowerpoint(orgId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Export reviews in PDF format
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pdfReviewTest() throws ApiException {
        String orgId = null;
        String assessmentId = null;
        Process response = api.pdfReview(orgId, assessmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export report to Powerpoint
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportToPowerpointTest() throws ApiException {
        String orgId = null;
        String reportId = null;
        Process response = api.reportToPowerpoint(orgId, reportId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a snapshot of a current roster to CSV format
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rosterToCsvSnapshotTest() throws ApiException {
        String orgId = null;
        Process response = api.rosterToCsvSnapshot(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export a CSV changelog of a scenario
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scenarioCsvTest() throws ApiException {
        String orgId = null;
        String scenarioId = null;
        Process response = api.scenarioCsv(orgId, scenarioId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export tasks for a review to CSV format
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskToCsvTest() throws ApiException {
        String orgId = null;
        String reviewId = null;
        Process response = api.taskToCsv(orgId, reviewId)
                .execute();
        // TODO: test validations
    }

    /**
     * Export users for a review to CSV format
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userReviewCsvTest() throws ApiException {
        String orgId = null;
        Process response = api.userReviewCsv(orgId)
                .execute();
        // TODO: test validations
    }

}
