/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateTimeOffEntity;
import java.time.LocalDate;
import com.konfigthis.client.model.ResultsTimeOffEntity;
import com.konfigthis.client.model.TimeOff;
import com.konfigthis.client.model.TimeOffApproval;
import com.konfigthis.client.model.TimeOffEntity;
import com.konfigthis.client.model.TimeOffRequest;
import com.konfigthis.client.model.UpdateTimeOffEntity;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeoffApi
 */
@Disabled
public class TimeoffApiTest {

    private static TimeoffApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeoffApi(apiClient);
    }

    /**
     * Approve a pending time off request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approvePendingRequestTest() throws ApiException {
        String orgId = null;
        String timeOffId = null;
        String message = null;
        api.approvePendingRequest(orgId, timeOffId)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a timeOff
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEntryTest() throws ApiException {
        String personId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String orgId = null;
        String externalId = null;
        Double days = null;
        Double hours = null;
        String typeDescription = null;
        String note = null;
        String approval = null;
        TimeOff response = api.createEntry(personId, startDate, endDate, orgId)
                .externalId(externalId)
                .days(days)
                .hours(hours)
                .typeDescription(typeDescription)
                .note(note)
                .approval(approval)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular timeOff by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTimeOffByIdTest() throws ApiException {
        String orgId = null;
        String timeOffId = null;
        TimeOffEntity response = api.findTimeOffById(orgId, timeOffId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve time off
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTimeOffTest() throws ApiException {
        String orgId = null;
        String personId = null;
        LocalDate fromDate = null;
        LocalDate untilDate = null;
        String from = null;
        Integer limit = null;
        String returnAccess = null;
        ResultsTimeOffEntity response = api.getTimeOff(orgId)
                .personId(personId)
                .fromDate(fromDate)
                .untilDate(untilDate)
                .from(from)
                .limit(limit)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Reject a pending time off request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectTimeOffRequestTest() throws ApiException {
        String orgId = null;
        String timeOffId = null;
        String message = null;
        api.rejectTimeOffRequest(orgId, timeOffId)
                .message(message)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a timeOff
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEntryTest() throws ApiException {
        String orgId = null;
        String timeOffId = null;
        api.removeEntry(orgId, timeOffId)
                .execute();
        // TODO: test validations
    }

    /**
     * Request time off
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitTimeOffRequestTest() throws ApiException {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String orgId = null;
        String personId = null;
        String typeDescription = null;
        String note = null;
        TimeOff response = api.submitTimeOffRequest(startDate, endDate, orgId)
                .personId(personId)
                .typeDescription(typeDescription)
                .note(note)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing timeOff
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTimeOffEntryTest() throws ApiException {
        String orgId = null;
        String timeOffId = null;
        String externalId = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Double days = null;
        Double hours = null;
        String typeDescription = null;
        String note = null;
        String approval = null;
        api.updateTimeOffEntry(orgId, timeOffId)
                .externalId(externalId)
                .startDate(startDate)
                .endDate(endDate)
                .days(days)
                .hours(hours)
                .typeDescription(typeDescription)
                .note(note)
                .approval(approval)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate a time off request
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTimeoffRequestTest() throws ApiException {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String orgId = null;
        String personId = null;
        String typeDescription = null;
        String note = null;
        TimeOff response = api.validateTimeoffRequest(startDate, endDate, orgId)
                .personId(personId)
                .typeDescription(typeDescription)
                .note(note)
                .execute();
        // TODO: test validations
    }

}
