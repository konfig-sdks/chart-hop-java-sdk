/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.AgreementRequest;
import com.konfigthis.client.model.AppInstallCodeValidateRequest;
import com.konfigthis.client.model.AppInstallCodeValidateResponse;
import com.konfigthis.client.model.CreateOrg;
import com.konfigthis.client.model.OnboardStepResult;
import com.konfigthis.client.model.Org;
import com.konfigthis.client.model.OrgDomain;
import com.konfigthis.client.model.OrgUsersPersonsCountResponse;
import com.konfigthis.client.model.OrgUsersPersonsResponse;
import com.konfigthis.client.model.ResultsOrg;
import com.konfigthis.client.model.TestEmailRequest;
import java.net.URI;
import com.konfigthis.client.model.UpdateOrg;
import com.konfigthis.client.model.WelcomeEmailSettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgApi
 */
@Disabled
public class OrgApiTest {

    private static OrgApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OrgApi(apiClient);
    }

    /**
     * Consent on Terms of Service agreement
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consentTermsOfServiceTest() throws ApiException {
        String action = null;
        String legalDocId = null;
        String orgId = null;
        api.consentTermsOfService(action, legalDocId, orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new org head in the history, by creating an empty job placeholder above the current head
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewJobPlaceholderTest() throws ApiException {
        String orgId = null;
        api.createNewJobPlaceholder(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewOrgTest() throws ApiException {
        String name = null;
        String type = null;
        Integer estEmployees = null;
        String status = null;
        List<String> currencies = null;
        String timezone = null;
        Boolean onboarding = null;
        String customerId = null;
        String slug = null;
        String industry = null;
        Integer estRevenue = null;
        Integer foundedYear = null;
        Address address = null;
        String phone = null;
        String email = null;
        URI url = null;
        List<OrgDomain> domains = null;
        String imagePath = null;
        String stock = null;
        String appTime = null;
        Integer zone = null;
        Integer fiscalStart = null;
        String startDate = null;
        Object sensitiveFields = null;
        Object options = null;
        Object internalOptions = null;
        List<OnboardStepResult> onboardSteps = null;
        Boolean selfServeImporting = null;
        Integer headCount = null;
        Org response = api.createNewOrg(name, type, estEmployees, status, currencies, timezone, onboarding)
                .customerId(customerId)
                .slug(slug)
                .industry(industry)
                .estRevenue(estRevenue)
                .foundedYear(foundedYear)
                .address(address)
                .phone(phone)
                .email(email)
                .url(url)
                .domains(domains)
                .imagePath(imagePath)
                .stock(stock)
                .appTime(appTime)
                .zone(zone)
                .fiscalStart(fiscalStart)
                .startDate(startDate)
                .sensitiveFields(sensitiveFields)
                .options(options)
                .internalOptions(internalOptions)
                .onboardSteps(onboardSteps)
                .selfServeImporting(selfServeImporting)
                .headCount(headCount)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular org by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        Org response = api.getById(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular org by slug
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBySlugTest() throws ApiException {
        String slug = null;
        Org response = api.getBySlug(slug)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a user or person by id. If both are provided, userId takes precedence
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataUserPersonByIdTest() throws ApiException {
        String orgId = null;
        String userId = null;
        String personId = null;
        OrgUsersPersonsResponse response = api.getDataUserPersonById(orgId)
                .userId(userId)
                .personId(personId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the count of joined users, invited users, and org members who are not yet invited
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataUserPersonCountTest() throws ApiException {
        String orgId = null;
        OrgUsersPersonsCountResponse response = api.getDataUserPersonCount(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets a list of org users (joined or invited) and org members (not yet invited)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataUsersPersonsTest() throws ApiException {
        String orgId = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String role = null;
        String status = null;
        String returnAccess = null;
        OrgUsersPersonsResponse response = api.getDataUsersPersons(orgId)
                .limit(limit)
                .offset(offset)
                .sort(sort)
                .role(role)
                .status(status)
                .returnAccess(returnAccess)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an Oauth2 authorization code to install an app at this org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOauth2AuthorizationCodeTest() throws ApiException {
        String org = null;
        AccessTokenResponse response = api.getOauth2AuthorizationCode(org)
                .execute();
        // TODO: test validations
    }

    /**
     * Return information on current user&#39;s access
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccessTest() throws ApiException {
        String orgId = null;
        api.getUserAccess(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return validation for a org by slug
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getValidationBySlugTest() throws ApiException {
        String slug = null;
        api.getValidationBySlug(slug)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the custom setting or default for the welcome email&#39;s subject, body, cta button label
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWelcomeEmailSettingsTest() throws ApiException {
        String orgId = null;
        WelcomeEmailSettings response = api.getWelcomeEmailSettings(orgId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all visible orgs, paginated by name
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVisibleOrgsTest() throws ApiException {
        String from = null;
        String q = null;
        Integer limit = null;
        String customerId = null;
        Boolean realOnly = null;
        Long lastCreateAt = null;
        Long lastActiveAt = null;
        String internalOptions = null;
        ResultsOrg response = api.listVisibleOrgs()
                .from(from)
                .q(q)
                .limit(limit)
                .customerId(customerId)
                .realOnly(realOnly)
                .lastCreateAt(lastCreateAt)
                .lastActiveAt(lastActiveAt)
                .internalOptions(internalOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a test welcome email to oneself
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTestEmailToOneselfTest() throws ApiException {
        String orgId = null;
        String welcomeEmailSubject = null;
        String welcomeEmailButtonLabel = null;
        String welcomeEmailBody = null;
        api.sendTestEmailToOneself(orgId)
                .welcomeEmailSubject(welcomeEmailSubject)
                .welcomeEmailButtonLabel(welcomeEmailButtonLabel)
                .welcomeEmailBody(welcomeEmailBody)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing org
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingOrgTest() throws ApiException {
        String orgId = null;
        String customerId = null;
        String name = null;
        String slug = null;
        String type = null;
        String industry = null;
        Integer estEmployees = null;
        Integer estRevenue = null;
        Integer foundedYear = null;
        Address address = null;
        String phone = null;
        String email = null;
        URI url = null;
        List<OrgDomain> domains = null;
        String status = null;
        String imagePath = null;
        List<String> currencies = null;
        String stock = null;
        String timezone = null;
        String appTime = null;
        Integer zone = null;
        Integer fiscalStart = null;
        String startDate = null;
        Object sensitiveFields = null;
        Object options = null;
        Object internalOptions = null;
        List<OnboardStepResult> onboardSteps = null;
        Boolean onboarding = null;
        Boolean selfServeImporting = null;
        Integer headCount = null;
        api.updateExistingOrg(orgId)
                .customerId(customerId)
                .name(name)
                .slug(slug)
                .type(type)
                .industry(industry)
                .estEmployees(estEmployees)
                .estRevenue(estRevenue)
                .foundedYear(foundedYear)
                .address(address)
                .phone(phone)
                .email(email)
                .url(url)
                .domains(domains)
                .status(status)
                .imagePath(imagePath)
                .currencies(currencies)
                .stock(stock)
                .timezone(timezone)
                .appTime(appTime)
                .zone(zone)
                .fiscalStart(fiscalStart)
                .startDate(startDate)
                .sensitiveFields(sensitiveFields)
                .options(options)
                .internalOptions(internalOptions)
                .onboardSteps(onboardSteps)
                .onboarding(onboarding)
                .selfServeImporting(selfServeImporting)
                .headCount(headCount)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate authorization code
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateAppInstallAuthorizationCodeTest() throws ApiException {
        String authorizationCode = null;
        Boolean issueAccessToken = null;
        AppInstallCodeValidateResponse response = api.validateAppInstallAuthorizationCode(authorizationCode, issueAccessToken)
                .execute();
        // TODO: test validations
    }

}
