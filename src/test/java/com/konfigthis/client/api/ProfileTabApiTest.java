/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Block;
import com.konfigthis.client.model.CreateProfileTab;
import java.time.LocalDate;
import com.konfigthis.client.model.ProfileTab;
import com.konfigthis.client.model.ProfileTabSummary;
import com.konfigthis.client.model.ResultsProfileTab;
import com.konfigthis.client.model.ResultsProfileTabSummary;
import com.konfigthis.client.model.UpdateProfileTab;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProfileTabApi
 */
@Disabled
public class ProfileTabApiTest {

    private static ProfileTabApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ProfileTabApi(apiClient);
    }

    /**
     * Create a profile tab
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTabTest() throws ApiException {
        String label = null;
        List<Block> blocks = null;
        String status = null;
        Integer sort = null;
        String orgId = null;
        String targetFilter = null;
        String readFilter = null;
        ProfileTab response = api.createNewTab(label, blocks, status, sort, orgId)
                .targetFilter(targetFilter)
                .readFilter(readFilter)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a profile tab
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProfileTabTest() throws ApiException {
        String orgId = null;
        String profileTabId = null;
        api.deleteProfileTab(orgId, profileTabId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all profile tabs applicable to a particular job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTabsForJobTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        LocalDate date = null;
        String fields = null;
        ResultsProfileTabSummary response = api.findTabsForJob(orgId, jobId)
                .date(date)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular profile tab by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByOrgIdAndTabIdTest() throws ApiException {
        String orgId = null;
        String profileTabId = null;
        ProfileTab response = api.getByOrgIdAndTabId(orgId, profileTabId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch and evaluate the content of a particular profile tab id, relative to a particular job
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEvaluateProfileTabContentTest() throws ApiException {
        String orgId = null;
        String jobId = null;
        String tabId = null;
        LocalDate date = null;
        ProfileTabSummary response = api.getEvaluateProfileTabContent(orgId, jobId, tabId)
                .date(date)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all profile tabs applicable to a particular person
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTabsTest() throws ApiException {
        String orgId = null;
        String personId = null;
        LocalDate date = null;
        String fields = null;
        ResultsProfileTabSummary response = api.getProfileTabs(orgId, personId)
                .date(date)
                .fields(fields)
                .execute();
        // TODO: test validations
    }

    /**
     * Return all profile tabs in the organization paginated
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProfileTabsTest() throws ApiException {
        String orgId = null;
        String status = null;
        String from = null;
        Integer limit = null;
        ResultsProfileTab response = api.listProfileTabs(orgId)
                .status(status)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing profile tab
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingTabTest() throws ApiException {
        String orgId = null;
        String profileTabId = null;
        String label = null;
        List<Block> blocks = null;
        String status = null;
        String targetFilter = null;
        String readFilter = null;
        Integer sort = null;
        api.updateExistingTab(orgId, profileTabId)
                .label(label)
                .blocks(blocks)
                .status(status)
                .targetFilter(targetFilter)
                .readFilter(readFilter)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

}
