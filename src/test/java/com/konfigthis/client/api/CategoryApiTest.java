/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.CreateCategory;
import com.konfigthis.client.model.ResultsCategory;
import com.konfigthis.client.model.UpdateCategory;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoryApi
 */
@Disabled
public class CategoryApiTest {

    private static CategoryApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CategoryApi(apiClient);
    }

    /**
     * Create a category
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewCategoryTest() throws ApiException {
        String label = null;
        String orgId = null;
        String orgId = null;
        Set<String> fieldIds = null;
        Set<String> nativeFields = null;
        Category response = api.createNewCategory(label, orgId)
                .orgId(orgId)
                .fieldIds(fieldIds)
                .nativeFields(nativeFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Return categories that are available to the organization
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableTest() throws ApiException {
        String orgId = null;
        String type = null;
        Boolean unsorted = null;
        ResultsCategory response = api.getAvailable(orgId)
                .type(type)
                .unsorted(unsorted)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a particular category by id
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String orgId = null;
        String categoryId = null;
        Category response = api.getById(orgId, categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a category
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeByIdTest() throws ApiException {
        String orgId = null;
        String categoryId = null;
        api.removeById(orgId, categoryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing category
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExistingCategoryTest() throws ApiException {
        String orgId = null;
        String categoryId = null;
        String label = null;
        Set<String> fieldIds = null;
        Set<String> nativeFields = null;
        api.updateExistingCategory(orgId, categoryId)
                .label(label)
                .fieldIds(fieldIds)
                .nativeFields(nativeFields)
                .execute();
        // TODO: test validations
    }

}
