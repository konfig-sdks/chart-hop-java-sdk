/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.ResultsEvent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventApi
 */
@Disabled
public class EventApiTest {

    private static EventApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EventApi(apiClient);
    }

    /**
     * Create an inbound event
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboundNotificationTest() throws ApiException {
        String orgId = null;
        String appId = null;
        String inboundId = null;
        String processId = null;
        String response = api.createInboundNotification(orgId, appId, inboundId)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an outbound event
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOutboundEventTest() throws ApiException {
        String orgId = null;
        String appId = null;
        String processId = null;
        String response = api.createOutboundEvent(orgId, appId)
                .processId(processId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return individual event, including payload
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventPayloadTest() throws ApiException {
        String orgId = null;
        String eventId = null;
        Event response = api.getEventPayload(orgId, eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return past events, paginated, without payloads present
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPastEventsTest() throws ApiException {
        String orgId = null;
        String userId = null;
        String entityId = null;
        String entityType = null;
        String parentEntityId = null;
        String scenarioId = null;
        String processId = null;
        String fields = null;
        String code = null;
        Long from = null;
        Integer limit = null;
        ResultsEvent response = api.getPastEvents(orgId)
                .userId(userId)
                .entityId(entityId)
                .entityType(entityType)
                .parentEntityId(parentEntityId)
                .scenarioId(scenarioId)
                .processId(processId)
                .fields(fields)
                .code(code)
                .from(from)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Resend all associated notifications for a previous event (superusers only)
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendAssociatedNotificationsTest() throws ApiException {
        String orgId = null;
        String eventId = null;
        String app = null;
        api.resendAssociatedNotifications(orgId, eventId)
                .app(app)
                .execute();
        // TODO: test validations
    }

}
