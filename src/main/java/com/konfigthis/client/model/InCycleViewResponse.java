/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApprovalRequestCompReviewResponse;
import com.konfigthis.client.model.CompReviewWorkbookColumn;
import com.konfigthis.client.model.InCycleViewFeatures;
import com.konfigthis.client.model.Scenario;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InCycleViewResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InCycleViewResponse {
  public static final String SERIALIZED_NAME_REVIEWS = "reviews";
  @SerializedName(SERIALIZED_NAME_REVIEWS)
  private List<ApprovalRequestCompReviewResponse> reviews = null;

  public static final String SERIALIZED_NAME_PROPOSAL = "proposal";
  @SerializedName(SERIALIZED_NAME_PROPOSAL)
  private ApprovalRequestCompReviewResponse proposal;

  public static final String SERIALIZED_NAME_SCENARIO_MAP = "scenarioMap";
  @SerializedName(SERIALIZED_NAME_SCENARIO_MAP)
  private Map<String, Scenario> scenarioMap = null;

  public static final String SERIALIZED_NAME_PARENT_REVIEWS_MAP = "parentReviewsMap";
  @SerializedName(SERIALIZED_NAME_PARENT_REVIEWS_MAP)
  private Map<String, String> parentReviewsMap = null;

  public static final String SERIALIZED_NAME_COLLABORATING_WITH_JOB_IDS = "collaboratingWithJobIds";
  @SerializedName(SERIALIZED_NAME_COLLABORATING_WITH_JOB_IDS)
  private List<String> collaboratingWithJobIds = null;

  public static final String SERIALIZED_NAME_VISIBLE_COLUMNS = "visibleColumns";
  @SerializedName(SERIALIZED_NAME_VISIBLE_COLUMNS)
  private List<CompReviewWorkbookColumn> visibleColumns = null;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Map<String, String> error = null;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private InCycleViewFeatures features;

  public InCycleViewResponse() {
  }

  public InCycleViewResponse reviews(List<ApprovalRequestCompReviewResponse> reviews) {
    
    
    
    
    this.reviews = reviews;
    return this;
  }

  public InCycleViewResponse addReviewsItem(ApprovalRequestCompReviewResponse reviewsItem) {
    if (this.reviews == null) {
      this.reviews = new ArrayList<>();
    }
    this.reviews.add(reviewsItem);
    return this;
  }

   /**
   * Get reviews
   * @return reviews
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ApprovalRequestCompReviewResponse> getReviews() {
    return reviews;
  }


  public void setReviews(List<ApprovalRequestCompReviewResponse> reviews) {
    
    
    
    this.reviews = reviews;
  }


  public InCycleViewResponse proposal(ApprovalRequestCompReviewResponse proposal) {
    
    
    
    
    this.proposal = proposal;
    return this;
  }

   /**
   * Get proposal
   * @return proposal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApprovalRequestCompReviewResponse getProposal() {
    return proposal;
  }


  public void setProposal(ApprovalRequestCompReviewResponse proposal) {
    
    
    
    this.proposal = proposal;
  }


  public InCycleViewResponse scenarioMap(Map<String, Scenario> scenarioMap) {
    
    
    
    
    this.scenarioMap = scenarioMap;
    return this;
  }

  public InCycleViewResponse putScenarioMapItem(String key, Scenario scenarioMapItem) {
    if (this.scenarioMap == null) {
      this.scenarioMap = new HashMap<>();
    }
    this.scenarioMap.put(key, scenarioMapItem);
    return this;
  }

   /**
   * Get scenarioMap
   * @return scenarioMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, Scenario> getScenarioMap() {
    return scenarioMap;
  }


  public void setScenarioMap(Map<String, Scenario> scenarioMap) {
    
    
    
    this.scenarioMap = scenarioMap;
  }


  public InCycleViewResponse parentReviewsMap(Map<String, String> parentReviewsMap) {
    
    
    
    
    this.parentReviewsMap = parentReviewsMap;
    return this;
  }

  public InCycleViewResponse putParentReviewsMapItem(String key, String parentReviewsMapItem) {
    if (this.parentReviewsMap == null) {
      this.parentReviewsMap = new HashMap<>();
    }
    this.parentReviewsMap.put(key, parentReviewsMapItem);
    return this;
  }

   /**
   * Get parentReviewsMap
   * @return parentReviewsMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getParentReviewsMap() {
    return parentReviewsMap;
  }


  public void setParentReviewsMap(Map<String, String> parentReviewsMap) {
    
    
    
    this.parentReviewsMap = parentReviewsMap;
  }


  public InCycleViewResponse collaboratingWithJobIds(List<String> collaboratingWithJobIds) {
    
    
    
    
    this.collaboratingWithJobIds = collaboratingWithJobIds;
    return this;
  }

  public InCycleViewResponse addCollaboratingWithJobIdsItem(String collaboratingWithJobIdsItem) {
    if (this.collaboratingWithJobIds == null) {
      this.collaboratingWithJobIds = new ArrayList<>();
    }
    this.collaboratingWithJobIds.add(collaboratingWithJobIdsItem);
    return this;
  }

   /**
   * Get collaboratingWithJobIds
   * @return collaboratingWithJobIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCollaboratingWithJobIds() {
    return collaboratingWithJobIds;
  }


  public void setCollaboratingWithJobIds(List<String> collaboratingWithJobIds) {
    
    
    
    this.collaboratingWithJobIds = collaboratingWithJobIds;
  }


  public InCycleViewResponse visibleColumns(List<CompReviewWorkbookColumn> visibleColumns) {
    
    
    
    
    this.visibleColumns = visibleColumns;
    return this;
  }

  public InCycleViewResponse addVisibleColumnsItem(CompReviewWorkbookColumn visibleColumnsItem) {
    if (this.visibleColumns == null) {
      this.visibleColumns = new ArrayList<>();
    }
    this.visibleColumns.add(visibleColumnsItem);
    return this;
  }

   /**
   * Get visibleColumns
   * @return visibleColumns
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CompReviewWorkbookColumn> getVisibleColumns() {
    return visibleColumns;
  }


  public void setVisibleColumns(List<CompReviewWorkbookColumn> visibleColumns) {
    
    
    
    this.visibleColumns = visibleColumns;
  }


  public InCycleViewResponse error(Map<String, String> error) {
    
    
    
    
    this.error = error;
    return this;
  }

  public InCycleViewResponse putErrorItem(String key, String errorItem) {
    if (this.error == null) {
      this.error = new HashMap<>();
    }
    this.error.put(key, errorItem);
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Map<String, String> getError() {
    return error;
  }


  public void setError(Map<String, String> error) {
    
    
    
    this.error = error;
  }


  public InCycleViewResponse features(InCycleViewFeatures features) {
    
    
    
    
    this.features = features;
    return this;
  }

   /**
   * Get features
   * @return features
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InCycleViewFeatures getFeatures() {
    return features;
  }


  public void setFeatures(InCycleViewFeatures features) {
    
    
    
    this.features = features;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InCycleViewResponse instance itself
   */
  public InCycleViewResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InCycleViewResponse inCycleViewResponse = (InCycleViewResponse) o;
    return Objects.equals(this.reviews, inCycleViewResponse.reviews) &&
        Objects.equals(this.proposal, inCycleViewResponse.proposal) &&
        Objects.equals(this.scenarioMap, inCycleViewResponse.scenarioMap) &&
        Objects.equals(this.parentReviewsMap, inCycleViewResponse.parentReviewsMap) &&
        Objects.equals(this.collaboratingWithJobIds, inCycleViewResponse.collaboratingWithJobIds) &&
        Objects.equals(this.visibleColumns, inCycleViewResponse.visibleColumns) &&
        Objects.equals(this.error, inCycleViewResponse.error) &&
        Objects.equals(this.features, inCycleViewResponse.features)&&
        Objects.equals(this.additionalProperties, inCycleViewResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reviews, proposal, scenarioMap, parentReviewsMap, collaboratingWithJobIds, visibleColumns, error, features, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InCycleViewResponse {\n");
    sb.append("    reviews: ").append(toIndentedString(reviews)).append("\n");
    sb.append("    proposal: ").append(toIndentedString(proposal)).append("\n");
    sb.append("    scenarioMap: ").append(toIndentedString(scenarioMap)).append("\n");
    sb.append("    parentReviewsMap: ").append(toIndentedString(parentReviewsMap)).append("\n");
    sb.append("    collaboratingWithJobIds: ").append(toIndentedString(collaboratingWithJobIds)).append("\n");
    sb.append("    visibleColumns: ").append(toIndentedString(visibleColumns)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reviews");
    openapiFields.add("proposal");
    openapiFields.add("scenarioMap");
    openapiFields.add("parentReviewsMap");
    openapiFields.add("collaboratingWithJobIds");
    openapiFields.add("visibleColumns");
    openapiFields.add("error");
    openapiFields.add("features");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InCycleViewResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InCycleViewResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InCycleViewResponse is not found in the empty JSON string", InCycleViewResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("reviews") != null && !jsonObj.get("reviews").isJsonNull()) {
        JsonArray jsonArrayreviews = jsonObj.getAsJsonArray("reviews");
        if (jsonArrayreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reviews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reviews` to be an array in the JSON string but got `%s`", jsonObj.get("reviews").toString()));
          }

          // validate the optional field `reviews` (array)
          for (int i = 0; i < jsonArrayreviews.size(); i++) {
            ApprovalRequestCompReviewResponse.validateJsonObject(jsonArrayreviews.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `proposal`
      if (jsonObj.get("proposal") != null && !jsonObj.get("proposal").isJsonNull()) {
        ApprovalRequestCompReviewResponse.validateJsonObject(jsonObj.getAsJsonObject("proposal"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collaboratingWithJobIds") != null && !jsonObj.get("collaboratingWithJobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaboratingWithJobIds` to be an array in the JSON string but got `%s`", jsonObj.get("collaboratingWithJobIds").toString()));
      }
      if (jsonObj.get("visibleColumns") != null && !jsonObj.get("visibleColumns").isJsonNull()) {
        JsonArray jsonArrayvisibleColumns = jsonObj.getAsJsonArray("visibleColumns");
        if (jsonArrayvisibleColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visibleColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visibleColumns` to be an array in the JSON string but got `%s`", jsonObj.get("visibleColumns").toString()));
          }

          // validate the optional field `visibleColumns` (array)
          for (int i = 0; i < jsonArrayvisibleColumns.size(); i++) {
            CompReviewWorkbookColumn.validateJsonObject(jsonArrayvisibleColumns.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        InCycleViewFeatures.validateJsonObject(jsonObj.getAsJsonObject("features"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InCycleViewResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InCycleViewResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InCycleViewResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InCycleViewResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InCycleViewResponse>() {
           @Override
           public void write(JsonWriter out, InCycleViewResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InCycleViewResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InCycleViewResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InCycleViewResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InCycleViewResponse
  * @throws IOException if the JSON string is invalid with respect to InCycleViewResponse
  */
  public static InCycleViewResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InCycleViewResponse.class);
  }

 /**
  * Convert an instance of InCycleViewResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

