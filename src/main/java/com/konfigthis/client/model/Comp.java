/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayInterval;
import com.konfigthis.client.model.VariableComp;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Comp
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Comp {
  public static final String SERIALIZED_NAME_BASE_COMP = "baseComp";
  @SerializedName(SERIALIZED_NAME_BASE_COMP)
  private PayInterval baseComp;

  public static final String SERIALIZED_NAME_VARIABLE_TARGETS = "variableTargets";
  @SerializedName(SERIALIZED_NAME_VARIABLE_TARGETS)
  private List<VariableComp> variableTargets = null;

  public static final String SERIALIZED_NAME_GRANT_SHARES = "grantShares";
  @SerializedName(SERIALIZED_NAME_GRANT_SHARES)
  private Integer grantShares;

  public static final String SERIALIZED_NAME_GRANT_VALUE = "grantValue";
  @SerializedName(SERIALIZED_NAME_GRANT_VALUE)
  private Integer grantValue;

  /**
   * planned stock grant type
   */
  @JsonAdapter(GrantTypeEnum.Adapter.class)
 public enum GrantTypeEnum {
    ISO("ISO"),
    
    NSO("NSO"),
    
    RSU("RSU"),
    
    SAR("SAR"),
    
    PERFORMANCE_SHARES("PERFORMANCE_SHARES"),
    
    PHANTOM_STOCK("PHANTOM_STOCK"),
    
    RSA("RSA");

    private String value;

    GrantTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypeEnum fromValue(String value) {
      for (GrantTypeEnum b : GrantTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private GrantTypeEnum grantType;

  public Comp() {
  }

  public Comp baseComp(PayInterval baseComp) {
    
    
    
    
    this.baseComp = baseComp;
    return this;
  }

   /**
   * Get baseComp
   * @return baseComp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayInterval getBaseComp() {
    return baseComp;
  }


  public void setBaseComp(PayInterval baseComp) {
    
    
    
    this.baseComp = baseComp;
  }


  public Comp variableTargets(List<VariableComp> variableTargets) {
    
    
    
    
    this.variableTargets = variableTargets;
    return this;
  }

  public Comp addVariableTargetsItem(VariableComp variableTargetsItem) {
    if (this.variableTargets == null) {
      this.variableTargets = new ArrayList<>();
    }
    this.variableTargets.add(variableTargetsItem);
    return this;
  }

   /**
   * variable compensation (money or percent)
   * @return variableTargets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "variable compensation (money or percent)")

  public List<VariableComp> getVariableTargets() {
    return variableTargets;
  }


  public void setVariableTargets(List<VariableComp> variableTargets) {
    
    
    
    this.variableTargets = variableTargets;
  }


  public Comp grantShares(Integer grantShares) {
    
    
    
    
    this.grantShares = grantShares;
    return this;
  }

   /**
   * planned stock grant, in shares
   * @return grantShares
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "planned stock grant, in shares")

  public Integer getGrantShares() {
    return grantShares;
  }


  public void setGrantShares(Integer grantShares) {
    
    
    
    this.grantShares = grantShares;
  }


  public Comp grantValue(Integer grantValue) {
    
    
    
    
    this.grantValue = grantValue;
    return this;
  }

   /**
   * planned stock grant, in value (based on the stock&#39;s currency, not the comp)
   * @return grantValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "planned stock grant, in value (based on the stock's currency, not the comp)")

  public Integer getGrantValue() {
    return grantValue;
  }


  public void setGrantValue(Integer grantValue) {
    
    
    
    this.grantValue = grantValue;
  }


  public Comp grantType(GrantTypeEnum grantType) {
    
    
    
    
    this.grantType = grantType;
    return this;
  }

   /**
   * planned stock grant type
   * @return grantType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "planned stock grant type")

  public GrantTypeEnum getGrantType() {
    return grantType;
  }


  public void setGrantType(GrantTypeEnum grantType) {
    
    
    
    this.grantType = grantType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Comp instance itself
   */
  public Comp putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comp comp = (Comp) o;
    return Objects.equals(this.baseComp, comp.baseComp) &&
        Objects.equals(this.variableTargets, comp.variableTargets) &&
        Objects.equals(this.grantShares, comp.grantShares) &&
        Objects.equals(this.grantValue, comp.grantValue) &&
        Objects.equals(this.grantType, comp.grantType)&&
        Objects.equals(this.additionalProperties, comp.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseComp, variableTargets, grantShares, grantValue, grantType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comp {\n");
    sb.append("    baseComp: ").append(toIndentedString(baseComp)).append("\n");
    sb.append("    variableTargets: ").append(toIndentedString(variableTargets)).append("\n");
    sb.append("    grantShares: ").append(toIndentedString(grantShares)).append("\n");
    sb.append("    grantValue: ").append(toIndentedString(grantValue)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseComp");
    openapiFields.add("variableTargets");
    openapiFields.add("grantShares");
    openapiFields.add("grantValue");
    openapiFields.add("grantType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Comp
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Comp.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Comp is not found in the empty JSON string", Comp.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `baseComp`
      if (jsonObj.get("baseComp") != null && !jsonObj.get("baseComp").isJsonNull()) {
        PayInterval.validateJsonObject(jsonObj.getAsJsonObject("baseComp"));
      }
      if (jsonObj.get("variableTargets") != null && !jsonObj.get("variableTargets").isJsonNull()) {
        JsonArray jsonArrayvariableTargets = jsonObj.getAsJsonArray("variableTargets");
        if (jsonArrayvariableTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("variableTargets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `variableTargets` to be an array in the JSON string but got `%s`", jsonObj.get("variableTargets").toString()));
          }

          // validate the optional field `variableTargets` (array)
          for (int i = 0; i < jsonArrayvariableTargets.size(); i++) {
            VariableComp.validateJsonObject(jsonArrayvariableTargets.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("grantType") != null && !jsonObj.get("grantType").isJsonNull()) && !jsonObj.get("grantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Comp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Comp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Comp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Comp.class));

       return (TypeAdapter<T>) new TypeAdapter<Comp>() {
           @Override
           public void write(JsonWriter out, Comp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Comp read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Comp instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Comp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Comp
  * @throws IOException if the JSON string is invalid with respect to Comp
  */
  public static Comp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Comp.class);
  }

 /**
  * Convert an instance of Comp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

