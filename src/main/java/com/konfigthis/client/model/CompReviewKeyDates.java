/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewKeyDates
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewKeyDates {
  public static final String SERIALIZED_NAME_CYCLE_BEGIN_DATE = "cycleBeginDate";
  @SerializedName(SERIALIZED_NAME_CYCLE_BEGIN_DATE)
  private LocalDate cycleBeginDate;

  public static final String SERIALIZED_NAME_LEVELS_SUBMIT_BY_DATE = "levelsSubmitByDate";
  @SerializedName(SERIALIZED_NAME_LEVELS_SUBMIT_BY_DATE)
  private LocalDate levelsSubmitByDate;

  public static final String SERIALIZED_NAME_FINAL_APPROVAL_DATE = "finalApprovalDate";
  @SerializedName(SERIALIZED_NAME_FINAL_APPROVAL_DATE)
  private LocalDate finalApprovalDate;

  public static final String SERIALIZED_NAME_PAYROLL_EFFECTIVE_DATE = "payrollEffectiveDate";
  @SerializedName(SERIALIZED_NAME_PAYROLL_EFFECTIVE_DATE)
  private LocalDate payrollEffectiveDate;

  public static final String SERIALIZED_NAME_CUSTOM_EFFECTIVE_DATE = "customEffectiveDate";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EFFECTIVE_DATE)
  private LocalDate customEffectiveDate;

  public static final String SERIALIZED_NAME_IS_SKIP_AFTER_SUBMIT_OVERDUE = "isSkipAfterSubmitOverdue";
  @SerializedName(SERIALIZED_NAME_IS_SKIP_AFTER_SUBMIT_OVERDUE)
  private Boolean isSkipAfterSubmitOverdue;

  public static final String SERIALIZED_NAME_SKIPPED_AT = "skippedAt";
  @SerializedName(SERIALIZED_NAME_SKIPPED_AT)
  private Long skippedAt;

  public static final String SERIALIZED_NAME_IS_EDITED = "isEdited";
  @SerializedName(SERIALIZED_NAME_IS_EDITED)
  private Boolean isEdited;

  public CompReviewKeyDates() {
  }

  public CompReviewKeyDates cycleBeginDate(LocalDate cycleBeginDate) {
    
    
    
    
    this.cycleBeginDate = cycleBeginDate;
    return this;
  }

   /**
   * Date on which the comp review cycle begins
   * @return cycleBeginDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date on which the comp review cycle begins")

  public LocalDate getCycleBeginDate() {
    return cycleBeginDate;
  }


  public void setCycleBeginDate(LocalDate cycleBeginDate) {
    
    
    
    this.cycleBeginDate = cycleBeginDate;
  }


  public CompReviewKeyDates levelsSubmitByDate(LocalDate levelsSubmitByDate) {
    
    
    
    
    this.levelsSubmitByDate = levelsSubmitByDate;
    return this;
  }

   /**
   * Date by which all levels should be submitted for approval
   * @return levelsSubmitByDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date by which all levels should be submitted for approval")

  public LocalDate getLevelsSubmitByDate() {
    return levelsSubmitByDate;
  }


  public void setLevelsSubmitByDate(LocalDate levelsSubmitByDate) {
    
    
    
    this.levelsSubmitByDate = levelsSubmitByDate;
  }


  public CompReviewKeyDates finalApprovalDate(LocalDate finalApprovalDate) {
    
    
    
    
    this.finalApprovalDate = finalApprovalDate;
    return this;
  }

   /**
   * Date by which final approval/sign-off will be completed, this is the baseline primary effective date for the comp review
   * @return finalApprovalDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date by which final approval/sign-off will be completed, this is the baseline primary effective date for the comp review")

  public LocalDate getFinalApprovalDate() {
    return finalApprovalDate;
  }


  public void setFinalApprovalDate(LocalDate finalApprovalDate) {
    
    
    
    this.finalApprovalDate = finalApprovalDate;
  }


  public CompReviewKeyDates payrollEffectiveDate(LocalDate payrollEffectiveDate) {
    
    
    
    
    this.payrollEffectiveDate = payrollEffectiveDate;
    return this;
  }

   /**
   * Date on which payroll updates become effective
   * @return payrollEffectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date on which payroll updates become effective")

  public LocalDate getPayrollEffectiveDate() {
    return payrollEffectiveDate;
  }


  public void setPayrollEffectiveDate(LocalDate payrollEffectiveDate) {
    
    
    
    this.payrollEffectiveDate = payrollEffectiveDate;
  }


  public CompReviewKeyDates customEffectiveDate(LocalDate customEffectiveDate) {
    
    
    
    
    this.customEffectiveDate = customEffectiveDate;
    return this;
  }

   /**
   * A custom date to use for the primary data structure
   * @return customEffectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A custom date to use for the primary data structure")

  public LocalDate getCustomEffectiveDate() {
    return customEffectiveDate;
  }


  public void setCustomEffectiveDate(LocalDate customEffectiveDate) {
    
    
    
    this.customEffectiveDate = customEffectiveDate;
  }


  public CompReviewKeyDates isSkipAfterSubmitOverdue(Boolean isSkipAfterSubmitOverdue) {
    
    
    
    
    this.isSkipAfterSubmitOverdue = isSkipAfterSubmitOverdue;
    return this;
  }

   /**
   * Whether to skip approval stages forward after the submit date
   * @return isSkipAfterSubmitOverdue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to skip approval stages forward after the submit date")

  public Boolean getIsSkipAfterSubmitOverdue() {
    return isSkipAfterSubmitOverdue;
  }


  public void setIsSkipAfterSubmitOverdue(Boolean isSkipAfterSubmitOverdue) {
    
    
    
    this.isSkipAfterSubmitOverdue = isSkipAfterSubmitOverdue;
  }


  public CompReviewKeyDates skippedAt(Long skippedAt) {
    
    
    
    
    this.skippedAt = skippedAt;
    return this;
  }

   /**
   * Whether to skip approval stages forward after the submit date
   * @return skippedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to skip approval stages forward after the submit date")

  public Long getSkippedAt() {
    return skippedAt;
  }


  public void setSkippedAt(Long skippedAt) {
    
    
    
    this.skippedAt = skippedAt;
  }


  public CompReviewKeyDates isEdited(Boolean isEdited) {
    
    
    
    
    this.isEdited = isEdited;
    return this;
  }

   /**
   * whether the default config has been modified
   * @return isEdited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether the default config has been modified")

  public Boolean getIsEdited() {
    return isEdited;
  }


  public void setIsEdited(Boolean isEdited) {
    
    
    
    this.isEdited = isEdited;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewKeyDates instance itself
   */
  public CompReviewKeyDates putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewKeyDates compReviewKeyDates = (CompReviewKeyDates) o;
    return Objects.equals(this.cycleBeginDate, compReviewKeyDates.cycleBeginDate) &&
        Objects.equals(this.levelsSubmitByDate, compReviewKeyDates.levelsSubmitByDate) &&
        Objects.equals(this.finalApprovalDate, compReviewKeyDates.finalApprovalDate) &&
        Objects.equals(this.payrollEffectiveDate, compReviewKeyDates.payrollEffectiveDate) &&
        Objects.equals(this.customEffectiveDate, compReviewKeyDates.customEffectiveDate) &&
        Objects.equals(this.isSkipAfterSubmitOverdue, compReviewKeyDates.isSkipAfterSubmitOverdue) &&
        Objects.equals(this.skippedAt, compReviewKeyDates.skippedAt) &&
        Objects.equals(this.isEdited, compReviewKeyDates.isEdited)&&
        Objects.equals(this.additionalProperties, compReviewKeyDates.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cycleBeginDate, levelsSubmitByDate, finalApprovalDate, payrollEffectiveDate, customEffectiveDate, isSkipAfterSubmitOverdue, skippedAt, isEdited, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewKeyDates {\n");
    sb.append("    cycleBeginDate: ").append(toIndentedString(cycleBeginDate)).append("\n");
    sb.append("    levelsSubmitByDate: ").append(toIndentedString(levelsSubmitByDate)).append("\n");
    sb.append("    finalApprovalDate: ").append(toIndentedString(finalApprovalDate)).append("\n");
    sb.append("    payrollEffectiveDate: ").append(toIndentedString(payrollEffectiveDate)).append("\n");
    sb.append("    customEffectiveDate: ").append(toIndentedString(customEffectiveDate)).append("\n");
    sb.append("    isSkipAfterSubmitOverdue: ").append(toIndentedString(isSkipAfterSubmitOverdue)).append("\n");
    sb.append("    skippedAt: ").append(toIndentedString(skippedAt)).append("\n");
    sb.append("    isEdited: ").append(toIndentedString(isEdited)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cycleBeginDate");
    openapiFields.add("levelsSubmitByDate");
    openapiFields.add("finalApprovalDate");
    openapiFields.add("payrollEffectiveDate");
    openapiFields.add("customEffectiveDate");
    openapiFields.add("isSkipAfterSubmitOverdue");
    openapiFields.add("skippedAt");
    openapiFields.add("isEdited");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cycleBeginDate");
    openapiRequiredFields.add("levelsSubmitByDate");
    openapiRequiredFields.add("finalApprovalDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewKeyDates
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewKeyDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewKeyDates is not found in the empty JSON string", CompReviewKeyDates.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewKeyDates.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewKeyDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewKeyDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewKeyDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewKeyDates.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewKeyDates>() {
           @Override
           public void write(JsonWriter out, CompReviewKeyDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewKeyDates read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewKeyDates instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewKeyDates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewKeyDates
  * @throws IOException if the JSON string is invalid with respect to CompReviewKeyDates
  */
  public static CompReviewKeyDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewKeyDates.class);
  }

 /**
  * Convert an instance of CompReviewKeyDates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

