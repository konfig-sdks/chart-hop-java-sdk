/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.CategorySort;
import com.konfigthis.client.model.CompBand;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.CustomerDetails;
import com.konfigthis.client.model.ExchangeRate;
import com.konfigthis.client.model.FeatureAccessOption;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.Form;
import com.konfigthis.client.model.Job;
import com.konfigthis.client.model.Org;
import com.konfigthis.client.model.OrgConfig;
import com.konfigthis.client.model.OrgStockData;
import com.konfigthis.client.model.Person;
import com.konfigthis.client.model.Question;
import com.konfigthis.client.model.Role;
import com.konfigthis.client.model.Scenario;
import com.konfigthis.client.model.User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PreloadResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PreloadResponse {
  public static final String SERIALIZED_NAME_ORG = "org";
  @SerializedName(SERIALIZED_NAME_ORG)
  private Org org;

  public static final String SERIALIZED_NAME_ORGS = "orgs";
  @SerializedName(SERIALIZED_NAME_ORGS)
  private List<Org> orgs = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private Role role;

  public static final String SERIALIZED_NAME_VIEW_USER = "viewUser";
  @SerializedName(SERIALIZED_NAME_VIEW_USER)
  private User viewUser;

  public static final String SERIALIZED_NAME_VIEW_ROLE = "viewRole";
  @SerializedName(SERIALIZED_NAME_VIEW_ROLE)
  private Role viewRole;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<Map<String, Object>> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCENARIOS = "scenarios";
  @SerializedName(SERIALIZED_NAME_SCENARIOS)
  private List<Scenario> scenarios = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<User> users = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<Field> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMS = "forms";
  @SerializedName(SERIALIZED_NAME_FORMS)
  private List<Form> forms = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
  private ExchangeRate exchangeRate;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  private OrgStockData stock;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private Job job;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private Customer customer;

  public static final String SERIALIZED_NAME_CUSTOMER_DETAILS = "customerDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DETAILS)
  private CustomerDetails customerDetails;

  /**
   * Gets or Sets featureAccess
   */
  @JsonAdapter(FeatureAccessEnum.Adapter.class)
 public enum FeatureAccessEnum {
    ATS_SYNC("ATS_SYNC"),
    
    COMPENSATION_REVIEW("COMPENSATION_REVIEW"),
    
    CUSTOM_FIELD("CUSTOM_FIELD"),
    
    CUSTOM_FIELD_READONLY("CUSTOM_FIELD_READONLY"),
    
    CUSTOM_FORM("CUSTOM_FORM"),
    
    CUSTOM_PROFILE_TAB("CUSTOM_PROFILE_TAB"),
    
    CUSTOM_ROLE("CUSTOM_ROLE"),
    
    MULTI_PAYROLL("MULTI_PAYROLL"),
    
    PERFORMANCE_REVIEW("PERFORMANCE_REVIEW"),
    
    REPORT("REPORT"),
    
    REPORT_READONLY("REPORT_READONLY"),
    
    SCENARIO("SCENARIO"),
    
    SURVEY("SURVEY"),
    
    TABLE("TABLE"),
    
    TEMPLATE("TEMPLATE"),
    
    WORKDAY_ADAPTIVE("WORKDAY_ADAPTIVE"),
    
    PAYROLL_OUTBOUND("PAYROLL_OUTBOUND");

    private String value;

    FeatureAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatureAccessEnum fromValue(String value) {
      for (FeatureAccessEnum b : FeatureAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeatureAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatureAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatureAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeatureAccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FEATURE_ACCESS = "featureAccess";
  @SerializedName(SERIALIZED_NAME_FEATURE_ACCESS)
  private List<FeatureAccessEnum> featureAccess = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED_FEATURE_OPTIONS = "enabledFeatureOptions";
  @SerializedName(SERIALIZED_NAME_ENABLED_FEATURE_OPTIONS)
  private List<FeatureAccessOption> enabledFeatureOptions = null;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY_SORT = "categorySort";
  @SerializedName(SERIALIZED_NAME_CATEGORY_SORT)
  private CategorySort categorySort;

  public static final String SERIALIZED_NAME_ORG_CONFIG = "orgConfig";
  @SerializedName(SERIALIZED_NAME_ORG_CONFIG)
  private OrgConfig orgConfig;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<Object> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERSONS = "persons";
  @SerializedName(SERIALIZED_NAME_PERSONS)
  private List<Person> persons = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMP_BANDS = "compBands";
  @SerializedName(SERIALIZED_NAME_COMP_BANDS)
  private List<CompBand> compBands = new ArrayList<>();

  public static final String SERIALIZED_NAME_UI_ACCESS = "uiAccess";
  @SerializedName(SERIALIZED_NAME_UI_ACCESS)
  private Set<String> uiAccess = null;

  public static final String SERIALIZED_NAME_QUESTIONS = "questions";
  @SerializedName(SERIALIZED_NAME_QUESTIONS)
  private List<Question> questions = new ArrayList<>();

  public PreloadResponse() {
  }

  public PreloadResponse org(Org org) {
    
    
    
    
    this.org = org;
    return this;
  }

   /**
   * Get org
   * @return org
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Org getOrg() {
    return org;
  }


  public void setOrg(Org org) {
    
    
    
    this.org = org;
  }


  public PreloadResponse orgs(List<Org> orgs) {
    
    
    
    
    this.orgs = orgs;
    return this;
  }

  public PreloadResponse addOrgsItem(Org orgsItem) {
    this.orgs.add(orgsItem);
    return this;
  }

   /**
   * Get orgs
   * @return orgs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Org> getOrgs() {
    return orgs;
  }


  public void setOrgs(List<Org> orgs) {
    
    
    
    this.orgs = orgs;
  }


  public PreloadResponse user(User user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public User getUser() {
    return user;
  }


  public void setUser(User user) {
    
    
    
    this.user = user;
  }


  public PreloadResponse role(Role role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Role getRole() {
    return role;
  }


  public void setRole(Role role) {
    
    
    
    this.role = role;
  }


  public PreloadResponse viewUser(User viewUser) {
    
    
    
    
    this.viewUser = viewUser;
    return this;
  }

   /**
   * Get viewUser
   * @return viewUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public User getViewUser() {
    return viewUser;
  }


  public void setViewUser(User viewUser) {
    
    
    
    this.viewUser = viewUser;
  }


  public PreloadResponse viewRole(Role viewRole) {
    
    
    
    
    this.viewRole = viewRole;
    return this;
  }

   /**
   * Get viewRole
   * @return viewRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Role getViewRole() {
    return viewRole;
  }


  public void setViewRole(Role viewRole) {
    
    
    
    this.viewRole = viewRole;
  }


  public PreloadResponse groups(List<Map<String, Object>> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public PreloadResponse addGroupsItem(Map<String, Object> groupsItem) {
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Map<String, Object>> getGroups() {
    return groups;
  }


  public void setGroups(List<Map<String, Object>> groups) {
    
    
    
    this.groups = groups;
  }


  public PreloadResponse scenarios(List<Scenario> scenarios) {
    
    
    
    
    this.scenarios = scenarios;
    return this;
  }

  public PreloadResponse addScenariosItem(Scenario scenariosItem) {
    this.scenarios.add(scenariosItem);
    return this;
  }

   /**
   * Get scenarios
   * @return scenarios
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Scenario> getScenarios() {
    return scenarios;
  }


  public void setScenarios(List<Scenario> scenarios) {
    
    
    
    this.scenarios = scenarios;
  }


  public PreloadResponse users(List<User> users) {
    
    
    
    
    this.users = users;
    return this;
  }

  public PreloadResponse addUsersItem(User usersItem) {
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<User> getUsers() {
    return users;
  }


  public void setUsers(List<User> users) {
    
    
    
    this.users = users;
  }


  public PreloadResponse fields(List<Field> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public PreloadResponse addFieldsItem(Field fieldsItem) {
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Field> getFields() {
    return fields;
  }


  public void setFields(List<Field> fields) {
    
    
    
    this.fields = fields;
  }


  public PreloadResponse forms(List<Form> forms) {
    
    
    
    
    this.forms = forms;
    return this;
  }

  public PreloadResponse addFormsItem(Form formsItem) {
    this.forms.add(formsItem);
    return this;
  }

   /**
   * Get forms
   * @return forms
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Form> getForms() {
    return forms;
  }


  public void setForms(List<Form> forms) {
    
    
    
    this.forms = forms;
  }


  public PreloadResponse exchangeRate(ExchangeRate exchangeRate) {
    
    
    
    
    this.exchangeRate = exchangeRate;
    return this;
  }

   /**
   * Get exchangeRate
   * @return exchangeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExchangeRate getExchangeRate() {
    return exchangeRate;
  }


  public void setExchangeRate(ExchangeRate exchangeRate) {
    
    
    
    this.exchangeRate = exchangeRate;
  }


  public PreloadResponse stock(OrgStockData stock) {
    
    
    
    
    this.stock = stock;
    return this;
  }

   /**
   * Get stock
   * @return stock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrgStockData getStock() {
    return stock;
  }


  public void setStock(OrgStockData stock) {
    
    
    
    this.stock = stock;
  }


  public PreloadResponse job(Job job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Job getJob() {
    return job;
  }


  public void setJob(Job job) {
    
    
    
    this.job = job;
  }


  public PreloadResponse customer(Customer customer) {
    
    
    
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Customer getCustomer() {
    return customer;
  }


  public void setCustomer(Customer customer) {
    
    
    
    this.customer = customer;
  }


  public PreloadResponse customerDetails(CustomerDetails customerDetails) {
    
    
    
    
    this.customerDetails = customerDetails;
    return this;
  }

   /**
   * Get customerDetails
   * @return customerDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CustomerDetails getCustomerDetails() {
    return customerDetails;
  }


  public void setCustomerDetails(CustomerDetails customerDetails) {
    
    
    
    this.customerDetails = customerDetails;
  }


  public PreloadResponse featureAccess(List<FeatureAccessEnum> featureAccess) {
    
    
    
    
    this.featureAccess = featureAccess;
    return this;
  }

  public PreloadResponse addFeatureAccessItem(FeatureAccessEnum featureAccessItem) {
    this.featureAccess.add(featureAccessItem);
    return this;
  }

   /**
   * Get featureAccess
   * @return featureAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<FeatureAccessEnum> getFeatureAccess() {
    return featureAccess;
  }


  public void setFeatureAccess(List<FeatureAccessEnum> featureAccess) {
    
    
    
    this.featureAccess = featureAccess;
  }


  public PreloadResponse enabledFeatureOptions(List<FeatureAccessOption> enabledFeatureOptions) {
    
    
    
    
    this.enabledFeatureOptions = enabledFeatureOptions;
    return this;
  }

  public PreloadResponse addEnabledFeatureOptionsItem(FeatureAccessOption enabledFeatureOptionsItem) {
    if (this.enabledFeatureOptions == null) {
      this.enabledFeatureOptions = new ArrayList<>();
    }
    this.enabledFeatureOptions.add(enabledFeatureOptionsItem);
    return this;
  }

   /**
   * Get enabledFeatureOptions
   * @return enabledFeatureOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<FeatureAccessOption> getEnabledFeatureOptions() {
    return enabledFeatureOptions;
  }


  public void setEnabledFeatureOptions(List<FeatureAccessOption> enabledFeatureOptions) {
    
    
    
    this.enabledFeatureOptions = enabledFeatureOptions;
  }


  public PreloadResponse categories(List<Category> categories) {
    
    
    
    
    this.categories = categories;
    return this;
  }

  public PreloadResponse addCategoriesItem(Category categoriesItem) {
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Category> getCategories() {
    return categories;
  }


  public void setCategories(List<Category> categories) {
    
    
    
    this.categories = categories;
  }


  public PreloadResponse categorySort(CategorySort categorySort) {
    
    
    
    
    this.categorySort = categorySort;
    return this;
  }

   /**
   * Get categorySort
   * @return categorySort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CategorySort getCategorySort() {
    return categorySort;
  }


  public void setCategorySort(CategorySort categorySort) {
    
    
    
    this.categorySort = categorySort;
  }


  public PreloadResponse orgConfig(OrgConfig orgConfig) {
    
    
    
    
    this.orgConfig = orgConfig;
    return this;
  }

   /**
   * Get orgConfig
   * @return orgConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrgConfig getOrgConfig() {
    return orgConfig;
  }


  public void setOrgConfig(OrgConfig orgConfig) {
    
    
    
    this.orgConfig = orgConfig;
  }


  public PreloadResponse jobs(List<Object> jobs) {
    
    
    
    
    this.jobs = jobs;
    return this;
  }

  public PreloadResponse addJobsItem(Object jobsItem) {
    this.jobs.add(jobsItem);
    return this;
  }

   /**
   * Get jobs
   * @return jobs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getJobs() {
    return jobs;
  }


  public void setJobs(List<Object> jobs) {
    
    
    
    this.jobs = jobs;
  }


  public PreloadResponse persons(List<Person> persons) {
    
    
    
    
    this.persons = persons;
    return this;
  }

  public PreloadResponse addPersonsItem(Person personsItem) {
    this.persons.add(personsItem);
    return this;
  }

   /**
   * Get persons
   * @return persons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Person> getPersons() {
    return persons;
  }


  public void setPersons(List<Person> persons) {
    
    
    
    this.persons = persons;
  }


  public PreloadResponse compBands(List<CompBand> compBands) {
    
    
    
    
    this.compBands = compBands;
    return this;
  }

  public PreloadResponse addCompBandsItem(CompBand compBandsItem) {
    this.compBands.add(compBandsItem);
    return this;
  }

   /**
   * Get compBands
   * @return compBands
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<CompBand> getCompBands() {
    return compBands;
  }


  public void setCompBands(List<CompBand> compBands) {
    
    
    
    this.compBands = compBands;
  }


  public PreloadResponse uiAccess(Set<String> uiAccess) {
    
    
    
    
    this.uiAccess = uiAccess;
    return this;
  }

  public PreloadResponse addUiAccessItem(String uiAccessItem) {
    if (this.uiAccess == null) {
      this.uiAccess = new LinkedHashSet<>();
    }
    this.uiAccess.add(uiAccessItem);
    return this;
  }

   /**
   * Get uiAccess
   * @return uiAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<String> getUiAccess() {
    return uiAccess;
  }


  public void setUiAccess(Set<String> uiAccess) {
    
    
    
    this.uiAccess = uiAccess;
  }


  public PreloadResponse questions(List<Question> questions) {
    
    
    
    
    this.questions = questions;
    return this;
  }

  public PreloadResponse addQuestionsItem(Question questionsItem) {
    this.questions.add(questionsItem);
    return this;
  }

   /**
   * Get questions
   * @return questions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Question> getQuestions() {
    return questions;
  }


  public void setQuestions(List<Question> questions) {
    
    
    
    this.questions = questions;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PreloadResponse instance itself
   */
  public PreloadResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PreloadResponse preloadResponse = (PreloadResponse) o;
    return Objects.equals(this.org, preloadResponse.org) &&
        Objects.equals(this.orgs, preloadResponse.orgs) &&
        Objects.equals(this.user, preloadResponse.user) &&
        Objects.equals(this.role, preloadResponse.role) &&
        Objects.equals(this.viewUser, preloadResponse.viewUser) &&
        Objects.equals(this.viewRole, preloadResponse.viewRole) &&
        Objects.equals(this.groups, preloadResponse.groups) &&
        Objects.equals(this.scenarios, preloadResponse.scenarios) &&
        Objects.equals(this.users, preloadResponse.users) &&
        Objects.equals(this.fields, preloadResponse.fields) &&
        Objects.equals(this.forms, preloadResponse.forms) &&
        Objects.equals(this.exchangeRate, preloadResponse.exchangeRate) &&
        Objects.equals(this.stock, preloadResponse.stock) &&
        Objects.equals(this.job, preloadResponse.job) &&
        Objects.equals(this.customer, preloadResponse.customer) &&
        Objects.equals(this.customerDetails, preloadResponse.customerDetails) &&
        Objects.equals(this.featureAccess, preloadResponse.featureAccess) &&
        Objects.equals(this.enabledFeatureOptions, preloadResponse.enabledFeatureOptions) &&
        Objects.equals(this.categories, preloadResponse.categories) &&
        Objects.equals(this.categorySort, preloadResponse.categorySort) &&
        Objects.equals(this.orgConfig, preloadResponse.orgConfig) &&
        Objects.equals(this.jobs, preloadResponse.jobs) &&
        Objects.equals(this.persons, preloadResponse.persons) &&
        Objects.equals(this.compBands, preloadResponse.compBands) &&
        Objects.equals(this.uiAccess, preloadResponse.uiAccess) &&
        Objects.equals(this.questions, preloadResponse.questions)&&
        Objects.equals(this.additionalProperties, preloadResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(org, orgs, user, role, viewUser, viewRole, groups, scenarios, users, fields, forms, exchangeRate, stock, job, customer, customerDetails, featureAccess, enabledFeatureOptions, categories, categorySort, orgConfig, jobs, persons, compBands, uiAccess, questions, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PreloadResponse {\n");
    sb.append("    org: ").append(toIndentedString(org)).append("\n");
    sb.append("    orgs: ").append(toIndentedString(orgs)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    viewUser: ").append(toIndentedString(viewUser)).append("\n");
    sb.append("    viewRole: ").append(toIndentedString(viewRole)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    scenarios: ").append(toIndentedString(scenarios)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    forms: ").append(toIndentedString(forms)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    customerDetails: ").append(toIndentedString(customerDetails)).append("\n");
    sb.append("    featureAccess: ").append(toIndentedString(featureAccess)).append("\n");
    sb.append("    enabledFeatureOptions: ").append(toIndentedString(enabledFeatureOptions)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    categorySort: ").append(toIndentedString(categorySort)).append("\n");
    sb.append("    orgConfig: ").append(toIndentedString(orgConfig)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    persons: ").append(toIndentedString(persons)).append("\n");
    sb.append("    compBands: ").append(toIndentedString(compBands)).append("\n");
    sb.append("    uiAccess: ").append(toIndentedString(uiAccess)).append("\n");
    sb.append("    questions: ").append(toIndentedString(questions)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("org");
    openapiFields.add("orgs");
    openapiFields.add("user");
    openapiFields.add("role");
    openapiFields.add("viewUser");
    openapiFields.add("viewRole");
    openapiFields.add("groups");
    openapiFields.add("scenarios");
    openapiFields.add("users");
    openapiFields.add("fields");
    openapiFields.add("forms");
    openapiFields.add("exchangeRate");
    openapiFields.add("stock");
    openapiFields.add("job");
    openapiFields.add("customer");
    openapiFields.add("customerDetails");
    openapiFields.add("featureAccess");
    openapiFields.add("enabledFeatureOptions");
    openapiFields.add("categories");
    openapiFields.add("categorySort");
    openapiFields.add("orgConfig");
    openapiFields.add("jobs");
    openapiFields.add("persons");
    openapiFields.add("compBands");
    openapiFields.add("uiAccess");
    openapiFields.add("questions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("org");
    openapiRequiredFields.add("orgs");
    openapiRequiredFields.add("user");
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("scenarios");
    openapiRequiredFields.add("users");
    openapiRequiredFields.add("fields");
    openapiRequiredFields.add("forms");
    openapiRequiredFields.add("featureAccess");
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("jobs");
    openapiRequiredFields.add("persons");
    openapiRequiredFields.add("compBands");
    openapiRequiredFields.add("questions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PreloadResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PreloadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PreloadResponse is not found in the empty JSON string", PreloadResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PreloadResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `org`
      Org.validateJsonObject(jsonObj.getAsJsonObject("org"));
      // ensure the json data is an array
      if (!jsonObj.get("orgs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgs` to be an array in the JSON string but got `%s`", jsonObj.get("orgs").toString()));
      }

      JsonArray jsonArrayorgs = jsonObj.getAsJsonArray("orgs");
      // validate the required field `orgs` (array)
      for (int i = 0; i < jsonArrayorgs.size(); i++) {
        Org.validateJsonObject(jsonArrayorgs.get(i).getAsJsonObject());
      };
      // validate the required field `user`
      User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        Role.validateJsonObject(jsonObj.getAsJsonObject("role"));
      }
      // validate the optional field `viewUser`
      if (jsonObj.get("viewUser") != null && !jsonObj.get("viewUser").isJsonNull()) {
        User.validateJsonObject(jsonObj.getAsJsonObject("viewUser"));
      }
      // validate the optional field `viewRole`
      if (jsonObj.get("viewRole") != null && !jsonObj.get("viewRole").isJsonNull()) {
        Role.validateJsonObject(jsonObj.getAsJsonObject("viewRole"));
      }
      // ensure the required json array is present
      if (jsonObj.get("groups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("scenarios").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarios` to be an array in the JSON string but got `%s`", jsonObj.get("scenarios").toString()));
      }

      JsonArray jsonArrayscenarios = jsonObj.getAsJsonArray("scenarios");
      // validate the required field `scenarios` (array)
      for (int i = 0; i < jsonArrayscenarios.size(); i++) {
        Scenario.validateJsonObject(jsonArrayscenarios.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }

      JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
      // validate the required field `users` (array)
      for (int i = 0; i < jsonArrayusers.size(); i++) {
        User.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }

      JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
      // validate the required field `fields` (array)
      for (int i = 0; i < jsonArrayfields.size(); i++) {
        Field.validateJsonObject(jsonArrayfields.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("forms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forms` to be an array in the JSON string but got `%s`", jsonObj.get("forms").toString()));
      }

      JsonArray jsonArrayforms = jsonObj.getAsJsonArray("forms");
      // validate the required field `forms` (array)
      for (int i = 0; i < jsonArrayforms.size(); i++) {
        Form.validateJsonObject(jsonArrayforms.get(i).getAsJsonObject());
      };
      // validate the optional field `exchangeRate`
      if (jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull()) {
        ExchangeRate.validateJsonObject(jsonObj.getAsJsonObject("exchangeRate"));
      }
      // validate the optional field `stock`
      if (jsonObj.get("stock") != null && !jsonObj.get("stock").isJsonNull()) {
        OrgStockData.validateJsonObject(jsonObj.getAsJsonObject("stock"));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        Job.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        Customer.validateJsonObject(jsonObj.getAsJsonObject("customer"));
      }
      // validate the optional field `customerDetails`
      if (jsonObj.get("customerDetails") != null && !jsonObj.get("customerDetails").isJsonNull()) {
        CustomerDetails.validateJsonObject(jsonObj.getAsJsonObject("customerDetails"));
      }
      // ensure the required json array is present
      if (jsonObj.get("featureAccess") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("featureAccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureAccess` to be an array in the JSON string but got `%s`", jsonObj.get("featureAccess").toString()));
      }
      if (jsonObj.get("enabledFeatureOptions") != null && !jsonObj.get("enabledFeatureOptions").isJsonNull()) {
        JsonArray jsonArrayenabledFeatureOptions = jsonObj.getAsJsonArray("enabledFeatureOptions");
        if (jsonArrayenabledFeatureOptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enabledFeatureOptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enabledFeatureOptions` to be an array in the JSON string but got `%s`", jsonObj.get("enabledFeatureOptions").toString()));
          }

          // validate the optional field `enabledFeatureOptions` (array)
          for (int i = 0; i < jsonArrayenabledFeatureOptions.size(); i++) {
            FeatureAccessOption.validateJsonObject(jsonArrayenabledFeatureOptions.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }

      JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
      // validate the required field `categories` (array)
      for (int i = 0; i < jsonArraycategories.size(); i++) {
        Category.validateJsonObject(jsonArraycategories.get(i).getAsJsonObject());
      };
      // validate the optional field `categorySort`
      if (jsonObj.get("categorySort") != null && !jsonObj.get("categorySort").isJsonNull()) {
        CategorySort.validateJsonObject(jsonObj.getAsJsonObject("categorySort"));
      }
      // validate the optional field `orgConfig`
      if (jsonObj.get("orgConfig") != null && !jsonObj.get("orgConfig").isJsonNull()) {
        OrgConfig.validateJsonObject(jsonObj.getAsJsonObject("orgConfig"));
      }
      // ensure the required json array is present
      if (jsonObj.get("jobs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("jobs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("persons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `persons` to be an array in the JSON string but got `%s`", jsonObj.get("persons").toString()));
      }

      JsonArray jsonArraypersons = jsonObj.getAsJsonArray("persons");
      // validate the required field `persons` (array)
      for (int i = 0; i < jsonArraypersons.size(); i++) {
        Person.validateJsonObject(jsonArraypersons.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("compBands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compBands` to be an array in the JSON string but got `%s`", jsonObj.get("compBands").toString()));
      }

      JsonArray jsonArraycompBands = jsonObj.getAsJsonArray("compBands");
      // validate the required field `compBands` (array)
      for (int i = 0; i < jsonArraycompBands.size(); i++) {
        CompBand.validateJsonObject(jsonArraycompBands.get(i).getAsJsonObject());
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("uiAccess") != null && !jsonObj.get("uiAccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiAccess` to be an array in the JSON string but got `%s`", jsonObj.get("uiAccess").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("questions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `questions` to be an array in the JSON string but got `%s`", jsonObj.get("questions").toString()));
      }

      JsonArray jsonArrayquestions = jsonObj.getAsJsonArray("questions");
      // validate the required field `questions` (array)
      for (int i = 0; i < jsonArrayquestions.size(); i++) {
        Question.validateJsonObject(jsonArrayquestions.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PreloadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PreloadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PreloadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PreloadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PreloadResponse>() {
           @Override
           public void write(JsonWriter out, PreloadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PreloadResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PreloadResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PreloadResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PreloadResponse
  * @throws IOException if the JSON string is invalid with respect to PreloadResponse
  */
  public static PreloadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PreloadResponse.class);
  }

 /**
  * Convert an instance of PreloadResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

