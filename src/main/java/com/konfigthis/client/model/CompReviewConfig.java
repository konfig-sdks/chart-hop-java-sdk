/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CompReviewBudgets;
import com.konfigthis.client.model.CompReviewCollaborators;
import com.konfigthis.client.model.CompReviewEligibleEmployees;
import com.konfigthis.client.model.CompReviewKeyDates;
import com.konfigthis.client.model.CompReviewNotifications;
import com.konfigthis.client.model.CompReviewReviewerWorkbook;
import com.konfigthis.client.model.CompReviewReviewersApprovers;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewConfig
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewConfig {
  public static final String SERIALIZED_NAME_KEY_DATES = "keyDates";
  @SerializedName(SERIALIZED_NAME_KEY_DATES)
  private CompReviewKeyDates keyDates;

  public static final String SERIALIZED_NAME_ELIGIBLE_EMPLOYEES = "eligibleEmployees";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_EMPLOYEES)
  private CompReviewEligibleEmployees eligibleEmployees;

  public static final String SERIALIZED_NAME_REVIEWERS_AND_APPROVERS = "reviewersAndApprovers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS_AND_APPROVERS)
  private CompReviewReviewersApprovers reviewersAndApprovers;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private CompReviewCollaborators collaborators;

  public static final String SERIALIZED_NAME_REVIEWER_WORKBOOK = "reviewerWorkbook";
  @SerializedName(SERIALIZED_NAME_REVIEWER_WORKBOOK)
  private CompReviewReviewerWorkbook reviewerWorkbook;

  public static final String SERIALIZED_NAME_BUDGETS = "budgets";
  @SerializedName(SERIALIZED_NAME_BUDGETS)
  private CompReviewBudgets budgets;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private CompReviewNotifications notifications;

  public static final String SERIALIZED_NAME_REASSIGNMENTS = "reassignments";
  @SerializedName(SERIALIZED_NAME_REASSIGNMENTS)
  private Map<String, Set<String>> reassignments = null;

  public CompReviewConfig() {
  }

  public CompReviewConfig keyDates(CompReviewKeyDates keyDates) {
    
    
    
    
    this.keyDates = keyDates;
    return this;
  }

   /**
   * Get keyDates
   * @return keyDates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompReviewKeyDates getKeyDates() {
    return keyDates;
  }


  public void setKeyDates(CompReviewKeyDates keyDates) {
    
    
    
    this.keyDates = keyDates;
  }


  public CompReviewConfig eligibleEmployees(CompReviewEligibleEmployees eligibleEmployees) {
    
    
    
    
    this.eligibleEmployees = eligibleEmployees;
    return this;
  }

   /**
   * Get eligibleEmployees
   * @return eligibleEmployees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompReviewEligibleEmployees getEligibleEmployees() {
    return eligibleEmployees;
  }


  public void setEligibleEmployees(CompReviewEligibleEmployees eligibleEmployees) {
    
    
    
    this.eligibleEmployees = eligibleEmployees;
  }


  public CompReviewConfig reviewersAndApprovers(CompReviewReviewersApprovers reviewersAndApprovers) {
    
    
    
    
    this.reviewersAndApprovers = reviewersAndApprovers;
    return this;
  }

   /**
   * Get reviewersAndApprovers
   * @return reviewersAndApprovers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompReviewReviewersApprovers getReviewersAndApprovers() {
    return reviewersAndApprovers;
  }


  public void setReviewersAndApprovers(CompReviewReviewersApprovers reviewersAndApprovers) {
    
    
    
    this.reviewersAndApprovers = reviewersAndApprovers;
  }


  public CompReviewConfig collaborators(CompReviewCollaborators collaborators) {
    
    
    
    
    this.collaborators = collaborators;
    return this;
  }

   /**
   * Get collaborators
   * @return collaborators
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompReviewCollaborators getCollaborators() {
    return collaborators;
  }


  public void setCollaborators(CompReviewCollaborators collaborators) {
    
    
    
    this.collaborators = collaborators;
  }


  public CompReviewConfig reviewerWorkbook(CompReviewReviewerWorkbook reviewerWorkbook) {
    
    
    
    
    this.reviewerWorkbook = reviewerWorkbook;
    return this;
  }

   /**
   * Get reviewerWorkbook
   * @return reviewerWorkbook
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CompReviewReviewerWorkbook getReviewerWorkbook() {
    return reviewerWorkbook;
  }


  public void setReviewerWorkbook(CompReviewReviewerWorkbook reviewerWorkbook) {
    
    
    
    this.reviewerWorkbook = reviewerWorkbook;
  }


  public CompReviewConfig budgets(CompReviewBudgets budgets) {
    
    
    
    
    this.budgets = budgets;
    return this;
  }

   /**
   * Get budgets
   * @return budgets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompReviewBudgets getBudgets() {
    return budgets;
  }


  public void setBudgets(CompReviewBudgets budgets) {
    
    
    
    this.budgets = budgets;
  }


  public CompReviewConfig notifications(CompReviewNotifications notifications) {
    
    
    
    
    this.notifications = notifications;
    return this;
  }

   /**
   * Get notifications
   * @return notifications
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompReviewNotifications getNotifications() {
    return notifications;
  }


  public void setNotifications(CompReviewNotifications notifications) {
    
    
    
    this.notifications = notifications;
  }


  public CompReviewConfig reassignments(Map<String, Set<String>> reassignments) {
    
    
    
    
    this.reassignments = reassignments;
    return this;
  }

  public CompReviewConfig putReassignmentsItem(String key, Set<String> reassignmentsItem) {
    if (this.reassignments == null) {
      this.reassignments = new HashMap<>();
    }
    this.reassignments.put(key, reassignmentsItem);
    return this;
  }

   /**
   * Employees that have been reassigned for this cycle (manager to employee set)
   * @return reassignments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employees that have been reassigned for this cycle (manager to employee set)")

  public Map<String, Set<String>> getReassignments() {
    return reassignments;
  }


  public void setReassignments(Map<String, Set<String>> reassignments) {
    
    
    
    this.reassignments = reassignments;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewConfig instance itself
   */
  public CompReviewConfig putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewConfig compReviewConfig = (CompReviewConfig) o;
    return Objects.equals(this.keyDates, compReviewConfig.keyDates) &&
        Objects.equals(this.eligibleEmployees, compReviewConfig.eligibleEmployees) &&
        Objects.equals(this.reviewersAndApprovers, compReviewConfig.reviewersAndApprovers) &&
        Objects.equals(this.collaborators, compReviewConfig.collaborators) &&
        Objects.equals(this.reviewerWorkbook, compReviewConfig.reviewerWorkbook) &&
        Objects.equals(this.budgets, compReviewConfig.budgets) &&
        Objects.equals(this.notifications, compReviewConfig.notifications) &&
        Objects.equals(this.reassignments, compReviewConfig.reassignments)&&
        Objects.equals(this.additionalProperties, compReviewConfig.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyDates, eligibleEmployees, reviewersAndApprovers, collaborators, reviewerWorkbook, budgets, notifications, reassignments, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewConfig {\n");
    sb.append("    keyDates: ").append(toIndentedString(keyDates)).append("\n");
    sb.append("    eligibleEmployees: ").append(toIndentedString(eligibleEmployees)).append("\n");
    sb.append("    reviewersAndApprovers: ").append(toIndentedString(reviewersAndApprovers)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    reviewerWorkbook: ").append(toIndentedString(reviewerWorkbook)).append("\n");
    sb.append("    budgets: ").append(toIndentedString(budgets)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    reassignments: ").append(toIndentedString(reassignments)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyDates");
    openapiFields.add("eligibleEmployees");
    openapiFields.add("reviewersAndApprovers");
    openapiFields.add("collaborators");
    openapiFields.add("reviewerWorkbook");
    openapiFields.add("budgets");
    openapiFields.add("notifications");
    openapiFields.add("reassignments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyDates");
    openapiRequiredFields.add("eligibleEmployees");
    openapiRequiredFields.add("reviewersAndApprovers");
    openapiRequiredFields.add("collaborators");
    openapiRequiredFields.add("reviewerWorkbook");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewConfig is not found in the empty JSON string", CompReviewConfig.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewConfig.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `keyDates`
      CompReviewKeyDates.validateJsonObject(jsonObj.getAsJsonObject("keyDates"));
      // validate the required field `eligibleEmployees`
      CompReviewEligibleEmployees.validateJsonObject(jsonObj.getAsJsonObject("eligibleEmployees"));
      // validate the required field `reviewersAndApprovers`
      CompReviewReviewersApprovers.validateJsonObject(jsonObj.getAsJsonObject("reviewersAndApprovers"));
      // validate the required field `collaborators`
      CompReviewCollaborators.validateJsonObject(jsonObj.getAsJsonObject("collaborators"));
      // validate the required field `reviewerWorkbook`
      CompReviewReviewerWorkbook.validateJsonObject(jsonObj.getAsJsonObject("reviewerWorkbook"));
      // validate the optional field `budgets`
      if (jsonObj.get("budgets") != null && !jsonObj.get("budgets").isJsonNull()) {
        CompReviewBudgets.validateJsonObject(jsonObj.getAsJsonObject("budgets"));
      }
      // validate the optional field `notifications`
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        CompReviewNotifications.validateJsonObject(jsonObj.getAsJsonObject("notifications"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewConfig>() {
           @Override
           public void write(JsonWriter out, CompReviewConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewConfig instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewConfig
  * @throws IOException if the JSON string is invalid with respect to CompReviewConfig
  */
  public static CompReviewConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewConfig.class);
  }

 /**
  * Convert an instance of CompReviewConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

