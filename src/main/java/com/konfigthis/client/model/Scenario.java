/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CostImpact;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.ScenarioSharedViewConfig;
import com.konfigthis.client.model.ShareAccess;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Scenario
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Scenario {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  /**
   * status of scenario
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    OPEN("OPEN"),
    
    INACTIVE("INACTIVE"),
    
    MERGED("MERGED"),
    
    DRAFT("DRAFT"),
    
    ARCHIVED("ARCHIVED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SHARE_ACCESS = "shareAccess";
  @SerializedName(SERIALIZED_NAME_SHARE_ACCESS)
  private List<ShareAccess> shareAccess = new ArrayList<>();

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private CostImpact cost;

  public static final String SERIALIZED_NAME_CHANGE_COUNT = "changeCount";
  @SerializedName(SERIALIZED_NAME_CHANGE_COUNT)
  private Integer changeCount;

  public static final String SERIALIZED_NAME_CHANGE_COUNTS = "changeCounts";
  @SerializedName(SERIALIZED_NAME_CHANGE_COUNTS)
  private Map<String, Integer> changeCounts = null;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public static final String SERIALIZED_NAME_MERGE_ID = "mergeId";
  @SerializedName(SERIALIZED_NAME_MERGE_ID)
  private String mergeId;

  public static final String SERIALIZED_NAME_MERGE_AT = "mergeAt";
  @SerializedName(SERIALIZED_NAME_MERGE_AT)
  private String mergeAt;

  public static final String SERIALIZED_NAME_CALC_START_AT = "calcStartAt";
  @SerializedName(SERIALIZED_NAME_CALC_START_AT)
  private String calcStartAt;

  public static final String SERIALIZED_NAME_CALC_END_AT = "calcEndAt";
  @SerializedName(SERIALIZED_NAME_CALC_END_AT)
  private String calcEndAt;

  public static final String SERIALIZED_NAME_CHANGE_AT = "changeAt";
  @SerializedName(SERIALIZED_NAME_CHANGE_AT)
  private String changeAt;

  public static final String SERIALIZED_NAME_CHANGE_ID = "changeId";
  @SerializedName(SERIALIZED_NAME_CHANGE_ID)
  private String changeId;

  /**
   * Type of scenario to be created
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    GENERAL("GENERAL"),
    
    COMP("COMP"),
    
    PROMOTION("PROMOTION"),
    
    TERMINATE("TERMINATE"),
    
    CREATE_JOB("CREATE_JOB"),
    
    UPDATE_JOB("UPDATE_JOB"),
    
    BUDGET("BUDGET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * whether or not the start date should stay fixed in time, or update to today&#39;s date as time passes
   */
  @JsonAdapter(StartDateFixedEnum.Adapter.class)
 public enum StartDateFixedEnum {
    FIXED("FIXED"),
    
    TODAY("TODAY");

    private String value;

    StartDateFixedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StartDateFixedEnum fromValue(String value) {
      for (StartDateFixedEnum b : StartDateFixedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StartDateFixedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StartDateFixedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StartDateFixedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StartDateFixedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_START_DATE_FIXED = "startDateFixed";
  @SerializedName(SERIALIZED_NAME_START_DATE_FIXED)
  private StartDateFixedEnum startDateFixed;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_VALID_JOB_ID_SET = "validJobIdSet";
  @SerializedName(SERIALIZED_NAME_VALID_JOB_ID_SET)
  private Set<String> validJobIdSet = null;

  public static final String SERIALIZED_NAME_APPROVAL_REQUEST_ID = "approvalRequestId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_REQUEST_ID)
  private String approvalRequestId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  /**
   * The type of entity associated with this scenario
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
 public enum EntityTypeEnum {
    COMP_REVIEW("COMP_REVIEW");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_SHARED_VIEW_CONFIG = "sharedViewConfig";
  @SerializedName(SERIALIZED_NAME_SHARED_VIEW_CONFIG)
  private Set<ScenarioSharedViewConfig> sharedViewConfig = null;

  public static final String SERIALIZED_NAME_BUDGET = "budget";
  @SerializedName(SERIALIZED_NAME_BUDGET)
  private Money budget;

  public static final String SERIALIZED_NAME_COST_CALC = "costCalc";
  @SerializedName(SERIALIZED_NAME_COST_CALC)
  private String costCalc;

  public Scenario() {
  }

  public Scenario description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * scenario description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Q4 Conservative Plan", value = "scenario description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Scenario id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Scenario orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public Scenario name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * scenario name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Q4 Conservative Plan", required = true, value = "scenario name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Scenario startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * date that this scenario diverges from primary
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-15", required = true, value = "date that this scenario diverges from primary")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Scenario status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of scenario
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "status of scenario")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Scenario shareAccess(List<ShareAccess> shareAccess) {
    
    
    
    
    this.shareAccess = shareAccess;
    return this;
  }

  public Scenario addShareAccessItem(ShareAccess shareAccessItem) {
    this.shareAccess.add(shareAccessItem);
    return this;
  }

   /**
   * users who are specifically granted permission to this scenario
   * @return shareAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "users who are specifically granted permission to this scenario")

  public List<ShareAccess> getShareAccess() {
    return shareAccess;
  }


  public void setShareAccess(List<ShareAccess> shareAccess) {
    
    
    
    this.shareAccess = shareAccess;
  }


  public Scenario cost(CostImpact cost) {
    
    
    
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CostImpact getCost() {
    return cost;
  }


  public void setCost(CostImpact cost) {
    
    
    
    this.cost = cost;
  }


  public Scenario changeCount(Integer changeCount) {
    
    
    
    
    this.changeCount = changeCount;
    return this;
  }

   /**
   * number of changes contained in scenario
   * @return changeCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of changes contained in scenario")

  public Integer getChangeCount() {
    return changeCount;
  }


  public void setChangeCount(Integer changeCount) {
    
    
    
    this.changeCount = changeCount;
  }


  public Scenario changeCounts(Map<String, Integer> changeCounts) {
    
    
    
    
    this.changeCounts = changeCounts;
    return this;
  }

  public Scenario putChangeCountsItem(String key, Integer changeCountsItem) {
    if (this.changeCounts == null) {
      this.changeCounts = new HashMap<>();
    }
    this.changeCounts.put(key, changeCountsItem);
    return this;
  }

   /**
   * number of changes of each type contained in scenario
   * @return changeCounts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of changes of each type contained in scenario")

  public Map<String, Integer> getChangeCounts() {
    return changeCounts;
  }


  public void setChangeCounts(Map<String, Integer> changeCounts) {
    
    
    
    this.changeCounts = changeCounts;
  }


  public Scenario createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public Scenario createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", required = true, value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public Scenario updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * last updated by user id
   * @return updateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "last updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public Scenario updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * last updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", required = true, value = "last updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public Scenario deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public Scenario deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }


  public Scenario mergeId(String mergeId) {
    
    
    
    
    this.mergeId = mergeId;
    return this;
  }

   /**
   * merged by user id
   * @return mergeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "merged by user id")

  public String getMergeId() {
    return mergeId;
  }


  public void setMergeId(String mergeId) {
    
    
    
    this.mergeId = mergeId;
  }


  public Scenario mergeAt(String mergeAt) {
    
    
    
    
    this.mergeAt = mergeAt;
    return this;
  }

   /**
   * merged timestamp
   * @return mergeAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "merged timestamp")

  public String getMergeAt() {
    return mergeAt;
  }


  public void setMergeAt(String mergeAt) {
    
    
    
    this.mergeAt = mergeAt;
  }


  public Scenario calcStartAt(String calcStartAt) {
    
    
    
    
    this.calcStartAt = calcStartAt;
    return this;
  }

   /**
   * most recent summary calculation started at timestamp
   * @return calcStartAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "most recent summary calculation started at timestamp")

  public String getCalcStartAt() {
    return calcStartAt;
  }


  public void setCalcStartAt(String calcStartAt) {
    
    
    
    this.calcStartAt = calcStartAt;
  }


  public Scenario calcEndAt(String calcEndAt) {
    
    
    
    
    this.calcEndAt = calcEndAt;
    return this;
  }

   /**
   * most recent summary calculation ended at timestamp
   * @return calcEndAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "most recent summary calculation ended at timestamp")

  public String getCalcEndAt() {
    return calcEndAt;
  }


  public void setCalcEndAt(String calcEndAt) {
    
    
    
    this.calcEndAt = calcEndAt;
  }


  public Scenario changeAt(String changeAt) {
    
    
    
    
    this.changeAt = changeAt;
    return this;
  }

   /**
   * timestamp of most recent changes made to scenario
   * @return changeAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "timestamp of most recent changes made to scenario")

  public String getChangeAt() {
    return changeAt;
  }


  public void setChangeAt(String changeAt) {
    
    
    
    this.changeAt = changeAt;
  }


  public Scenario changeId(String changeId) {
    
    
    
    
    this.changeId = changeId;
    return this;
  }

   /**
   * user who made the most recent change to scenario
   * @return changeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "user who made the most recent change to scenario")

  public String getChangeId() {
    return changeId;
  }


  public void setChangeId(String changeId) {
    
    
    
    this.changeId = changeId;
  }


  public Scenario type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of scenario to be created
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of scenario to be created")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Scenario startDateFixed(StartDateFixedEnum startDateFixed) {
    
    
    
    
    this.startDateFixed = startDateFixed;
    return this;
  }

   /**
   * whether or not the start date should stay fixed in time, or update to today&#39;s date as time passes
   * @return startDateFixed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether or not the start date should stay fixed in time, or update to today's date as time passes")

  public StartDateFixedEnum getStartDateFixed() {
    return startDateFixed;
  }


  public void setStartDateFixed(StartDateFixedEnum startDateFixed) {
    
    
    
    this.startDateFixed = startDateFixed;
  }


  public Scenario query(String query) {
    
    
    
    
    this.query = query;
    return this;
  }

   /**
   * Query for selecting which people/jobs are initially included in the scenario (only applies to promotion scenarios)
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Query for selecting which people/jobs are initially included in the scenario (only applies to promotion scenarios)")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    
    
    
    this.query = query;
  }


  public Scenario validJobIdSet(Set<String> validJobIdSet) {
    
    
    
    
    this.validJobIdSet = validJobIdSet;
    return this;
  }

  public Scenario addValidJobIdSetItem(String validJobIdSetItem) {
    if (this.validJobIdSet == null) {
      this.validJobIdSet = new LinkedHashSet<>();
    }
    this.validJobIdSet.add(validJobIdSetItem);
    return this;
  }

   /**
   * This scenario changes are restricted to the following jobIds
   * @return validJobIdSet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This scenario changes are restricted to the following jobIds")

  public Set<String> getValidJobIdSet() {
    return validJobIdSet;
  }


  public void setValidJobIdSet(Set<String> validJobIdSet) {
    
    
    
    this.validJobIdSet = validJobIdSet;
  }


  public Scenario approvalRequestId(String approvalRequestId) {
    
    
    
    
    this.approvalRequestId = approvalRequestId;
    return this;
  }

   /**
   * Approval request id, if the scenario has been submitted for approval
   * @return approvalRequestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Approval request id, if the scenario has been submitted for approval")

  public String getApprovalRequestId() {
    return approvalRequestId;
  }


  public void setApprovalRequestId(String approvalRequestId) {
    
    
    
    this.approvalRequestId = approvalRequestId;
  }


  public Scenario entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * The entity this scenario is associated with
   * @return entityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The entity this scenario is associated with")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public Scenario entityType(EntityTypeEnum entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * The type of entity associated with this scenario
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of entity associated with this scenario")

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityTypeEnum entityType) {
    
    
    
    this.entityType = entityType;
  }


  public Scenario sharedViewConfig(Set<ScenarioSharedViewConfig> sharedViewConfig) {
    
    
    
    
    this.sharedViewConfig = sharedViewConfig;
    return this;
  }

  public Scenario addSharedViewConfigItem(ScenarioSharedViewConfig sharedViewConfigItem) {
    if (this.sharedViewConfig == null) {
      this.sharedViewConfig = new LinkedHashSet<>();
    }
    this.sharedViewConfig.add(sharedViewConfigItem);
    return this;
  }

   /**
   * View configurations associated with this scenario
   * @return sharedViewConfig
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "View configurations associated with this scenario")

  public Set<ScenarioSharedViewConfig> getSharedViewConfig() {
    return sharedViewConfig;
  }


  public void setSharedViewConfig(Set<ScenarioSharedViewConfig> sharedViewConfig) {
    
    
    
    this.sharedViewConfig = sharedViewConfig;
  }


  public Scenario budget(Money budget) {
    
    
    
    
    this.budget = budget;
    return this;
  }

   /**
   * Get budget
   * @return budget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getBudget() {
    return budget;
  }


  public void setBudget(Money budget) {
    
    
    
    this.budget = budget;
  }


  public Scenario costCalc(String costCalc) {
    
    
    
    
    this.costCalc = costCalc;
    return this;
  }

   /**
   * CQL used to calculate the budget allocation in the scenario
   * @return costCalc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "CQL used to calculate the budget allocation in the scenario")

  public String getCostCalc() {
    return costCalc;
  }


  public void setCostCalc(String costCalc) {
    
    
    
    this.costCalc = costCalc;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Scenario instance itself
   */
  public Scenario putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scenario scenario = (Scenario) o;
    return Objects.equals(this.description, scenario.description) &&
        Objects.equals(this.id, scenario.id) &&
        Objects.equals(this.orgId, scenario.orgId) &&
        Objects.equals(this.name, scenario.name) &&
        Objects.equals(this.startDate, scenario.startDate) &&
        Objects.equals(this.status, scenario.status) &&
        Objects.equals(this.shareAccess, scenario.shareAccess) &&
        Objects.equals(this.cost, scenario.cost) &&
        Objects.equals(this.changeCount, scenario.changeCount) &&
        Objects.equals(this.changeCounts, scenario.changeCounts) &&
        Objects.equals(this.createId, scenario.createId) &&
        Objects.equals(this.createAt, scenario.createAt) &&
        Objects.equals(this.updateId, scenario.updateId) &&
        Objects.equals(this.updateAt, scenario.updateAt) &&
        Objects.equals(this.deleteId, scenario.deleteId) &&
        Objects.equals(this.deleteAt, scenario.deleteAt) &&
        Objects.equals(this.mergeId, scenario.mergeId) &&
        Objects.equals(this.mergeAt, scenario.mergeAt) &&
        Objects.equals(this.calcStartAt, scenario.calcStartAt) &&
        Objects.equals(this.calcEndAt, scenario.calcEndAt) &&
        Objects.equals(this.changeAt, scenario.changeAt) &&
        Objects.equals(this.changeId, scenario.changeId) &&
        Objects.equals(this.type, scenario.type) &&
        Objects.equals(this.startDateFixed, scenario.startDateFixed) &&
        Objects.equals(this.query, scenario.query) &&
        Objects.equals(this.validJobIdSet, scenario.validJobIdSet) &&
        Objects.equals(this.approvalRequestId, scenario.approvalRequestId) &&
        Objects.equals(this.entityId, scenario.entityId) &&
        Objects.equals(this.entityType, scenario.entityType) &&
        Objects.equals(this.sharedViewConfig, scenario.sharedViewConfig) &&
        Objects.equals(this.budget, scenario.budget) &&
        Objects.equals(this.costCalc, scenario.costCalc)&&
        Objects.equals(this.additionalProperties, scenario.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, orgId, name, startDate, status, shareAccess, cost, changeCount, changeCounts, createId, createAt, updateId, updateAt, deleteId, deleteAt, mergeId, mergeAt, calcStartAt, calcEndAt, changeAt, changeId, type, startDateFixed, query, validJobIdSet, approvalRequestId, entityId, entityType, sharedViewConfig, budget, costCalc, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scenario {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    shareAccess: ").append(toIndentedString(shareAccess)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    changeCount: ").append(toIndentedString(changeCount)).append("\n");
    sb.append("    changeCounts: ").append(toIndentedString(changeCounts)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    mergeId: ").append(toIndentedString(mergeId)).append("\n");
    sb.append("    mergeAt: ").append(toIndentedString(mergeAt)).append("\n");
    sb.append("    calcStartAt: ").append(toIndentedString(calcStartAt)).append("\n");
    sb.append("    calcEndAt: ").append(toIndentedString(calcEndAt)).append("\n");
    sb.append("    changeAt: ").append(toIndentedString(changeAt)).append("\n");
    sb.append("    changeId: ").append(toIndentedString(changeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startDateFixed: ").append(toIndentedString(startDateFixed)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    validJobIdSet: ").append(toIndentedString(validJobIdSet)).append("\n");
    sb.append("    approvalRequestId: ").append(toIndentedString(approvalRequestId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    sharedViewConfig: ").append(toIndentedString(sharedViewConfig)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    costCalc: ").append(toIndentedString(costCalc)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("name");
    openapiFields.add("startDate");
    openapiFields.add("status");
    openapiFields.add("shareAccess");
    openapiFields.add("cost");
    openapiFields.add("changeCount");
    openapiFields.add("changeCounts");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");
    openapiFields.add("mergeId");
    openapiFields.add("mergeAt");
    openapiFields.add("calcStartAt");
    openapiFields.add("calcEndAt");
    openapiFields.add("changeAt");
    openapiFields.add("changeId");
    openapiFields.add("type");
    openapiFields.add("startDateFixed");
    openapiFields.add("query");
    openapiFields.add("validJobIdSet");
    openapiFields.add("approvalRequestId");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("sharedViewConfig");
    openapiFields.add("budget");
    openapiFields.add("costCalc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("shareAccess");
    openapiRequiredFields.add("createId");
    openapiRequiredFields.add("createAt");
    openapiRequiredFields.add("updateId");
    openapiRequiredFields.add("updateAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Scenario
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Scenario.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Scenario is not found in the empty JSON string", Scenario.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Scenario.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("shareAccess").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareAccess` to be an array in the JSON string but got `%s`", jsonObj.get("shareAccess").toString()));
      }

      JsonArray jsonArrayshareAccess = jsonObj.getAsJsonArray("shareAccess");
      // validate the required field `shareAccess` (array)
      for (int i = 0; i < jsonArrayshareAccess.size(); i++) {
        ShareAccess.validateJsonObject(jsonArrayshareAccess.get(i).getAsJsonObject());
      };
      // validate the optional field `cost`
      if (jsonObj.get("cost") != null && !jsonObj.get("cost").isJsonNull()) {
        CostImpact.validateJsonObject(jsonObj.getAsJsonObject("cost"));
      }
      if (!jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if (!jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if (!jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if (!jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
      if ((jsonObj.get("mergeId") != null && !jsonObj.get("mergeId").isJsonNull()) && !jsonObj.get("mergeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeId").toString()));
      }
      if ((jsonObj.get("mergeAt") != null && !jsonObj.get("mergeAt").isJsonNull()) && !jsonObj.get("mergeAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeAt").toString()));
      }
      if ((jsonObj.get("calcStartAt") != null && !jsonObj.get("calcStartAt").isJsonNull()) && !jsonObj.get("calcStartAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calcStartAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calcStartAt").toString()));
      }
      if ((jsonObj.get("calcEndAt") != null && !jsonObj.get("calcEndAt").isJsonNull()) && !jsonObj.get("calcEndAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calcEndAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calcEndAt").toString()));
      }
      if ((jsonObj.get("changeAt") != null && !jsonObj.get("changeAt").isJsonNull()) && !jsonObj.get("changeAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeAt").toString()));
      }
      if ((jsonObj.get("changeId") != null && !jsonObj.get("changeId").isJsonNull()) && !jsonObj.get("changeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("startDateFixed") != null && !jsonObj.get("startDateFixed").isJsonNull()) && !jsonObj.get("startDateFixed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDateFixed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDateFixed").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validJobIdSet") != null && !jsonObj.get("validJobIdSet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validJobIdSet` to be an array in the JSON string but got `%s`", jsonObj.get("validJobIdSet").toString()));
      }
      if ((jsonObj.get("approvalRequestId") != null && !jsonObj.get("approvalRequestId").isJsonNull()) && !jsonObj.get("approvalRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalRequestId").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (jsonObj.get("sharedViewConfig") != null && !jsonObj.get("sharedViewConfig").isJsonNull()) {
        JsonArray jsonArraysharedViewConfig = jsonObj.getAsJsonArray("sharedViewConfig");
        if (jsonArraysharedViewConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedViewConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedViewConfig` to be an array in the JSON string but got `%s`", jsonObj.get("sharedViewConfig").toString()));
          }

          // validate the optional field `sharedViewConfig` (array)
          for (int i = 0; i < jsonArraysharedViewConfig.size(); i++) {
            ScenarioSharedViewConfig.validateJsonObject(jsonArraysharedViewConfig.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `budget`
      if (jsonObj.get("budget") != null && !jsonObj.get("budget").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("budget"));
      }
      if ((jsonObj.get("costCalc") != null && !jsonObj.get("costCalc").isJsonNull()) && !jsonObj.get("costCalc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `costCalc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("costCalc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Scenario.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Scenario' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Scenario> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Scenario.class));

       return (TypeAdapter<T>) new TypeAdapter<Scenario>() {
           @Override
           public void write(JsonWriter out, Scenario value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Scenario read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Scenario instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Scenario given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Scenario
  * @throws IOException if the JSON string is invalid with respect to Scenario
  */
  public static Scenario fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Scenario.class);
  }

 /**
  * Convert an instance of Scenario to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

