/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateGroup
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateGroup {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private Set<String> aliases = null;

  public static final String SERIALIZED_NAME_LEAD_JOB_IDS = "leadJobIds";
  @SerializedName(SERIALIZED_NAME_LEAD_JOB_IDS)
  private Set<String> leadJobIds = null;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Object fields;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  /**
   * Job function category of the group, for DEPARTMENT type only
   */
  @JsonAdapter(FuncEnum.Adapter.class)
 public enum FuncEnum {
    BD("BD"),
    
    CS("CS"),
    
    DESIGN("DESIGN"),
    
    ENGINEERING("ENGINEERING"),
    
    EXECUTIVE("EXECUTIVE"),
    
    FINANCE("FINANCE"),
    
    GENERAL("GENERAL"),
    
    IT("IT"),
    
    LEGAL("LEGAL"),
    
    MARKETING("MARKETING"),
    
    OPERATIONS("OPERATIONS"),
    
    PEOPLE("PEOPLE"),
    
    PRODUCT("PRODUCT"),
    
    RECRUITING("RECRUITING"),
    
    SALES("SALES"),
    
    SECURITY("SECURITY"),
    
    SUPPORT("SUPPORT");

    private String value;

    FuncEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FuncEnum fromValue(String value) {
      for (FuncEnum b : FuncEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FuncEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FuncEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FuncEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FuncEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FUNC = "func";
  @SerializedName(SERIALIZED_NAME_FUNC)
  private FuncEnum func;

  /**
   * Type of the location, for LOCATION type only
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
 public enum LocationTypeEnum {
    OFFICE("OFFICE"),
    
    REMOTE("REMOTE");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public static final String SERIALIZED_NAME_PARENT_GROUP_ID = "parentGroupId";
  @SerializedName(SERIALIZED_NAME_PARENT_GROUP_ID)
  private String parentGroupId;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_COMP_MIN = "compMin";
  @SerializedName(SERIALIZED_NAME_COMP_MIN)
  private Money compMin;

  public static final String SERIALIZED_NAME_COMP_MAX = "compMax";
  @SerializedName(SERIALIZED_NAME_COMP_MAX)
  private Money compMax;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "imagePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public UpdateGroup() {
  }

  public UpdateGroup name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * unique name of group
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Engineering", value = "unique name of group")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UpdateGroup slug(String slug) {
    
    
    
    
    this.slug = slug;
    return this;
  }

   /**
   * unique slug of group
   * @return slug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "engineering", value = "unique slug of group")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    
    
    
    this.slug = slug;
  }


  public UpdateGroup code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * external code identifier of the group
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "D123", value = "external code identifier of the group")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public UpdateGroup aliases(Set<String> aliases) {
    
    
    
    
    this.aliases = aliases;
    return this;
  }

  public UpdateGroup addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new LinkedHashSet<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * aliases for group
   * @return aliases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "aliases for group")

  public Set<String> getAliases() {
    return aliases;
  }


  public void setAliases(Set<String> aliases) {
    
    
    
    this.aliases = aliases;
  }


  public UpdateGroup leadJobIds(Set<String> leadJobIds) {
    
    
    
    
    this.leadJobIds = leadJobIds;
    return this;
  }

  public UpdateGroup addLeadJobIdsItem(String leadJobIdsItem) {
    if (this.leadJobIds == null) {
      this.leadJobIds = new LinkedHashSet<>();
    }
    this.leadJobIds.add(leadJobIdsItem);
    return this;
  }

   /**
   * a list of group leaders, or null if the leader of the group should be automatically derived from the org chart
   * @return leadJobIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a list of group leaders, or null if the leader of the group should be automatically derived from the org chart")

  public Set<String> getLeadJobIds() {
    return leadJobIds;
  }


  public void setLeadJobIds(Set<String> leadJobIds) {
    
    
    
    this.leadJobIds = leadJobIds;
  }


  public UpdateGroup fields(Object fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

   /**
   * group fields (currently only description)
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "group fields (currently only description)")

  public Object getFields() {
    return fields;
  }


  public void setFields(Object fields) {
    
    
    
    this.fields = fields;
  }


  public UpdateGroup address(Address address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    
    
    
    this.address = address;
  }


  public UpdateGroup level(Integer level) {
    
    
    
    
    this.level = level;
    return this;
  }

   /**
   * level of the group, for BAND type only
   * @return level
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "level of the group, for BAND type only")

  public Integer getLevel() {
    return level;
  }


  public void setLevel(Integer level) {
    
    
    
    this.level = level;
  }


  public UpdateGroup func(FuncEnum func) {
    
    
    
    
    this.func = func;
    return this;
  }

   /**
   * Job function category of the group, for DEPARTMENT type only
   * @return func
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Job function category of the group, for DEPARTMENT type only")

  public FuncEnum getFunc() {
    return func;
  }


  public void setFunc(FuncEnum func) {
    
    
    
    this.func = func;
  }


  public UpdateGroup locationType(LocationTypeEnum locationType) {
    
    
    
    
    this.locationType = locationType;
    return this;
  }

   /**
   * Type of the location, for LOCATION type only
   * @return locationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the location, for LOCATION type only")

  public LocationTypeEnum getLocationType() {
    return locationType;
  }


  public void setLocationType(LocationTypeEnum locationType) {
    
    
    
    this.locationType = locationType;
  }


  public UpdateGroup parentGroupId(String parentGroupId) {
    
    
    
    
    this.parentGroupId = parentGroupId;
    return this;
  }

   /**
   * parent group id
   * @return parentGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "parent group id")

  public String getParentGroupId() {
    return parentGroupId;
  }


  public void setParentGroupId(String parentGroupId) {
    
    
    
    this.parentGroupId = parentGroupId;
  }


  public UpdateGroup timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * timezone of the group, for LOCATION type only
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/New_York", value = "timezone of the group, for LOCATION type only")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public UpdateGroup compMin(Money compMin) {
    
    
    
    
    this.compMin = compMin;
    return this;
  }

   /**
   * Get compMin
   * @return compMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getCompMin() {
    return compMin;
  }


  public void setCompMin(Money compMin) {
    
    
    
    this.compMin = compMin;
  }


  public UpdateGroup compMax(Money compMax) {
    
    
    
    
    this.compMax = compMax;
    return this;
  }

   /**
   * Get compMax
   * @return compMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getCompMax() {
    return compMax;
  }


  public void setCompMax(Money compMax) {
    
    
    
    this.compMax = compMax;
  }


  public UpdateGroup imagePath(String imagePath) {
    
    
    
    
    this.imagePath = imagePath;
    return this;
  }

   /**
   * path to profile image
   * @return imagePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path to profile image")

  public String getImagePath() {
    return imagePath;
  }


  public void setImagePath(String imagePath) {
    
    
    
    this.imagePath = imagePath;
  }


  public UpdateGroup color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * color of group
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "color of group")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateGroup instance itself
   */
  public UpdateGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateGroup updateGroup = (UpdateGroup) o;
    return Objects.equals(this.name, updateGroup.name) &&
        Objects.equals(this.slug, updateGroup.slug) &&
        Objects.equals(this.code, updateGroup.code) &&
        Objects.equals(this.aliases, updateGroup.aliases) &&
        Objects.equals(this.leadJobIds, updateGroup.leadJobIds) &&
        Objects.equals(this.fields, updateGroup.fields) &&
        Objects.equals(this.address, updateGroup.address) &&
        Objects.equals(this.level, updateGroup.level) &&
        Objects.equals(this.func, updateGroup.func) &&
        Objects.equals(this.locationType, updateGroup.locationType) &&
        Objects.equals(this.parentGroupId, updateGroup.parentGroupId) &&
        Objects.equals(this.timezone, updateGroup.timezone) &&
        Objects.equals(this.compMin, updateGroup.compMin) &&
        Objects.equals(this.compMax, updateGroup.compMax) &&
        Objects.equals(this.imagePath, updateGroup.imagePath) &&
        Objects.equals(this.color, updateGroup.color)&&
        Objects.equals(this.additionalProperties, updateGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, slug, code, aliases, leadJobIds, fields, address, level, func, locationType, parentGroupId, timezone, compMin, compMax, imagePath, color, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateGroup {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    leadJobIds: ").append(toIndentedString(leadJobIds)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    func: ").append(toIndentedString(func)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    parentGroupId: ").append(toIndentedString(parentGroupId)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    compMin: ").append(toIndentedString(compMin)).append("\n");
    sb.append("    compMax: ").append(toIndentedString(compMax)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("code");
    openapiFields.add("aliases");
    openapiFields.add("leadJobIds");
    openapiFields.add("fields");
    openapiFields.add("address");
    openapiFields.add("level");
    openapiFields.add("func");
    openapiFields.add("locationType");
    openapiFields.add("parentGroupId");
    openapiFields.add("timezone");
    openapiFields.add("compMin");
    openapiFields.add("compMax");
    openapiFields.add("imagePath");
    openapiFields.add("color");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateGroup is not found in the empty JSON string", UpdateGroup.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("leadJobIds") != null && !jsonObj.get("leadJobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `leadJobIds` to be an array in the JSON string but got `%s`", jsonObj.get("leadJobIds").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("func") != null && !jsonObj.get("func").isJsonNull()) && !jsonObj.get("func").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `func` to be a primitive type in the JSON string but got `%s`", jsonObj.get("func").toString()));
      }
      if ((jsonObj.get("locationType") != null && !jsonObj.get("locationType").isJsonNull()) && !jsonObj.get("locationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationType").toString()));
      }
      if ((jsonObj.get("parentGroupId") != null && !jsonObj.get("parentGroupId").isJsonNull()) && !jsonObj.get("parentGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentGroupId").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // validate the optional field `compMin`
      if (jsonObj.get("compMin") != null && !jsonObj.get("compMin").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("compMin"));
      }
      // validate the optional field `compMax`
      if (jsonObj.get("compMax") != null && !jsonObj.get("compMax").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("compMax"));
      }
      if ((jsonObj.get("imagePath") != null && !jsonObj.get("imagePath").isJsonNull()) && !jsonObj.get("imagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePath").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateGroup>() {
           @Override
           public void write(JsonWriter out, UpdateGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateGroup
  * @throws IOException if the JSON string is invalid with respect to UpdateGroup
  */
  public static UpdateGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateGroup.class);
  }

 /**
  * Convert an instance of UpdateGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

