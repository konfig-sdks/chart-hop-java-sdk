/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BudgetAllocation;
import com.konfigthis.client.model.PoolCalculation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BudgetCalculation
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BudgetCalculation {
  public static final String SERIALIZED_NAME_ALLOCATED = "allocated";
  @SerializedName(SERIALIZED_NAME_ALLOCATED)
  private Object allocated;

  public static final String SERIALIZED_NAME_USED = "used";
  @SerializedName(SERIALIZED_NAME_USED)
  private Object used;

  public static final String SERIALIZED_NAME_POOLS = "pools";
  @SerializedName(SERIALIZED_NAME_POOLS)
  private List<PoolCalculation> pools = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_BUDGET_MAP = "jobBudgetMap";
  @SerializedName(SERIALIZED_NAME_JOB_BUDGET_MAP)
  private Map<String, Map<String, BudgetAllocation>> jobBudgetMap = null;

  public BudgetCalculation() {
  }

  public BudgetCalculation allocated(Object allocated) {
    
    
    
    
    this.allocated = allocated;
    return this;
  }

   /**
   * the total budget amount
   * @return allocated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "500", required = true, value = "the total budget amount")

  public Object getAllocated() {
    return allocated;
  }


  public void setAllocated(Object allocated) {
    
    
    
    this.allocated = allocated;
  }


  public BudgetCalculation used(Object used) {
    
    
    
    
    this.used = used;
    return this;
  }

   /**
   * the amount of the budget that has been used
   * @return used
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "500", value = "the amount of the budget that has been used")

  public Object getUsed() {
    return used;
  }


  public void setUsed(Object used) {
    
    
    
    this.used = used;
  }


  public BudgetCalculation pools(List<PoolCalculation> pools) {
    
    
    
    
    this.pools = pools;
    return this;
  }

  public BudgetCalculation addPoolsItem(PoolCalculation poolsItem) {
    this.pools.add(poolsItem);
    return this;
  }

   /**
   * a list of budget pools that make up the total amount
   * @return pools
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "a list of budget pools that make up the total amount")

  public List<PoolCalculation> getPools() {
    return pools;
  }


  public void setPools(List<PoolCalculation> pools) {
    
    
    
    this.pools = pools;
  }


  public BudgetCalculation jobBudgetMap(Map<String, Map<String, BudgetAllocation>> jobBudgetMap) {
    
    
    
    
    this.jobBudgetMap = jobBudgetMap;
    return this;
  }

  public BudgetCalculation putJobBudgetMapItem(String key, Map<String, BudgetAllocation> jobBudgetMapItem) {
    if (this.jobBudgetMap == null) {
      this.jobBudgetMap = new HashMap<>();
    }
    this.jobBudgetMap.put(key, jobBudgetMapItem);
    return this;
  }

   /**
   * the amount allotted and allocated for the comp review broken down by job
   * @return jobBudgetMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the amount allotted and allocated for the comp review broken down by job")

  public Map<String, Map<String, BudgetAllocation>> getJobBudgetMap() {
    return jobBudgetMap;
  }


  public void setJobBudgetMap(Map<String, Map<String, BudgetAllocation>> jobBudgetMap) {
    
    
    
    this.jobBudgetMap = jobBudgetMap;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BudgetCalculation instance itself
   */
  public BudgetCalculation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetCalculation budgetCalculation = (BudgetCalculation) o;
    return Objects.equals(this.allocated, budgetCalculation.allocated) &&
        Objects.equals(this.used, budgetCalculation.used) &&
        Objects.equals(this.pools, budgetCalculation.pools) &&
        Objects.equals(this.jobBudgetMap, budgetCalculation.jobBudgetMap)&&
        Objects.equals(this.additionalProperties, budgetCalculation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocated, used, pools, jobBudgetMap, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetCalculation {\n");
    sb.append("    allocated: ").append(toIndentedString(allocated)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    pools: ").append(toIndentedString(pools)).append("\n");
    sb.append("    jobBudgetMap: ").append(toIndentedString(jobBudgetMap)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocated");
    openapiFields.add("used");
    openapiFields.add("pools");
    openapiFields.add("jobBudgetMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allocated");
    openapiRequiredFields.add("pools");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BudgetCalculation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BudgetCalculation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetCalculation is not found in the empty JSON string", BudgetCalculation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BudgetCalculation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("pools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pools` to be an array in the JSON string but got `%s`", jsonObj.get("pools").toString()));
      }

      JsonArray jsonArraypools = jsonObj.getAsJsonArray("pools");
      // validate the required field `pools` (array)
      for (int i = 0; i < jsonArraypools.size(); i++) {
        PoolCalculation.validateJsonObject(jsonArraypools.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetCalculation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetCalculation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetCalculation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetCalculation.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetCalculation>() {
           @Override
           public void write(JsonWriter out, BudgetCalculation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetCalculation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BudgetCalculation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BudgetCalculation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BudgetCalculation
  * @throws IOException if the JSON string is invalid with respect to BudgetCalculation
  */
  public static BudgetCalculation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetCalculation.class);
  }

 /**
  * Convert an instance of BudgetCalculation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

