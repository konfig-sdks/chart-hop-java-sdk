/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LogData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateProcess
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateProcess {
  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  /**
   * current status of process
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_RUN_USER_ID = "runUserId";
  @SerializedName(SERIALIZED_NAME_RUN_USER_ID)
  private String runUserId;

  public static final String SERIALIZED_NAME_PARENT_PROCESS_ID = "parentProcessId";
  @SerializedName(SERIALIZED_NAME_PARENT_PROCESS_ID)
  private String parentProcessId;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public static final String SERIALIZED_NAME_INTERNAL_ERROR = "internalError";
  @SerializedName(SERIALIZED_NAME_INTERNAL_ERROR)
  private String internalError;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private Map<String, Object> results = null;

  public static final String SERIALIZED_NAME_LOG_DATA_LIST = "logDataList";
  @SerializedName(SERIALIZED_NAME_LOG_DATA_LIST)
  private List<LogData> logDataList = null;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Object state;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public CreateProcess() {
  }

  public CreateProcess orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent org id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent org id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public CreateProcess label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human-readable label that identifies this process
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "human-readable label that identifies this process")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public CreateProcess type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * process type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "process type")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public CreateProcess status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * current status of process
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "current status of process")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CreateProcess filePath(String filePath) {
    
    
    
    
    this.filePath = filePath;
    return this;
  }

   /**
   * data file path
   * @return filePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "data file path")

  public String getFilePath() {
    return filePath;
  }


  public void setFilePath(String filePath) {
    
    
    
    this.filePath = filePath;
  }


  public CreateProcess runUserId(String runUserId) {
    
    
    
    
    this.runUserId = runUserId;
    return this;
  }

   /**
   * user id who is running the process
   * @return runUserId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "user id who is running the process")

  public String getRunUserId() {
    return runUserId;
  }


  public void setRunUserId(String runUserId) {
    
    
    
    this.runUserId = runUserId;
  }


  public CreateProcess parentProcessId(String parentProcessId) {
    
    
    
    
    this.parentProcessId = parentProcessId;
    return this;
  }

   /**
   * process id of parent process
   * @return parentProcessId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "process id of parent process")

  public String getParentProcessId() {
    return parentProcessId;
  }


  public void setParentProcessId(String parentProcessId) {
    
    
    
    this.parentProcessId = parentProcessId;
  }


  public CreateProcess message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * status or error message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "status or error message")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public CreateProcess progress(Double progress) {
    
    
    
    
    this.progress = progress;
    return this;
  }

   /**
   * percent progress so far
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "percent progress so far")

  public Double getProgress() {
    return progress;
  }


  public void setProgress(Double progress) {
    
    
    
    this.progress = progress;
  }


  public CreateProcess internalError(String internalError) {
    
    
    
    
    this.internalError = internalError;
    return this;
  }

   /**
   * internal-only error message
   * @return internalError
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "internal-only error message")

  public String getInternalError() {
    return internalError;
  }


  public void setInternalError(String internalError) {
    
    
    
    this.internalError = internalError;
  }


  public CreateProcess options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * options passed to the process
   * @return options
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "options passed to the process")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }


  public CreateProcess results(Map<String, Object> results) {
    
    
    
    
    this.results = results;
    return this;
  }

  public CreateProcess putResultsItem(String key, Object resultsItem) {
    if (this.results == null) {
      this.results = new HashMap<>();
    }
    this.results.put(key, resultsItem);
    return this;
  }

   /**
   * results summary for the process
   * @return results
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "results summary for the process")

  public Map<String, Object> getResults() {
    return results;
  }


  public void setResults(Map<String, Object> results) {
    
    
    
    this.results = results;
  }


  public CreateProcess logDataList(List<LogData> logDataList) {
    
    
    
    
    this.logDataList = logDataList;
    return this;
  }

  public CreateProcess addLogDataListItem(LogData logDataListItem) {
    if (this.logDataList == null) {
      this.logDataList = new ArrayList<>();
    }
    this.logDataList.add(logDataListItem);
    return this;
  }

   /**
   * list of log data that occurred during running of this process
   * @return logDataList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of log data that occurred during running of this process")

  public List<LogData> getLogDataList() {
    return logDataList;
  }


  public void setLogDataList(List<LogData> logDataList) {
    
    
    
    this.logDataList = logDataList;
  }


  public CreateProcess state(Object state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * process-specific state data
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "process-specific state data")

  public Object getState() {
    return state;
  }


  public void setState(Object state) {
    
    
    
    this.state = state;
  }


  public CreateProcess appId(String appId) {
    
    
    
    
    this.appId = appId;
    return this;
  }

   /**
   * app id of the process
   * @return appId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "app id of the process")

  public String getAppId() {
    return appId;
  }


  public void setAppId(String appId) {
    
    
    
    this.appId = appId;
  }


  public CreateProcess uuid(String uuid) {
    
    
    
    
    this.uuid = uuid;
    return this;
  }

   /**
   * unique ID of the process at queue time
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "84db3c6e-0877-4436-8af1-768c06b29586", value = "unique ID of the process at queue time")

  public String getUuid() {
    return uuid;
  }


  public void setUuid(String uuid) {
    
    
    
    this.uuid = uuid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateProcess instance itself
   */
  public CreateProcess putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProcess createProcess = (CreateProcess) o;
    return Objects.equals(this.orgId, createProcess.orgId) &&
        Objects.equals(this.label, createProcess.label) &&
        Objects.equals(this.type, createProcess.type) &&
        Objects.equals(this.status, createProcess.status) &&
        Objects.equals(this.filePath, createProcess.filePath) &&
        Objects.equals(this.runUserId, createProcess.runUserId) &&
        Objects.equals(this.parentProcessId, createProcess.parentProcessId) &&
        Objects.equals(this.message, createProcess.message) &&
        Objects.equals(this.progress, createProcess.progress) &&
        Objects.equals(this.internalError, createProcess.internalError) &&
        Objects.equals(this.options, createProcess.options) &&
        Objects.equals(this.results, createProcess.results) &&
        Objects.equals(this.logDataList, createProcess.logDataList) &&
        Objects.equals(this.state, createProcess.state) &&
        Objects.equals(this.appId, createProcess.appId) &&
        Objects.equals(this.uuid, createProcess.uuid)&&
        Objects.equals(this.additionalProperties, createProcess.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orgId, label, type, status, filePath, runUserId, parentProcessId, message, progress, internalError, options, results, logDataList, state, appId, uuid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProcess {\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    runUserId: ").append(toIndentedString(runUserId)).append("\n");
    sb.append("    parentProcessId: ").append(toIndentedString(parentProcessId)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    internalError: ").append(toIndentedString(internalError)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    logDataList: ").append(toIndentedString(logDataList)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("orgId");
    openapiFields.add("label");
    openapiFields.add("type");
    openapiFields.add("status");
    openapiFields.add("filePath");
    openapiFields.add("runUserId");
    openapiFields.add("parentProcessId");
    openapiFields.add("message");
    openapiFields.add("progress");
    openapiFields.add("internalError");
    openapiFields.add("options");
    openapiFields.add("results");
    openapiFields.add("logDataList");
    openapiFields.add("state");
    openapiFields.add("appId");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("runUserId");
    openapiRequiredFields.add("options");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateProcess
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateProcess.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProcess is not found in the empty JSON string", CreateProcess.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProcess.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("filePath") != null && !jsonObj.get("filePath").isJsonNull()) && !jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if (!jsonObj.get("runUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runUserId").toString()));
      }
      if ((jsonObj.get("parentProcessId") != null && !jsonObj.get("parentProcessId").isJsonNull()) && !jsonObj.get("parentProcessId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentProcessId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentProcessId").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("internalError") != null && !jsonObj.get("internalError").isJsonNull()) && !jsonObj.get("internalError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalError").toString()));
      }
      if (jsonObj.get("logDataList") != null && !jsonObj.get("logDataList").isJsonNull()) {
        JsonArray jsonArraylogDataList = jsonObj.getAsJsonArray("logDataList");
        if (jsonArraylogDataList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logDataList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logDataList` to be an array in the JSON string but got `%s`", jsonObj.get("logDataList").toString()));
          }

          // validate the optional field `logDataList` (array)
          for (int i = 0; i < jsonArraylogDataList.size(); i++) {
            LogData.validateJsonObject(jsonArraylogDataList.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProcess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProcess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProcess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProcess.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProcess>() {
           @Override
           public void write(JsonWriter out, CreateProcess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProcess read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateProcess instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateProcess given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateProcess
  * @throws IOException if the JSON string is invalid with respect to CreateProcess
  */
  public static CreateProcess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProcess.class);
  }

 /**
  * Convert an instance of CreateProcess to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

