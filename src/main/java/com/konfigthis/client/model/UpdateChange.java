/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.JobUpdate;
import com.konfigthis.client.model.PartialJob;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateChange
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateChange {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_ANNOUNCE_DATE = "announceDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCE_DATE)
  private LocalDate announceDate;

  /**
   * whether the change is active or not
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    STRUCK("STRUCK"),
    
    CONFLICT("CONFLICT"),
    
    INACTIVE("INACTIVE"),
    
    PROPOSED("PROPOSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * for DEPART changes, the type of departure
   */
  @JsonAdapter(DepartTypeEnum.Adapter.class)
 public enum DepartTypeEnum {
    VOLUNTARY("VOLUNTARY"),
    
    INVOLUNTARY("INVOLUNTARY");

    private String value;

    DepartTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartTypeEnum fromValue(String value) {
      for (DepartTypeEnum b : DepartTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_TYPE = "departType";
  @SerializedName(SERIALIZED_NAME_DEPART_TYPE)
  private DepartTypeEnum departType;

  /**
   * for DEPART changes, whether the departure is regrettable
   */
  @JsonAdapter(DepartRegretEnum.Adapter.class)
 public enum DepartRegretEnum {
    REGRET("REGRET"),
    
    NONREGRET("NONREGRET");

    private String value;

    DepartRegretEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartRegretEnum fromValue(String value) {
      for (DepartRegretEnum b : DepartRegretEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartRegretEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartRegretEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartRegretEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartRegretEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_REGRET = "departRegret";
  @SerializedName(SERIALIZED_NAME_DEPART_REGRET)
  private DepartRegretEnum departRegret;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * if it&#39;s a promotion or a demotion
   */
  @JsonAdapter(PromotionTypeEnum.Adapter.class)
 public enum PromotionTypeEnum {
    PROMOTION("PROMOTION"),
    
    DEMOTION("DEMOTION"),
    
    NONE("NONE");

    private String value;

    PromotionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PromotionTypeEnum fromValue(String value) {
      for (PromotionTypeEnum b : PromotionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PromotionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PromotionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PromotionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PromotionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotionType";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private PromotionTypeEnum promotionType;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private PartialJob job;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private JobUpdate update;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_APPROVAL_NOTE = "approvalNote";
  @SerializedName(SERIALIZED_NAME_APPROVAL_NOTE)
  private String approvalNote;

  public UpdateChange() {
  }

  public UpdateChange date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * date of change
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date of change")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public UpdateChange announceDate(LocalDate announceDate) {
    
    
    
    
    this.announceDate = announceDate;
    return this;
  }

   /**
   * for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change
   * @return announceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change")

  public LocalDate getAnnounceDate() {
    return announceDate;
  }


  public void setAnnounceDate(LocalDate announceDate) {
    
    
    
    this.announceDate = announceDate;
  }


  public UpdateChange status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * whether the change is active or not
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether the change is active or not")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public UpdateChange departType(DepartTypeEnum departType) {
    
    
    
    
    this.departType = departType;
    return this;
  }

   /**
   * for DEPART changes, the type of departure
   * @return departType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, the type of departure")

  public DepartTypeEnum getDepartType() {
    return departType;
  }


  public void setDepartType(DepartTypeEnum departType) {
    
    
    
    this.departType = departType;
  }


  public UpdateChange departRegret(DepartRegretEnum departRegret) {
    
    
    
    
    this.departRegret = departRegret;
    return this;
  }

   /**
   * for DEPART changes, whether the departure is regrettable
   * @return departRegret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, whether the departure is regrettable")

  public DepartRegretEnum getDepartRegret() {
    return departRegret;
  }


  public void setDepartRegret(DepartRegretEnum departRegret) {
    
    
    
    this.departRegret = departRegret;
  }


  public UpdateChange reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * the reason of the change
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the reason of the change")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public UpdateChange promotionType(PromotionTypeEnum promotionType) {
    
    
    
    
    this.promotionType = promotionType;
    return this;
  }

   /**
   * if it&#39;s a promotion or a demotion
   * @return promotionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if it's a promotion or a demotion")

  public PromotionTypeEnum getPromotionType() {
    return promotionType;
  }


  public void setPromotionType(PromotionTypeEnum promotionType) {
    
    
    
    this.promotionType = promotionType;
  }


  public UpdateChange job(PartialJob job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialJob getJob() {
    return job;
  }


  public void setJob(PartialJob job) {
    
    
    
    this.job = job;
  }


  public UpdateChange update(JobUpdate update) {
    
    
    
    
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobUpdate getUpdate() {
    return update;
  }


  public void setUpdate(JobUpdate update) {
    
    
    
    this.update = update;
  }


  public UpdateChange note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * note on the change
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "note on the change")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public UpdateChange approvalNote(String approvalNote) {
    
    
    
    
    this.approvalNote = approvalNote;
    return this;
  }

   /**
   * approval/rejection note
   * @return approvalNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Not acceptable", value = "approval/rejection note")

  public String getApprovalNote() {
    return approvalNote;
  }


  public void setApprovalNote(String approvalNote) {
    
    
    
    this.approvalNote = approvalNote;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateChange instance itself
   */
  public UpdateChange putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateChange updateChange = (UpdateChange) o;
    return Objects.equals(this.date, updateChange.date) &&
        Objects.equals(this.announceDate, updateChange.announceDate) &&
        Objects.equals(this.status, updateChange.status) &&
        Objects.equals(this.departType, updateChange.departType) &&
        Objects.equals(this.departRegret, updateChange.departRegret) &&
        Objects.equals(this.reason, updateChange.reason) &&
        Objects.equals(this.promotionType, updateChange.promotionType) &&
        Objects.equals(this.job, updateChange.job) &&
        Objects.equals(this.update, updateChange.update) &&
        Objects.equals(this.note, updateChange.note) &&
        Objects.equals(this.approvalNote, updateChange.approvalNote)&&
        Objects.equals(this.additionalProperties, updateChange.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, announceDate, status, departType, departRegret, reason, promotionType, job, update, note, approvalNote, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateChange {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    announceDate: ").append(toIndentedString(announceDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    departType: ").append(toIndentedString(departType)).append("\n");
    sb.append("    departRegret: ").append(toIndentedString(departRegret)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    approvalNote: ").append(toIndentedString(approvalNote)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("announceDate");
    openapiFields.add("status");
    openapiFields.add("departType");
    openapiFields.add("departRegret");
    openapiFields.add("reason");
    openapiFields.add("promotionType");
    openapiFields.add("job");
    openapiFields.add("update");
    openapiFields.add("note");
    openapiFields.add("approvalNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateChange
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateChange is not found in the empty JSON string", UpdateChange.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("departType") != null && !jsonObj.get("departType").isJsonNull()) && !jsonObj.get("departType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departType").toString()));
      }
      if ((jsonObj.get("departRegret") != null && !jsonObj.get("departRegret").isJsonNull()) && !jsonObj.get("departRegret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departRegret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departRegret").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("promotionType") != null && !jsonObj.get("promotionType").isJsonNull()) && !jsonObj.get("promotionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionType").toString()));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        PartialJob.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JobUpdate.validateJsonObject(jsonObj.getAsJsonObject("update"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("approvalNote") != null && !jsonObj.get("approvalNote").isJsonNull()) && !jsonObj.get("approvalNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalNote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateChange.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateChange>() {
           @Override
           public void write(JsonWriter out, UpdateChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateChange read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateChange instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateChange given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateChange
  * @throws IOException if the JSON string is invalid with respect to UpdateChange
  */
  public static UpdateChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateChange.class);
  }

 /**
  * Convert an instance of UpdateChange to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

