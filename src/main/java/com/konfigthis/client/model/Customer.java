/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.ProductItem;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Customer
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Customer {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_BILL_ADDRESS = "billAddress";
  @SerializedName(SERIALIZED_NAME_BILL_ADDRESS)
  private Address billAddress;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  /**
   * source of customer signup
   */
  @JsonAdapter(SourceEnum.Adapter.class)
 public enum SourceEnum {
    ADP_MARKETPLACE("ADP_MARKETPLACE"),
    
    SELF_SERVE("SELF_SERVE"),
    
    SELF_SERVE_TEST("SELF_SERVE_TEST"),
    
    SEQUOIA_ONE("SEQUOIA_ONE"),
    
    CONNECT("CONNECT");

    private String value;

    SourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceEnum fromValue(String value) {
      for (SourceEnum b : SourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private SourceEnum source;

  /**
   * current status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    TRIAL("TRIAL"),
    
    CHURN("CHURN"),
    
    PAYMENT_ERROR("PAYMENT_ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STRIPE_CUSTOMER_ID = "stripeCustomerId";
  @SerializedName(SERIALIZED_NAME_STRIPE_CUSTOMER_ID)
  private String stripeCustomerId;

  public static final String SERIALIZED_NAME_SALESFORCE_ACCOUNT_ID = "salesforceAccountId";
  @SerializedName(SERIALIZED_NAME_SALESFORCE_ACCOUNT_ID)
  private String salesforceAccountId;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<ProductItem> products = null;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_NEXT_INVOICE_DATE = "nextInvoiceDate";
  @SerializedName(SERIALIZED_NAME_NEXT_INVOICE_DATE)
  private LocalDate nextInvoiceDate;

  public static final String SERIALIZED_NAME_ORG_COUNT = "orgCount";
  @SerializedName(SERIALIZED_NAME_ORG_COUNT)
  private Integer orgCount;

  public static final String SERIALIZED_NAME_PRIMARY_HEAD_COUNT = "primaryHeadCount";
  @SerializedName(SERIALIZED_NAME_PRIMARY_HEAD_COUNT)
  private Integer primaryHeadCount;

  public static final String SERIALIZED_NAME_SECONDARY_HEAD_COUNT = "secondaryHeadCount";
  @SerializedName(SERIALIZED_NAME_SECONDARY_HEAD_COUNT)
  private Integer secondaryHeadCount;

  public static final String SERIALIZED_NAME_PRIMARY_HEAD_COUNT_FILTER = "primaryHeadCountFilter";
  @SerializedName(SERIALIZED_NAME_PRIMARY_HEAD_COUNT_FILTER)
  private String primaryHeadCountFilter;

  public static final String SERIALIZED_NAME_SECONDARY_HEAD_COUNT_FILTER = "secondaryHeadCountFilter";
  @SerializedName(SERIALIZED_NAME_SECONDARY_HEAD_COUNT_FILTER)
  private String secondaryHeadCountFilter;

  public static final String SERIALIZED_NAME_ARR = "arr";
  @SerializedName(SERIALIZED_NAME_ARR)
  private Double arr;

  public static final String SERIALIZED_NAME_PROJECTED_ARR = "projectedArr";
  @SerializedName(SERIALIZED_NAME_PROJECTED_ARR)
  private Double projectedArr;

  public static final String SERIALIZED_NAME_TRIAL_START_DATE = "trialStartDate";
  @SerializedName(SERIALIZED_NAME_TRIAL_START_DATE)
  private LocalDate trialStartDate;

  public static final String SERIALIZED_NAME_TRIAL_END_DATE = "trialEndDate";
  @SerializedName(SERIALIZED_NAME_TRIAL_END_DATE)
  private LocalDate trialEndDate;

  /**
   * Stripe subscription settings
   */
  @JsonAdapter(StripeSubscriptionSyncEnum.Adapter.class)
 public enum StripeSubscriptionSyncEnum {
    SYNC("SYNC"),
    
    DELETE("DELETE");

    private String value;

    StripeSubscriptionSyncEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StripeSubscriptionSyncEnum fromValue(String value) {
      for (StripeSubscriptionSyncEnum b : StripeSubscriptionSyncEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StripeSubscriptionSyncEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StripeSubscriptionSyncEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StripeSubscriptionSyncEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StripeSubscriptionSyncEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STRIPE_SUBSCRIPTION_SYNC = "stripeSubscriptionSync";
  @SerializedName(SERIALIZED_NAME_STRIPE_SUBSCRIPTION_SYNC)
  private StripeSubscriptionSyncEnum stripeSubscriptionSync;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public Customer() {
  }

  public Customer id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique id of customer
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "unique id of customer")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Customer name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * name of customer
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "name of customer")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Customer email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * email address for billing purposes
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "email address for billing purposes")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public Customer billAddress(Address billAddress) {
    
    
    
    
    this.billAddress = billAddress;
    return this;
  }

   /**
   * Get billAddress
   * @return billAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getBillAddress() {
    return billAddress;
  }


  public void setBillAddress(Address billAddress) {
    
    
    
    this.billAddress = billAddress;
  }


  public Customer industry(String industry) {
    
    
    
    
    this.industry = industry;
    return this;
  }

   /**
   * industry that customer is in
   * @return industry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "industry that customer is in")

  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    
    
    
    this.industry = industry;
  }


  public Customer source(SourceEnum source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * source of customer signup
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "source of customer signup")

  public SourceEnum getSource() {
    return source;
  }


  public void setSource(SourceEnum source) {
    
    
    
    this.source = source;
  }


  public Customer status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * current status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "current status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Customer stripeCustomerId(String stripeCustomerId) {
    
    
    
    
    this.stripeCustomerId = stripeCustomerId;
    return this;
  }

   /**
   * stripe customer id
   * @return stripeCustomerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "stripe customer id")

  public String getStripeCustomerId() {
    return stripeCustomerId;
  }


  public void setStripeCustomerId(String stripeCustomerId) {
    
    
    
    this.stripeCustomerId = stripeCustomerId;
  }


  public Customer salesforceAccountId(String salesforceAccountId) {
    
    
    
    
    this.salesforceAccountId = salesforceAccountId;
    return this;
  }

   /**
   * salesforce account id
   * @return salesforceAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "salesforce account id")

  public String getSalesforceAccountId() {
    return salesforceAccountId;
  }


  public void setSalesforceAccountId(String salesforceAccountId) {
    
    
    
    this.salesforceAccountId = salesforceAccountId;
  }


  public Customer products(List<ProductItem> products) {
    
    
    
    
    this.products = products;
    return this;
  }

  public Customer addProductsItem(ProductItem productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

   /**
   * products that this customer has purchased
   * @return products
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "products that this customer has purchased")

  public List<ProductItem> getProducts() {
    return products;
  }


  public void setProducts(List<ProductItem> products) {
    
    
    
    this.products = products;
  }


  public Customer startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * initial date of billing
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "initial date of billing")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Customer endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * end of service date for churning customers -- on or after this date, service should be disabled
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "end of service date for churning customers -- on or after this date, service should be disabled")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public Customer nextInvoiceDate(LocalDate nextInvoiceDate) {
    
    
    
    
    this.nextInvoiceDate = nextInvoiceDate;
    return this;
  }

   /**
   * date of next invoice
   * @return nextInvoiceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date of next invoice")

  public LocalDate getNextInvoiceDate() {
    return nextInvoiceDate;
  }


  public void setNextInvoiceDate(LocalDate nextInvoiceDate) {
    
    
    
    this.nextInvoiceDate = nextInvoiceDate;
  }


  public Customer orgCount(Integer orgCount) {
    
    
    
    
    this.orgCount = orgCount;
    return this;
  }

   /**
   * number of orgs covered by this customer
   * @return orgCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of orgs covered by this customer")

  public Integer getOrgCount() {
    return orgCount;
  }


  public void setOrgCount(Integer orgCount) {
    
    
    
    this.orgCount = orgCount;
  }


  public Customer primaryHeadCount(Integer primaryHeadCount) {
    
    
    
    
    this.primaryHeadCount = primaryHeadCount;
    return this;
  }

   /**
   * number of total headcount across all orgs
   * @return primaryHeadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of total headcount across all orgs")

  public Integer getPrimaryHeadCount() {
    return primaryHeadCount;
  }


  public void setPrimaryHeadCount(Integer primaryHeadCount) {
    
    
    
    this.primaryHeadCount = primaryHeadCount;
  }


  public Customer secondaryHeadCount(Integer secondaryHeadCount) {
    
    
    
    
    this.secondaryHeadCount = secondaryHeadCount;
    return this;
  }

   /**
   * number of total headcount across all orgs
   * @return secondaryHeadCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of total headcount across all orgs")

  public Integer getSecondaryHeadCount() {
    return secondaryHeadCount;
  }


  public void setSecondaryHeadCount(Integer secondaryHeadCount) {
    
    
    
    this.secondaryHeadCount = secondaryHeadCount;
  }


  public Customer primaryHeadCountFilter(String primaryHeadCountFilter) {
    
    
    
    
    this.primaryHeadCountFilter = primaryHeadCountFilter;
    return this;
  }

   /**
   * primary headcount filter - used for billing purposes
   * @return primaryHeadCountFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "primary headcount filter - used for billing purposes")

  public String getPrimaryHeadCountFilter() {
    return primaryHeadCountFilter;
  }


  public void setPrimaryHeadCountFilter(String primaryHeadCountFilter) {
    
    
    
    this.primaryHeadCountFilter = primaryHeadCountFilter;
  }


  public Customer secondaryHeadCountFilter(String secondaryHeadCountFilter) {
    
    
    
    
    this.secondaryHeadCountFilter = secondaryHeadCountFilter;
    return this;
  }

   /**
   * secondary headcount filter - used for billing purposes
   * @return secondaryHeadCountFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "secondary headcount filter - used for billing purposes")

  public String getSecondaryHeadCountFilter() {
    return secondaryHeadCountFilter;
  }


  public void setSecondaryHeadCountFilter(String secondaryHeadCountFilter) {
    
    
    
    this.secondaryHeadCountFilter = secondaryHeadCountFilter;
  }


  public Customer arr(Double arr) {
    
    
    
    
    this.arr = arr;
    return this;
  }

  public Customer arr(Integer arr) {
    
    
    
    
    this.arr = arr.doubleValue();
    return this;
  }

   /**
   * current ARR of the customer based on most recent invoice
   * @return arr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current ARR of the customer based on most recent invoice")

  public Double getArr() {
    return arr;
  }


  public void setArr(Double arr) {
    
    
    
    this.arr = arr;
  }


  public Customer projectedArr(Double projectedArr) {
    
    
    
    
    this.projectedArr = projectedArr;
    return this;
  }

  public Customer projectedArr(Integer projectedArr) {
    
    
    
    
    this.projectedArr = projectedArr.doubleValue();
    return this;
  }

   /**
   * projected ARR of the customer for upcoming invoice, based on plan and headcount
   * @return projectedArr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "projected ARR of the customer for upcoming invoice, based on plan and headcount")

  public Double getProjectedArr() {
    return projectedArr;
  }


  public void setProjectedArr(Double projectedArr) {
    
    
    
    this.projectedArr = projectedArr;
  }


  public Customer trialStartDate(LocalDate trialStartDate) {
    
    
    
    
    this.trialStartDate = trialStartDate;
    return this;
  }

   /**
   * date this customer begins their trial period
   * @return trialStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date this customer begins their trial period")

  public LocalDate getTrialStartDate() {
    return trialStartDate;
  }


  public void setTrialStartDate(LocalDate trialStartDate) {
    
    
    
    this.trialStartDate = trialStartDate;
  }


  public Customer trialEndDate(LocalDate trialEndDate) {
    
    
    
    
    this.trialEndDate = trialEndDate;
    return this;
  }

   /**
   * date this customer ends their trial period
   * @return trialEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date this customer ends their trial period")

  public LocalDate getTrialEndDate() {
    return trialEndDate;
  }


  public void setTrialEndDate(LocalDate trialEndDate) {
    
    
    
    this.trialEndDate = trialEndDate;
  }


  public Customer stripeSubscriptionSync(StripeSubscriptionSyncEnum stripeSubscriptionSync) {
    
    
    
    
    this.stripeSubscriptionSync = stripeSubscriptionSync;
    return this;
  }

   /**
   * Stripe subscription settings
   * @return stripeSubscriptionSync
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Stripe subscription settings")

  public StripeSubscriptionSyncEnum getStripeSubscriptionSync() {
    return stripeSubscriptionSync;
  }


  public void setStripeSubscriptionSync(StripeSubscriptionSyncEnum stripeSubscriptionSync) {
    
    
    
    this.stripeSubscriptionSync = stripeSubscriptionSync;
  }


  public Customer createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public Customer createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "created by")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public Customer updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public Customer updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * updated by
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "updated by")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Customer instance itself
   */
  public Customer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.id, customer.id) &&
        Objects.equals(this.name, customer.name) &&
        Objects.equals(this.email, customer.email) &&
        Objects.equals(this.billAddress, customer.billAddress) &&
        Objects.equals(this.industry, customer.industry) &&
        Objects.equals(this.source, customer.source) &&
        Objects.equals(this.status, customer.status) &&
        Objects.equals(this.stripeCustomerId, customer.stripeCustomerId) &&
        Objects.equals(this.salesforceAccountId, customer.salesforceAccountId) &&
        Objects.equals(this.products, customer.products) &&
        Objects.equals(this.startDate, customer.startDate) &&
        Objects.equals(this.endDate, customer.endDate) &&
        Objects.equals(this.nextInvoiceDate, customer.nextInvoiceDate) &&
        Objects.equals(this.orgCount, customer.orgCount) &&
        Objects.equals(this.primaryHeadCount, customer.primaryHeadCount) &&
        Objects.equals(this.secondaryHeadCount, customer.secondaryHeadCount) &&
        Objects.equals(this.primaryHeadCountFilter, customer.primaryHeadCountFilter) &&
        Objects.equals(this.secondaryHeadCountFilter, customer.secondaryHeadCountFilter) &&
        Objects.equals(this.arr, customer.arr) &&
        Objects.equals(this.projectedArr, customer.projectedArr) &&
        Objects.equals(this.trialStartDate, customer.trialStartDate) &&
        Objects.equals(this.trialEndDate, customer.trialEndDate) &&
        Objects.equals(this.stripeSubscriptionSync, customer.stripeSubscriptionSync) &&
        Objects.equals(this.createAt, customer.createAt) &&
        Objects.equals(this.createId, customer.createId) &&
        Objects.equals(this.updateAt, customer.updateAt) &&
        Objects.equals(this.updateId, customer.updateId)&&
        Objects.equals(this.additionalProperties, customer.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, email, billAddress, industry, source, status, stripeCustomerId, salesforceAccountId, products, startDate, endDate, nextInvoiceDate, orgCount, primaryHeadCount, secondaryHeadCount, primaryHeadCountFilter, secondaryHeadCountFilter, arr, projectedArr, trialStartDate, trialEndDate, stripeSubscriptionSync, createAt, createId, updateAt, updateId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    billAddress: ").append(toIndentedString(billAddress)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stripeCustomerId: ").append(toIndentedString(stripeCustomerId)).append("\n");
    sb.append("    salesforceAccountId: ").append(toIndentedString(salesforceAccountId)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    nextInvoiceDate: ").append(toIndentedString(nextInvoiceDate)).append("\n");
    sb.append("    orgCount: ").append(toIndentedString(orgCount)).append("\n");
    sb.append("    primaryHeadCount: ").append(toIndentedString(primaryHeadCount)).append("\n");
    sb.append("    secondaryHeadCount: ").append(toIndentedString(secondaryHeadCount)).append("\n");
    sb.append("    primaryHeadCountFilter: ").append(toIndentedString(primaryHeadCountFilter)).append("\n");
    sb.append("    secondaryHeadCountFilter: ").append(toIndentedString(secondaryHeadCountFilter)).append("\n");
    sb.append("    arr: ").append(toIndentedString(arr)).append("\n");
    sb.append("    projectedArr: ").append(toIndentedString(projectedArr)).append("\n");
    sb.append("    trialStartDate: ").append(toIndentedString(trialStartDate)).append("\n");
    sb.append("    trialEndDate: ").append(toIndentedString(trialEndDate)).append("\n");
    sb.append("    stripeSubscriptionSync: ").append(toIndentedString(stripeSubscriptionSync)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("billAddress");
    openapiFields.add("industry");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("stripeCustomerId");
    openapiFields.add("salesforceAccountId");
    openapiFields.add("products");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("nextInvoiceDate");
    openapiFields.add("orgCount");
    openapiFields.add("primaryHeadCount");
    openapiFields.add("secondaryHeadCount");
    openapiFields.add("primaryHeadCountFilter");
    openapiFields.add("secondaryHeadCountFilter");
    openapiFields.add("arr");
    openapiFields.add("projectedArr");
    openapiFields.add("trialStartDate");
    openapiFields.add("trialEndDate");
    openapiFields.add("stripeSubscriptionSync");
    openapiFields.add("createAt");
    openapiFields.add("createId");
    openapiFields.add("updateAt");
    openapiFields.add("updateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Customer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Customer.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `billAddress`
      if (jsonObj.get("billAddress") != null && !jsonObj.get("billAddress").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("billAddress"));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("stripeCustomerId") != null && !jsonObj.get("stripeCustomerId").isJsonNull()) && !jsonObj.get("stripeCustomerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeCustomerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeCustomerId").toString()));
      }
      if ((jsonObj.get("salesforceAccountId") != null && !jsonObj.get("salesforceAccountId").isJsonNull()) && !jsonObj.get("salesforceAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salesforceAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salesforceAccountId").toString()));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            ProductItem.validateJsonObject(jsonArrayproducts.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("primaryHeadCountFilter") != null && !jsonObj.get("primaryHeadCountFilter").isJsonNull()) && !jsonObj.get("primaryHeadCountFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryHeadCountFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryHeadCountFilter").toString()));
      }
      if ((jsonObj.get("secondaryHeadCountFilter") != null && !jsonObj.get("secondaryHeadCountFilter").isJsonNull()) && !jsonObj.get("secondaryHeadCountFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryHeadCountFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryHeadCountFilter").toString()));
      }
      if ((jsonObj.get("stripeSubscriptionSync") != null && !jsonObj.get("stripeSubscriptionSync").isJsonNull()) && !jsonObj.get("stripeSubscriptionSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stripeSubscriptionSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stripeSubscriptionSync").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Customer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Customer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Customer
  * @throws IOException if the JSON string is invalid with respect to Customer
  */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

 /**
  * Convert an instance of Customer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

