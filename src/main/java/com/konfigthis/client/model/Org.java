/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.OnboardStepResult;
import com.konfigthis.client.model.OrgDomain;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Org
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Org {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  /**
   * type of organization
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    PRIVATE("PRIVATE"),
    
    PUBLIC("PUBLIC"),
    
    EDU("EDU"),
    
    GOV("GOV"),
    
    NONPROFIT("NONPROFIT"),
    
    DEMO("DEMO"),
    
    TEST("TEST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private String industry;

  public static final String SERIALIZED_NAME_EST_EMPLOYEES = "estEmployees";
  @SerializedName(SERIALIZED_NAME_EST_EMPLOYEES)
  private Integer estEmployees;

  public static final String SERIALIZED_NAME_EST_REVENUE = "estRevenue";
  @SerializedName(SERIALIZED_NAME_EST_REVENUE)
  private Integer estRevenue;

  public static final String SERIALIZED_NAME_FOUNDED_YEAR = "foundedYear";
  @SerializedName(SERIALIZED_NAME_FOUNDED_YEAR)
  private Integer foundedYear;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private List<OrgDomain> domains = null;

  /**
   * current status of organization
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    DISABLED("DISABLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "imagePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<String> currencies = null;

  public static final String SERIALIZED_NAME_STOCK = "stock";
  @SerializedName(SERIALIZED_NAME_STOCK)
  private String stock;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public static final String SERIALIZED_NAME_APP_TIME = "appTime";
  @SerializedName(SERIALIZED_NAME_APP_TIME)
  private String appTime;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private Integer zone;

  public static final String SERIALIZED_NAME_FISCAL_START = "fiscalStart";
  @SerializedName(SERIALIZED_NAME_FISCAL_START)
  private Integer fiscalStart;

  public static final String SERIALIZED_NAME_HEAD_JOB_ID = "headJobId";
  @SerializedName(SERIALIZED_NAME_HEAD_JOB_ID)
  private String headJobId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_SENSITIVE_FIELDS = "sensitiveFields";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_FIELDS)
  private Object sensitiveFields;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_INTERNAL_OPTIONS = "internalOptions";
  @SerializedName(SERIALIZED_NAME_INTERNAL_OPTIONS)
  private Object internalOptions;

  public static final String SERIALIZED_NAME_ONBOARD_STEPS = "onboardSteps";
  @SerializedName(SERIALIZED_NAME_ONBOARD_STEPS)
  private List<OnboardStepResult> onboardSteps = null;

  public static final String SERIALIZED_NAME_ONBOARDING = "onboarding";
  @SerializedName(SERIALIZED_NAME_ONBOARDING)
  private Boolean onboarding;

  public static final String SERIALIZED_NAME_SELF_SERVE_IMPORTING = "selfServeImporting";
  @SerializedName(SERIALIZED_NAME_SELF_SERVE_IMPORTING)
  private Boolean selfServeImporting;

  public static final String SERIALIZED_NAME_HEAD_COUNT = "headCount";
  @SerializedName(SERIALIZED_NAME_HEAD_COUNT)
  private Integer headCount;

  public static final String SERIALIZED_NAME_USER_COUNT = "userCount";
  @SerializedName(SERIALIZED_NAME_USER_COUNT)
  private Integer userCount;

  public static final String SERIALIZED_NAME_ACTIVE_USER_COUNT = "activeUserCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_USER_COUNT)
  private Integer activeUserCount;

  public static final String SERIALIZED_NAME_ACTIVE_AT = "activeAt";
  @SerializedName(SERIALIZED_NAME_ACTIVE_AT)
  private String activeAt;

  public static final String SERIALIZED_NAME_CHANGE_AT = "changeAt";
  @SerializedName(SERIALIZED_NAME_CHANGE_AT)
  private String changeAt;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_DESTROY_AT = "destroyAt";
  @SerializedName(SERIALIZED_NAME_DESTROY_AT)
  private String destroyAt;

  public static final String SERIALIZED_NAME_DESTROY_ID = "destroyId";
  @SerializedName(SERIALIZED_NAME_DESTROY_ID)
  private String destroyId;

  public Org() {
  }

  public Org id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Org customerId(String customerId) {
    
    
    
    
    this.customerId = customerId;
    return this;
  }

   /**
   * customer for billing processing
   * @return customerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "customer for billing processing")

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    
    
    
    this.customerId = customerId;
  }


  public Org name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * name of organization
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Acme Corp", required = true, value = "name of organization")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Org slug(String slug) {
    
    
    
    
    this.slug = slug;
    return this;
  }

   /**
   * unique slug of organization
   * @return slug
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "acme-corp", required = true, value = "unique slug of organization")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    
    
    
    this.slug = slug;
  }


  public Org type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of organization
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PRIVATE", value = "type of organization")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Org industry(String industry) {
    
    
    
    
    this.industry = industry;
    return this;
  }

   /**
   * industry
   * @return industry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Software and Internet", value = "industry")

  public String getIndustry() {
    return industry;
  }


  public void setIndustry(String industry) {
    
    
    
    this.industry = industry;
  }


  public Org estEmployees(Integer estEmployees) {
    
    
    
    
    this.estEmployees = estEmployees;
    return this;
  }

   /**
   * approximate number of employees
   * @return estEmployees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "approximate number of employees")

  public Integer getEstEmployees() {
    return estEmployees;
  }


  public void setEstEmployees(Integer estEmployees) {
    
    
    
    this.estEmployees = estEmployees;
  }


  public Org estRevenue(Integer estRevenue) {
    
    
    
    
    this.estRevenue = estRevenue;
    return this;
  }

   /**
   * approximate amount of revenue
   * @return estRevenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "approximate amount of revenue")

  public Integer getEstRevenue() {
    return estRevenue;
  }


  public void setEstRevenue(Integer estRevenue) {
    
    
    
    this.estRevenue = estRevenue;
  }


  public Org foundedYear(Integer foundedYear) {
    
    
    
    
    this.foundedYear = foundedYear;
    return this;
  }

   /**
   * year of founding
   * @return foundedYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1998", value = "year of founding")

  public Integer getFoundedYear() {
    return foundedYear;
  }


  public void setFoundedYear(Integer foundedYear) {
    
    
    
    this.foundedYear = foundedYear;
  }


  public Org address(Address address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    
    
    
    this.address = address;
  }


  public Org phone(String phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * company phone number in E.164 format
   * @return phone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "company phone number in E.164 format")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    
    this.phone = phone;
  }


  public Org email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * primary contact email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "bob@example.com", value = "primary contact email")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public Org url(URI url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * website URL
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "website URL")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    
    
    
    this.url = url;
  }


  public Org domains(List<OrgDomain> domains) {
    
    
    
    
    this.domains = domains;
    return this;
  }

  public Org addDomainsItem(OrgDomain domainsItem) {
    if (this.domains == null) {
      this.domains = new ArrayList<>();
    }
    this.domains.add(domainsItem);
    return this;
  }

   /**
   * domains used by this org
   * @return domains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "domains used by this org")

  public List<OrgDomain> getDomains() {
    return domains;
  }


  public void setDomains(List<OrgDomain> domains) {
    
    
    
    this.domains = domains;
  }


  public Org status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * current status of organization
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current status of organization")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Org imagePath(String imagePath) {
    
    
    
    
    this.imagePath = imagePath;
    return this;
  }

   /**
   * path to full-sized profile image in storage
   * @return imagePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path to full-sized profile image in storage")

  public String getImagePath() {
    return imagePath;
  }


  public void setImagePath(String imagePath) {
    
    
    
    this.imagePath = imagePath;
  }


  public Org currencies(List<String> currencies) {
    
    
    
    
    this.currencies = currencies;
    return this;
  }

  public Org addCurrenciesItem(String currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

   /**
   * types of currencies in use, with the first currency the primary currency
   * @return currencies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "types of currencies in use, with the first currency the primary currency")

  public List<String> getCurrencies() {
    return currencies;
  }


  public void setCurrencies(List<String> currencies) {
    
    
    
    this.currencies = currencies;
  }


  public Org stock(String stock) {
    
    
    
    
    this.stock = stock;
    return this;
  }

   /**
   * stock symbol
   * @return stock
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GOOG", value = "stock symbol")

  public String getStock() {
    return stock;
  }


  public void setStock(String stock) {
    
    
    
    this.stock = stock;
  }


  public Org timezone(String timezone) {
    
    
    
    
    this.timezone = timezone;
    return this;
  }

   /**
   * timezone in use
   * @return timezone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "America/New_York", value = "timezone in use")

  public String getTimezone() {
    return timezone;
  }


  public void setTimezone(String timezone) {
    
    
    
    this.timezone = timezone;
  }


  public Org appTime(String appTime) {
    
    
    
    
    this.appTime = appTime;
    return this;
  }

   /**
   * approximate time of day for daily app syncs to run (defaults to 9am Eastern time)
   * @return appTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "09:00", value = "approximate time of day for daily app syncs to run (defaults to 9am Eastern time)")

  public String getAppTime() {
    return appTime;
  }


  public void setAppTime(String appTime) {
    
    
    
    this.appTime = appTime;
  }


  public Org zone(Integer zone) {
    
    
    
    
    this.zone = zone;
    return this;
  }

   /**
   * infrastructure zone
   * @return zone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "infrastructure zone")

  public Integer getZone() {
    return zone;
  }


  public void setZone(Integer zone) {
    
    
    
    this.zone = zone;
  }


  public Org fiscalStart(Integer fiscalStart) {
    
    
    
    
    this.fiscalStart = fiscalStart;
    return this;
  }

   /**
   * number of months into the calendar year that the fiscal year starts (1 &#x3D; February, 2 &#x3D; March)
   * @return fiscalStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of months into the calendar year that the fiscal year starts (1 = February, 2 = March)")

  public Integer getFiscalStart() {
    return fiscalStart;
  }


  public void setFiscalStart(Integer fiscalStart) {
    
    
    
    this.fiscalStart = fiscalStart;
  }


  public Org headJobId(String headJobId) {
    
    
    
    
    this.headJobId = headJobId;
    return this;
  }

   /**
   * head of the organization
   * @return headJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "head of the organization")

  public String getHeadJobId() {
    return headJobId;
  }


  public void setHeadJobId(String headJobId) {
    
    
    
    this.headJobId = headJobId;
  }


  public Org startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * start date of history
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "start date of history")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Org sensitiveFields(Object sensitiveFields) {
    
    
    
    
    this.sensitiveFields = sensitiveFields;
    return this;
  }

   /**
   * map of sensitive field defaults
   * @return sensitiveFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "map of sensitive field defaults")

  public Object getSensitiveFields() {
    return sensitiveFields;
  }


  public void setSensitiveFields(Object sensitiveFields) {
    
    
    
    this.sensitiveFields = sensitiveFields;
  }


  public Org options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * org-public options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "org-public options")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }


  public Org internalOptions(Object internalOptions) {
    
    
    
    
    this.internalOptions = internalOptions;
    return this;
  }

   /**
   * internal (ChartHop controlled) options
   * @return internalOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "internal (ChartHop controlled) options")

  public Object getInternalOptions() {
    return internalOptions;
  }


  public void setInternalOptions(Object internalOptions) {
    
    
    
    this.internalOptions = internalOptions;
  }


  public Org onboardSteps(List<OnboardStepResult> onboardSteps) {
    
    
    
    
    this.onboardSteps = onboardSteps;
    return this;
  }

  public Org addOnboardStepsItem(OnboardStepResult onboardStepsItem) {
    if (this.onboardSteps == null) {
      this.onboardSteps = new ArrayList<>();
    }
    this.onboardSteps.add(onboardStepsItem);
    return this;
  }

   /**
   * list of onboard steps that this Org has completed (or skipped)
   * @return onboardSteps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of onboard steps that this Org has completed (or skipped)")

  public List<OnboardStepResult> getOnboardSteps() {
    return onboardSteps;
  }


  public void setOnboardSteps(List<OnboardStepResult> onboardSteps) {
    
    
    
    this.onboardSteps = onboardSteps;
  }


  public Org onboarding(Boolean onboarding) {
    
    
    
    
    this.onboarding = onboarding;
    return this;
  }

   /**
   * current onboarding status of an organization, allowing clearing of org
   * @return onboarding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current onboarding status of an organization, allowing clearing of org")

  public Boolean getOnboarding() {
    return onboarding;
  }


  public void setOnboarding(Boolean onboarding) {
    
    
    
    this.onboarding = onboarding;
  }


  public Org selfServeImporting(Boolean selfServeImporting) {
    
    
    
    
    this.selfServeImporting = selfServeImporting;
    return this;
  }

   /**
   * completion status of initial import for orgs signed up via self serve
   * @return selfServeImporting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "completion status of initial import for orgs signed up via self serve")

  public Boolean getSelfServeImporting() {
    return selfServeImporting;
  }


  public void setSelfServeImporting(Boolean selfServeImporting) {
    
    
    
    this.selfServeImporting = selfServeImporting;
  }


  public Org headCount(Integer headCount) {
    
    
    
    
    this.headCount = headCount;
    return this;
  }

   /**
   * number of total headcount currently in the org
   * @return headCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of total headcount currently in the org")

  public Integer getHeadCount() {
    return headCount;
  }


  public void setHeadCount(Integer headCount) {
    
    
    
    this.headCount = headCount;
  }


  public Org userCount(Integer userCount) {
    
    
    
    
    this.userCount = userCount;
    return this;
  }

   /**
   * number of non-ChartHop, non-app users in the org
   * @return userCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of non-ChartHop, non-app users in the org")

  public Integer getUserCount() {
    return userCount;
  }


  public void setUserCount(Integer userCount) {
    
    
    
    this.userCount = userCount;
  }


  public Org activeUserCount(Integer activeUserCount) {
    
    
    
    
    this.activeUserCount = activeUserCount;
    return this;
  }

   /**
   * number of non-ChartHop, non-app users in the org active in the past month
   * @return activeUserCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of non-ChartHop, non-app users in the org active in the past month")

  public Integer getActiveUserCount() {
    return activeUserCount;
  }


  public void setActiveUserCount(Integer activeUserCount) {
    
    
    
    this.activeUserCount = activeUserCount;
  }


  public Org activeAt(String activeAt) {
    
    
    
    
    this.activeAt = activeAt;
    return this;
  }

   /**
   * last timestamp that any user was active in the org
   * @return activeAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "last timestamp that any user was active in the org")

  public String getActiveAt() {
    return activeAt;
  }


  public void setActiveAt(String activeAt) {
    
    
    
    this.activeAt = activeAt;
  }


  public Org changeAt(String changeAt) {
    
    
    
    
    this.changeAt = changeAt;
    return this;
  }

   /**
   * timestamp of most recent changes made to org
   * @return changeAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "timestamp of most recent changes made to org")

  public String getChangeAt() {
    return changeAt;
  }


  public void setChangeAt(String changeAt) {
    
    
    
    this.changeAt = changeAt;
  }


  public Org createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public Org createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public Org updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * last updated by user id
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "last updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public Org updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * last updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "last updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public Org destroyAt(String destroyAt) {
    
    
    
    
    this.destroyAt = destroyAt;
    return this;
  }

   /**
   * timestamp that the org is marked for data destruction
   * @return destroyAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "timestamp that the org is marked for data destruction")

  public String getDestroyAt() {
    return destroyAt;
  }


  public void setDestroyAt(String destroyAt) {
    
    
    
    this.destroyAt = destroyAt;
  }


  public Org destroyId(String destroyId) {
    
    
    
    
    this.destroyId = destroyId;
    return this;
  }

   /**
   * user who marked the org for data destruction
   * @return destroyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "user who marked the org for data destruction")

  public String getDestroyId() {
    return destroyId;
  }


  public void setDestroyId(String destroyId) {
    
    
    
    this.destroyId = destroyId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Org instance itself
   */
  public Org putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Org org = (Org) o;
    return Objects.equals(this.id, org.id) &&
        Objects.equals(this.customerId, org.customerId) &&
        Objects.equals(this.name, org.name) &&
        Objects.equals(this.slug, org.slug) &&
        Objects.equals(this.type, org.type) &&
        Objects.equals(this.industry, org.industry) &&
        Objects.equals(this.estEmployees, org.estEmployees) &&
        Objects.equals(this.estRevenue, org.estRevenue) &&
        Objects.equals(this.foundedYear, org.foundedYear) &&
        Objects.equals(this.address, org.address) &&
        Objects.equals(this.phone, org.phone) &&
        Objects.equals(this.email, org.email) &&
        Objects.equals(this.url, org.url) &&
        Objects.equals(this.domains, org.domains) &&
        Objects.equals(this.status, org.status) &&
        Objects.equals(this.imagePath, org.imagePath) &&
        Objects.equals(this.currencies, org.currencies) &&
        Objects.equals(this.stock, org.stock) &&
        Objects.equals(this.timezone, org.timezone) &&
        Objects.equals(this.appTime, org.appTime) &&
        Objects.equals(this.zone, org.zone) &&
        Objects.equals(this.fiscalStart, org.fiscalStart) &&
        Objects.equals(this.headJobId, org.headJobId) &&
        Objects.equals(this.startDate, org.startDate) &&
        Objects.equals(this.sensitiveFields, org.sensitiveFields) &&
        Objects.equals(this.options, org.options) &&
        Objects.equals(this.internalOptions, org.internalOptions) &&
        Objects.equals(this.onboardSteps, org.onboardSteps) &&
        Objects.equals(this.onboarding, org.onboarding) &&
        Objects.equals(this.selfServeImporting, org.selfServeImporting) &&
        Objects.equals(this.headCount, org.headCount) &&
        Objects.equals(this.userCount, org.userCount) &&
        Objects.equals(this.activeUserCount, org.activeUserCount) &&
        Objects.equals(this.activeAt, org.activeAt) &&
        Objects.equals(this.changeAt, org.changeAt) &&
        Objects.equals(this.createId, org.createId) &&
        Objects.equals(this.createAt, org.createAt) &&
        Objects.equals(this.updateId, org.updateId) &&
        Objects.equals(this.updateAt, org.updateAt) &&
        Objects.equals(this.destroyAt, org.destroyAt) &&
        Objects.equals(this.destroyId, org.destroyId)&&
        Objects.equals(this.additionalProperties, org.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, customerId, name, slug, type, industry, estEmployees, estRevenue, foundedYear, address, phone, email, url, domains, status, imagePath, currencies, stock, timezone, appTime, zone, fiscalStart, headJobId, startDate, sensitiveFields, options, internalOptions, onboardSteps, onboarding, selfServeImporting, headCount, userCount, activeUserCount, activeAt, changeAt, createId, createAt, updateId, updateAt, destroyAt, destroyId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Org {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    estEmployees: ").append(toIndentedString(estEmployees)).append("\n");
    sb.append("    estRevenue: ").append(toIndentedString(estRevenue)).append("\n");
    sb.append("    foundedYear: ").append(toIndentedString(foundedYear)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    stock: ").append(toIndentedString(stock)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    appTime: ").append(toIndentedString(appTime)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("    fiscalStart: ").append(toIndentedString(fiscalStart)).append("\n");
    sb.append("    headJobId: ").append(toIndentedString(headJobId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    sensitiveFields: ").append(toIndentedString(sensitiveFields)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    internalOptions: ").append(toIndentedString(internalOptions)).append("\n");
    sb.append("    onboardSteps: ").append(toIndentedString(onboardSteps)).append("\n");
    sb.append("    onboarding: ").append(toIndentedString(onboarding)).append("\n");
    sb.append("    selfServeImporting: ").append(toIndentedString(selfServeImporting)).append("\n");
    sb.append("    headCount: ").append(toIndentedString(headCount)).append("\n");
    sb.append("    userCount: ").append(toIndentedString(userCount)).append("\n");
    sb.append("    activeUserCount: ").append(toIndentedString(activeUserCount)).append("\n");
    sb.append("    activeAt: ").append(toIndentedString(activeAt)).append("\n");
    sb.append("    changeAt: ").append(toIndentedString(changeAt)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    destroyAt: ").append(toIndentedString(destroyAt)).append("\n");
    sb.append("    destroyId: ").append(toIndentedString(destroyId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("customerId");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("type");
    openapiFields.add("industry");
    openapiFields.add("estEmployees");
    openapiFields.add("estRevenue");
    openapiFields.add("foundedYear");
    openapiFields.add("address");
    openapiFields.add("phone");
    openapiFields.add("email");
    openapiFields.add("url");
    openapiFields.add("domains");
    openapiFields.add("status");
    openapiFields.add("imagePath");
    openapiFields.add("currencies");
    openapiFields.add("stock");
    openapiFields.add("timezone");
    openapiFields.add("appTime");
    openapiFields.add("zone");
    openapiFields.add("fiscalStart");
    openapiFields.add("headJobId");
    openapiFields.add("startDate");
    openapiFields.add("sensitiveFields");
    openapiFields.add("options");
    openapiFields.add("internalOptions");
    openapiFields.add("onboardSteps");
    openapiFields.add("onboarding");
    openapiFields.add("selfServeImporting");
    openapiFields.add("headCount");
    openapiFields.add("userCount");
    openapiFields.add("activeUserCount");
    openapiFields.add("activeAt");
    openapiFields.add("changeAt");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");
    openapiFields.add("destroyAt");
    openapiFields.add("destroyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("slug");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Org
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Org.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Org is not found in the empty JSON string", Org.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Org.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull()) && !jsonObj.get("industry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonObject(jsonObj.getAsJsonObject("address"));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("domains") != null && !jsonObj.get("domains").isJsonNull()) {
        JsonArray jsonArraydomains = jsonObj.getAsJsonArray("domains");
        if (jsonArraydomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("domains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `domains` to be an array in the JSON string but got `%s`", jsonObj.get("domains").toString()));
          }

          // validate the optional field `domains` (array)
          for (int i = 0; i < jsonArraydomains.size(); i++) {
            OrgDomain.validateJsonObject(jsonArraydomains.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("imagePath") != null && !jsonObj.get("imagePath").isJsonNull()) && !jsonObj.get("imagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      if ((jsonObj.get("stock") != null && !jsonObj.get("stock").isJsonNull()) && !jsonObj.get("stock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stock").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      if ((jsonObj.get("appTime") != null && !jsonObj.get("appTime").isJsonNull()) && !jsonObj.get("appTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appTime").toString()));
      }
      if ((jsonObj.get("headJobId") != null && !jsonObj.get("headJobId").isJsonNull()) && !jsonObj.get("headJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headJobId").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if (jsonObj.get("onboardSteps") != null && !jsonObj.get("onboardSteps").isJsonNull()) {
        JsonArray jsonArrayonboardSteps = jsonObj.getAsJsonArray("onboardSteps");
        if (jsonArrayonboardSteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("onboardSteps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `onboardSteps` to be an array in the JSON string but got `%s`", jsonObj.get("onboardSteps").toString()));
          }

          // validate the optional field `onboardSteps` (array)
          for (int i = 0; i < jsonArrayonboardSteps.size(); i++) {
            OnboardStepResult.validateJsonObject(jsonArrayonboardSteps.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("activeAt") != null && !jsonObj.get("activeAt").isJsonNull()) && !jsonObj.get("activeAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeAt").toString()));
      }
      if ((jsonObj.get("changeAt") != null && !jsonObj.get("changeAt").isJsonNull()) && !jsonObj.get("changeAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeAt").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("destroyAt") != null && !jsonObj.get("destroyAt").isJsonNull()) && !jsonObj.get("destroyAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destroyAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destroyAt").toString()));
      }
      if ((jsonObj.get("destroyId") != null && !jsonObj.get("destroyId").isJsonNull()) && !jsonObj.get("destroyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destroyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destroyId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Org.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Org' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Org> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Org.class));

       return (TypeAdapter<T>) new TypeAdapter<Org>() {
           @Override
           public void write(JsonWriter out, Org value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Org read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Org instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Org given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Org
  * @throws IOException if the JSON string is invalid with respect to Org
  */
  public static Org fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Org.class);
  }

 /**
  * Convert an instance of Org to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

