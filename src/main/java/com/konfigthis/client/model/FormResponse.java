/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FormResponseAnswer;
import com.konfigthis.client.model.ShareAccess;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FormResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FormResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_FORM_VERSION_ID = "formVersionId";
  @SerializedName(SERIALIZED_NAME_FORM_VERSION_ID)
  private String formVersionId;

  public static final String SERIALIZED_NAME_SUBMIT_PERSON_ID = "submitPersonId";
  @SerializedName(SERIALIZED_NAME_SUBMIT_PERSON_ID)
  private String submitPersonId;

  public static final String SERIALIZED_NAME_SUBMIT_USER_ID = "submitUserId";
  @SerializedName(SERIALIZED_NAME_SUBMIT_USER_ID)
  private String submitUserId;

  public static final String SERIALIZED_NAME_CHANGE_ID = "changeId";
  @SerializedName(SERIALIZED_NAME_CHANGE_ID)
  private String changeId;

  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_SHARE_ACCESS = "shareAccess";
  @SerializedName(SERIALIZED_NAME_SHARE_ACCESS)
  private List<ShareAccess> shareAccess = null;

  /**
   * sensitivity level of the author of the form response, if it differs from the form response
   */
  @JsonAdapter(AuthorSensitiveEnum.Adapter.class)
 public enum AuthorSensitiveEnum {
    ANONYMOUS("ANONYMOUS"),
    
    PRIVATE("PRIVATE"),
    
    HIGH("HIGH"),
    
    MANAGER("MANAGER");

    private String value;

    AuthorSensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorSensitiveEnum fromValue(String value) {
      for (AuthorSensitiveEnum b : AuthorSensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorSensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorSensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorSensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorSensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHOR_SENSITIVE = "authorSensitive";
  @SerializedName(SERIALIZED_NAME_AUTHOR_SENSITIVE)
  private AuthorSensitiveEnum authorSensitive;

  public static final String SERIALIZED_NAME_TARGET_ENTITY_ID = "targetEntityId";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_ID)
  private String targetEntityId;

  /**
   * target entity type -- the entity that the form response is about
   */
  @JsonAdapter(TargetEntityTypeEnum.Adapter.class)
 public enum TargetEntityTypeEnum {
    NONE("NONE"),
    
    PERSON("PERSON");

    private String value;

    TargetEntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetEntityTypeEnum fromValue(String value) {
      for (TargetEntityTypeEnum b : TargetEntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetEntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetEntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetEntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetEntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET_ENTITY_TYPE = "targetEntityType";
  @SerializedName(SERIALIZED_NAME_TARGET_ENTITY_TYPE)
  private TargetEntityTypeEnum targetEntityType;

  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private List<FormResponseAnswer> answers = null;

  public static final String SERIALIZED_NAME_SUBMIT_AT = "submitAt";
  @SerializedName(SERIALIZED_NAME_SUBMIT_AT)
  private Long submitAt;

  public static final String SERIALIZED_NAME_APPROVAL_AT = "approvalAt";
  @SerializedName(SERIALIZED_NAME_APPROVAL_AT)
  private Long approvalAt;

  public static final String SERIALIZED_NAME_APPROVAL_ID = "approvalId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_ID)
  private String approvalId;

  public static final String SERIALIZED_NAME_APPROVAL_NOTE = "approvalNote";
  @SerializedName(SERIALIZED_NAME_APPROVAL_NOTE)
  private String approvalNote;

  /**
   * status of form response
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    PROPOSED("PROPOSED"),
    
    REJECTED("REJECTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public FormResponse() {
  }

  public FormResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public FormResponse orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public FormResponse externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * if the response was imported from an external system, the unique identifier of the response from that system
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "google:1234567890", value = "if the response was imported from an external system, the unique identifier of the response from that system")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public FormResponse formId(String formId) {
    
    
    
    
    this.formId = formId;
    return this;
  }

   /**
   * form id that the response is a response for
   * @return formId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "form id that the response is a response for")

  public String getFormId() {
    return formId;
  }


  public void setFormId(String formId) {
    
    
    
    this.formId = formId;
  }


  public FormResponse formVersionId(String formVersionId) {
    
    
    
    
    this.formVersionId = formVersionId;
    return this;
  }

   /**
   * form version id that the response is a response for
   * @return formVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "form version id that the response is a response for")

  public String getFormVersionId() {
    return formVersionId;
  }


  public void setFormVersionId(String formVersionId) {
    
    
    
    this.formVersionId = formVersionId;
  }


  public FormResponse submitPersonId(String submitPersonId) {
    
    
    
    
    this.submitPersonId = submitPersonId;
    return this;
  }

   /**
   * person id who filled out the form response (null if anonymous)
   * @return submitPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "person id who filled out the form response (null if anonymous)")

  public String getSubmitPersonId() {
    return submitPersonId;
  }


  public void setSubmitPersonId(String submitPersonId) {
    
    
    
    this.submitPersonId = submitPersonId;
  }


  public FormResponse submitUserId(String submitUserId) {
    
    
    
    
    this.submitUserId = submitUserId;
    return this;
  }

   /**
   * user id who filled out the form response (can be null if anonymous or imported data)
   * @return submitUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "user id who filled out the form response (can be null if anonymous or imported data)")

  public String getSubmitUserId() {
    return submitUserId;
  }


  public void setSubmitUserId(String submitUserId) {
    
    
    
    this.submitUserId = submitUserId;
  }


  public FormResponse changeId(String changeId) {
    
    
    
    
    this.changeId = changeId;
    return this;
  }

   /**
   * change id, if the form response is linked to a DATA change
   * @return changeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "change id, if the form response is linked to a DATA change")

  public String getChangeId() {
    return changeId;
  }


  public void setChangeId(String changeId) {
    
    
    
    this.changeId = changeId;
  }


  public FormResponse assessmentId(String assessmentId) {
    
    
    
    
    this.assessmentId = assessmentId;
    return this;
  }

   /**
   * assessment id, if the form response is related to an assesment
   * @return assessmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "assessment id, if the form response is related to an assesment")

  public String getAssessmentId() {
    return assessmentId;
  }


  public void setAssessmentId(String assessmentId) {
    
    
    
    this.assessmentId = assessmentId;
  }


  public FormResponse shareAccess(List<ShareAccess> shareAccess) {
    
    
    
    
    this.shareAccess = shareAccess;
    return this;
  }

  public FormResponse addShareAccessItem(ShareAccess shareAccessItem) {
    if (this.shareAccess == null) {
      this.shareAccess = new ArrayList<>();
    }
    this.shareAccess.add(shareAccessItem);
    return this;
  }

   /**
   * list of share access, if the form response has been shared with anyone
   * @return shareAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of share access, if the form response has been shared with anyone")

  public List<ShareAccess> getShareAccess() {
    return shareAccess;
  }


  public void setShareAccess(List<ShareAccess> shareAccess) {
    
    
    
    this.shareAccess = shareAccess;
  }


  public FormResponse authorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    
    this.authorSensitive = authorSensitive;
    return this;
  }

   /**
   * sensitivity level of the author of the form response, if it differs from the form response
   * @return authorSensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sensitivity level of the author of the form response, if it differs from the form response")

  public AuthorSensitiveEnum getAuthorSensitive() {
    return authorSensitive;
  }


  public void setAuthorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    this.authorSensitive = authorSensitive;
  }


  public FormResponse targetEntityId(String targetEntityId) {
    
    
    
    
    this.targetEntityId = targetEntityId;
    return this;
  }

   /**
   * target entity id -- the entity that the form response is about
   * @return targetEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "target entity id -- the entity that the form response is about")

  public String getTargetEntityId() {
    return targetEntityId;
  }


  public void setTargetEntityId(String targetEntityId) {
    
    
    
    this.targetEntityId = targetEntityId;
  }


  public FormResponse targetEntityType(TargetEntityTypeEnum targetEntityType) {
    
    
    
    
    this.targetEntityType = targetEntityType;
    return this;
  }

   /**
   * target entity type -- the entity that the form response is about
   * @return targetEntityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "target entity type -- the entity that the form response is about")

  public TargetEntityTypeEnum getTargetEntityType() {
    return targetEntityType;
  }


  public void setTargetEntityType(TargetEntityTypeEnum targetEntityType) {
    
    
    
    this.targetEntityType = targetEntityType;
  }


  public FormResponse answers(List<FormResponseAnswer> answers) {
    
    
    
    
    this.answers = answers;
    return this;
  }

  public FormResponse addAnswersItem(FormResponseAnswer answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

   /**
   * list of answers in the form response
   * @return answers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of answers in the form response")

  public List<FormResponseAnswer> getAnswers() {
    return answers;
  }


  public void setAnswers(List<FormResponseAnswer> answers) {
    
    
    
    this.answers = answers;
  }


  public FormResponse submitAt(Long submitAt) {
    
    
    
    
    this.submitAt = submitAt;
    return this;
  }

   /**
   * timestamp that the form response was submitted
   * @return submitAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "timestamp that the form response was submitted")

  public Long getSubmitAt() {
    return submitAt;
  }


  public void setSubmitAt(Long submitAt) {
    
    
    
    this.submitAt = submitAt;
  }


  public FormResponse approvalAt(Long approvalAt) {
    
    
    
    
    this.approvalAt = approvalAt;
    return this;
  }

   /**
   * timestamp that the form response was approved
   * @return approvalAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "timestamp that the form response was approved")

  public Long getApprovalAt() {
    return approvalAt;
  }


  public void setApprovalAt(Long approvalAt) {
    
    
    
    this.approvalAt = approvalAt;
  }


  public FormResponse approvalId(String approvalId) {
    
    
    
    
    this.approvalId = approvalId;
    return this;
  }

   /**
   * user id who approved the form response
   * @return approvalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "user id who approved the form response")

  public String getApprovalId() {
    return approvalId;
  }


  public void setApprovalId(String approvalId) {
    
    
    
    this.approvalId = approvalId;
  }


  public FormResponse approvalNote(String approvalNote) {
    
    
    
    
    this.approvalNote = approvalNote;
    return this;
  }

   /**
   * note left by the user who approved -- this is for backwards compatibility with the old approval system
   * @return approvalNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "note left by the user who approved -- this is for backwards compatibility with the old approval system")

  public String getApprovalNote() {
    return approvalNote;
  }


  public void setApprovalNote(String approvalNote) {
    
    
    
    this.approvalNote = approvalNote;
  }


  public FormResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of form response
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "status of form response")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public FormResponse createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public FormResponse createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public FormResponse updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * last updated by user id
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "last updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public FormResponse updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * last updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "last updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public FormResponse deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public FormResponse deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FormResponse instance itself
   */
  public FormResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormResponse formResponse = (FormResponse) o;
    return Objects.equals(this.id, formResponse.id) &&
        Objects.equals(this.orgId, formResponse.orgId) &&
        Objects.equals(this.externalId, formResponse.externalId) &&
        Objects.equals(this.formId, formResponse.formId) &&
        Objects.equals(this.formVersionId, formResponse.formVersionId) &&
        Objects.equals(this.submitPersonId, formResponse.submitPersonId) &&
        Objects.equals(this.submitUserId, formResponse.submitUserId) &&
        Objects.equals(this.changeId, formResponse.changeId) &&
        Objects.equals(this.assessmentId, formResponse.assessmentId) &&
        Objects.equals(this.shareAccess, formResponse.shareAccess) &&
        Objects.equals(this.authorSensitive, formResponse.authorSensitive) &&
        Objects.equals(this.targetEntityId, formResponse.targetEntityId) &&
        Objects.equals(this.targetEntityType, formResponse.targetEntityType) &&
        Objects.equals(this.answers, formResponse.answers) &&
        Objects.equals(this.submitAt, formResponse.submitAt) &&
        Objects.equals(this.approvalAt, formResponse.approvalAt) &&
        Objects.equals(this.approvalId, formResponse.approvalId) &&
        Objects.equals(this.approvalNote, formResponse.approvalNote) &&
        Objects.equals(this.status, formResponse.status) &&
        Objects.equals(this.createId, formResponse.createId) &&
        Objects.equals(this.createAt, formResponse.createAt) &&
        Objects.equals(this.updateId, formResponse.updateId) &&
        Objects.equals(this.updateAt, formResponse.updateAt) &&
        Objects.equals(this.deleteId, formResponse.deleteId) &&
        Objects.equals(this.deleteAt, formResponse.deleteAt)&&
        Objects.equals(this.additionalProperties, formResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgId, externalId, formId, formVersionId, submitPersonId, submitUserId, changeId, assessmentId, shareAccess, authorSensitive, targetEntityId, targetEntityType, answers, submitAt, approvalAt, approvalId, approvalNote, status, createId, createAt, updateId, updateAt, deleteId, deleteAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formVersionId: ").append(toIndentedString(formVersionId)).append("\n");
    sb.append("    submitPersonId: ").append(toIndentedString(submitPersonId)).append("\n");
    sb.append("    submitUserId: ").append(toIndentedString(submitUserId)).append("\n");
    sb.append("    changeId: ").append(toIndentedString(changeId)).append("\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    shareAccess: ").append(toIndentedString(shareAccess)).append("\n");
    sb.append("    authorSensitive: ").append(toIndentedString(authorSensitive)).append("\n");
    sb.append("    targetEntityId: ").append(toIndentedString(targetEntityId)).append("\n");
    sb.append("    targetEntityType: ").append(toIndentedString(targetEntityType)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    submitAt: ").append(toIndentedString(submitAt)).append("\n");
    sb.append("    approvalAt: ").append(toIndentedString(approvalAt)).append("\n");
    sb.append("    approvalId: ").append(toIndentedString(approvalId)).append("\n");
    sb.append("    approvalNote: ").append(toIndentedString(approvalNote)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("externalId");
    openapiFields.add("formId");
    openapiFields.add("formVersionId");
    openapiFields.add("submitPersonId");
    openapiFields.add("submitUserId");
    openapiFields.add("changeId");
    openapiFields.add("assessmentId");
    openapiFields.add("shareAccess");
    openapiFields.add("authorSensitive");
    openapiFields.add("targetEntityId");
    openapiFields.add("targetEntityType");
    openapiFields.add("answers");
    openapiFields.add("submitAt");
    openapiFields.add("approvalAt");
    openapiFields.add("approvalId");
    openapiFields.add("approvalNote");
    openapiFields.add("status");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FormResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FormResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormResponse is not found in the empty JSON string", FormResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FormResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("formId") != null && !jsonObj.get("formId").isJsonNull()) && !jsonObj.get("formId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formId").toString()));
      }
      if ((jsonObj.get("formVersionId") != null && !jsonObj.get("formVersionId").isJsonNull()) && !jsonObj.get("formVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formVersionId").toString()));
      }
      if ((jsonObj.get("submitPersonId") != null && !jsonObj.get("submitPersonId").isJsonNull()) && !jsonObj.get("submitPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitPersonId").toString()));
      }
      if ((jsonObj.get("submitUserId") != null && !jsonObj.get("submitUserId").isJsonNull()) && !jsonObj.get("submitUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitUserId").toString()));
      }
      if ((jsonObj.get("changeId") != null && !jsonObj.get("changeId").isJsonNull()) && !jsonObj.get("changeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeId").toString()));
      }
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if (jsonObj.get("shareAccess") != null && !jsonObj.get("shareAccess").isJsonNull()) {
        JsonArray jsonArrayshareAccess = jsonObj.getAsJsonArray("shareAccess");
        if (jsonArrayshareAccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareAccess").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareAccess` to be an array in the JSON string but got `%s`", jsonObj.get("shareAccess").toString()));
          }

          // validate the optional field `shareAccess` (array)
          for (int i = 0; i < jsonArrayshareAccess.size(); i++) {
            ShareAccess.validateJsonObject(jsonArrayshareAccess.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("authorSensitive") != null && !jsonObj.get("authorSensitive").isJsonNull()) && !jsonObj.get("authorSensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorSensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorSensitive").toString()));
      }
      if ((jsonObj.get("targetEntityId") != null && !jsonObj.get("targetEntityId").isJsonNull()) && !jsonObj.get("targetEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityId").toString()));
      }
      if ((jsonObj.get("targetEntityType") != null && !jsonObj.get("targetEntityType").isJsonNull()) && !jsonObj.get("targetEntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEntityType").toString()));
      }
      if (jsonObj.get("answers") != null && !jsonObj.get("answers").isJsonNull()) {
        JsonArray jsonArrayanswers = jsonObj.getAsJsonArray("answers");
        if (jsonArrayanswers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("answers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `answers` to be an array in the JSON string but got `%s`", jsonObj.get("answers").toString()));
          }

          // validate the optional field `answers` (array)
          for (int i = 0; i < jsonArrayanswers.size(); i++) {
            FormResponseAnswer.validateJsonObject(jsonArrayanswers.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("approvalId") != null && !jsonObj.get("approvalId").isJsonNull()) && !jsonObj.get("approvalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalId").toString()));
      }
      if ((jsonObj.get("approvalNote") != null && !jsonObj.get("approvalNote").isJsonNull()) && !jsonObj.get("approvalNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalNote").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FormResponse>() {
           @Override
           public void write(JsonWriter out, FormResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FormResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FormResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FormResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FormResponse
  * @throws IOException if the JSON string is invalid with respect to FormResponse
  */
  public static FormResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormResponse.class);
  }

 /**
  * Convert an instance of FormResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

