/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.JobUpdate;
import com.konfigthis.client.model.PartialJob;
import com.konfigthis.client.model.UpcomingChange;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Change
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Change {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_SCENARIO_ID = "scenarioId";
  @SerializedName(SERIALIZED_NAME_SCENARIO_ID)
  private String scenarioId;

  public static final String SERIALIZED_NAME_MERGE_SCENARIO_ID = "mergeScenarioId";
  @SerializedName(SERIALIZED_NAME_MERGE_SCENARIO_ID)
  private String mergeScenarioId;

  public static final String SERIALIZED_NAME_PARENT_CHANGE_ID = "parentChangeId";
  @SerializedName(SERIALIZED_NAME_PARENT_CHANGE_ID)
  private String parentChangeId;

  public static final String SERIALIZED_NAME_PRIOR_STATE_CHANGE_ID = "priorStateChangeId";
  @SerializedName(SERIALIZED_NAME_PRIOR_STATE_CHANGE_ID)
  private String priorStateChangeId;

  /**
   * type of change
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    HIRE("HIRE"),
    
    DEPART("DEPART"),
    
    MOVE("MOVE"),
    
    UPCOMING("UPCOMING"),
    
    CREATE("CREATE"),
    
    UPDATE("UPDATE"),
    
    DATA("DATA"),
    
    DELETE("DELETE"),
    
    RELATE("RELATE"),
    
    BACKFILL("BACKFILL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Long sort;

  public static final String SERIALIZED_NAME_ANNOUNCE_DATE = "announceDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCE_DATE)
  private LocalDate announceDate;

  /**
   * whether the change is active or not
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    STRUCK("STRUCK"),
    
    CONFLICT("CONFLICT"),
    
    INACTIVE("INACTIVE"),
    
    PROPOSED("PROPOSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_OTHER_JOB_ID = "otherJobId";
  @SerializedName(SERIALIZED_NAME_OTHER_JOB_ID)
  private String otherJobId;

  public static final String SERIALIZED_NAME_OTHER_PERSON_ID = "otherPersonId";
  @SerializedName(SERIALIZED_NAME_OTHER_PERSON_ID)
  private String otherPersonId;

  /**
   * for DEPART changes, the type of departure
   */
  @JsonAdapter(DepartTypeEnum.Adapter.class)
 public enum DepartTypeEnum {
    VOLUNTARY("VOLUNTARY"),
    
    INVOLUNTARY("INVOLUNTARY");

    private String value;

    DepartTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartTypeEnum fromValue(String value) {
      for (DepartTypeEnum b : DepartTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_TYPE = "departType";
  @SerializedName(SERIALIZED_NAME_DEPART_TYPE)
  private DepartTypeEnum departType;

  /**
   * for DEPART changes, whether the departure was regrettable
   */
  @JsonAdapter(DepartRegretEnum.Adapter.class)
 public enum DepartRegretEnum {
    REGRET("REGRET"),
    
    NONREGRET("NONREGRET");

    private String value;

    DepartRegretEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartRegretEnum fromValue(String value) {
      for (DepartRegretEnum b : DepartRegretEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartRegretEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartRegretEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartRegretEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartRegretEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_REGRET = "departRegret";
  @SerializedName(SERIALIZED_NAME_DEPART_REGRET)
  private DepartRegretEnum departRegret;

  /**
   * if it&#39;s a promotion or a demotion
   */
  @JsonAdapter(PromotionTypeEnum.Adapter.class)
 public enum PromotionTypeEnum {
    PROMOTION("PROMOTION"),
    
    DEMOTION("DEMOTION"),
    
    NONE("NONE");

    private String value;

    PromotionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PromotionTypeEnum fromValue(String value) {
      for (PromotionTypeEnum b : PromotionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PromotionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PromotionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PromotionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PromotionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotionType";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private PromotionTypeEnum promotionType;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * for RELATE changes, the type of the relationship
   */
  @JsonAdapter(RelateTypeEnum.Adapter.class)
 public enum RelateTypeEnum {
    MANAGER("MANAGER"),
    
    DIRECT("DIRECT"),
    
    INDIRECT_MANAGER("INDIRECT_MANAGER"),
    
    INDIRECT("INDIRECT"),
    
    NONE("NONE");

    private String value;

    RelateTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelateTypeEnum fromValue(String value) {
      for (RelateTypeEnum b : RelateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelateTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelateTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelateTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelateTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RELATE_TYPE = "relateType";
  @SerializedName(SERIALIZED_NAME_RELATE_TYPE)
  private RelateTypeEnum relateType;

  public static final String SERIALIZED_NAME_REFS = "refs";
  @SerializedName(SERIALIZED_NAME_REFS)
  private List<Object> refs = null;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private PartialJob job;

  public static final String SERIALIZED_NAME_OTHER_JOB = "otherJob";
  @SerializedName(SERIALIZED_NAME_OTHER_JOB)
  private PartialJob otherJob;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private JobUpdate update;

  public static final String SERIALIZED_NAME_UPCOMING = "upcoming";
  @SerializedName(SERIALIZED_NAME_UPCOMING)
  private UpcomingChange upcoming;

  public static final String SERIALIZED_NAME_CONFLICT = "conflict";
  @SerializedName(SERIALIZED_NAME_CONFLICT)
  private String conflict;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_MERGE_ID = "mergeId";
  @SerializedName(SERIALIZED_NAME_MERGE_ID)
  private String mergeId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_STATUS_AT = "statusAt";
  @SerializedName(SERIALIZED_NAME_STATUS_AT)
  private String statusAt;

  public static final String SERIALIZED_NAME_APPROVAL_AT = "approvalAt";
  @SerializedName(SERIALIZED_NAME_APPROVAL_AT)
  private String approvalAt;

  public static final String SERIALIZED_NAME_APPROVAL_ID = "approvalId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_ID)
  private String approvalId;

  public static final String SERIALIZED_NAME_APPROVAL_NOTE = "approvalNote";
  @SerializedName(SERIALIZED_NAME_APPROVAL_NOTE)
  private String approvalNote;

  /**
   * if approval is required, who is allowed to approve
   */
  @JsonAdapter(ApprovalEnum.Adapter.class)
 public enum ApprovalEnum {
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER");

    private String value;

    ApprovalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalEnum fromValue(String value) {
      for (ApprovalEnum b : ApprovalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private ApprovalEnum approval;

  /**
   * view sensitivity for the author author of this form - the level of view access required to view the createId and updateId fields
   */
  @JsonAdapter(AuthorSensitiveEnum.Adapter.class)
 public enum AuthorSensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    AuthorSensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorSensitiveEnum fromValue(String value) {
      for (AuthorSensitiveEnum b : AuthorSensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorSensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorSensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorSensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorSensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHOR_SENSITIVE = "authorSensitive";
  @SerializedName(SERIALIZED_NAME_AUTHOR_SENSITIVE)
  private AuthorSensitiveEnum authorSensitive;

  public static final String SERIALIZED_NAME_CAN_EDIT = "canEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public Change() {
  }

  public Change id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Change jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * job id
   * @return jobId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "job id")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public Change orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public Change scenarioId(String scenarioId) {
    
    
    
    
    this.scenarioId = scenarioId;
    return this;
  }

   /**
   * scenario that this change belongs to
   * @return scenarioId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "scenario that this change belongs to")

  public String getScenarioId() {
    return scenarioId;
  }


  public void setScenarioId(String scenarioId) {
    
    
    
    this.scenarioId = scenarioId;
  }


  public Change mergeScenarioId(String mergeScenarioId) {
    
    
    
    
    this.mergeScenarioId = mergeScenarioId;
    return this;
  }

   /**
   * scenario that this change was merged in from, if the change originally came from a scenario
   * @return mergeScenarioId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "scenario that this change was merged in from, if the change originally came from a scenario")

  public String getMergeScenarioId() {
    return mergeScenarioId;
  }


  public void setMergeScenarioId(String mergeScenarioId) {
    
    
    
    this.mergeScenarioId = mergeScenarioId;
  }


  public Change parentChangeId(String parentChangeId) {
    
    
    
    
    this.parentChangeId = parentChangeId;
    return this;
  }

   /**
   * change that this change emanates from
   * @return parentChangeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "change that this change emanates from")

  public String getParentChangeId() {
    return parentChangeId;
  }


  public void setParentChangeId(String parentChangeId) {
    
    
    
    this.parentChangeId = parentChangeId;
  }


  public Change priorStateChangeId(String priorStateChangeId) {
    
    
    
    
    this.priorStateChangeId = priorStateChangeId;
    return this;
  }

   /**
   * connects this change to a previous version if itself that you might want to roll back to because of bad edits
   * @return priorStateChangeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "connects this change to a previous version if itself that you might want to roll back to because of bad edits")

  public String getPriorStateChangeId() {
    return priorStateChangeId;
  }


  public void setPriorStateChangeId(String priorStateChangeId) {
    
    
    
    this.priorStateChangeId = priorStateChangeId;
  }


  public Change type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of change
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of change")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Change date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * date of change
   * @return date
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "date of change")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public Change sort(Long sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * sort order of change
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sort order of change")

  public Long getSort() {
    return sort;
  }


  public void setSort(Long sort) {
    
    
    
    this.sort = sort;
  }


  public Change announceDate(LocalDate announceDate) {
    
    
    
    
    this.announceDate = announceDate;
    return this;
  }

   /**
   * for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change
   * @return announceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change")

  public LocalDate getAnnounceDate() {
    return announceDate;
  }


  public void setAnnounceDate(LocalDate announceDate) {
    
    
    
    this.announceDate = announceDate;
  }


  public Change status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * whether the change is active or not
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "whether the change is active or not")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public Change personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * the id of the person involved, or empty if no person attached to job
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the id of the person involved, or empty if no person attached to job")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public Change otherJobId(String otherJobId) {
    
    
    
    
    this.otherJobId = otherJobId;
    return this;
  }

   /**
   * for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job
   * @return otherJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job")

  public String getOtherJobId() {
    return otherJobId;
  }


  public void setOtherJobId(String otherJobId) {
    
    
    
    this.otherJobId = otherJobId;
  }


  public Change otherPersonId(String otherPersonId) {
    
    
    
    
    this.otherPersonId = otherPersonId;
    return this;
  }

   /**
   * for MOVE changes, the id of the other person involved in the move
   * @return otherPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "for MOVE changes, the id of the other person involved in the move")

  public String getOtherPersonId() {
    return otherPersonId;
  }


  public void setOtherPersonId(String otherPersonId) {
    
    
    
    this.otherPersonId = otherPersonId;
  }


  public Change departType(DepartTypeEnum departType) {
    
    
    
    
    this.departType = departType;
    return this;
  }

   /**
   * for DEPART changes, the type of departure
   * @return departType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, the type of departure")

  public DepartTypeEnum getDepartType() {
    return departType;
  }


  public void setDepartType(DepartTypeEnum departType) {
    
    
    
    this.departType = departType;
  }


  public Change departRegret(DepartRegretEnum departRegret) {
    
    
    
    
    this.departRegret = departRegret;
    return this;
  }

   /**
   * for DEPART changes, whether the departure was regrettable
   * @return departRegret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, whether the departure was regrettable")

  public DepartRegretEnum getDepartRegret() {
    return departRegret;
  }


  public void setDepartRegret(DepartRegretEnum departRegret) {
    
    
    
    this.departRegret = departRegret;
  }


  public Change promotionType(PromotionTypeEnum promotionType) {
    
    
    
    
    this.promotionType = promotionType;
    return this;
  }

   /**
   * if it&#39;s a promotion or a demotion
   * @return promotionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if it's a promotion or a demotion")

  public PromotionTypeEnum getPromotionType() {
    return promotionType;
  }


  public void setPromotionType(PromotionTypeEnum promotionType) {
    
    
    
    this.promotionType = promotionType;
  }


  public Change reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * the reason for the change
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the reason for the change")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public Change relateType(RelateTypeEnum relateType) {
    
    
    
    
    this.relateType = relateType;
    return this;
  }

   /**
   * for RELATE changes, the type of the relationship
   * @return relateType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for RELATE changes, the type of the relationship")

  public RelateTypeEnum getRelateType() {
    return relateType;
  }


  public void setRelateType(RelateTypeEnum relateType) {
    
    
    
    this.relateType = relateType;
  }


  public Change refs(List<Object> refs) {
    
    
    
    
    this.refs = refs;
    return this;
  }

  public Change addRefsItem(Object refsItem) {
    if (this.refs == null) {
      this.refs = new ArrayList<>();
    }
    this.refs.add(refsItem);
    return this;
  }

   /**
   * list of ids referenced in text field body, for indexing purposes only
   * @return refs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of ids referenced in text field body, for indexing purposes only")

  public List<Object> getRefs() {
    return refs;
  }


  public void setRefs(List<Object> refs) {
    
    
    
    this.refs = refs;
  }


  public Change job(PartialJob job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialJob getJob() {
    return job;
  }


  public void setJob(PartialJob job) {
    
    
    
    this.job = job;
  }


  public Change otherJob(PartialJob otherJob) {
    
    
    
    
    this.otherJob = otherJob;
    return this;
  }

   /**
   * Get otherJob
   * @return otherJob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialJob getOtherJob() {
    return otherJob;
  }


  public void setOtherJob(PartialJob otherJob) {
    
    
    
    this.otherJob = otherJob;
  }


  public Change formId(String formId) {
    
    
    
    
    this.formId = formId;
    return this;
  }

   /**
   * if this change was data submitted by a form, the id of that form
   * @return formId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if this change was data submitted by a form, the id of that form")

  public String getFormId() {
    return formId;
  }


  public void setFormId(String formId) {
    
    
    
    this.formId = formId;
  }


  public Change assessmentId(String assessmentId) {
    
    
    
    
    this.assessmentId = assessmentId;
    return this;
  }

   /**
   * if this change is associated with a assessment, the id of that assessment
   * @return assessmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if this change is associated with a assessment, the id of that assessment")

  public String getAssessmentId() {
    return assessmentId;
  }


  public void setAssessmentId(String assessmentId) {
    
    
    
    this.assessmentId = assessmentId;
  }


  public Change update(JobUpdate update) {
    
    
    
    
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobUpdate getUpdate() {
    return update;
  }


  public void setUpdate(JobUpdate update) {
    
    
    
    this.update = update;
  }


  public Change upcoming(UpcomingChange upcoming) {
    
    
    
    
    this.upcoming = upcoming;
    return this;
  }

   /**
   * Get upcoming
   * @return upcoming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UpcomingChange getUpcoming() {
    return upcoming;
  }


  public void setUpcoming(UpcomingChange upcoming) {
    
    
    
    this.upcoming = upcoming;
  }


  public Change conflict(String conflict) {
    
    
    
    
    this.conflict = conflict;
    return this;
  }

   /**
   * for changes that have been struck due to a merge conflict, the description of the conflict
   * @return conflict
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for changes that have been struck due to a merge conflict, the description of the conflict")

  public String getConflict() {
    return conflict;
  }


  public void setConflict(String conflict) {
    
    
    
    this.conflict = conflict;
  }


  public Change note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * note on the change
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "note on the change")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public Change createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public Change mergeId(String mergeId) {
    
    
    
    
    this.mergeId = mergeId;
    return this;
  }

   /**
   * merged by user id, if this change was merged
   * @return mergeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "merged by user id, if this change was merged")

  public String getMergeId() {
    return mergeId;
  }


  public void setMergeId(String mergeId) {
    
    
    
    this.mergeId = mergeId;
  }


  public Change createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public Change updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public Change updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * updated by user id
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public Change statusAt(String statusAt) {
    
    
    
    
    this.statusAt = statusAt;
    return this;
  }

   /**
   * timestamp of status change
   * @return statusAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "timestamp of status change")

  public String getStatusAt() {
    return statusAt;
  }


  public void setStatusAt(String statusAt) {
    
    
    
    this.statusAt = statusAt;
  }


  public Change approvalAt(String approvalAt) {
    
    
    
    
    this.approvalAt = approvalAt;
    return this;
  }

   /**
   * timestamp of approval
   * @return approvalAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "timestamp of approval")

  public String getApprovalAt() {
    return approvalAt;
  }


  public void setApprovalAt(String approvalAt) {
    
    
    
    this.approvalAt = approvalAt;
  }


  public Change approvalId(String approvalId) {
    
    
    
    
    this.approvalId = approvalId;
    return this;
  }

   /**
   * approved by user id
   * @return approvalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "approved by user id")

  public String getApprovalId() {
    return approvalId;
  }


  public void setApprovalId(String approvalId) {
    
    
    
    this.approvalId = approvalId;
  }


  public Change approvalNote(String approvalNote) {
    
    
    
    
    this.approvalNote = approvalNote;
    return this;
  }

   /**
   * approval/rejection note
   * @return approvalNote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Not acceptable", value = "approval/rejection note")

  public String getApprovalNote() {
    return approvalNote;
  }


  public void setApprovalNote(String approvalNote) {
    
    
    
    this.approvalNote = approvalNote;
  }


  public Change approval(ApprovalEnum approval) {
    
    
    
    
    this.approval = approval;
    return this;
  }

   /**
   * if approval is required, who is allowed to approve
   * @return approval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if approval is required, who is allowed to approve")

  public ApprovalEnum getApproval() {
    return approval;
  }


  public void setApproval(ApprovalEnum approval) {
    
    
    
    this.approval = approval;
  }


  public Change authorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    
    this.authorSensitive = authorSensitive;
    return this;
  }

   /**
   * view sensitivity for the author author of this form - the level of view access required to view the createId and updateId fields
   * @return authorSensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "view sensitivity for the author author of this form - the level of view access required to view the createId and updateId fields")

  public AuthorSensitiveEnum getAuthorSensitive() {
    return authorSensitive;
  }


  public void setAuthorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    this.authorSensitive = authorSensitive;
  }


  public Change canEdit(Boolean canEdit) {
    
    
    
    
    this.canEdit = canEdit;
    return this;
  }

   /**
   * flag indicating whether authorized user can modify this change (will vary depending on user)
   * @return canEdit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "flag indicating whether authorized user can modify this change (will vary depending on user)")

  public Boolean getCanEdit() {
    return canEdit;
  }


  public void setCanEdit(Boolean canEdit) {
    
    
    
    this.canEdit = canEdit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Change instance itself
   */
  public Change putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Change change = (Change) o;
    return Objects.equals(this.id, change.id) &&
        Objects.equals(this.jobId, change.jobId) &&
        Objects.equals(this.orgId, change.orgId) &&
        Objects.equals(this.scenarioId, change.scenarioId) &&
        Objects.equals(this.mergeScenarioId, change.mergeScenarioId) &&
        Objects.equals(this.parentChangeId, change.parentChangeId) &&
        Objects.equals(this.priorStateChangeId, change.priorStateChangeId) &&
        Objects.equals(this.type, change.type) &&
        Objects.equals(this.date, change.date) &&
        Objects.equals(this.sort, change.sort) &&
        Objects.equals(this.announceDate, change.announceDate) &&
        Objects.equals(this.status, change.status) &&
        Objects.equals(this.personId, change.personId) &&
        Objects.equals(this.otherJobId, change.otherJobId) &&
        Objects.equals(this.otherPersonId, change.otherPersonId) &&
        Objects.equals(this.departType, change.departType) &&
        Objects.equals(this.departRegret, change.departRegret) &&
        Objects.equals(this.promotionType, change.promotionType) &&
        Objects.equals(this.reason, change.reason) &&
        Objects.equals(this.relateType, change.relateType) &&
        Objects.equals(this.refs, change.refs) &&
        Objects.equals(this.job, change.job) &&
        Objects.equals(this.otherJob, change.otherJob) &&
        Objects.equals(this.formId, change.formId) &&
        Objects.equals(this.assessmentId, change.assessmentId) &&
        Objects.equals(this.update, change.update) &&
        Objects.equals(this.upcoming, change.upcoming) &&
        Objects.equals(this.conflict, change.conflict) &&
        Objects.equals(this.note, change.note) &&
        Objects.equals(this.createId, change.createId) &&
        Objects.equals(this.mergeId, change.mergeId) &&
        Objects.equals(this.createAt, change.createAt) &&
        Objects.equals(this.updateAt, change.updateAt) &&
        Objects.equals(this.updateId, change.updateId) &&
        Objects.equals(this.statusAt, change.statusAt) &&
        Objects.equals(this.approvalAt, change.approvalAt) &&
        Objects.equals(this.approvalId, change.approvalId) &&
        Objects.equals(this.approvalNote, change.approvalNote) &&
        Objects.equals(this.approval, change.approval) &&
        Objects.equals(this.authorSensitive, change.authorSensitive) &&
        Objects.equals(this.canEdit, change.canEdit)&&
        Objects.equals(this.additionalProperties, change.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, jobId, orgId, scenarioId, mergeScenarioId, parentChangeId, priorStateChangeId, type, date, sort, announceDate, status, personId, otherJobId, otherPersonId, departType, departRegret, promotionType, reason, relateType, refs, job, otherJob, formId, assessmentId, update, upcoming, conflict, note, createId, mergeId, createAt, updateAt, updateId, statusAt, approvalAt, approvalId, approvalNote, approval, authorSensitive, canEdit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Change {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    scenarioId: ").append(toIndentedString(scenarioId)).append("\n");
    sb.append("    mergeScenarioId: ").append(toIndentedString(mergeScenarioId)).append("\n");
    sb.append("    parentChangeId: ").append(toIndentedString(parentChangeId)).append("\n");
    sb.append("    priorStateChangeId: ").append(toIndentedString(priorStateChangeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    announceDate: ").append(toIndentedString(announceDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    otherJobId: ").append(toIndentedString(otherJobId)).append("\n");
    sb.append("    otherPersonId: ").append(toIndentedString(otherPersonId)).append("\n");
    sb.append("    departType: ").append(toIndentedString(departType)).append("\n");
    sb.append("    departRegret: ").append(toIndentedString(departRegret)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    relateType: ").append(toIndentedString(relateType)).append("\n");
    sb.append("    refs: ").append(toIndentedString(refs)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    otherJob: ").append(toIndentedString(otherJob)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    upcoming: ").append(toIndentedString(upcoming)).append("\n");
    sb.append("    conflict: ").append(toIndentedString(conflict)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    mergeId: ").append(toIndentedString(mergeId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    statusAt: ").append(toIndentedString(statusAt)).append("\n");
    sb.append("    approvalAt: ").append(toIndentedString(approvalAt)).append("\n");
    sb.append("    approvalId: ").append(toIndentedString(approvalId)).append("\n");
    sb.append("    approvalNote: ").append(toIndentedString(approvalNote)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    authorSensitive: ").append(toIndentedString(authorSensitive)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("jobId");
    openapiFields.add("orgId");
    openapiFields.add("scenarioId");
    openapiFields.add("mergeScenarioId");
    openapiFields.add("parentChangeId");
    openapiFields.add("priorStateChangeId");
    openapiFields.add("type");
    openapiFields.add("date");
    openapiFields.add("sort");
    openapiFields.add("announceDate");
    openapiFields.add("status");
    openapiFields.add("personId");
    openapiFields.add("otherJobId");
    openapiFields.add("otherPersonId");
    openapiFields.add("departType");
    openapiFields.add("departRegret");
    openapiFields.add("promotionType");
    openapiFields.add("reason");
    openapiFields.add("relateType");
    openapiFields.add("refs");
    openapiFields.add("job");
    openapiFields.add("otherJob");
    openapiFields.add("formId");
    openapiFields.add("assessmentId");
    openapiFields.add("update");
    openapiFields.add("upcoming");
    openapiFields.add("conflict");
    openapiFields.add("note");
    openapiFields.add("createId");
    openapiFields.add("mergeId");
    openapiFields.add("createAt");
    openapiFields.add("updateAt");
    openapiFields.add("updateId");
    openapiFields.add("statusAt");
    openapiFields.add("approvalAt");
    openapiFields.add("approvalId");
    openapiFields.add("approvalNote");
    openapiFields.add("approval");
    openapiFields.add("authorSensitive");
    openapiFields.add("canEdit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("date");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Change
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Change.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Change is not found in the empty JSON string", Change.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Change.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("scenarioId") != null && !jsonObj.get("scenarioId").isJsonNull()) && !jsonObj.get("scenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioId").toString()));
      }
      if ((jsonObj.get("mergeScenarioId") != null && !jsonObj.get("mergeScenarioId").isJsonNull()) && !jsonObj.get("mergeScenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeScenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeScenarioId").toString()));
      }
      if ((jsonObj.get("parentChangeId") != null && !jsonObj.get("parentChangeId").isJsonNull()) && !jsonObj.get("parentChangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentChangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentChangeId").toString()));
      }
      if ((jsonObj.get("priorStateChangeId") != null && !jsonObj.get("priorStateChangeId").isJsonNull()) && !jsonObj.get("priorStateChangeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priorStateChangeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priorStateChangeId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("otherJobId") != null && !jsonObj.get("otherJobId").isJsonNull()) && !jsonObj.get("otherJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherJobId").toString()));
      }
      if ((jsonObj.get("otherPersonId") != null && !jsonObj.get("otherPersonId").isJsonNull()) && !jsonObj.get("otherPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherPersonId").toString()));
      }
      if ((jsonObj.get("departType") != null && !jsonObj.get("departType").isJsonNull()) && !jsonObj.get("departType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departType").toString()));
      }
      if ((jsonObj.get("departRegret") != null && !jsonObj.get("departRegret").isJsonNull()) && !jsonObj.get("departRegret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departRegret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departRegret").toString()));
      }
      if ((jsonObj.get("promotionType") != null && !jsonObj.get("promotionType").isJsonNull()) && !jsonObj.get("promotionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionType").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("relateType") != null && !jsonObj.get("relateType").isJsonNull()) && !jsonObj.get("relateType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relateType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relateType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("refs") != null && !jsonObj.get("refs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `refs` to be an array in the JSON string but got `%s`", jsonObj.get("refs").toString()));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        PartialJob.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      // validate the optional field `otherJob`
      if (jsonObj.get("otherJob") != null && !jsonObj.get("otherJob").isJsonNull()) {
        PartialJob.validateJsonObject(jsonObj.getAsJsonObject("otherJob"));
      }
      if ((jsonObj.get("formId") != null && !jsonObj.get("formId").isJsonNull()) && !jsonObj.get("formId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formId").toString()));
      }
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JobUpdate.validateJsonObject(jsonObj.getAsJsonObject("update"));
      }
      // validate the optional field `upcoming`
      if (jsonObj.get("upcoming") != null && !jsonObj.get("upcoming").isJsonNull()) {
        UpcomingChange.validateJsonObject(jsonObj.getAsJsonObject("upcoming"));
      }
      if ((jsonObj.get("conflict") != null && !jsonObj.get("conflict").isJsonNull()) && !jsonObj.get("conflict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conflict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conflict").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("mergeId") != null && !jsonObj.get("mergeId").isJsonNull()) && !jsonObj.get("mergeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mergeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mergeId").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if ((jsonObj.get("statusAt") != null && !jsonObj.get("statusAt").isJsonNull()) && !jsonObj.get("statusAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusAt").toString()));
      }
      if ((jsonObj.get("approvalAt") != null && !jsonObj.get("approvalAt").isJsonNull()) && !jsonObj.get("approvalAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalAt").toString()));
      }
      if ((jsonObj.get("approvalId") != null && !jsonObj.get("approvalId").isJsonNull()) && !jsonObj.get("approvalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalId").toString()));
      }
      if ((jsonObj.get("approvalNote") != null && !jsonObj.get("approvalNote").isJsonNull()) && !jsonObj.get("approvalNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalNote").toString()));
      }
      if ((jsonObj.get("approval") != null && !jsonObj.get("approval").isJsonNull()) && !jsonObj.get("approval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval").toString()));
      }
      if ((jsonObj.get("authorSensitive") != null && !jsonObj.get("authorSensitive").isJsonNull()) && !jsonObj.get("authorSensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorSensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorSensitive").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Change.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Change' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Change> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Change.class));

       return (TypeAdapter<T>) new TypeAdapter<Change>() {
           @Override
           public void write(JsonWriter out, Change value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Change read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Change instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Change given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Change
  * @throws IOException if the JSON string is invalid with respect to Change
  */
  public static Change fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Change.class);
  }

 /**
  * Convert an instance of Change to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

