/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Deviation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GuidelineCalculation
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GuidelineCalculation {
  public static final String SERIALIZED_NAME_GUIDELINE_ID = "guidelineId";
  @SerializedName(SERIALIZED_NAME_GUIDELINE_ID)
  private String guidelineId;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_COMP_REVIEW_ID = "compReviewId";
  @SerializedName(SERIALIZED_NAME_COMP_REVIEW_ID)
  private String compReviewId;

  public static final String SERIALIZED_NAME_BUDGET_POOL_ID = "budgetPoolId";
  @SerializedName(SERIALIZED_NAME_BUDGET_POOL_ID)
  private String budgetPoolId;

  public static final String SERIALIZED_NAME_GUIDELINE_LABEL = "guidelineLabel";
  @SerializedName(SERIALIZED_NAME_GUIDELINE_LABEL)
  private String guidelineLabel;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Object min;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Object max;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Object target;

  public static final String SERIALIZED_NAME_APPLIED_FIELD = "appliedField";
  @SerializedName(SERIALIZED_NAME_APPLIED_FIELD)
  private String appliedField;

  /**
   * Gets or Sets flagMode
   */
  @JsonAdapter(FlagModeEnum.Adapter.class)
 public enum FlagModeEnum {
    DEVIATION_THRESHOLD("DEVIATION_THRESHOLD"),
    
    NONE("NONE");

    private String value;

    FlagModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlagModeEnum fromValue(String value) {
      for (FlagModeEnum b : FlagModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlagModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlagModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlagModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlagModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FLAG_MODE = "flagMode";
  @SerializedName(SERIALIZED_NAME_FLAG_MODE)
  private FlagModeEnum flagMode;

  public static final String SERIALIZED_NAME_FLAG_DEVIATION_THRESHOLD = "flagDeviationThreshold";
  @SerializedName(SERIALIZED_NAME_FLAG_DEVIATION_THRESHOLD)
  private Double flagDeviationThreshold;

  public static final String SERIALIZED_NAME_IS_DEVIATED = "isDeviated";
  @SerializedName(SERIALIZED_NAME_IS_DEVIATED)
  private Boolean isDeviated;

  public static final String SERIALIZED_NAME_DEVIATION = "deviation";
  @SerializedName(SERIALIZED_NAME_DEVIATION)
  private Deviation deviation;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, Object> fields = new HashMap<>();

  public GuidelineCalculation() {
  }

  public GuidelineCalculation guidelineId(String guidelineId) {
    
    
    
    
    this.guidelineId = guidelineId;
    return this;
  }

   /**
   * Get guidelineId
   * @return guidelineId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getGuidelineId() {
    return guidelineId;
  }


  public void setGuidelineId(String guidelineId) {
    
    
    
    this.guidelineId = guidelineId;
  }


  public GuidelineCalculation jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public GuidelineCalculation compReviewId(String compReviewId) {
    
    
    
    
    this.compReviewId = compReviewId;
    return this;
  }

   /**
   * Get compReviewId
   * @return compReviewId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCompReviewId() {
    return compReviewId;
  }


  public void setCompReviewId(String compReviewId) {
    
    
    
    this.compReviewId = compReviewId;
  }


  public GuidelineCalculation budgetPoolId(String budgetPoolId) {
    
    
    
    
    this.budgetPoolId = budgetPoolId;
    return this;
  }

   /**
   * Get budgetPoolId
   * @return budgetPoolId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBudgetPoolId() {
    return budgetPoolId;
  }


  public void setBudgetPoolId(String budgetPoolId) {
    
    
    
    this.budgetPoolId = budgetPoolId;
  }


  public GuidelineCalculation guidelineLabel(String guidelineLabel) {
    
    
    
    
    this.guidelineLabel = guidelineLabel;
    return this;
  }

   /**
   * Get guidelineLabel
   * @return guidelineLabel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getGuidelineLabel() {
    return guidelineLabel;
  }


  public void setGuidelineLabel(String guidelineLabel) {
    
    
    
    this.guidelineLabel = guidelineLabel;
  }


  public GuidelineCalculation min(Object min) {
    
    
    
    
    this.min = min;
    return this;
  }

   /**
   * Get min
   * @return min
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMin() {
    return min;
  }


  public void setMin(Object min) {
    
    
    
    this.min = min;
  }


  public GuidelineCalculation max(Object max) {
    
    
    
    
    this.max = max;
    return this;
  }

   /**
   * Get max
   * @return max
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMax() {
    return max;
  }


  public void setMax(Object max) {
    
    
    
    this.max = max;
  }


  public GuidelineCalculation target(Object target) {
    
    
    
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getTarget() {
    return target;
  }


  public void setTarget(Object target) {
    
    
    
    this.target = target;
  }


  public GuidelineCalculation appliedField(String appliedField) {
    
    
    
    
    this.appliedField = appliedField;
    return this;
  }

   /**
   * Get appliedField
   * @return appliedField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAppliedField() {
    return appliedField;
  }


  public void setAppliedField(String appliedField) {
    
    
    
    this.appliedField = appliedField;
  }


  public GuidelineCalculation flagMode(FlagModeEnum flagMode) {
    
    
    
    
    this.flagMode = flagMode;
    return this;
  }

   /**
   * Get flagMode
   * @return flagMode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FlagModeEnum getFlagMode() {
    return flagMode;
  }


  public void setFlagMode(FlagModeEnum flagMode) {
    
    
    
    this.flagMode = flagMode;
  }


  public GuidelineCalculation flagDeviationThreshold(Double flagDeviationThreshold) {
    
    
    
    
    this.flagDeviationThreshold = flagDeviationThreshold;
    return this;
  }

  public GuidelineCalculation flagDeviationThreshold(Integer flagDeviationThreshold) {
    
    
    
    
    this.flagDeviationThreshold = flagDeviationThreshold.doubleValue();
    return this;
  }

   /**
   * Get flagDeviationThreshold
   * @return flagDeviationThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getFlagDeviationThreshold() {
    return flagDeviationThreshold;
  }


  public void setFlagDeviationThreshold(Double flagDeviationThreshold) {
    
    
    
    this.flagDeviationThreshold = flagDeviationThreshold;
  }


  public GuidelineCalculation isDeviated(Boolean isDeviated) {
    
    
    
    
    this.isDeviated = isDeviated;
    return this;
  }

   /**
   * Get isDeviated
   * @return isDeviated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsDeviated() {
    return isDeviated;
  }


  public void setIsDeviated(Boolean isDeviated) {
    
    
    
    this.isDeviated = isDeviated;
  }


  public GuidelineCalculation deviation(Deviation deviation) {
    
    
    
    
    this.deviation = deviation;
    return this;
  }

   /**
   * Get deviation
   * @return deviation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Deviation getDeviation() {
    return deviation;
  }


  public void setDeviation(Deviation deviation) {
    
    
    
    this.deviation = deviation;
  }


  public GuidelineCalculation fields(Map<String, Object> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public GuidelineCalculation putFieldsItem(String key, Object fieldsItem) {
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, Object> getFields() {
    return fields;
  }


  public void setFields(Map<String, Object> fields) {
    
    
    
    this.fields = fields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GuidelineCalculation instance itself
   */
  public GuidelineCalculation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuidelineCalculation guidelineCalculation = (GuidelineCalculation) o;
    return Objects.equals(this.guidelineId, guidelineCalculation.guidelineId) &&
        Objects.equals(this.jobId, guidelineCalculation.jobId) &&
        Objects.equals(this.compReviewId, guidelineCalculation.compReviewId) &&
        Objects.equals(this.budgetPoolId, guidelineCalculation.budgetPoolId) &&
        Objects.equals(this.guidelineLabel, guidelineCalculation.guidelineLabel) &&
        Objects.equals(this.min, guidelineCalculation.min) &&
        Objects.equals(this.max, guidelineCalculation.max) &&
        Objects.equals(this.target, guidelineCalculation.target) &&
        Objects.equals(this.appliedField, guidelineCalculation.appliedField) &&
        Objects.equals(this.flagMode, guidelineCalculation.flagMode) &&
        Objects.equals(this.flagDeviationThreshold, guidelineCalculation.flagDeviationThreshold) &&
        Objects.equals(this.isDeviated, guidelineCalculation.isDeviated) &&
        Objects.equals(this.deviation, guidelineCalculation.deviation) &&
        Objects.equals(this.fields, guidelineCalculation.fields)&&
        Objects.equals(this.additionalProperties, guidelineCalculation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guidelineId, jobId, compReviewId, budgetPoolId, guidelineLabel, min, max, target, appliedField, flagMode, flagDeviationThreshold, isDeviated, deviation, fields, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuidelineCalculation {\n");
    sb.append("    guidelineId: ").append(toIndentedString(guidelineId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    compReviewId: ").append(toIndentedString(compReviewId)).append("\n");
    sb.append("    budgetPoolId: ").append(toIndentedString(budgetPoolId)).append("\n");
    sb.append("    guidelineLabel: ").append(toIndentedString(guidelineLabel)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    appliedField: ").append(toIndentedString(appliedField)).append("\n");
    sb.append("    flagMode: ").append(toIndentedString(flagMode)).append("\n");
    sb.append("    flagDeviationThreshold: ").append(toIndentedString(flagDeviationThreshold)).append("\n");
    sb.append("    isDeviated: ").append(toIndentedString(isDeviated)).append("\n");
    sb.append("    deviation: ").append(toIndentedString(deviation)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("guidelineId");
    openapiFields.add("jobId");
    openapiFields.add("compReviewId");
    openapiFields.add("budgetPoolId");
    openapiFields.add("guidelineLabel");
    openapiFields.add("min");
    openapiFields.add("max");
    openapiFields.add("target");
    openapiFields.add("appliedField");
    openapiFields.add("flagMode");
    openapiFields.add("flagDeviationThreshold");
    openapiFields.add("isDeviated");
    openapiFields.add("deviation");
    openapiFields.add("fields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("guidelineId");
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("compReviewId");
    openapiRequiredFields.add("guidelineLabel");
    openapiRequiredFields.add("appliedField");
    openapiRequiredFields.add("flagMode");
    openapiRequiredFields.add("isDeviated");
    openapiRequiredFields.add("deviation");
    openapiRequiredFields.add("fields");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GuidelineCalculation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GuidelineCalculation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuidelineCalculation is not found in the empty JSON string", GuidelineCalculation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GuidelineCalculation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("guidelineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guidelineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guidelineId").toString()));
      }
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("compReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compReviewId").toString()));
      }
      if ((jsonObj.get("budgetPoolId") != null && !jsonObj.get("budgetPoolId").isJsonNull()) && !jsonObj.get("budgetPoolId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budgetPoolId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budgetPoolId").toString()));
      }
      if (!jsonObj.get("guidelineLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guidelineLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guidelineLabel").toString()));
      }
      if (!jsonObj.get("appliedField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedField").toString()));
      }
      if (!jsonObj.get("flagMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flagMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flagMode").toString()));
      }
      // validate the required field `deviation`
      Deviation.validateJsonObject(jsonObj.getAsJsonObject("deviation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuidelineCalculation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuidelineCalculation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuidelineCalculation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuidelineCalculation.class));

       return (TypeAdapter<T>) new TypeAdapter<GuidelineCalculation>() {
           @Override
           public void write(JsonWriter out, GuidelineCalculation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GuidelineCalculation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GuidelineCalculation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GuidelineCalculation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GuidelineCalculation
  * @throws IOException if the JSON string is invalid with respect to GuidelineCalculation
  */
  public static GuidelineCalculation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuidelineCalculation.class);
  }

 /**
  * Convert an instance of GuidelineCalculation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

