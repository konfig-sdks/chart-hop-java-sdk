/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Event
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Event {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  /**
   * type of event
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    APP("APP"),
    
    APPROVE("APPROVE"),
    
    COMBINE("COMBINE"),
    
    CREATE("CREATE"),
    
    DELETE("DELETE"),
    
    DONE("DONE"),
    
    ERROR("ERROR"),
    
    EXPORT_CSV("EXPORT_CSV"),
    
    EXPORT_ORG_CHART("EXPORT_ORG_CHART"),
    
    GENERATE("GENERATE"),
    
    GEOIP("GEOIP"),
    
    INCOMING("INCOMING"),
    
    INSTALL("INSTALL"),
    
    INVITE("INVITE"),
    
    INBOUND("INBOUND"),
    
    LOGIN("LOGIN"),
    
    MERGE("MERGE"),
    
    OUTBOUND("OUTBOUND"),
    
    PREVIEW_AS("PREVIEW_AS"),
    
    READ("READ"),
    
    READ_SENSITIVE("READ_SENSITIVE"),
    
    READ_ATS("READ_ATS"),
    
    READ_ATS_WEBHOOK("READ_ATS_WEBHOOK"),
    
    READ_FULL_NAME("READ_FULL_NAME"),
    
    READ_FUTURE_DATE("READ_FUTURE_DATE"),
    
    READ_METADATA("READ_METADATA"),
    
    READ_COMP("READ_COMP"),
    
    READ_BILLING("READ_BILLING"),
    
    READ_PENDING("READ_PENDING"),
    
    READ_PAYROLL("READ_PAYROLL"),
    
    READ_SENSITIVE_FILTERS("READ_SENSITIVE_FILTERS"),
    
    REJECT("REJECT"),
    
    REMIND("REMIND"),
    
    REMOVE_PASSWORD("REMOVE_PASSWORD"),
    
    REQUEST("REQUEST"),
    
    RESTORE("RESTORE"),
    
    RESUME("RESUME"),
    
    REVOKE("REVOKE"),
    
    RUN("RUN"),
    
    RUN_ATS("RUN_ATS"),
    
    SECURITY("SECURITY"),
    
    SHOW_DASHBOARD_DAYS_AHEAD("SHOW_DASHBOARD_DAYS_AHEAD"),
    
    SHOW_OPEN_JOBS("SHOW_OPEN_JOBS"),
    
    STEP("STEP"),
    
    SUBMIT("SUBMIT"),
    
    SYNC("SYNC"),
    
    TEST("TEST"),
    
    TOKEN("TOKEN"),
    
    UNINSTALL("UNINSTALL"),
    
    UPDATE("UPDATE"),
    
    UPDATE_PASSWORD("UPDATE_PASSWORD"),
    
    UPLOAD_CSV("UPLOAD_CSV"),
    
    WRITE("WRITE"),
    
    VIEW_AS("VIEW_AS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * type of target entity
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
 public enum EntityTypeEnum {
    ACTION("ACTION"),
    
    AGREEMENT("AGREEMENT"),
    
    APP("APP"),
    
    APP_CONFIG("APP_CONFIG"),
    
    APPROVAL_CHAIN("APPROVAL_CHAIN"),
    
    APPROVAL_CHAIN_STAGE("APPROVAL_CHAIN_STAGE"),
    
    APPROVAL_REQUEST("APPROVAL_REQUEST"),
    
    ASSESSMENT("ASSESSMENT"),
    
    BUDGET_POOL("BUDGET_POOL"),
    
    BUNDLE("BUNDLE"),
    
    CATEGORY("CATEGORY"),
    
    CATEGORY_SORT("CATEGORY_SORT"),
    
    CHANGE("CHANGE"),
    
    COMMENT("COMMENT"),
    
    COMP_BAND("COMP_BAND"),
    
    COMP_REVIEW("COMP_REVIEW"),
    
    CONTENT("CONTENT"),
    
    CUSTOMER("CUSTOMER"),
    
    DATA_VIEW("DATA_VIEW"),
    
    EXCHANGE_RATE("EXCHANGE_RATE"),
    
    EMAIL_TEMPLATE("EMAIL_TEMPLATE"),
    
    FIELD("FIELD"),
    
    FILE("FILE"),
    
    FORM("FORM"),
    
    FORM_DRAFT("FORM_DRAFT"),
    
    FORM_RESPONSE("FORM_RESPONSE"),
    
    GEOCODE("GEOCODE"),
    
    GROUP("GROUP"),
    
    GUIDELINE("GUIDELINE"),
    
    JOB("JOB"),
    
    JOB_LEVEL("JOB_LEVEL"),
    
    MEDIA("MEDIA"),
    
    MESSAGE("MESSAGE"),
    
    MULTIPLIER("MULTIPLIER"),
    
    ORG("ORG"),
    
    ORG_CONFIG("ORG_CONFIG"),
    
    PERSON("PERSON"),
    
    PROFILE_TAB("PROFILE_TAB"),
    
    POLICY("POLICY"),
    
    POSITION("POSITION"),
    
    PROCESS("PROCESS"),
    
    PRODUCT("PRODUCT"),
    
    QUERY_TOKEN("QUERY_TOKEN"),
    
    QUESTION("QUESTION"),
    
    REPORT("REPORT"),
    
    REPORT_CHART("REPORT_CHART"),
    
    ROLE("ROLE"),
    
    SCENARIO("SCENARIO"),
    
    STOCK_PRICE("STOCK_PRICE"),
    
    TABLE("TABLE"),
    
    TABLE_ROW("TABLE_ROW"),
    
    TASK_CONFIG("TASK_CONFIG"),
    
    TEMPLATE("TEMPLATE"),
    
    TASK("TASK"),
    
    TOKEN("TOKEN"),
    
    TIMEOFF("TIMEOFF"),
    
    TRACKED_GROUP("TRACKED_GROUP"),
    
    USER("USER");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_TABLE_ID = "tableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_SUBTYPE = "subtype";
  @SerializedName(SERIALIZED_NAME_SUBTYPE)
  private String subtype;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Object payload;

  public static final String SERIALIZED_NAME_AT = "at";
  @SerializedName(SERIALIZED_NAME_AT)
  private Long at;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_SCENARIO_ID = "scenarioId";
  @SerializedName(SERIALIZED_NAME_SCENARIO_ID)
  private String scenarioId;

  public static final String SERIALIZED_NAME_PARENT_ENTITY_ID = "parentEntityId";
  @SerializedName(SERIALIZED_NAME_PARENT_ENTITY_ID)
  private String parentEntityId;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Set<String> fields = null;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public Event() {
  }

  public Event id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Event userId(String userId) {
    
    
    
    
    this.userId = userId;
    return this;
  }

   /**
   * user id who caused the event
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "user id who caused the event")

  public String getUserId() {
    return userId;
  }


  public void setUserId(String userId) {
    
    
    
    this.userId = userId;
  }


  public Event orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public Event type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of event
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of event")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public Event entityType(EntityTypeEnum entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * type of target entity
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of target entity")

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityTypeEnum entityType) {
    
    
    
    this.entityType = entityType;
  }


  public Event entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * id of target entity
   * @return entityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "id of target entity")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public Event tableId(String tableId) {
    
    
    
    
    this.tableId = tableId;
    return this;
  }

   /**
   * id of table, if entity is a table row
   * @return tableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of table, if entity is a table row")

  public String getTableId() {
    return tableId;
  }


  public void setTableId(String tableId) {
    
    
    
    this.tableId = tableId;
  }


  public Event jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * jobId of the entity, if the entity is a job or closely connected to a single job
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "jobId of the entity, if the entity is a job or closely connected to a single job")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public Event personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * personId of the entity, if the entity is a person or closely connected to a single person
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "personId of the entity, if the entity is a person or closely connected to a single person")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public Event subtype(String subtype) {
    
    
    
    
    this.subtype = subtype;
    return this;
  }

   /**
   * subtype of entity
   * @return subtype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "subtype of entity")

  public String getSubtype() {
    return subtype;
  }


  public void setSubtype(String subtype) {
    
    
    
    this.subtype = subtype;
  }


  public Event payload(Object payload) {
    
    
    
    
    this.payload = payload;
    return this;
  }

   /**
   * event-specific payload containing information about the change that took place
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "event-specific payload containing information about the change that took place")

  public Object getPayload() {
    return payload;
  }


  public void setPayload(Object payload) {
    
    
    
    this.payload = payload;
  }


  public Event at(Long at) {
    
    
    
    
    this.at = at;
    return this;
  }

   /**
   * timestamp of event
   * @return at
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "timestamp of event")

  public Long getAt() {
    return at;
  }


  public void setAt(Long at) {
    
    
    
    this.at = at;
  }


  public Event processId(String processId) {
    
    
    
    
    this.processId = processId;
    return this;
  }

   /**
   * id of process
   * @return processId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of process")

  public String getProcessId() {
    return processId;
  }


  public void setProcessId(String processId) {
    
    
    
    this.processId = processId;
  }


  public Event date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * effective date, if in use
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "effective date, if in use")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public Event scenarioId(String scenarioId) {
    
    
    
    
    this.scenarioId = scenarioId;
    return this;
  }

   /**
   * id of scenario
   * @return scenarioId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of scenario")

  public String getScenarioId() {
    return scenarioId;
  }


  public void setScenarioId(String scenarioId) {
    
    
    
    this.scenarioId = scenarioId;
  }


  public Event parentEntityId(String parentEntityId) {
    
    
    
    
    this.parentEntityId = parentEntityId;
    return this;
  }

   /**
   * id of associated entity, such as comp cycle
   * @return parentEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of associated entity, such as comp cycle")

  public String getParentEntityId() {
    return parentEntityId;
  }


  public void setParentEntityId(String parentEntityId) {
    
    
    
    this.parentEntityId = parentEntityId;
  }


  public Event fields(Set<String> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public Event addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new LinkedHashSet<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * set of fields that were updated by the event
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set of fields that were updated by the event")

  public Set<String> getFields() {
    return fields;
  }


  public void setFields(Set<String> fields) {
    
    
    
    this.fields = fields;
  }


  public Event code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * event code, for example job.update
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "event code, for example job.update")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Event instance itself
   */
  public Event putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.id, event.id) &&
        Objects.equals(this.userId, event.userId) &&
        Objects.equals(this.orgId, event.orgId) &&
        Objects.equals(this.type, event.type) &&
        Objects.equals(this.entityType, event.entityType) &&
        Objects.equals(this.entityId, event.entityId) &&
        Objects.equals(this.tableId, event.tableId) &&
        Objects.equals(this.jobId, event.jobId) &&
        Objects.equals(this.personId, event.personId) &&
        Objects.equals(this.subtype, event.subtype) &&
        Objects.equals(this.payload, event.payload) &&
        Objects.equals(this.at, event.at) &&
        Objects.equals(this.processId, event.processId) &&
        Objects.equals(this.date, event.date) &&
        Objects.equals(this.scenarioId, event.scenarioId) &&
        Objects.equals(this.parentEntityId, event.parentEntityId) &&
        Objects.equals(this.fields, event.fields) &&
        Objects.equals(this.code, event.code)&&
        Objects.equals(this.additionalProperties, event.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, orgId, type, entityType, entityId, tableId, jobId, personId, subtype, payload, at, processId, date, scenarioId, parentEntityId, fields, code, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    at: ").append(toIndentedString(at)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    scenarioId: ").append(toIndentedString(scenarioId)).append("\n");
    sb.append("    parentEntityId: ").append(toIndentedString(parentEntityId)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("orgId");
    openapiFields.add("type");
    openapiFields.add("entityType");
    openapiFields.add("entityId");
    openapiFields.add("tableId");
    openapiFields.add("jobId");
    openapiFields.add("personId");
    openapiFields.add("subtype");
    openapiFields.add("payload");
    openapiFields.add("at");
    openapiFields.add("processId");
    openapiFields.add("date");
    openapiFields.add("scenarioId");
    openapiFields.add("parentEntityId");
    openapiFields.add("fields");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Event
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Event.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Event is not found in the empty JSON string", Event.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Event.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (!jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("tableId") != null && !jsonObj.get("tableId").isJsonNull()) && !jsonObj.get("tableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableId").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("subtype") != null && !jsonObj.get("subtype").isJsonNull()) && !jsonObj.get("subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtype").toString()));
      }
      if ((jsonObj.get("processId") != null && !jsonObj.get("processId").isJsonNull()) && !jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
      if ((jsonObj.get("scenarioId") != null && !jsonObj.get("scenarioId").isJsonNull()) && !jsonObj.get("scenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioId").toString()));
      }
      if ((jsonObj.get("parentEntityId") != null && !jsonObj.get("parentEntityId").isJsonNull()) && !jsonObj.get("parentEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentEntityId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Event.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Event' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Event> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Event.class));

       return (TypeAdapter<T>) new TypeAdapter<Event>() {
           @Override
           public void write(JsonWriter out, Event value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Event read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Event instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Event given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Event
  * @throws IOException if the JSON string is invalid with respect to Event
  */
  public static Event fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Event.class);
  }

 /**
  * Convert an instance of Event to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

