/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportQuery;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateReportChart
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateReportChart {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  /**
   * chart type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    LINE("LINE"),
    
    AREA("AREA"),
    
    STACKED("STACKED"),
    
    BAR("BAR"),
    
    VERTICAL_BAR("VERTICAL_BAR"),
    
    HORIZONTAL_BAR("HORIZONTAL_BAR"),
    
    PIE("PIE"),
    
    TABLE("TABLE"),
    
    TABLE_CROSSTAB("TABLE_CROSSTAB"),
    
    SINGLE_METRIC("SINGLE_METRIC"),
    
    HEADER("HEADER"),
    
    TEXT("TEXT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_FILTER_OVERRIDE = "filterOverride";
  @SerializedName(SERIALIZED_NAME_FILTER_OVERRIDE)
  private Boolean filterOverride;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private ReportQuery query;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Integer sort;

  public static final String SERIALIZED_NAME_IS_ADVANCED_QUERY_MODE = "isAdvancedQueryMode";
  @SerializedName(SERIALIZED_NAME_IS_ADVANCED_QUERY_MODE)
  private Boolean isAdvancedQueryMode;

  public UpdateReportChart() {
  }

  public UpdateReportChart label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * chart label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Headcount Report", value = "chart label")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public UpdateReportChart type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * chart type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "chart type")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public UpdateReportChart filter(String filter) {
    
    
    
    
    this.filter = filter;
    return this;
  }

   /**
   * filter that applies to this chart
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "department='Engineering'", value = "filter that applies to this chart")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    
    
    
    this.filter = filter;
  }


  public UpdateReportChart filterOverride(Boolean filterOverride) {
    
    
    
    
    this.filterOverride = filterOverride;
    return this;
  }

   /**
   * whether the chart filter overrides the global filter
   * @return filterOverride
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether the chart filter overrides the global filter")

  public Boolean getFilterOverride() {
    return filterOverride;
  }


  public void setFilterOverride(Boolean filterOverride) {
    
    
    
    this.filterOverride = filterOverride;
  }


  public UpdateReportChart query(ReportQuery query) {
    
    
    
    
    this.query = query;
    return this;
  }

   /**
   * Get query
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReportQuery getQuery() {
    return query;
  }


  public void setQuery(ReportQuery query) {
    
    
    
    this.query = query;
  }


  public UpdateReportChart sort(Integer sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * sort order
   * @return sort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sort order")

  public Integer getSort() {
    return sort;
  }


  public void setSort(Integer sort) {
    
    
    
    this.sort = sort;
  }


  public UpdateReportChart isAdvancedQueryMode(Boolean isAdvancedQueryMode) {
    
    
    
    
    this.isAdvancedQueryMode = isAdvancedQueryMode;
    return this;
  }

   /**
   * whether the chart configuration is using advanced mode
   * @return isAdvancedQueryMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether the chart configuration is using advanced mode")

  public Boolean getIsAdvancedQueryMode() {
    return isAdvancedQueryMode;
  }


  public void setIsAdvancedQueryMode(Boolean isAdvancedQueryMode) {
    
    
    
    this.isAdvancedQueryMode = isAdvancedQueryMode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateReportChart instance itself
   */
  public UpdateReportChart putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateReportChart updateReportChart = (UpdateReportChart) o;
    return Objects.equals(this.label, updateReportChart.label) &&
        Objects.equals(this.type, updateReportChart.type) &&
        Objects.equals(this.filter, updateReportChart.filter) &&
        Objects.equals(this.filterOverride, updateReportChart.filterOverride) &&
        Objects.equals(this.query, updateReportChart.query) &&
        Objects.equals(this.sort, updateReportChart.sort) &&
        Objects.equals(this.isAdvancedQueryMode, updateReportChart.isAdvancedQueryMode)&&
        Objects.equals(this.additionalProperties, updateReportChart.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, type, filter, filterOverride, query, sort, isAdvancedQueryMode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateReportChart {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterOverride: ").append(toIndentedString(filterOverride)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    isAdvancedQueryMode: ").append(toIndentedString(isAdvancedQueryMode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("type");
    openapiFields.add("filter");
    openapiFields.add("filterOverride");
    openapiFields.add("query");
    openapiFields.add("sort");
    openapiFields.add("isAdvancedQueryMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateReportChart
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateReportChart.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateReportChart is not found in the empty JSON string", UpdateReportChart.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `query`
      if (jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) {
        ReportQuery.validateJsonObject(jsonObj.getAsJsonObject("query"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateReportChart.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateReportChart' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateReportChart> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateReportChart.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateReportChart>() {
           @Override
           public void write(JsonWriter out, UpdateReportChart value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateReportChart read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateReportChart instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateReportChart given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateReportChart
  * @throws IOException if the JSON string is invalid with respect to UpdateReportChart
  */
  public static UpdateReportChart fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateReportChart.class);
  }

 /**
  * Convert an instance of UpdateReportChart to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

