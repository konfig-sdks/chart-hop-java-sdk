/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApprovalGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApprovalChainStageOverride
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApprovalChainStageOverride {
  public static final String SERIALIZED_NAME_STAGE_OVERRIDE_ID = "stageOverrideId";
  @SerializedName(SERIALIZED_NAME_STAGE_OVERRIDE_ID)
  private String stageOverrideId;

  public static final String SERIALIZED_NAME_APPROVAL_CHAIN_STAGE_ID = "approvalChainStageId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CHAIN_STAGE_ID)
  private String approvalChainStageId;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ApprovalGroup> groups = null;

  /**
   * status of the stage
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    CANCELED("CANCELED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    REVIEWED("REVIEWED"),
    
    APPROVED("APPROVED"),
    
    SKIPPED("SKIPPED"),
    
    SUBMITTED("SUBMITTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public ApprovalChainStageOverride() {
  }

  public ApprovalChainStageOverride stageOverrideId(String stageOverrideId) {
    
    
    
    
    this.stageOverrideId = stageOverrideId;
    return this;
  }

   /**
   * unique id for stage
   * @return stageOverrideId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "unique id for stage")

  public String getStageOverrideId() {
    return stageOverrideId;
  }


  public void setStageOverrideId(String stageOverrideId) {
    
    
    
    this.stageOverrideId = stageOverrideId;
  }


  public ApprovalChainStageOverride approvalChainStageId(String approvalChainStageId) {
    
    
    
    
    this.approvalChainStageId = approvalChainStageId;
    return this;
  }

   /**
   * parent approval chain stage id
   * @return approvalChainStageId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent approval chain stage id")

  public String getApprovalChainStageId() {
    return approvalChainStageId;
  }


  public void setApprovalChainStageId(String approvalChainStageId) {
    
    
    
    this.approvalChainStageId = approvalChainStageId;
  }


  public ApprovalChainStageOverride groups(List<ApprovalGroup> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public ApprovalChainStageOverride addGroupsItem(ApprovalGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * approval group override
   * @return groups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "approval group override")

  public List<ApprovalGroup> getGroups() {
    return groups;
  }


  public void setGroups(List<ApprovalGroup> groups) {
    
    
    
    this.groups = groups;
  }


  public ApprovalChainStageOverride status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of the stage
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "status of the stage")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ApprovalChainStageOverride order(Integer order) {
    
    
    
    
    this.order = order;
    return this;
  }

   /**
   * order of the stage
   * @return order
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "order of the stage")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    
    
    
    this.order = order;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApprovalChainStageOverride instance itself
   */
  public ApprovalChainStageOverride putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalChainStageOverride approvalChainStageOverride = (ApprovalChainStageOverride) o;
    return Objects.equals(this.stageOverrideId, approvalChainStageOverride.stageOverrideId) &&
        Objects.equals(this.approvalChainStageId, approvalChainStageOverride.approvalChainStageId) &&
        Objects.equals(this.groups, approvalChainStageOverride.groups) &&
        Objects.equals(this.status, approvalChainStageOverride.status) &&
        Objects.equals(this.order, approvalChainStageOverride.order)&&
        Objects.equals(this.additionalProperties, approvalChainStageOverride.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stageOverrideId, approvalChainStageId, groups, status, order, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalChainStageOverride {\n");
    sb.append("    stageOverrideId: ").append(toIndentedString(stageOverrideId)).append("\n");
    sb.append("    approvalChainStageId: ").append(toIndentedString(approvalChainStageId)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stageOverrideId");
    openapiFields.add("approvalChainStageId");
    openapiFields.add("groups");
    openapiFields.add("status");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("stageOverrideId");
    openapiRequiredFields.add("approvalChainStageId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("order");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApprovalChainStageOverride
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApprovalChainStageOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalChainStageOverride is not found in the empty JSON string", ApprovalChainStageOverride.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApprovalChainStageOverride.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("stageOverrideId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageOverrideId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stageOverrideId").toString()));
      }
      if (!jsonObj.get("approvalChainStageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalChainStageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalChainStageId").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            ApprovalGroup.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalChainStageOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalChainStageOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalChainStageOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalChainStageOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalChainStageOverride>() {
           @Override
           public void write(JsonWriter out, ApprovalChainStageOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalChainStageOverride read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApprovalChainStageOverride instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApprovalChainStageOverride given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApprovalChainStageOverride
  * @throws IOException if the JSON string is invalid with respect to ApprovalChainStageOverride
  */
  public static ApprovalChainStageOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalChainStageOverride.class);
  }

 /**
  * Convert an instance of ApprovalChainStageOverride to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

