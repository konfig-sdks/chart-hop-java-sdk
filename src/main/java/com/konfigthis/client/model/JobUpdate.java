/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Comp;
import com.konfigthis.client.model.GroupAssignment;
import com.konfigthis.client.model.JobRelationship;
import com.konfigthis.client.model.PairStringObject;
import com.konfigthis.client.model.StockGrant;
import com.konfigthis.client.model.TimeOff;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JobUpdate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JobUpdate {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_ADD_RELATIONSHIPS = "addRelationships";
  @SerializedName(SERIALIZED_NAME_ADD_RELATIONSHIPS)
  private Set<JobRelationship> addRelationships = null;

  public static final String SERIALIZED_NAME_REMOVE_RELATIONSHIPS = "removeRelationships";
  @SerializedName(SERIALIZED_NAME_REMOVE_RELATIONSHIPS)
  private Set<JobRelationship> removeRelationships = null;

  public static final String SERIALIZED_NAME_ADD_GROUP_IDS = "addGroupIds";
  @SerializedName(SERIALIZED_NAME_ADD_GROUP_IDS)
  private Set<String> addGroupIds = null;

  public static final String SERIALIZED_NAME_REMOVE_GROUP_IDS = "removeGroupIds";
  @SerializedName(SERIALIZED_NAME_REMOVE_GROUP_IDS)
  private Set<String> removeGroupIds = null;

  public static final String SERIALIZED_NAME_SET_GROUP_IDS = "setGroupIds";
  @SerializedName(SERIALIZED_NAME_SET_GROUP_IDS)
  private Map<String, String> setGroupIds = null;

  public static final String SERIALIZED_NAME_ADD_GROUP_ASSIGNMENTS = "addGroupAssignments";
  @SerializedName(SERIALIZED_NAME_ADD_GROUP_ASSIGNMENTS)
  private Set<GroupAssignment> addGroupAssignments = null;

  public static final String SERIALIZED_NAME_REMOVE_GROUP_ASSIGNMENTS = "removeGroupAssignments";
  @SerializedName(SERIALIZED_NAME_REMOVE_GROUP_ASSIGNMENTS)
  private Set<GroupAssignment> removeGroupAssignments = null;

  public static final String SERIALIZED_NAME_GRANT = "grant";
  @SerializedName(SERIALIZED_NAME_GRANT)
  private StockGrant grant;

  public static final String SERIALIZED_NAME_TIME_OFF = "timeOff";
  @SerializedName(SERIALIZED_NAME_TIME_OFF)
  private TimeOff timeOff;

  public static final String SERIALIZED_NAME_COMP = "comp";
  @SerializedName(SERIALIZED_NAME_COMP)
  private Comp comp;

  /**
   * new placement
   */
  @JsonAdapter(PlacementEnum.Adapter.class)
 public enum PlacementEnum {
    NORMAL("NORMAL"),
    
    ASSISTANT("ASSISTANT");

    private String value;

    PlacementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlacementEnum fromValue(String value) {
      for (PlacementEnum b : PlacementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlacementEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private PlacementEnum placement;

  /**
   * new employment status
   */
  @JsonAdapter(EmploymentEnum.Adapter.class)
 public enum EmploymentEnum {
    FULL("FULL"),
    
    PART("PART"),
    
    TEMP("TEMP"),
    
    CONTRACT("CONTRACT"),
    
    INTERN("INTERN"),
    
    EXPAT("EXPAT");

    private String value;

    EmploymentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentEnum fromValue(String value) {
      for (EmploymentEnum b : EmploymentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT = "employment";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT)
  private EmploymentEnum employment;

  /**
   * new view sensitivity
   */
  @JsonAdapter(SensitiveEnum.Adapter.class)
 public enum SensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    SensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SensitiveEnum fromValue(String value) {
      for (SensitiveEnum b : SensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private SensitiveEnum sensitive;

  public static final String SERIALIZED_NAME_START_DATE_PLANNED = "startDatePlanned";
  @SerializedName(SERIALIZED_NAME_START_DATE_PLANNED)
  private LocalDate startDatePlanned;

  public static final String SERIALIZED_NAME_START_DATE_PLANNED_REMOVE = "startDatePlannedRemove";
  @SerializedName(SERIALIZED_NAME_START_DATE_PLANNED_REMOVE)
  private Boolean startDatePlannedRemove;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_BACKFILL_PERSON_ID = "backfillPersonId";
  @SerializedName(SERIALIZED_NAME_BACKFILL_PERSON_ID)
  private Object backfillPersonId = null;

  public static final String SERIALIZED_NAME_HAS_UNSET_FIELDS = "hasUnsetFields";
  @SerializedName(SERIALIZED_NAME_HAS_UNSET_FIELDS)
  private Boolean hasUnsetFields;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, Object> fields = null;

  public static final String SERIALIZED_NAME_ORDERED_FIELDS = "orderedFields";
  @SerializedName(SERIALIZED_NAME_ORDERED_FIELDS)
  private List<PairStringObject> orderedFields = null;

  public JobUpdate() {
  }

  public JobUpdate title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * new title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "new title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public JobUpdate addRelationships(Set<JobRelationship> addRelationships) {
    
    
    
    
    this.addRelationships = addRelationships;
    return this;
  }

  public JobUpdate addAddRelationshipsItem(JobRelationship addRelationshipsItem) {
    if (this.addRelationships == null) {
      this.addRelationships = new LinkedHashSet<>();
    }
    this.addRelationships.add(addRelationshipsItem);
    return this;
  }

   /**
   * relationships to add
   * @return addRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "relationships to add")

  public Set<JobRelationship> getAddRelationships() {
    return addRelationships;
  }


  public void setAddRelationships(Set<JobRelationship> addRelationships) {
    
    
    
    this.addRelationships = addRelationships;
  }


  public JobUpdate removeRelationships(Set<JobRelationship> removeRelationships) {
    
    
    
    
    this.removeRelationships = removeRelationships;
    return this;
  }

  public JobUpdate addRemoveRelationshipsItem(JobRelationship removeRelationshipsItem) {
    if (this.removeRelationships == null) {
      this.removeRelationships = new LinkedHashSet<>();
    }
    this.removeRelationships.add(removeRelationshipsItem);
    return this;
  }

   /**
   * relationships to remove
   * @return removeRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "relationships to remove")

  public Set<JobRelationship> getRemoveRelationships() {
    return removeRelationships;
  }


  public void setRemoveRelationships(Set<JobRelationship> removeRelationships) {
    
    
    
    this.removeRelationships = removeRelationships;
  }


  public JobUpdate addGroupIds(Set<String> addGroupIds) {
    
    
    
    
    this.addGroupIds = addGroupIds;
    return this;
  }

  public JobUpdate addAddGroupIdsItem(String addGroupIdsItem) {
    if (this.addGroupIds == null) {
      this.addGroupIds = new LinkedHashSet<>();
    }
    this.addGroupIds.add(addGroupIdsItem);
    return this;
  }

   /**
   * groups to add
   * @return addGroupIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "groups to add")

  public Set<String> getAddGroupIds() {
    return addGroupIds;
  }


  public void setAddGroupIds(Set<String> addGroupIds) {
    
    
    
    this.addGroupIds = addGroupIds;
  }


  public JobUpdate removeGroupIds(Set<String> removeGroupIds) {
    
    
    
    
    this.removeGroupIds = removeGroupIds;
    return this;
  }

  public JobUpdate addRemoveGroupIdsItem(String removeGroupIdsItem) {
    if (this.removeGroupIds == null) {
      this.removeGroupIds = new LinkedHashSet<>();
    }
    this.removeGroupIds.add(removeGroupIdsItem);
    return this;
  }

   /**
   * groups to remove
   * @return removeGroupIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "groups to remove")

  public Set<String> getRemoveGroupIds() {
    return removeGroupIds;
  }


  public void setRemoveGroupIds(Set<String> removeGroupIds) {
    
    
    
    this.removeGroupIds = removeGroupIds;
  }


  public JobUpdate setGroupIds(Map<String, String> setGroupIds) {
    
    
    
    
    this.setGroupIds = setGroupIds;
    return this;
  }

  public JobUpdate putSetGroupIdsItem(String key, String setGroupIdsItem) {
    if (this.setGroupIds == null) {
      this.setGroupIds = new HashMap<>();
    }
    this.setGroupIds.put(key, setGroupIdsItem);
    return this;
  }

   /**
   * groups to set
   * @return setGroupIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "groups to set")

  public Map<String, String> getSetGroupIds() {
    return setGroupIds;
  }


  public void setSetGroupIds(Map<String, String> setGroupIds) {
    
    
    
    this.setGroupIds = setGroupIds;
  }


  public JobUpdate addGroupAssignments(Set<GroupAssignment> addGroupAssignments) {
    
    
    
    
    this.addGroupAssignments = addGroupAssignments;
    return this;
  }

  public JobUpdate addAddGroupAssignmentsItem(GroupAssignment addGroupAssignmentsItem) {
    if (this.addGroupAssignments == null) {
      this.addGroupAssignments = new LinkedHashSet<>();
    }
    this.addGroupAssignments.add(addGroupAssignmentsItem);
    return this;
  }

   /**
   * group assignments to add
   * @return addGroupAssignments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "group assignments to add")

  public Set<GroupAssignment> getAddGroupAssignments() {
    return addGroupAssignments;
  }


  public void setAddGroupAssignments(Set<GroupAssignment> addGroupAssignments) {
    
    
    
    this.addGroupAssignments = addGroupAssignments;
  }


  public JobUpdate removeGroupAssignments(Set<GroupAssignment> removeGroupAssignments) {
    
    
    
    
    this.removeGroupAssignments = removeGroupAssignments;
    return this;
  }

  public JobUpdate addRemoveGroupAssignmentsItem(GroupAssignment removeGroupAssignmentsItem) {
    if (this.removeGroupAssignments == null) {
      this.removeGroupAssignments = new LinkedHashSet<>();
    }
    this.removeGroupAssignments.add(removeGroupAssignmentsItem);
    return this;
  }

   /**
   * group assignments to remove
   * @return removeGroupAssignments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "group assignments to remove")

  public Set<GroupAssignment> getRemoveGroupAssignments() {
    return removeGroupAssignments;
  }


  public void setRemoveGroupAssignments(Set<GroupAssignment> removeGroupAssignments) {
    
    
    
    this.removeGroupAssignments = removeGroupAssignments;
  }


  public JobUpdate grant(StockGrant grant) {
    
    
    
    
    this.grant = grant;
    return this;
  }

   /**
   * Get grant
   * @return grant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StockGrant getGrant() {
    return grant;
  }


  public void setGrant(StockGrant grant) {
    
    
    
    this.grant = grant;
  }


  public JobUpdate timeOff(TimeOff timeOff) {
    
    
    
    
    this.timeOff = timeOff;
    return this;
  }

   /**
   * Get timeOff
   * @return timeOff
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOff getTimeOff() {
    return timeOff;
  }


  public void setTimeOff(TimeOff timeOff) {
    
    
    
    this.timeOff = timeOff;
  }


  public JobUpdate comp(Comp comp) {
    
    
    
    
    this.comp = comp;
    return this;
  }

   /**
   * Get comp
   * @return comp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Comp getComp() {
    return comp;
  }


  public void setComp(Comp comp) {
    
    
    
    this.comp = comp;
  }


  public JobUpdate placement(PlacementEnum placement) {
    
    
    
    
    this.placement = placement;
    return this;
  }

   /**
   * new placement
   * @return placement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "new placement")

  public PlacementEnum getPlacement() {
    return placement;
  }


  public void setPlacement(PlacementEnum placement) {
    
    
    
    this.placement = placement;
  }


  public JobUpdate employment(EmploymentEnum employment) {
    
    
    
    
    this.employment = employment;
    return this;
  }

   /**
   * new employment status
   * @return employment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "new employment status")

  public EmploymentEnum getEmployment() {
    return employment;
  }


  public void setEmployment(EmploymentEnum employment) {
    
    
    
    this.employment = employment;
  }


  public JobUpdate sensitive(SensitiveEnum sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * new view sensitivity
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "new view sensitivity")

  public SensitiveEnum getSensitive() {
    return sensitive;
  }


  public void setSensitive(SensitiveEnum sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public JobUpdate startDatePlanned(LocalDate startDatePlanned) {
    
    
    
    
    this.startDatePlanned = startDatePlanned;
    return this;
  }

   /**
   * planned start date
   * @return startDatePlanned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "planned start date")

  public LocalDate getStartDatePlanned() {
    return startDatePlanned;
  }


  public void setStartDatePlanned(LocalDate startDatePlanned) {
    
    
    
    this.startDatePlanned = startDatePlanned;
  }


  public JobUpdate startDatePlannedRemove(Boolean startDatePlannedRemove) {
    
    
    
    
    this.startDatePlannedRemove = startDatePlannedRemove;
    return this;
  }

   /**
   * remove planned start date. if both startDatePlanned and startDatePlannedRemove are set, startDatePlanned takes precedence
   * @return startDatePlannedRemove
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "remove planned start date. if both startDatePlanned and startDatePlannedRemove are set, startDatePlanned takes precedence")

  public Boolean getStartDatePlannedRemove() {
    return startDatePlannedRemove;
  }


  public void setStartDatePlannedRemove(Boolean startDatePlannedRemove) {
    
    
    
    this.startDatePlannedRemove = startDatePlannedRemove;
  }


  public JobUpdate startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * new expected start date - will update to person start date in future
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "new expected start date - will update to person start date in future")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public JobUpdate backfillPersonId(Object backfillPersonId) {
    
    
    
    
    this.backfillPersonId = backfillPersonId;
    return this;
  }

   /**
   * set who this job is backfilling
   * @return backfillPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set who this job is backfilling")

  public Object getBackfillPersonId() {
    return backfillPersonId;
  }


  public void setBackfillPersonId(Object backfillPersonId) {
    
    
    
    this.backfillPersonId = backfillPersonId;
  }


  public JobUpdate hasUnsetFields(Boolean hasUnsetFields) {
    
    
    
    
    this.hasUnsetFields = hasUnsetFields;
    return this;
  }

   /**
   * set who this job is backfilling
   * @return hasUnsetFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set who this job is backfilling")

  public Boolean getHasUnsetFields() {
    return hasUnsetFields;
  }


  public void setHasUnsetFields(Boolean hasUnsetFields) {
    
    
    
    this.hasUnsetFields = hasUnsetFields;
  }


  public JobUpdate fields(Map<String, Object> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public JobUpdate putFieldsItem(String key, Object fieldsItem) {
    if (this.fields == null) {
      this.fields = new HashMap<>();
    }
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * custom fields values to set
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "custom fields values to set")

  public Map<String, Object> getFields() {
    return fields;
  }


  public void setFields(Map<String, Object> fields) {
    
    
    
    this.fields = fields;
  }


  public JobUpdate orderedFields(List<PairStringObject> orderedFields) {
    
    
    
    
    this.orderedFields = orderedFields;
    return this;
  }

  public JobUpdate addOrderedFieldsItem(PairStringObject orderedFieldsItem) {
    if (this.orderedFields == null) {
      this.orderedFields = new ArrayList<>();
    }
    this.orderedFields.add(orderedFieldsItem);
    return this;
  }

   /**
   * custom ordered fields values to set
   * @return orderedFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "custom ordered fields values to set")

  public List<PairStringObject> getOrderedFields() {
    return orderedFields;
  }


  public void setOrderedFields(List<PairStringObject> orderedFields) {
    
    
    
    this.orderedFields = orderedFields;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JobUpdate instance itself
   */
  public JobUpdate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobUpdate jobUpdate = (JobUpdate) o;
    return Objects.equals(this.title, jobUpdate.title) &&
        Objects.equals(this.addRelationships, jobUpdate.addRelationships) &&
        Objects.equals(this.removeRelationships, jobUpdate.removeRelationships) &&
        Objects.equals(this.addGroupIds, jobUpdate.addGroupIds) &&
        Objects.equals(this.removeGroupIds, jobUpdate.removeGroupIds) &&
        Objects.equals(this.setGroupIds, jobUpdate.setGroupIds) &&
        Objects.equals(this.addGroupAssignments, jobUpdate.addGroupAssignments) &&
        Objects.equals(this.removeGroupAssignments, jobUpdate.removeGroupAssignments) &&
        Objects.equals(this.grant, jobUpdate.grant) &&
        Objects.equals(this.timeOff, jobUpdate.timeOff) &&
        Objects.equals(this.comp, jobUpdate.comp) &&
        Objects.equals(this.placement, jobUpdate.placement) &&
        Objects.equals(this.employment, jobUpdate.employment) &&
        Objects.equals(this.sensitive, jobUpdate.sensitive) &&
        Objects.equals(this.startDatePlanned, jobUpdate.startDatePlanned) &&
        Objects.equals(this.startDatePlannedRemove, jobUpdate.startDatePlannedRemove) &&
        Objects.equals(this.startDate, jobUpdate.startDate) &&
        Objects.equals(this.backfillPersonId, jobUpdate.backfillPersonId) &&
        Objects.equals(this.hasUnsetFields, jobUpdate.hasUnsetFields) &&
        Objects.equals(this.fields, jobUpdate.fields) &&
        Objects.equals(this.orderedFields, jobUpdate.orderedFields)&&
        Objects.equals(this.additionalProperties, jobUpdate.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, addRelationships, removeRelationships, addGroupIds, removeGroupIds, setGroupIds, addGroupAssignments, removeGroupAssignments, grant, timeOff, comp, placement, employment, sensitive, startDatePlanned, startDatePlannedRemove, startDate, backfillPersonId, hasUnsetFields, fields, orderedFields, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobUpdate {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    addRelationships: ").append(toIndentedString(addRelationships)).append("\n");
    sb.append("    removeRelationships: ").append(toIndentedString(removeRelationships)).append("\n");
    sb.append("    addGroupIds: ").append(toIndentedString(addGroupIds)).append("\n");
    sb.append("    removeGroupIds: ").append(toIndentedString(removeGroupIds)).append("\n");
    sb.append("    setGroupIds: ").append(toIndentedString(setGroupIds)).append("\n");
    sb.append("    addGroupAssignments: ").append(toIndentedString(addGroupAssignments)).append("\n");
    sb.append("    removeGroupAssignments: ").append(toIndentedString(removeGroupAssignments)).append("\n");
    sb.append("    grant: ").append(toIndentedString(grant)).append("\n");
    sb.append("    timeOff: ").append(toIndentedString(timeOff)).append("\n");
    sb.append("    comp: ").append(toIndentedString(comp)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    employment: ").append(toIndentedString(employment)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    startDatePlanned: ").append(toIndentedString(startDatePlanned)).append("\n");
    sb.append("    startDatePlannedRemove: ").append(toIndentedString(startDatePlannedRemove)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    backfillPersonId: ").append(toIndentedString(backfillPersonId)).append("\n");
    sb.append("    hasUnsetFields: ").append(toIndentedString(hasUnsetFields)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    orderedFields: ").append(toIndentedString(orderedFields)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("addRelationships");
    openapiFields.add("removeRelationships");
    openapiFields.add("addGroupIds");
    openapiFields.add("removeGroupIds");
    openapiFields.add("setGroupIds");
    openapiFields.add("addGroupAssignments");
    openapiFields.add("removeGroupAssignments");
    openapiFields.add("grant");
    openapiFields.add("timeOff");
    openapiFields.add("comp");
    openapiFields.add("placement");
    openapiFields.add("employment");
    openapiFields.add("sensitive");
    openapiFields.add("startDatePlanned");
    openapiFields.add("startDatePlannedRemove");
    openapiFields.add("startDate");
    openapiFields.add("backfillPersonId");
    openapiFields.add("hasUnsetFields");
    openapiFields.add("fields");
    openapiFields.add("orderedFields");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JobUpdate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JobUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobUpdate is not found in the empty JSON string", JobUpdate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("addRelationships") != null && !jsonObj.get("addRelationships").isJsonNull()) {
        JsonArray jsonArrayaddRelationships = jsonObj.getAsJsonArray("addRelationships");
        if (jsonArrayaddRelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addRelationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("addRelationships").toString()));
          }

          // validate the optional field `addRelationships` (array)
          for (int i = 0; i < jsonArrayaddRelationships.size(); i++) {
            JobRelationship.validateJsonObject(jsonArrayaddRelationships.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("removeRelationships") != null && !jsonObj.get("removeRelationships").isJsonNull()) {
        JsonArray jsonArrayremoveRelationships = jsonObj.getAsJsonArray("removeRelationships");
        if (jsonArrayremoveRelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("removeRelationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `removeRelationships` to be an array in the JSON string but got `%s`", jsonObj.get("removeRelationships").toString()));
          }

          // validate the optional field `removeRelationships` (array)
          for (int i = 0; i < jsonArrayremoveRelationships.size(); i++) {
            JobRelationship.validateJsonObject(jsonArrayremoveRelationships.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("addGroupIds") != null && !jsonObj.get("addGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("addGroupIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removeGroupIds") != null && !jsonObj.get("removeGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("removeGroupIds").toString()));
      }
      if (jsonObj.get("addGroupAssignments") != null && !jsonObj.get("addGroupAssignments").isJsonNull()) {
        JsonArray jsonArrayaddGroupAssignments = jsonObj.getAsJsonArray("addGroupAssignments");
        if (jsonArrayaddGroupAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addGroupAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addGroupAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("addGroupAssignments").toString()));
          }

          // validate the optional field `addGroupAssignments` (array)
          for (int i = 0; i < jsonArrayaddGroupAssignments.size(); i++) {
            GroupAssignment.validateJsonObject(jsonArrayaddGroupAssignments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("removeGroupAssignments") != null && !jsonObj.get("removeGroupAssignments").isJsonNull()) {
        JsonArray jsonArrayremoveGroupAssignments = jsonObj.getAsJsonArray("removeGroupAssignments");
        if (jsonArrayremoveGroupAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("removeGroupAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `removeGroupAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("removeGroupAssignments").toString()));
          }

          // validate the optional field `removeGroupAssignments` (array)
          for (int i = 0; i < jsonArrayremoveGroupAssignments.size(); i++) {
            GroupAssignment.validateJsonObject(jsonArrayremoveGroupAssignments.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `grant`
      if (jsonObj.get("grant") != null && !jsonObj.get("grant").isJsonNull()) {
        StockGrant.validateJsonObject(jsonObj.getAsJsonObject("grant"));
      }
      // validate the optional field `timeOff`
      if (jsonObj.get("timeOff") != null && !jsonObj.get("timeOff").isJsonNull()) {
        TimeOff.validateJsonObject(jsonObj.getAsJsonObject("timeOff"));
      }
      // validate the optional field `comp`
      if (jsonObj.get("comp") != null && !jsonObj.get("comp").isJsonNull()) {
        Comp.validateJsonObject(jsonObj.getAsJsonObject("comp"));
      }
      if ((jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) && !jsonObj.get("placement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement").toString()));
      }
      if ((jsonObj.get("employment") != null && !jsonObj.get("employment").isJsonNull()) && !jsonObj.get("employment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment").toString()));
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if (jsonObj.get("orderedFields") != null && !jsonObj.get("orderedFields").isJsonNull()) {
        JsonArray jsonArrayorderedFields = jsonObj.getAsJsonArray("orderedFields");
        if (jsonArrayorderedFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderedFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderedFields` to be an array in the JSON string but got `%s`", jsonObj.get("orderedFields").toString()));
          }

          // validate the optional field `orderedFields` (array)
          for (int i = 0; i < jsonArrayorderedFields.size(); i++) {
            PairStringObject.validateJsonObject(jsonArrayorderedFields.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<JobUpdate>() {
           @Override
           public void write(JsonWriter out, JobUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JobUpdate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JobUpdate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JobUpdate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JobUpdate
  * @throws IOException if the JSON string is invalid with respect to JobUpdate
  */
  public static JobUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobUpdate.class);
  }

 /**
  * Convert an instance of JobUpdate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

