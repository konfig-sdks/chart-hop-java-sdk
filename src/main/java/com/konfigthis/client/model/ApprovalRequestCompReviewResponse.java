/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApprovalChainStageOverride;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ApprovalRequestCompReviewResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApprovalRequestCompReviewResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    CANCELED("CANCELED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    REVIEWED("REVIEWED"),
    
    APPROVED("APPROVED"),
    
    SKIPPED("SKIPPED"),
    
    SUBMITTED("SUBMITTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Gets or Sets parentStatus
   */
  @JsonAdapter(ParentStatusEnum.Adapter.class)
 public enum ParentStatusEnum {
    CANCELED("CANCELED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    REVIEWED("REVIEWED"),
    
    APPROVED("APPROVED"),
    
    SKIPPED("SKIPPED"),
    
    SUBMITTED("SUBMITTED");

    private String value;

    ParentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParentStatusEnum fromValue(String value) {
      for (ParentStatusEnum b : ParentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParentStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARENT_STATUS = "parentStatus";
  @SerializedName(SERIALIZED_NAME_PARENT_STATUS)
  private ParentStatusEnum parentStatus;

  public static final String SERIALIZED_NAME_IS_FULLY_SUBMITTED = "isFullySubmitted";
  @SerializedName(SERIALIZED_NAME_IS_FULLY_SUBMITTED)
  private Boolean isFullySubmitted;

  /**
   * Gets or Sets entityType
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
 public enum EntityTypeEnum {
    COMP_REVIEW("COMP_REVIEW"),
    
    SCENARIO("SCENARIO"),
    
    TIMEOFF("TIMEOFF");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_APPROVAL_CHAIN_ID = "approvalChainId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CHAIN_ID)
  private String approvalChainId;

  public static final String SERIALIZED_NAME_STAGE_OVERRIDES = "stageOverrides";
  @SerializedName(SERIALIZED_NAME_STAGE_OVERRIDES)
  private List<ApprovalChainStageOverride> stageOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private Long createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private Long updateAt;

  public ApprovalRequestCompReviewResponse() {
  }

  public ApprovalRequestCompReviewResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ApprovalRequestCompReviewResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ApprovalRequestCompReviewResponse parentStatus(ParentStatusEnum parentStatus) {
    
    
    
    
    this.parentStatus = parentStatus;
    return this;
  }

   /**
   * Get parentStatus
   * @return parentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ParentStatusEnum getParentStatus() {
    return parentStatus;
  }


  public void setParentStatus(ParentStatusEnum parentStatus) {
    
    
    
    this.parentStatus = parentStatus;
  }


  public ApprovalRequestCompReviewResponse isFullySubmitted(Boolean isFullySubmitted) {
    
    
    
    
    this.isFullySubmitted = isFullySubmitted;
    return this;
  }

   /**
   * Get isFullySubmitted
   * @return isFullySubmitted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsFullySubmitted() {
    return isFullySubmitted;
  }


  public void setIsFullySubmitted(Boolean isFullySubmitted) {
    
    
    
    this.isFullySubmitted = isFullySubmitted;
  }


  public ApprovalRequestCompReviewResponse entityType(EntityTypeEnum entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityTypeEnum entityType) {
    
    
    
    this.entityType = entityType;
  }


  public ApprovalRequestCompReviewResponse entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * Get entityId
   * @return entityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public ApprovalRequestCompReviewResponse approvalChainId(String approvalChainId) {
    
    
    
    
    this.approvalChainId = approvalChainId;
    return this;
  }

   /**
   * Get approvalChainId
   * @return approvalChainId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getApprovalChainId() {
    return approvalChainId;
  }


  public void setApprovalChainId(String approvalChainId) {
    
    
    
    this.approvalChainId = approvalChainId;
  }


  public ApprovalRequestCompReviewResponse stageOverrides(List<ApprovalChainStageOverride> stageOverrides) {
    
    
    
    
    this.stageOverrides = stageOverrides;
    return this;
  }

  public ApprovalRequestCompReviewResponse addStageOverridesItem(ApprovalChainStageOverride stageOverridesItem) {
    this.stageOverrides.add(stageOverridesItem);
    return this;
  }

   /**
   * Get stageOverrides
   * @return stageOverrides
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ApprovalChainStageOverride> getStageOverrides() {
    return stageOverrides;
  }


  public void setStageOverrides(List<ApprovalChainStageOverride> stageOverrides) {
    
    
    
    this.stageOverrides = stageOverrides;
  }


  public ApprovalRequestCompReviewResponse createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * Get createId
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public ApprovalRequestCompReviewResponse createAt(Long createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * Get createAt
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getCreateAt() {
    return createAt;
  }


  public void setCreateAt(Long createAt) {
    
    
    
    this.createAt = createAt;
  }


  public ApprovalRequestCompReviewResponse updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * Get updateId
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public ApprovalRequestCompReviewResponse updateAt(Long updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * Get updateAt
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(Long updateAt) {
    
    
    
    this.updateAt = updateAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApprovalRequestCompReviewResponse instance itself
   */
  public ApprovalRequestCompReviewResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprovalRequestCompReviewResponse approvalRequestCompReviewResponse = (ApprovalRequestCompReviewResponse) o;
    return Objects.equals(this.id, approvalRequestCompReviewResponse.id) &&
        Objects.equals(this.status, approvalRequestCompReviewResponse.status) &&
        Objects.equals(this.parentStatus, approvalRequestCompReviewResponse.parentStatus) &&
        Objects.equals(this.isFullySubmitted, approvalRequestCompReviewResponse.isFullySubmitted) &&
        Objects.equals(this.entityType, approvalRequestCompReviewResponse.entityType) &&
        Objects.equals(this.entityId, approvalRequestCompReviewResponse.entityId) &&
        Objects.equals(this.approvalChainId, approvalRequestCompReviewResponse.approvalChainId) &&
        Objects.equals(this.stageOverrides, approvalRequestCompReviewResponse.stageOverrides) &&
        Objects.equals(this.createId, approvalRequestCompReviewResponse.createId) &&
        Objects.equals(this.createAt, approvalRequestCompReviewResponse.createAt) &&
        Objects.equals(this.updateId, approvalRequestCompReviewResponse.updateId) &&
        Objects.equals(this.updateAt, approvalRequestCompReviewResponse.updateAt)&&
        Objects.equals(this.additionalProperties, approvalRequestCompReviewResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, parentStatus, isFullySubmitted, entityType, entityId, approvalChainId, stageOverrides, createId, createAt, updateId, updateAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprovalRequestCompReviewResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    parentStatus: ").append(toIndentedString(parentStatus)).append("\n");
    sb.append("    isFullySubmitted: ").append(toIndentedString(isFullySubmitted)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    approvalChainId: ").append(toIndentedString(approvalChainId)).append("\n");
    sb.append("    stageOverrides: ").append(toIndentedString(stageOverrides)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status");
    openapiFields.add("parentStatus");
    openapiFields.add("isFullySubmitted");
    openapiFields.add("entityType");
    openapiFields.add("entityId");
    openapiFields.add("approvalChainId");
    openapiFields.add("stageOverrides");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("entityType");
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("approvalChainId");
    openapiRequiredFields.add("stageOverrides");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApprovalRequestCompReviewResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApprovalRequestCompReviewResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprovalRequestCompReviewResponse is not found in the empty JSON string", ApprovalRequestCompReviewResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApprovalRequestCompReviewResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("parentStatus") != null && !jsonObj.get("parentStatus").isJsonNull()) && !jsonObj.get("parentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentStatus").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if (!jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if (!jsonObj.get("approvalChainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalChainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalChainId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stageOverrides").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stageOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("stageOverrides").toString()));
      }

      JsonArray jsonArraystageOverrides = jsonObj.getAsJsonArray("stageOverrides");
      // validate the required field `stageOverrides` (array)
      for (int i = 0; i < jsonArraystageOverrides.size(); i++) {
        ApprovalChainStageOverride.validateJsonObject(jsonArraystageOverrides.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprovalRequestCompReviewResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprovalRequestCompReviewResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprovalRequestCompReviewResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprovalRequestCompReviewResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprovalRequestCompReviewResponse>() {
           @Override
           public void write(JsonWriter out, ApprovalRequestCompReviewResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprovalRequestCompReviewResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApprovalRequestCompReviewResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApprovalRequestCompReviewResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApprovalRequestCompReviewResponse
  * @throws IOException if the JSON string is invalid with respect to ApprovalRequestCompReviewResponse
  */
  public static ApprovalRequestCompReviewResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprovalRequestCompReviewResponse.class);
  }

 /**
  * Convert an instance of ApprovalRequestCompReviewResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

