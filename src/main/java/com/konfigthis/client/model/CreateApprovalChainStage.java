/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApprovalGroup;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateApprovalChainStage
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateApprovalChainStage {
  public static final String SERIALIZED_NAME_INCLUSION_EXPRESSION = "inclusionExpression";
  @SerializedName(SERIALIZED_NAME_INCLUSION_EXPRESSION)
  private String inclusionExpression;

  /**
   * determines whether stage is conditional based on an expression
   */
  @JsonAdapter(InclusionBehaviorEnum.Adapter.class)
 public enum InclusionBehaviorEnum {
    ONLY_INCLUDE_IF("ONLY_INCLUDE_IF"),
    
    EXCLUDE_IF("EXCLUDE_IF");

    private String value;

    InclusionBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InclusionBehaviorEnum fromValue(String value) {
      for (InclusionBehaviorEnum b : InclusionBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InclusionBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InclusionBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InclusionBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InclusionBehaviorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INCLUSION_BEHAVIOR = "inclusionBehavior";
  @SerializedName(SERIALIZED_NAME_INCLUSION_BEHAVIOR)
  private InclusionBehaviorEnum inclusionBehavior;

  public static final String SERIALIZED_NAME_EXPAND_EXPRESSION = "expandExpression";
  @SerializedName(SERIALIZED_NAME_EXPAND_EXPRESSION)
  private String expandExpression;

  /**
   * determines which stage becomes active when a rejection event happens
   */
  @JsonAdapter(RejectBehaviorEnum.Adapter.class)
 public enum RejectBehaviorEnum {
    BACK_TO_BEGINNING("BACK_TO_BEGINNING"),
    
    PREVIOUS_PHASE("PREVIOUS_PHASE");

    private String value;

    RejectBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectBehaviorEnum fromValue(String value) {
      for (RejectBehaviorEnum b : RejectBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RejectBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RejectBehaviorEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REJECT_BEHAVIOR = "rejectBehavior";
  @SerializedName(SERIALIZED_NAME_REJECT_BEHAVIOR)
  private RejectBehaviorEnum rejectBehavior;

  /**
   * status of the stage
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    CANCELED("CANCELED"),
    
    REJECTED("REJECTED"),
    
    PENDING("PENDING"),
    
    ACTIVE("ACTIVE"),
    
    REVIEWED("REVIEWED"),
    
    APPROVED("APPROVED"),
    
    SKIPPED("SKIPPED"),
    
    SUBMITTED("SUBMITTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_APPROVAL_COMMENT_REQUIRED = "approvalCommentRequired";
  @SerializedName(SERIALIZED_NAME_APPROVAL_COMMENT_REQUIRED)
  private Boolean approvalCommentRequired;

  public static final String SERIALIZED_NAME_REJECTION_COMMENT_REQUIRED = "rejectionCommentRequired";
  @SerializedName(SERIALIZED_NAME_REJECTION_COMMENT_REQUIRED)
  private Boolean rejectionCommentRequired;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ApprovalGroup> groups = new ArrayList<>();

  public CreateApprovalChainStage() {
  }

  public CreateApprovalChainStage inclusionExpression(String inclusionExpression) {
    
    
    
    
    this.inclusionExpression = inclusionExpression;
    return this;
  }

   /**
   * optional custom expression to determine stage inclusion behavior
   * @return inclusionExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "optional custom expression to determine stage inclusion behavior")

  public String getInclusionExpression() {
    return inclusionExpression;
  }


  public void setInclusionExpression(String inclusionExpression) {
    
    
    
    this.inclusionExpression = inclusionExpression;
  }


  public CreateApprovalChainStage inclusionBehavior(InclusionBehaviorEnum inclusionBehavior) {
    
    
    
    
    this.inclusionBehavior = inclusionBehavior;
    return this;
  }

   /**
   * determines whether stage is conditional based on an expression
   * @return inclusionBehavior
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "determines whether stage is conditional based on an expression")

  public InclusionBehaviorEnum getInclusionBehavior() {
    return inclusionBehavior;
  }


  public void setInclusionBehavior(InclusionBehaviorEnum inclusionBehavior) {
    
    
    
    this.inclusionBehavior = inclusionBehavior;
  }


  public CreateApprovalChainStage expandExpression(String expandExpression) {
    
    
    
    
    this.expandExpression = expandExpression;
    return this;
  }

   /**
   * optional custom expression to determine approval request tree
   * @return expandExpression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "optional custom expression to determine approval request tree")

  public String getExpandExpression() {
    return expandExpression;
  }


  public void setExpandExpression(String expandExpression) {
    
    
    
    this.expandExpression = expandExpression;
  }


  public CreateApprovalChainStage rejectBehavior(RejectBehaviorEnum rejectBehavior) {
    
    
    
    
    this.rejectBehavior = rejectBehavior;
    return this;
  }

   /**
   * determines which stage becomes active when a rejection event happens
   * @return rejectBehavior
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "determines which stage becomes active when a rejection event happens")

  public RejectBehaviorEnum getRejectBehavior() {
    return rejectBehavior;
  }


  public void setRejectBehavior(RejectBehaviorEnum rejectBehavior) {
    
    
    
    this.rejectBehavior = rejectBehavior;
  }


  public CreateApprovalChainStage status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of the stage
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "status of the stage")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CreateApprovalChainStage approvalCommentRequired(Boolean approvalCommentRequired) {
    
    
    
    
    this.approvalCommentRequired = approvalCommentRequired;
    return this;
  }

   /**
   * requires a comment on an approval event
   * @return approvalCommentRequired
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "requires a comment on an approval event")

  public Boolean getApprovalCommentRequired() {
    return approvalCommentRequired;
  }


  public void setApprovalCommentRequired(Boolean approvalCommentRequired) {
    
    
    
    this.approvalCommentRequired = approvalCommentRequired;
  }


  public CreateApprovalChainStage rejectionCommentRequired(Boolean rejectionCommentRequired) {
    
    
    
    
    this.rejectionCommentRequired = rejectionCommentRequired;
    return this;
  }

   /**
   * requires a comment on an rejection event
   * @return rejectionCommentRequired
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "requires a comment on an rejection event")

  public Boolean getRejectionCommentRequired() {
    return rejectionCommentRequired;
  }


  public void setRejectionCommentRequired(Boolean rejectionCommentRequired) {
    
    
    
    this.rejectionCommentRequired = rejectionCommentRequired;
  }


  public CreateApprovalChainStage order(Integer order) {
    
    
    
    
    this.order = order;
    return this;
  }

   /**
   * order of stage in approval chain
   * @return order
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "order of stage in approval chain")

  public Integer getOrder() {
    return order;
  }


  public void setOrder(Integer order) {
    
    
    
    this.order = order;
  }


  public CreateApprovalChainStage groups(List<ApprovalGroup> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public CreateApprovalChainStage addGroupsItem(ApprovalGroup groupsItem) {
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * list of groups that are involved in this approval stage
   * @return groups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of groups that are involved in this approval stage")

  public List<ApprovalGroup> getGroups() {
    return groups;
  }


  public void setGroups(List<ApprovalGroup> groups) {
    
    
    
    this.groups = groups;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateApprovalChainStage instance itself
   */
  public CreateApprovalChainStage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApprovalChainStage createApprovalChainStage = (CreateApprovalChainStage) o;
    return Objects.equals(this.inclusionExpression, createApprovalChainStage.inclusionExpression) &&
        Objects.equals(this.inclusionBehavior, createApprovalChainStage.inclusionBehavior) &&
        Objects.equals(this.expandExpression, createApprovalChainStage.expandExpression) &&
        Objects.equals(this.rejectBehavior, createApprovalChainStage.rejectBehavior) &&
        Objects.equals(this.status, createApprovalChainStage.status) &&
        Objects.equals(this.approvalCommentRequired, createApprovalChainStage.approvalCommentRequired) &&
        Objects.equals(this.rejectionCommentRequired, createApprovalChainStage.rejectionCommentRequired) &&
        Objects.equals(this.order, createApprovalChainStage.order) &&
        Objects.equals(this.groups, createApprovalChainStage.groups)&&
        Objects.equals(this.additionalProperties, createApprovalChainStage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inclusionExpression, inclusionBehavior, expandExpression, rejectBehavior, status, approvalCommentRequired, rejectionCommentRequired, order, groups, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApprovalChainStage {\n");
    sb.append("    inclusionExpression: ").append(toIndentedString(inclusionExpression)).append("\n");
    sb.append("    inclusionBehavior: ").append(toIndentedString(inclusionBehavior)).append("\n");
    sb.append("    expandExpression: ").append(toIndentedString(expandExpression)).append("\n");
    sb.append("    rejectBehavior: ").append(toIndentedString(rejectBehavior)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    approvalCommentRequired: ").append(toIndentedString(approvalCommentRequired)).append("\n");
    sb.append("    rejectionCommentRequired: ").append(toIndentedString(rejectionCommentRequired)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inclusionExpression");
    openapiFields.add("inclusionBehavior");
    openapiFields.add("expandExpression");
    openapiFields.add("rejectBehavior");
    openapiFields.add("status");
    openapiFields.add("approvalCommentRequired");
    openapiFields.add("rejectionCommentRequired");
    openapiFields.add("order");
    openapiFields.add("groups");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rejectBehavior");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("approvalCommentRequired");
    openapiRequiredFields.add("rejectionCommentRequired");
    openapiRequiredFields.add("order");
    openapiRequiredFields.add("groups");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateApprovalChainStage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateApprovalChainStage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApprovalChainStage is not found in the empty JSON string", CreateApprovalChainStage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApprovalChainStage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("inclusionExpression") != null && !jsonObj.get("inclusionExpression").isJsonNull()) && !jsonObj.get("inclusionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclusionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclusionExpression").toString()));
      }
      if ((jsonObj.get("inclusionBehavior") != null && !jsonObj.get("inclusionBehavior").isJsonNull()) && !jsonObj.get("inclusionBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inclusionBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inclusionBehavior").toString()));
      }
      if ((jsonObj.get("expandExpression") != null && !jsonObj.get("expandExpression").isJsonNull()) && !jsonObj.get("expandExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expandExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expandExpression").toString()));
      }
      if (!jsonObj.get("rejectBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rejectBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rejectBehavior").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        ApprovalGroup.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApprovalChainStage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApprovalChainStage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApprovalChainStage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApprovalChainStage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApprovalChainStage>() {
           @Override
           public void write(JsonWriter out, CreateApprovalChainStage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApprovalChainStage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateApprovalChainStage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateApprovalChainStage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateApprovalChainStage
  * @throws IOException if the JSON string is invalid with respect to CreateApprovalChainStage
  */
  public static CreateApprovalChainStage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApprovalChainStage.class);
  }

 /**
  * Convert an instance of CreateApprovalChainStage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

