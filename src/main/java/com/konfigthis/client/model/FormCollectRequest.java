/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FormCollectRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FormCollectRequest {
  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_TARGET_FILTER = "targetFilter";
  @SerializedName(SERIALIZED_NAME_TARGET_FILTER)
  private String targetFilter;

  public static final String SERIALIZED_NAME_SUBMIT_FILTER = "submitFilter";
  @SerializedName(SERIALIZED_NAME_SUBMIT_FILTER)
  private String submitFilter;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Boolean preview;

  public FormCollectRequest() {
  }

  public FormCollectRequest assessmentId(String assessmentId) {
    
    
    
    
    this.assessmentId = assessmentId;
    return this;
  }

   /**
   * the assessment id that this form collection request aligns to (for example a performance review cycle)
   * @return assessmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the assessment id that this form collection request aligns to (for example a performance review cycle)")

  public String getAssessmentId() {
    return assessmentId;
  }


  public void setAssessmentId(String assessmentId) {
    
    
    
    this.assessmentId = assessmentId;
  }


  public FormCollectRequest targetFilter(String targetFilter) {
    
    
    
    
    this.targetFilter = targetFilter;
    return this;
  }

   /**
   * filter query to apply on who should receive the form collection request
   * @return targetFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "filter query to apply on who should receive the form collection request")

  public String getTargetFilter() {
    return targetFilter;
  }


  public void setTargetFilter(String targetFilter) {
    
    
    
    this.targetFilter = targetFilter;
  }


  public FormCollectRequest submitFilter(String submitFilter) {
    
    
    
    
    this.submitFilter = submitFilter;
    return this;
  }

   /**
   * Filter to for jobs/person that match via relationship
   * @return submitFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter to for jobs/person that match via relationship")

  public String getSubmitFilter() {
    return submitFilter;
  }


  public void setSubmitFilter(String submitFilter) {
    
    
    
    this.submitFilter = submitFilter;
  }


  public FormCollectRequest message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * message to include in notification
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "message to include in notification")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public FormCollectRequest preview(Boolean preview) {
    
    
    
    
    this.preview = preview;
    return this;
  }

   /**
   * Is this a preview?
   * @return preview
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Is this a preview?")

  public Boolean getPreview() {
    return preview;
  }


  public void setPreview(Boolean preview) {
    
    
    
    this.preview = preview;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FormCollectRequest instance itself
   */
  public FormCollectRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormCollectRequest formCollectRequest = (FormCollectRequest) o;
    return Objects.equals(this.assessmentId, formCollectRequest.assessmentId) &&
        Objects.equals(this.targetFilter, formCollectRequest.targetFilter) &&
        Objects.equals(this.submitFilter, formCollectRequest.submitFilter) &&
        Objects.equals(this.message, formCollectRequest.message) &&
        Objects.equals(this.preview, formCollectRequest.preview)&&
        Objects.equals(this.additionalProperties, formCollectRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentId, targetFilter, submitFilter, message, preview, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormCollectRequest {\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    targetFilter: ").append(toIndentedString(targetFilter)).append("\n");
    sb.append("    submitFilter: ").append(toIndentedString(submitFilter)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentId");
    openapiFields.add("targetFilter");
    openapiFields.add("submitFilter");
    openapiFields.add("message");
    openapiFields.add("preview");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("preview");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FormCollectRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FormCollectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormCollectRequest is not found in the empty JSON string", FormCollectRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FormCollectRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if ((jsonObj.get("targetFilter") != null && !jsonObj.get("targetFilter").isJsonNull()) && !jsonObj.get("targetFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetFilter").toString()));
      }
      if ((jsonObj.get("submitFilter") != null && !jsonObj.get("submitFilter").isJsonNull()) && !jsonObj.get("submitFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitFilter").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormCollectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormCollectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormCollectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormCollectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FormCollectRequest>() {
           @Override
           public void write(JsonWriter out, FormCollectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FormCollectRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FormCollectRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FormCollectRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FormCollectRequest
  * @throws IOException if the JSON string is invalid with respect to FormCollectRequest
  */
  public static FormCollectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormCollectRequest.class);
  }

 /**
  * Convert an instance of FormCollectRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

