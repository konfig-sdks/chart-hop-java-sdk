/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BasisFieldMatrix;
import com.konfigthis.client.model.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BudgetPool
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BudgetPool {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_COMP_REVIEW_ID = "compReviewId";
  @SerializedName(SERIALIZED_NAME_COMP_REVIEW_ID)
  private String compReviewId;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_PARTICIPANTS_EXPR = "participantsExpr";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS_EXPR)
  private String participantsExpr;

  public static final String SERIALIZED_NAME_APPLIED_FIELD = "appliedField";
  @SerializedName(SERIALIZED_NAME_APPLIED_FIELD)
  private String appliedField;

  public static final String SERIALIZED_NAME_SOURCE_FIELD = "sourceField";
  @SerializedName(SERIALIZED_NAME_SOURCE_FIELD)
  private String sourceField;

  /**
   * the method for calculating the amount in the budget
   */
  @JsonAdapter(BasisTypeEnum.Adapter.class)
 public enum BasisTypeEnum {
    CUSTOM("CUSTOM"),
    
    FIXED("FIXED"),
    
    CUSTOM_FIXED("CUSTOM_FIXED"),
    
    PERCENTAGE("PERCENTAGE"),
    
    CUSTOM_PERCENTAGE("CUSTOM_PERCENTAGE");

    private String value;

    BasisTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BasisTypeEnum fromValue(String value) {
      for (BasisTypeEnum b : BasisTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BasisTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BasisTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BasisTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BasisTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BASIS_TYPE = "basisType";
  @SerializedName(SERIALIZED_NAME_BASIS_TYPE)
  private BasisTypeEnum basisType;

  public static final String SERIALIZED_NAME_FIXED_AMOUNT = "fixedAmount";
  @SerializedName(SERIALIZED_NAME_FIXED_AMOUNT)
  private Money fixedAmount;

  public static final String SERIALIZED_NAME_FIXED_VALUE = "fixedValue";
  @SerializedName(SERIALIZED_NAME_FIXED_VALUE)
  private Double fixedValue;

  public static final String SERIALIZED_NAME_BASIS_FIELD_MATRIX = "basisFieldMatrix";
  @SerializedName(SERIALIZED_NAME_BASIS_FIELD_MATRIX)
  private BasisFieldMatrix basisFieldMatrix;

  public static final String SERIALIZED_NAME_FIXED_BUDGET_MAP = "fixedBudgetMap";
  @SerializedName(SERIALIZED_NAME_FIXED_BUDGET_MAP)
  private Map<String, Money> fixedBudgetMap = null;

  public static final String SERIALIZED_NAME_BASIS_EXPR = "basisExpr";
  @SerializedName(SERIALIZED_NAME_BASIS_EXPR)
  private String basisExpr;

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY = "defaultCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY)
  private String defaultCurrency;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public BudgetPool() {
  }

  public BudgetPool id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public BudgetPool orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id (empty if built-in)
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent organization id (empty if built-in)")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public BudgetPool compReviewId(String compReviewId) {
    
    
    
    
    this.compReviewId = compReviewId;
    return this;
  }

   /**
   * the ID of the comp review this budget is for
   * @return compReviewId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "the ID of the comp review this budget is for")

  public String getCompReviewId() {
    return compReviewId;
  }


  public void setCompReviewId(String compReviewId) {
    
    
    
    this.compReviewId = compReviewId;
  }


  public BudgetPool label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * unique label
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Merit", required = true, value = "unique label")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public BudgetPool participantsExpr(String participantsExpr) {
    
    
    
    
    this.participantsExpr = participantsExpr;
    return this;
  }

   /**
   * expression that determines if a particular job is included in this budget pool
   * @return participantsExpr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "expression that determines if a particular job is included in this budget pool")

  public String getParticipantsExpr() {
    return participantsExpr;
  }


  public void setParticipantsExpr(String participantsExpr) {
    
    
    
    this.participantsExpr = participantsExpr;
  }


  public BudgetPool appliedField(String appliedField) {
    
    
    
    
    this.appliedField = appliedField;
    return this;
  }

   /**
   * the field this budget pool applies to
   * @return appliedField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "base", required = true, value = "the field this budget pool applies to")

  public String getAppliedField() {
    return appliedField;
  }


  public void setAppliedField(String appliedField) {
    
    
    
    this.appliedField = appliedField;
  }


  public BudgetPool sourceField(String sourceField) {
    
    
    
    
    this.sourceField = sourceField;
    return this;
  }

   /**
   * the field this budget pool is calculated from
   * @return sourceField
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "base", required = true, value = "the field this budget pool is calculated from")

  public String getSourceField() {
    return sourceField;
  }


  public void setSourceField(String sourceField) {
    
    
    
    this.sourceField = sourceField;
  }


  public BudgetPool basisType(BasisTypeEnum basisType) {
    
    
    
    
    this.basisType = basisType;
    return this;
  }

   /**
   * the method for calculating the amount in the budget
   * @return basisType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the method for calculating the amount in the budget")

  public BasisTypeEnum getBasisType() {
    return basisType;
  }


  public void setBasisType(BasisTypeEnum basisType) {
    
    
    
    this.basisType = basisType;
  }


  public BudgetPool fixedAmount(Money fixedAmount) {
    
    
    
    
    this.fixedAmount = fixedAmount;
    return this;
  }

   /**
   * Get fixedAmount
   * @return fixedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getFixedAmount() {
    return fixedAmount;
  }


  public void setFixedAmount(Money fixedAmount) {
    
    
    
    this.fixedAmount = fixedAmount;
  }


  public BudgetPool fixedValue(Double fixedValue) {
    
    
    
    
    this.fixedValue = fixedValue;
    return this;
  }

  public BudgetPool fixedValue(Integer fixedValue) {
    
    
    
    
    this.fixedValue = fixedValue.doubleValue();
    return this;
  }

   /**
   * a fixed amount for the budget (used with basisType&#x3D;FIXED || basisType&#x3D;PERCENTAGE)
   * @return fixedValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a fixed amount for the budget (used with basisType=FIXED || basisType=PERCENTAGE)")

  public Double getFixedValue() {
    return fixedValue;
  }


  public void setFixedValue(Double fixedValue) {
    
    
    
    this.fixedValue = fixedValue;
  }


  public BudgetPool basisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
    
    
    
    
    this.basisFieldMatrix = basisFieldMatrix;
    return this;
  }

   /**
   * Get basisFieldMatrix
   * @return basisFieldMatrix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BasisFieldMatrix getBasisFieldMatrix() {
    return basisFieldMatrix;
  }


  public void setBasisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
    
    
    
    this.basisFieldMatrix = basisFieldMatrix;
  }


  public BudgetPool fixedBudgetMap(Map<String, Money> fixedBudgetMap) {
    
    
    
    
    this.fixedBudgetMap = fixedBudgetMap;
    return this;
  }

  public BudgetPool putFixedBudgetMapItem(String key, Money fixedBudgetMapItem) {
    if (this.fixedBudgetMap == null) {
      this.fixedBudgetMap = new HashMap<>();
    }
    this.fixedBudgetMap.put(key, fixedBudgetMapItem);
    return this;
  }

   /**
   * a map of reviewer job IDs to fixed budget money amounts
   * @return fixedBudgetMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "a map of reviewer job IDs to fixed budget money amounts")

  public Map<String, Money> getFixedBudgetMap() {
    return fixedBudgetMap;
  }


  public void setFixedBudgetMap(Map<String, Money> fixedBudgetMap) {
    
    
    
    this.fixedBudgetMap = fixedBudgetMap;
  }


  public BudgetPool basisExpr(String basisExpr) {
    
    
    
    
    this.basisExpr = basisExpr;
    return this;
  }

   /**
   * expression that calculates how much each job contributes to the budget (used with basisType&#x3D;CUSTOM)
   * @return basisExpr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "expression that calculates how much each job contributes to the budget (used with basisType=CUSTOM)")

  public String getBasisExpr() {
    return basisExpr;
  }


  public void setBasisExpr(String basisExpr) {
    
    
    
    this.basisExpr = basisExpr;
  }


  public BudgetPool defaultCurrency(String defaultCurrency) {
    
    
    
    
    this.defaultCurrency = defaultCurrency;
    return this;
  }

   /**
   * Default currency used when calculating budget pool, falls back to org primary currency if not set
   * @return defaultCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Default currency used when calculating budget pool, falls back to org primary currency if not set")

  public String getDefaultCurrency() {
    return defaultCurrency;
  }


  public void setDefaultCurrency(String defaultCurrency) {
    
    
    
    this.defaultCurrency = defaultCurrency;
  }


  public BudgetPool createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public BudgetPool createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", required = true, value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public BudgetPool updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * last updated by user id
   * @return updateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "last updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public BudgetPool updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * last updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", required = true, value = "last updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public BudgetPool deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public BudgetPool deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BudgetPool instance itself
   */
  public BudgetPool putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BudgetPool budgetPool = (BudgetPool) o;
    return Objects.equals(this.id, budgetPool.id) &&
        Objects.equals(this.orgId, budgetPool.orgId) &&
        Objects.equals(this.compReviewId, budgetPool.compReviewId) &&
        Objects.equals(this.label, budgetPool.label) &&
        Objects.equals(this.participantsExpr, budgetPool.participantsExpr) &&
        Objects.equals(this.appliedField, budgetPool.appliedField) &&
        Objects.equals(this.sourceField, budgetPool.sourceField) &&
        Objects.equals(this.basisType, budgetPool.basisType) &&
        Objects.equals(this.fixedAmount, budgetPool.fixedAmount) &&
        Objects.equals(this.fixedValue, budgetPool.fixedValue) &&
        Objects.equals(this.basisFieldMatrix, budgetPool.basisFieldMatrix) &&
        Objects.equals(this.fixedBudgetMap, budgetPool.fixedBudgetMap) &&
        Objects.equals(this.basisExpr, budgetPool.basisExpr) &&
        Objects.equals(this.defaultCurrency, budgetPool.defaultCurrency) &&
        Objects.equals(this.createId, budgetPool.createId) &&
        Objects.equals(this.createAt, budgetPool.createAt) &&
        Objects.equals(this.updateId, budgetPool.updateId) &&
        Objects.equals(this.updateAt, budgetPool.updateAt) &&
        Objects.equals(this.deleteId, budgetPool.deleteId) &&
        Objects.equals(this.deleteAt, budgetPool.deleteAt)&&
        Objects.equals(this.additionalProperties, budgetPool.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgId, compReviewId, label, participantsExpr, appliedField, sourceField, basisType, fixedAmount, fixedValue, basisFieldMatrix, fixedBudgetMap, basisExpr, defaultCurrency, createId, createAt, updateId, updateAt, deleteId, deleteAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BudgetPool {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    compReviewId: ").append(toIndentedString(compReviewId)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    participantsExpr: ").append(toIndentedString(participantsExpr)).append("\n");
    sb.append("    appliedField: ").append(toIndentedString(appliedField)).append("\n");
    sb.append("    sourceField: ").append(toIndentedString(sourceField)).append("\n");
    sb.append("    basisType: ").append(toIndentedString(basisType)).append("\n");
    sb.append("    fixedAmount: ").append(toIndentedString(fixedAmount)).append("\n");
    sb.append("    fixedValue: ").append(toIndentedString(fixedValue)).append("\n");
    sb.append("    basisFieldMatrix: ").append(toIndentedString(basisFieldMatrix)).append("\n");
    sb.append("    fixedBudgetMap: ").append(toIndentedString(fixedBudgetMap)).append("\n");
    sb.append("    basisExpr: ").append(toIndentedString(basisExpr)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("compReviewId");
    openapiFields.add("label");
    openapiFields.add("participantsExpr");
    openapiFields.add("appliedField");
    openapiFields.add("sourceField");
    openapiFields.add("basisType");
    openapiFields.add("fixedAmount");
    openapiFields.add("fixedValue");
    openapiFields.add("basisFieldMatrix");
    openapiFields.add("fixedBudgetMap");
    openapiFields.add("basisExpr");
    openapiFields.add("defaultCurrency");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("compReviewId");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("appliedField");
    openapiRequiredFields.add("sourceField");
    openapiRequiredFields.add("basisType");
    openapiRequiredFields.add("createId");
    openapiRequiredFields.add("createAt");
    openapiRequiredFields.add("updateId");
    openapiRequiredFields.add("updateAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BudgetPool
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BudgetPool.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BudgetPool is not found in the empty JSON string", BudgetPool.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BudgetPool.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("compReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compReviewId").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("participantsExpr") != null && !jsonObj.get("participantsExpr").isJsonNull()) && !jsonObj.get("participantsExpr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantsExpr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantsExpr").toString()));
      }
      if (!jsonObj.get("appliedField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appliedField").toString()));
      }
      if (!jsonObj.get("sourceField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceField").toString()));
      }
      if (!jsonObj.get("basisType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basisType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basisType").toString()));
      }
      // validate the optional field `fixedAmount`
      if (jsonObj.get("fixedAmount") != null && !jsonObj.get("fixedAmount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("fixedAmount"));
      }
      // validate the optional field `basisFieldMatrix`
      if (jsonObj.get("basisFieldMatrix") != null && !jsonObj.get("basisFieldMatrix").isJsonNull()) {
        BasisFieldMatrix.validateJsonObject(jsonObj.getAsJsonObject("basisFieldMatrix"));
      }
      if ((jsonObj.get("basisExpr") != null && !jsonObj.get("basisExpr").isJsonNull()) && !jsonObj.get("basisExpr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basisExpr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basisExpr").toString()));
      }
      if ((jsonObj.get("defaultCurrency") != null && !jsonObj.get("defaultCurrency").isJsonNull()) && !jsonObj.get("defaultCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCurrency").toString()));
      }
      if (!jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if (!jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if (!jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if (!jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BudgetPool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BudgetPool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BudgetPool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BudgetPool.class));

       return (TypeAdapter<T>) new TypeAdapter<BudgetPool>() {
           @Override
           public void write(JsonWriter out, BudgetPool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BudgetPool read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BudgetPool instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BudgetPool given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BudgetPool
  * @throws IOException if the JSON string is invalid with respect to BudgetPool
  */
  public static BudgetPool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BudgetPool.class);
  }

 /**
  * Convert an instance of BudgetPool to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

