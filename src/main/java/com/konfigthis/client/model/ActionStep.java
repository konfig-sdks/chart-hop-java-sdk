/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ActionStep
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ActionStep {
  public static final String SERIALIZED_NAME_STEP_ID = "stepId";
  @SerializedName(SERIALIZED_NAME_STEP_ID)
  private String stepId;

  /**
   * The type of action to run
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FORM("FORM"),
    
    MESSAGE("MESSAGE"),
    
    HTTP("HTTP"),
    
    TASK("TASK");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_ASSIGNEE = "assignee";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE)
  private String assignee;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EMAIL_SUBJECT = "emailSubject";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBJECT)
  private String emailSubject;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private Boolean sensitive;

  public static final String SERIALIZED_NAME_HTTP_URL = "httpUrl";
  @SerializedName(SERIALIZED_NAME_HTTP_URL)
  private URI httpUrl;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_HTTP_HEADERS = "httpHeaders";
  @SerializedName(SERIALIZED_NAME_HTTP_HEADERS)
  private Map<String, String> httpHeaders = null;

  public static final String SERIALIZED_NAME_HTTP_CONTENT = "httpContent";
  @SerializedName(SERIALIZED_NAME_HTTP_CONTENT)
  private Object httpContent;

  public ActionStep() {
  }

  public ActionStep stepId(String stepId) {
    
    
    
    
    this.stepId = stepId;
    return this;
  }

   /**
   * unique id for action step
   * @return stepId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "unique id for action step")

  public String getStepId() {
    return stepId;
  }


  public void setStepId(String stepId) {
    
    
    
    this.stepId = stepId;
  }


  public ActionStep type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * The type of action to run
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of action to run")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public ActionStep formId(String formId) {
    
    
    
    
    this.formId = formId;
    return this;
  }

   /**
   * If the action is FORM, the id of the form to fill out
   * @return formId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is FORM, the id of the form to fill out")

  public String getFormId() {
    return formId;
  }


  public void setFormId(String formId) {
    
    
    
    this.formId = formId;
  }


  public ActionStep target(String target) {
    
    
    
    
    this.target = target;
    return this;
  }

   /**
   * If the action is MESSAGE, the target to send the message to. If the action is FORM/TASK, the person who should have the form filled out on/complete the task
   * @return target
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is MESSAGE, the target to send the message to. If the action is FORM/TASK, the person who should have the form filled out on/complete the task")

  public String getTarget() {
    return target;
  }


  public void setTarget(String target) {
    
    
    
    this.target = target;
  }


  public ActionStep assignee(String assignee) {
    
    
    
    
    this.assignee = assignee;
    return this;
  }

   /**
   * If the action is FORM/TASK, the user who should fill out the form/complete the task (default is, same as target)
   * @return assignee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is FORM/TASK, the user who should fill out the form/complete the task (default is, same as target)")

  public String getAssignee() {
    return assignee;
  }


  public void setAssignee(String assignee) {
    
    
    
    this.assignee = assignee;
  }


  public ActionStep message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * The message that will be sent -- supports CQLT templates
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The message that will be sent -- supports CQLT templates")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public ActionStep emailSubject(String emailSubject) {
    
    
    
    
    this.emailSubject = emailSubject;
    return this;
  }

   /**
   * The email subject line that will be used -- supports CQLT templates. If not provided, will use &#39;Notification&#39;
   * @return emailSubject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The email subject line that will be used -- supports CQLT templates. If not provided, will use 'Notification'")

  public String getEmailSubject() {
    return emailSubject;
  }


  public void setEmailSubject(String emailSubject) {
    
    
    
    this.emailSubject = emailSubject;
  }


  public ActionStep sensitive(Boolean sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * whether to run with access to sensitive events or not - if this is left blank, will default to the sensitive setting of the Action
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether to run with access to sensitive events or not - if this is left blank, will default to the sensitive setting of the Action")

  public Boolean getSensitive() {
    return sensitive;
  }


  public void setSensitive(Boolean sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public ActionStep httpUrl(URI httpUrl) {
    
    
    
    
    this.httpUrl = httpUrl;
    return this;
  }

   /**
   * If the action is HTTP, the url that will receive the HTTP request
   * @return httpUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is HTTP, the url that will receive the HTTP request")

  public URI getHttpUrl() {
    return httpUrl;
  }


  public void setHttpUrl(URI httpUrl) {
    
    
    
    this.httpUrl = httpUrl;
  }


  public ActionStep httpMethod(String httpMethod) {
    
    
    
    
    this.httpMethod = httpMethod;
    return this;
  }

   /**
   * If the action is HTTP, the method used by the HTTP request (defaults to POST)
   * @return httpMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is HTTP, the method used by the HTTP request (defaults to POST)")

  public String getHttpMethod() {
    return httpMethod;
  }


  public void setHttpMethod(String httpMethod) {
    
    
    
    this.httpMethod = httpMethod;
  }


  public ActionStep httpHeaders(Map<String, String> httpHeaders) {
    
    
    
    
    this.httpHeaders = httpHeaders;
    return this;
  }

  public ActionStep putHttpHeadersItem(String key, String httpHeadersItem) {
    if (this.httpHeaders == null) {
      this.httpHeaders = new HashMap<>();
    }
    this.httpHeaders.put(key, httpHeadersItem);
    return this;
  }

   /**
   * If the action is HTTP, the headers to add to the HTTP request
   * @return httpHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is HTTP, the headers to add to the HTTP request")

  public Map<String, String> getHttpHeaders() {
    return httpHeaders;
  }


  public void setHttpHeaders(Map<String, String> httpHeaders) {
    
    
    
    this.httpHeaders = httpHeaders;
  }


  public ActionStep httpContent(Object httpContent) {
    
    
    
    
    this.httpContent = httpContent;
    return this;
  }

   /**
   * If the action is HTTP, the payload contained in the HTTP request
   * @return httpContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If the action is HTTP, the payload contained in the HTTP request")

  public Object getHttpContent() {
    return httpContent;
  }


  public void setHttpContent(Object httpContent) {
    
    
    
    this.httpContent = httpContent;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ActionStep instance itself
   */
  public ActionStep putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionStep actionStep = (ActionStep) o;
    return Objects.equals(this.stepId, actionStep.stepId) &&
        Objects.equals(this.type, actionStep.type) &&
        Objects.equals(this.formId, actionStep.formId) &&
        Objects.equals(this.target, actionStep.target) &&
        Objects.equals(this.assignee, actionStep.assignee) &&
        Objects.equals(this.message, actionStep.message) &&
        Objects.equals(this.emailSubject, actionStep.emailSubject) &&
        Objects.equals(this.sensitive, actionStep.sensitive) &&
        Objects.equals(this.httpUrl, actionStep.httpUrl) &&
        Objects.equals(this.httpMethod, actionStep.httpMethod) &&
        Objects.equals(this.httpHeaders, actionStep.httpHeaders) &&
        Objects.equals(this.httpContent, actionStep.httpContent)&&
        Objects.equals(this.additionalProperties, actionStep.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stepId, type, formId, target, assignee, message, emailSubject, sensitive, httpUrl, httpMethod, httpHeaders, httpContent, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionStep {\n");
    sb.append("    stepId: ").append(toIndentedString(stepId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    httpUrl: ").append(toIndentedString(httpUrl)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    httpHeaders: ").append(toIndentedString(httpHeaders)).append("\n");
    sb.append("    httpContent: ").append(toIndentedString(httpContent)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stepId");
    openapiFields.add("type");
    openapiFields.add("formId");
    openapiFields.add("target");
    openapiFields.add("assignee");
    openapiFields.add("message");
    openapiFields.add("emailSubject");
    openapiFields.add("sensitive");
    openapiFields.add("httpUrl");
    openapiFields.add("httpMethod");
    openapiFields.add("httpHeaders");
    openapiFields.add("httpContent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ActionStep
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ActionStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionStep is not found in the empty JSON string", ActionStep.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActionStep.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("stepId") != null && !jsonObj.get("stepId").isJsonNull()) && !jsonObj.get("stepId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stepId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stepId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("formId") != null && !jsonObj.get("formId").isJsonNull()) && !jsonObj.get("formId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formId").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("assignee") != null && !jsonObj.get("assignee").isJsonNull()) && !jsonObj.get("assignee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignee").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("emailSubject") != null && !jsonObj.get("emailSubject").isJsonNull()) && !jsonObj.get("emailSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailSubject").toString()));
      }
      if ((jsonObj.get("httpUrl") != null && !jsonObj.get("httpUrl").isJsonNull()) && !jsonObj.get("httpUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpUrl").toString()));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionStep.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionStep>() {
           @Override
           public void write(JsonWriter out, ActionStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionStep read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ActionStep instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ActionStep given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ActionStep
  * @throws IOException if the JSON string is invalid with respect to ActionStep
  */
  public static ActionStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionStep.class);
  }

 /**
  * Convert an instance of ActionStep to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

