/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ShareAccess;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateAssessment
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateAssessment {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  /**
   * type of assessment
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    REVIEW("REVIEW"),
    
    COMP_REVIEW("COMP_REVIEW"),
    
    SURVEY("SURVEY");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Object fields;

  public static final String SERIALIZED_NAME_SHARE_ACCESS = "shareAccess";
  @SerializedName(SERIALIZED_NAME_SHARE_ACCESS)
  private List<ShareAccess> shareAccess = null;

  /**
   * view sensitivity of this assessment
   */
  @JsonAdapter(SensitiveEnum.Adapter.class)
 public enum SensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    SensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SensitiveEnum fromValue(String value) {
      for (SensitiveEnum b : SensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private SensitiveEnum sensitive;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  /**
   * status of this assessment - DRAFT, ACTIVE, DONE
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    DONE("DONE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_DONE_AT = "doneAt";
  @SerializedName(SERIALIZED_NAME_DONE_AT)
  private String doneAt;

  public static final String SERIALIZED_NAME_TASK_COUNT = "taskCount";
  @SerializedName(SERIALIZED_NAME_TASK_COUNT)
  private Integer taskCount;

  public static final String SERIALIZED_NAME_TASK_DONE_COUNT = "taskDoneCount";
  @SerializedName(SERIALIZED_NAME_TASK_DONE_COUNT)
  private Integer taskDoneCount;

  public static final String SERIALIZED_NAME_PEOPLE_INCLUDED_COUNT = "peopleIncludedCount";
  @SerializedName(SERIALIZED_NAME_PEOPLE_INCLUDED_COUNT)
  private Integer peopleIncludedCount;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public CreateAssessment() {
  }

  public CreateAssessment label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human-readable label of assessment
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Engineering Budget Q2 2019", required = true, value = "human-readable label of assessment")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public CreateAssessment slug(String slug) {
    
    
    
    
    this.slug = slug;
    return this;
  }

   /**
   * unique slug of assessment
   * @return slug
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "engineering-budget-q2-2019", value = "unique slug of assessment")

  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    
    
    
    this.slug = slug;
  }


  public CreateAssessment type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of assessment
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of assessment")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CreateAssessment fields(Object fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

   /**
   * assessment fields (description)
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "assessment fields (description)")

  public Object getFields() {
    return fields;
  }


  public void setFields(Object fields) {
    
    
    
    this.fields = fields;
  }


  public CreateAssessment shareAccess(List<ShareAccess> shareAccess) {
    
    
    
    
    this.shareAccess = shareAccess;
    return this;
  }

  public CreateAssessment addShareAccessItem(ShareAccess shareAccessItem) {
    if (this.shareAccess == null) {
      this.shareAccess = new ArrayList<>();
    }
    this.shareAccess.add(shareAccessItem);
    return this;
  }

   /**
   * users who have been granted access to this assessment
   * @return shareAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "users who have been granted access to this assessment")

  public List<ShareAccess> getShareAccess() {
    return shareAccess;
  }


  public void setShareAccess(List<ShareAccess> shareAccess) {
    
    
    
    this.shareAccess = shareAccess;
  }


  public CreateAssessment sensitive(SensitiveEnum sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * view sensitivity of this assessment
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "view sensitivity of this assessment")

  public SensitiveEnum getSensitive() {
    return sensitive;
  }


  public void setSensitive(SensitiveEnum sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public CreateAssessment color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * color of assessment
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "color of assessment")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public CreateAssessment startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date this assessment begins. In the context of REVIEW goals, the date the review cycle begins.
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this assessment begins. In the context of REVIEW goals, the date the review cycle begins.")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public CreateAssessment endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Date this assessment ends, or is completed. In the context of REVIEW assessment, the date the review cycle ends.
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date this assessment ends, or is completed. In the context of REVIEW assessment, the date the review cycle ends.")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public CreateAssessment status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of this assessment - DRAFT, ACTIVE, DONE
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "status of this assessment - DRAFT, ACTIVE, DONE")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CreateAssessment doneAt(String doneAt) {
    
    
    
    
    this.doneAt = doneAt;
    return this;
  }

   /**
   * timestamp when the status of this assessment was set to done
   * @return doneAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "timestamp when the status of this assessment was set to done")

  public String getDoneAt() {
    return doneAt;
  }


  public void setDoneAt(String doneAt) {
    
    
    
    this.doneAt = doneAt;
  }


  public CreateAssessment taskCount(Integer taskCount) {
    
    
    
    
    this.taskCount = taskCount;
    return this;
  }

   /**
   * number of tasks associated with this assessment
   * @return taskCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "number of tasks associated with this assessment")

  public Integer getTaskCount() {
    return taskCount;
  }


  public void setTaskCount(Integer taskCount) {
    
    
    
    this.taskCount = taskCount;
  }


  public CreateAssessment taskDoneCount(Integer taskDoneCount) {
    
    
    
    
    this.taskDoneCount = taskDoneCount;
    return this;
  }

   /**
   * number of tasks associated with this assessment that are done
   * @return taskDoneCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "number of tasks associated with this assessment that are done")

  public Integer getTaskDoneCount() {
    return taskDoneCount;
  }


  public void setTaskDoneCount(Integer taskDoneCount) {
    
    
    
    this.taskDoneCount = taskDoneCount;
  }


  public CreateAssessment peopleIncludedCount(Integer peopleIncludedCount) {
    
    
    
    
    this.peopleIncludedCount = peopleIncludedCount;
    return this;
  }

   /**
   * number of people included in this assessment
   * @return peopleIncludedCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "number of people included in this assessment")

  public Integer getPeopleIncludedCount() {
    return peopleIncludedCount;
  }


  public void setPeopleIncludedCount(Integer peopleIncludedCount) {
    
    
    
    this.peopleIncludedCount = peopleIncludedCount;
  }


  public CreateAssessment query(String query) {
    
    
    
    
    this.query = query;
    return this;
  }

   /**
   * Query for which people/jobs can be included in the review.
   * @return query
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Query for which people/jobs can be included in the review.")

  public String getQuery() {
    return query;
  }


  public void setQuery(String query) {
    
    
    
    this.query = query;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateAssessment instance itself
   */
  public CreateAssessment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssessment createAssessment = (CreateAssessment) o;
    return Objects.equals(this.label, createAssessment.label) &&
        Objects.equals(this.slug, createAssessment.slug) &&
        Objects.equals(this.type, createAssessment.type) &&
        Objects.equals(this.fields, createAssessment.fields) &&
        Objects.equals(this.shareAccess, createAssessment.shareAccess) &&
        Objects.equals(this.sensitive, createAssessment.sensitive) &&
        Objects.equals(this.color, createAssessment.color) &&
        Objects.equals(this.startDate, createAssessment.startDate) &&
        Objects.equals(this.endDate, createAssessment.endDate) &&
        Objects.equals(this.status, createAssessment.status) &&
        Objects.equals(this.doneAt, createAssessment.doneAt) &&
        Objects.equals(this.taskCount, createAssessment.taskCount) &&
        Objects.equals(this.taskDoneCount, createAssessment.taskDoneCount) &&
        Objects.equals(this.peopleIncludedCount, createAssessment.peopleIncludedCount) &&
        Objects.equals(this.query, createAssessment.query)&&
        Objects.equals(this.additionalProperties, createAssessment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, slug, type, fields, shareAccess, sensitive, color, startDate, endDate, status, doneAt, taskCount, taskDoneCount, peopleIncludedCount, query, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssessment {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    shareAccess: ").append(toIndentedString(shareAccess)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    doneAt: ").append(toIndentedString(doneAt)).append("\n");
    sb.append("    taskCount: ").append(toIndentedString(taskCount)).append("\n");
    sb.append("    taskDoneCount: ").append(toIndentedString(taskDoneCount)).append("\n");
    sb.append("    peopleIncludedCount: ").append(toIndentedString(peopleIncludedCount)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("slug");
    openapiFields.add("type");
    openapiFields.add("fields");
    openapiFields.add("shareAccess");
    openapiFields.add("sensitive");
    openapiFields.add("color");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("status");
    openapiFields.add("doneAt");
    openapiFields.add("taskCount");
    openapiFields.add("taskDoneCount");
    openapiFields.add("peopleIncludedCount");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateAssessment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateAssessment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssessment is not found in the empty JSON string", CreateAssessment.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAssessment.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("shareAccess") != null && !jsonObj.get("shareAccess").isJsonNull()) {
        JsonArray jsonArrayshareAccess = jsonObj.getAsJsonArray("shareAccess");
        if (jsonArrayshareAccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareAccess").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareAccess` to be an array in the JSON string but got `%s`", jsonObj.get("shareAccess").toString()));
          }

          // validate the optional field `shareAccess` (array)
          for (int i = 0; i < jsonArrayshareAccess.size(); i++) {
            ShareAccess.validateJsonObject(jsonArrayshareAccess.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("doneAt") != null && !jsonObj.get("doneAt").isJsonNull()) && !jsonObj.get("doneAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doneAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doneAt").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssessment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssessment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssessment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssessment.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssessment>() {
           @Override
           public void write(JsonWriter out, CreateAssessment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssessment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateAssessment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateAssessment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateAssessment
  * @throws IOException if the JSON string is invalid with respect to CreateAssessment
  */
  public static CreateAssessment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssessment.class);
  }

 /**
  * Convert an instance of CreateAssessment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

