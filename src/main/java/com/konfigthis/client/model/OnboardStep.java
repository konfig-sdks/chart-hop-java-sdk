/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OnboardStep
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OnboardStep {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DOCS_URL = "docsUrl";
  @SerializedName(SERIALIZED_NAME_DOCS_URL)
  private String docsUrl;

  public static final String SERIALIZED_NAME_ACTION_URL = "actionUrl";
  @SerializedName(SERIALIZED_NAME_ACTION_URL)
  private String actionUrl;

  public static final String SERIALIZED_NAME_ACTION_TEXT = "actionText";
  @SerializedName(SERIALIZED_NAME_ACTION_TEXT)
  private String actionText;

  public static final String SERIALIZED_NAME_PICTURE_FILE_NAME = "pictureFileName";
  @SerializedName(SERIALIZED_NAME_PICTURE_FILE_NAME)
  private String pictureFileName;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Integer sort;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public OnboardStep() {
  }

  public OnboardStep description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * customer facing description
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sync employee stock grants from your cap table", required = true, value = "customer facing description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public OnboardStep id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public OnboardStep name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * unique string that briefly describes the onboard step
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sync-grant", required = true, value = "unique string that briefly describes the onboard step")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public OnboardStep label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * customer facing identifier
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sync Stock Grants", required = true, value = "customer facing identifier")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public OnboardStep docsUrl(String docsUrl) {
    
    
    
    
    this.docsUrl = docsUrl;
    return this;
  }

   /**
   * url for charthop docs that describe how to accomplish this step
   * @return docsUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://docs.charthop.com/import-stock-grants", required = true, value = "url for charthop docs that describe how to accomplish this step")

  public String getDocsUrl() {
    return docsUrl;
  }


  public void setDocsUrl(String docsUrl) {
    
    
    
    this.docsUrl = docsUrl;
  }


  public OnboardStep actionUrl(String actionUrl) {
    
    
    
    
    this.actionUrl = actionUrl;
    return this;
  }

   /**
   * url for charthop page that where this step can be completed
   * @return actionUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/settings/apps/slack-import", required = true, value = "url for charthop page that where this step can be completed")

  public String getActionUrl() {
    return actionUrl;
  }


  public void setActionUrl(String actionUrl) {
    
    
    
    this.actionUrl = actionUrl;
  }


  public OnboardStep actionText(String actionText) {
    
    
    
    
    this.actionText = actionText;
    return this;
  }

   /**
   * text that shows up on the &#39;action button&#39; of the card for this step
   * @return actionText
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Sync Grants", required = true, value = "text that shows up on the 'action button' of the card for this step")

  public String getActionText() {
    return actionText;
  }


  public void setActionText(String actionText) {
    
    
    
    this.actionText = actionText;
  }


  public OnboardStep pictureFileName(String pictureFileName) {
    
    
    
    
    this.pictureFileName = pictureFileName;
    return this;
  }

   /**
   * file name of the picture for the step (does not include path)
   * @return pictureFileName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "hiring-plan.svg", required = true, value = "file name of the picture for the step (does not include path)")

  public String getPictureFileName() {
    return pictureFileName;
  }


  public void setPictureFileName(String pictureFileName) {
    
    
    
    this.pictureFileName = pictureFileName;
  }


  public OnboardStep sort(Integer sort) {
    
    
    
    
    this.sort = sort;
    return this;
  }

   /**
   * numerical position for which the step appears in relationship to other onboard steps
   * @return sort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "numerical position for which the step appears in relationship to other onboard steps")

  public Integer getSort() {
    return sort;
  }


  public void setSort(Integer sort) {
    
    
    
    this.sort = sort;
  }


  public OnboardStep eventType(String eventType) {
    
    
    
    
    this.eventType = eventType;
    return this;
  }

   /**
   * event type (in the format of &lt;COLLECTION NAME&gt;.&lt;CHANGE TYPE&gt;) that triggers the completion of this onboard step
   * @return eventType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "group.create", required = true, value = "event type (in the format of <COLLECTION NAME>.<CHANGE TYPE>) that triggers the completion of this onboard step")

  public String getEventType() {
    return eventType;
  }


  public void setEventType(String eventType) {
    
    
    
    this.eventType = eventType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OnboardStep instance itself
   */
  public OnboardStep putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnboardStep onboardStep = (OnboardStep) o;
    return Objects.equals(this.description, onboardStep.description) &&
        Objects.equals(this.id, onboardStep.id) &&
        Objects.equals(this.name, onboardStep.name) &&
        Objects.equals(this.label, onboardStep.label) &&
        Objects.equals(this.docsUrl, onboardStep.docsUrl) &&
        Objects.equals(this.actionUrl, onboardStep.actionUrl) &&
        Objects.equals(this.actionText, onboardStep.actionText) &&
        Objects.equals(this.pictureFileName, onboardStep.pictureFileName) &&
        Objects.equals(this.sort, onboardStep.sort) &&
        Objects.equals(this.eventType, onboardStep.eventType)&&
        Objects.equals(this.additionalProperties, onboardStep.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, label, docsUrl, actionUrl, actionText, pictureFileName, sort, eventType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnboardStep {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    docsUrl: ").append(toIndentedString(docsUrl)).append("\n");
    sb.append("    actionUrl: ").append(toIndentedString(actionUrl)).append("\n");
    sb.append("    actionText: ").append(toIndentedString(actionText)).append("\n");
    sb.append("    pictureFileName: ").append(toIndentedString(pictureFileName)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("docsUrl");
    openapiFields.add("actionUrl");
    openapiFields.add("actionText");
    openapiFields.add("pictureFileName");
    openapiFields.add("sort");
    openapiFields.add("eventType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("docsUrl");
    openapiRequiredFields.add("actionUrl");
    openapiRequiredFields.add("actionText");
    openapiRequiredFields.add("pictureFileName");
    openapiRequiredFields.add("sort");
    openapiRequiredFields.add("eventType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OnboardStep
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OnboardStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnboardStep is not found in the empty JSON string", OnboardStep.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnboardStep.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("docsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `docsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("docsUrl").toString()));
      }
      if (!jsonObj.get("actionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionUrl").toString()));
      }
      if (!jsonObj.get("actionText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionText").toString()));
      }
      if (!jsonObj.get("pictureFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pictureFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pictureFileName").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnboardStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnboardStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnboardStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnboardStep.class));

       return (TypeAdapter<T>) new TypeAdapter<OnboardStep>() {
           @Override
           public void write(JsonWriter out, OnboardStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OnboardStep read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OnboardStep instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnboardStep given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnboardStep
  * @throws IOException if the JSON string is invalid with respect to OnboardStep
  */
  public static OnboardStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnboardStep.class);
  }

 /**
  * Convert an instance of OnboardStep to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

