/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.JobTierField;
import com.konfigthis.client.model.Money;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UpdateCompBand
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UpdateCompBand {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_BASE_COMP_MAX = "baseCompMax";
  @SerializedName(SERIALIZED_NAME_BASE_COMP_MAX)
  private Money baseCompMax;

  public static final String SERIALIZED_NAME_BASE_COMP_MID = "baseCompMid";
  @SerializedName(SERIALIZED_NAME_BASE_COMP_MID)
  private Money baseCompMid;

  public static final String SERIALIZED_NAME_BASE_COMP_MIN = "baseCompMin";
  @SerializedName(SERIALIZED_NAME_BASE_COMP_MIN)
  private Money baseCompMin;

  public static final String SERIALIZED_NAME_BASE_SPREAD = "baseSpread";
  @SerializedName(SERIALIZED_NAME_BASE_SPREAD)
  private Double baseSpread;

  public static final String SERIALIZED_NAME_BASE_INTERVAL = "baseInterval";
  @SerializedName(SERIALIZED_NAME_BASE_INTERVAL)
  private EnumValue baseInterval;

  public static final String SERIALIZED_NAME_BASE_TARGET_PAY = "baseTargetPay";
  @SerializedName(SERIALIZED_NAME_BASE_TARGET_PAY)
  private Money baseTargetPay;

  public static final String SERIALIZED_NAME_BASE_TARGET_PAY_PERCENTILE = "baseTargetPayPercentile";
  @SerializedName(SERIALIZED_NAME_BASE_TARGET_PAY_PERCENTILE)
  private Double baseTargetPayPercentile;

  public static final String SERIALIZED_NAME_EQUITY_TARGET_SHARES = "equityTargetShares";
  @SerializedName(SERIALIZED_NAME_EQUITY_TARGET_SHARES)
  private Double equityTargetShares;

  public static final String SERIALIZED_NAME_EQUITY_TARGET_PERCENT_OF_BASE = "equityTargetPercentOfBase";
  @SerializedName(SERIALIZED_NAME_EQUITY_TARGET_PERCENT_OF_BASE)
  private Double equityTargetPercentOfBase;

  public static final String SERIALIZED_NAME_EQUITY_TARGET_VALUE = "equityTargetValue";
  @SerializedName(SERIALIZED_NAME_EQUITY_TARGET_VALUE)
  private Double equityTargetValue;

  public static final String SERIALIZED_NAME_VARIABLE_VALUE = "variableValue";
  @SerializedName(SERIALIZED_NAME_VARIABLE_VALUE)
  private Money variableValue;

  public static final String SERIALIZED_NAME_VARIABLE_PERCENT_OF_BASE = "variablePercentOfBase";
  @SerializedName(SERIALIZED_NAME_VARIABLE_PERCENT_OF_BASE)
  private Double variablePercentOfBase;

  public static final String SERIALIZED_NAME_JOB_TIER_ONE_FIELD = "jobTierOneField";
  @SerializedName(SERIALIZED_NAME_JOB_TIER_ONE_FIELD)
  private JobTierField jobTierOneField;

  public static final String SERIALIZED_NAME_JOB_TIER_TWO_FIELD = "jobTierTwoField";
  @SerializedName(SERIALIZED_NAME_JOB_TIER_TWO_FIELD)
  private JobTierField jobTierTwoField;

  public static final String SERIALIZED_NAME_JOB_TIER_THREE_FIELD = "jobTierThreeField";
  @SerializedName(SERIALIZED_NAME_JOB_TIER_THREE_FIELD)
  private JobTierField jobTierThreeField;

  public static final String SERIALIZED_NAME_JOB_LEVEL = "jobLevel";
  @SerializedName(SERIALIZED_NAME_JOB_LEVEL)
  private String jobLevel;

  public UpdateCompBand() {
  }

  public UpdateCompBand label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human-readable name of content
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "L15", value = "human-readable name of content")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public UpdateCompBand color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * hex color associated with the band level
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "#ffee4a", value = "hex color associated with the band level")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public UpdateCompBand baseCompMax(Money baseCompMax) {
    
    
    
    
    this.baseCompMax = baseCompMax;
    return this;
  }

   /**
   * Get baseCompMax
   * @return baseCompMax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getBaseCompMax() {
    return baseCompMax;
  }


  public void setBaseCompMax(Money baseCompMax) {
    
    
    
    this.baseCompMax = baseCompMax;
  }


  public UpdateCompBand baseCompMid(Money baseCompMid) {
    
    
    
    
    this.baseCompMid = baseCompMid;
    return this;
  }

   /**
   * Get baseCompMid
   * @return baseCompMid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getBaseCompMid() {
    return baseCompMid;
  }


  public void setBaseCompMid(Money baseCompMid) {
    
    
    
    this.baseCompMid = baseCompMid;
  }


  public UpdateCompBand baseCompMin(Money baseCompMin) {
    
    
    
    
    this.baseCompMin = baseCompMin;
    return this;
  }

   /**
   * Get baseCompMin
   * @return baseCompMin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getBaseCompMin() {
    return baseCompMin;
  }


  public void setBaseCompMin(Money baseCompMin) {
    
    
    
    this.baseCompMin = baseCompMin;
  }


  public UpdateCompBand baseSpread(Double baseSpread) {
    
    
    
    
    this.baseSpread = baseSpread;
    return this;
  }

  public UpdateCompBand baseSpread(Integer baseSpread) {
    
    
    
    
    this.baseSpread = baseSpread.doubleValue();
    return this;
  }

   /**
   * spread percent used to calculate base comp from the midpoint
   * @return baseSpread
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "spread percent used to calculate base comp from the midpoint")

  public Double getBaseSpread() {
    return baseSpread;
  }


  public void setBaseSpread(Double baseSpread) {
    
    
    
    this.baseSpread = baseSpread;
  }


  public UpdateCompBand baseInterval(EnumValue baseInterval) {
    
    
    
    
    this.baseInterval = baseInterval;
    return this;
  }

   /**
   * Get baseInterval
   * @return baseInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnumValue getBaseInterval() {
    return baseInterval;
  }


  public void setBaseInterval(EnumValue baseInterval) {
    
    
    
    this.baseInterval = baseInterval;
  }


  public UpdateCompBand baseTargetPay(Money baseTargetPay) {
    
    
    
    
    this.baseTargetPay = baseTargetPay;
    return this;
  }

   /**
   * Get baseTargetPay
   * @return baseTargetPay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getBaseTargetPay() {
    return baseTargetPay;
  }


  public void setBaseTargetPay(Money baseTargetPay) {
    
    
    
    this.baseTargetPay = baseTargetPay;
  }


  public UpdateCompBand baseTargetPayPercentile(Double baseTargetPayPercentile) {
    
    
    
    
    this.baseTargetPayPercentile = baseTargetPayPercentile;
    return this;
  }

  public UpdateCompBand baseTargetPayPercentile(Integer baseTargetPayPercentile) {
    
    
    
    
    this.baseTargetPayPercentile = baseTargetPayPercentile.doubleValue();
    return this;
  }

   /**
   * base target pay associated with open jobs at this band level, as a percentile
   * @return baseTargetPayPercentile
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "base target pay associated with open jobs at this band level, as a percentile")

  public Double getBaseTargetPayPercentile() {
    return baseTargetPayPercentile;
  }


  public void setBaseTargetPayPercentile(Double baseTargetPayPercentile) {
    
    
    
    this.baseTargetPayPercentile = baseTargetPayPercentile;
  }


  public UpdateCompBand equityTargetShares(Double equityTargetShares) {
    
    
    
    
    this.equityTargetShares = equityTargetShares;
    return this;
  }

  public UpdateCompBand equityTargetShares(Integer equityTargetShares) {
    
    
    
    
    this.equityTargetShares = equityTargetShares.doubleValue();
    return this;
  }

   /**
   * target equity for the band, in shares
   * @return equityTargetShares
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "target equity for the band, in shares")

  public Double getEquityTargetShares() {
    return equityTargetShares;
  }


  public void setEquityTargetShares(Double equityTargetShares) {
    
    
    
    this.equityTargetShares = equityTargetShares;
  }


  public UpdateCompBand equityTargetPercentOfBase(Double equityTargetPercentOfBase) {
    
    
    
    
    this.equityTargetPercentOfBase = equityTargetPercentOfBase;
    return this;
  }

  public UpdateCompBand equityTargetPercentOfBase(Integer equityTargetPercentOfBase) {
    
    
    
    
    this.equityTargetPercentOfBase = equityTargetPercentOfBase.doubleValue();
    return this;
  }

   /**
   * target equity for the band, as a percentage of base
   * @return equityTargetPercentOfBase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "target equity for the band, as a percentage of base")

  public Double getEquityTargetPercentOfBase() {
    return equityTargetPercentOfBase;
  }


  public void setEquityTargetPercentOfBase(Double equityTargetPercentOfBase) {
    
    
    
    this.equityTargetPercentOfBase = equityTargetPercentOfBase;
  }


  public UpdateCompBand equityTargetValue(Double equityTargetValue) {
    
    
    
    
    this.equityTargetValue = equityTargetValue;
    return this;
  }

  public UpdateCompBand equityTargetValue(Integer equityTargetValue) {
    
    
    
    
    this.equityTargetValue = equityTargetValue.doubleValue();
    return this;
  }

   /**
   * target equity for the band, as a monetary value, in the same currency as the base
   * @return equityTargetValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "target equity for the band, as a monetary value, in the same currency as the base")

  public Double getEquityTargetValue() {
    return equityTargetValue;
  }


  public void setEquityTargetValue(Double equityTargetValue) {
    
    
    
    this.equityTargetValue = equityTargetValue;
  }


  public UpdateCompBand variableValue(Money variableValue) {
    
    
    
    
    this.variableValue = variableValue;
    return this;
  }

   /**
   * Get variableValue
   * @return variableValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getVariableValue() {
    return variableValue;
  }


  public void setVariableValue(Money variableValue) {
    
    
    
    this.variableValue = variableValue;
  }


  public UpdateCompBand variablePercentOfBase(Double variablePercentOfBase) {
    
    
    
    
    this.variablePercentOfBase = variablePercentOfBase;
    return this;
  }

  public UpdateCompBand variablePercentOfBase(Integer variablePercentOfBase) {
    
    
    
    
    this.variablePercentOfBase = variablePercentOfBase.doubleValue();
    return this;
  }

   /**
   * variable compensation for the band, specified as a percentage of base
   * @return variablePercentOfBase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "variable compensation for the band, specified as a percentage of base")

  public Double getVariablePercentOfBase() {
    return variablePercentOfBase;
  }


  public void setVariablePercentOfBase(Double variablePercentOfBase) {
    
    
    
    this.variablePercentOfBase = variablePercentOfBase;
  }


  public UpdateCompBand jobTierOneField(JobTierField jobTierOneField) {
    
    
    
    
    this.jobTierOneField = jobTierOneField;
    return this;
  }

   /**
   * Get jobTierOneField
   * @return jobTierOneField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTierField getJobTierOneField() {
    return jobTierOneField;
  }


  public void setJobTierOneField(JobTierField jobTierOneField) {
    
    
    
    this.jobTierOneField = jobTierOneField;
  }


  public UpdateCompBand jobTierTwoField(JobTierField jobTierTwoField) {
    
    
    
    
    this.jobTierTwoField = jobTierTwoField;
    return this;
  }

   /**
   * Get jobTierTwoField
   * @return jobTierTwoField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTierField getJobTierTwoField() {
    return jobTierTwoField;
  }


  public void setJobTierTwoField(JobTierField jobTierTwoField) {
    
    
    
    this.jobTierTwoField = jobTierTwoField;
  }


  public UpdateCompBand jobTierThreeField(JobTierField jobTierThreeField) {
    
    
    
    
    this.jobTierThreeField = jobTierThreeField;
    return this;
  }

   /**
   * Get jobTierThreeField
   * @return jobTierThreeField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobTierField getJobTierThreeField() {
    return jobTierThreeField;
  }


  public void setJobTierThreeField(JobTierField jobTierThreeField) {
    
    
    
    this.jobTierThreeField = jobTierThreeField;
  }


  public UpdateCompBand jobLevel(String jobLevel) {
    
    
    
    
    this.jobLevel = jobLevel;
    return this;
  }

   /**
   * job level associated with the comp band
   * @return jobLevel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "job level associated with the comp band")

  public String getJobLevel() {
    return jobLevel;
  }


  public void setJobLevel(String jobLevel) {
    
    
    
    this.jobLevel = jobLevel;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UpdateCompBand instance itself
   */
  public UpdateCompBand putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCompBand updateCompBand = (UpdateCompBand) o;
    return Objects.equals(this.label, updateCompBand.label) &&
        Objects.equals(this.color, updateCompBand.color) &&
        Objects.equals(this.baseCompMax, updateCompBand.baseCompMax) &&
        Objects.equals(this.baseCompMid, updateCompBand.baseCompMid) &&
        Objects.equals(this.baseCompMin, updateCompBand.baseCompMin) &&
        Objects.equals(this.baseSpread, updateCompBand.baseSpread) &&
        Objects.equals(this.baseInterval, updateCompBand.baseInterval) &&
        Objects.equals(this.baseTargetPay, updateCompBand.baseTargetPay) &&
        Objects.equals(this.baseTargetPayPercentile, updateCompBand.baseTargetPayPercentile) &&
        Objects.equals(this.equityTargetShares, updateCompBand.equityTargetShares) &&
        Objects.equals(this.equityTargetPercentOfBase, updateCompBand.equityTargetPercentOfBase) &&
        Objects.equals(this.equityTargetValue, updateCompBand.equityTargetValue) &&
        Objects.equals(this.variableValue, updateCompBand.variableValue) &&
        Objects.equals(this.variablePercentOfBase, updateCompBand.variablePercentOfBase) &&
        Objects.equals(this.jobTierOneField, updateCompBand.jobTierOneField) &&
        Objects.equals(this.jobTierTwoField, updateCompBand.jobTierTwoField) &&
        Objects.equals(this.jobTierThreeField, updateCompBand.jobTierThreeField) &&
        Objects.equals(this.jobLevel, updateCompBand.jobLevel)&&
        Objects.equals(this.additionalProperties, updateCompBand.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, color, baseCompMax, baseCompMid, baseCompMin, baseSpread, baseInterval, baseTargetPay, baseTargetPayPercentile, equityTargetShares, equityTargetPercentOfBase, equityTargetValue, variableValue, variablePercentOfBase, jobTierOneField, jobTierTwoField, jobTierThreeField, jobLevel, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCompBand {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    baseCompMax: ").append(toIndentedString(baseCompMax)).append("\n");
    sb.append("    baseCompMid: ").append(toIndentedString(baseCompMid)).append("\n");
    sb.append("    baseCompMin: ").append(toIndentedString(baseCompMin)).append("\n");
    sb.append("    baseSpread: ").append(toIndentedString(baseSpread)).append("\n");
    sb.append("    baseInterval: ").append(toIndentedString(baseInterval)).append("\n");
    sb.append("    baseTargetPay: ").append(toIndentedString(baseTargetPay)).append("\n");
    sb.append("    baseTargetPayPercentile: ").append(toIndentedString(baseTargetPayPercentile)).append("\n");
    sb.append("    equityTargetShares: ").append(toIndentedString(equityTargetShares)).append("\n");
    sb.append("    equityTargetPercentOfBase: ").append(toIndentedString(equityTargetPercentOfBase)).append("\n");
    sb.append("    equityTargetValue: ").append(toIndentedString(equityTargetValue)).append("\n");
    sb.append("    variableValue: ").append(toIndentedString(variableValue)).append("\n");
    sb.append("    variablePercentOfBase: ").append(toIndentedString(variablePercentOfBase)).append("\n");
    sb.append("    jobTierOneField: ").append(toIndentedString(jobTierOneField)).append("\n");
    sb.append("    jobTierTwoField: ").append(toIndentedString(jobTierTwoField)).append("\n");
    sb.append("    jobTierThreeField: ").append(toIndentedString(jobTierThreeField)).append("\n");
    sb.append("    jobLevel: ").append(toIndentedString(jobLevel)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("color");
    openapiFields.add("baseCompMax");
    openapiFields.add("baseCompMid");
    openapiFields.add("baseCompMin");
    openapiFields.add("baseSpread");
    openapiFields.add("baseInterval");
    openapiFields.add("baseTargetPay");
    openapiFields.add("baseTargetPayPercentile");
    openapiFields.add("equityTargetShares");
    openapiFields.add("equityTargetPercentOfBase");
    openapiFields.add("equityTargetValue");
    openapiFields.add("variableValue");
    openapiFields.add("variablePercentOfBase");
    openapiFields.add("jobTierOneField");
    openapiFields.add("jobTierTwoField");
    openapiFields.add("jobTierThreeField");
    openapiFields.add("jobLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateCompBand
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateCompBand.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCompBand is not found in the empty JSON string", UpdateCompBand.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      // validate the optional field `baseCompMax`
      if (jsonObj.get("baseCompMax") != null && !jsonObj.get("baseCompMax").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("baseCompMax"));
      }
      // validate the optional field `baseCompMid`
      if (jsonObj.get("baseCompMid") != null && !jsonObj.get("baseCompMid").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("baseCompMid"));
      }
      // validate the optional field `baseCompMin`
      if (jsonObj.get("baseCompMin") != null && !jsonObj.get("baseCompMin").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("baseCompMin"));
      }
      // validate the optional field `baseInterval`
      if (jsonObj.get("baseInterval") != null && !jsonObj.get("baseInterval").isJsonNull()) {
        EnumValue.validateJsonObject(jsonObj.getAsJsonObject("baseInterval"));
      }
      // validate the optional field `baseTargetPay`
      if (jsonObj.get("baseTargetPay") != null && !jsonObj.get("baseTargetPay").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("baseTargetPay"));
      }
      // validate the optional field `variableValue`
      if (jsonObj.get("variableValue") != null && !jsonObj.get("variableValue").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("variableValue"));
      }
      // validate the optional field `jobTierOneField`
      if (jsonObj.get("jobTierOneField") != null && !jsonObj.get("jobTierOneField").isJsonNull()) {
        JobTierField.validateJsonObject(jsonObj.getAsJsonObject("jobTierOneField"));
      }
      // validate the optional field `jobTierTwoField`
      if (jsonObj.get("jobTierTwoField") != null && !jsonObj.get("jobTierTwoField").isJsonNull()) {
        JobTierField.validateJsonObject(jsonObj.getAsJsonObject("jobTierTwoField"));
      }
      // validate the optional field `jobTierThreeField`
      if (jsonObj.get("jobTierThreeField") != null && !jsonObj.get("jobTierThreeField").isJsonNull()) {
        JobTierField.validateJsonObject(jsonObj.getAsJsonObject("jobTierThreeField"));
      }
      if ((jsonObj.get("jobLevel") != null && !jsonObj.get("jobLevel").isJsonNull()) && !jsonObj.get("jobLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobLevel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCompBand.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCompBand' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCompBand> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCompBand.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCompBand>() {
           @Override
           public void write(JsonWriter out, UpdateCompBand value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCompBand read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UpdateCompBand instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateCompBand given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateCompBand
  * @throws IOException if the JSON string is invalid with respect to UpdateCompBand
  */
  public static UpdateCompBand fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCompBand.class);
  }

 /**
  * Convert an instance of UpdateCompBand to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

