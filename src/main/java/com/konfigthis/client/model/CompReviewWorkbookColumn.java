/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.InCycleViewFeatures;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewWorkbookColumn
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewWorkbookColumn {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_EDITABLE_FOR = "editableFor";
  @SerializedName(SERIALIZED_NAME_EDITABLE_FOR)
  private String editableFor;

  public static final String SERIALIZED_NAME_VISIBLE_TO = "visibleTo";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO)
  private String visibleTo;

  public static final String SERIALIZED_NAME_VISIBLE_TO_GROUPS = "visibleToGroups";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_GROUPS)
  private Set<String> visibleToGroups = new LinkedHashSet<>();

  /**
   * type of cql filter used in the visible to
   */
  @JsonAdapter(VisibleToTypeEnum.Adapter.class)
 public enum VisibleToTypeEnum {
    EVERYONE("EVERYONE"),
    
    DEPARTMENT("DEPARTMENT"),
    
    TEAM("TEAM"),
    
    LOCATION("LOCATION"),
    
    CUSTOM("CUSTOM");

    private String value;

    VisibleToTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibleToTypeEnum fromValue(String value) {
      for (VisibleToTypeEnum b : VisibleToTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibleToTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibleToTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibleToTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VisibleToTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VISIBLE_TO_TYPE = "visibleToType";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_TYPE)
  private VisibleToTypeEnum visibleToType;

  public static final String SERIALIZED_NAME_VISIBLE_TO_ROLES = "visibleToRoles";
  @SerializedName(SERIALIZED_NAME_VISIBLE_TO_ROLES)
  private InCycleViewFeatures visibleToRoles;

  public CompReviewWorkbookColumn() {
  }

  public CompReviewWorkbookColumn name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * field name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "field name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CompReviewWorkbookColumn label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * display name in workbook
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "display name in workbook")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public CompReviewWorkbookColumn color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * color used in the column header
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "color used in the column header")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public CompReviewWorkbookColumn editableFor(String editableFor) {
    
    
    
    
    this.editableFor = editableFor;
    return this;
  }

   /**
   * cql evaluated on the reviewee job specifying whether field is editable
   * @return editableFor
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "cql evaluated on the reviewee job specifying whether field is editable")

  public String getEditableFor() {
    return editableFor;
  }


  public void setEditableFor(String editableFor) {
    
    
    
    this.editableFor = editableFor;
  }


  public CompReviewWorkbookColumn visibleTo(String visibleTo) {
    
    
    
    
    this.visibleTo = visibleTo;
    return this;
  }

   /**
   * cql specifying who can view
   * @return visibleTo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "cql specifying who can view")

  public String getVisibleTo() {
    return visibleTo;
  }


  public void setVisibleTo(String visibleTo) {
    
    
    
    this.visibleTo = visibleTo;
  }


  public CompReviewWorkbookColumn visibleToGroups(Set<String> visibleToGroups) {
    
    
    
    
    this.visibleToGroups = visibleToGroups;
    return this;
  }

  public CompReviewWorkbookColumn addVisibleToGroupsItem(String visibleToGroupsItem) {
    this.visibleToGroups.add(visibleToGroupsItem);
    return this;
  }

   /**
   * list of groupIds with viewing permissions
   * @return visibleToGroups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of groupIds with viewing permissions")

  public Set<String> getVisibleToGroups() {
    return visibleToGroups;
  }


  public void setVisibleToGroups(Set<String> visibleToGroups) {
    
    
    
    this.visibleToGroups = visibleToGroups;
  }


  public CompReviewWorkbookColumn visibleToType(VisibleToTypeEnum visibleToType) {
    
    
    
    
    this.visibleToType = visibleToType;
    return this;
  }

   /**
   * type of cql filter used in the visible to
   * @return visibleToType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of cql filter used in the visible to")

  public VisibleToTypeEnum getVisibleToType() {
    return visibleToType;
  }


  public void setVisibleToType(VisibleToTypeEnum visibleToType) {
    
    
    
    this.visibleToType = visibleToType;
  }


  public CompReviewWorkbookColumn visibleToRoles(InCycleViewFeatures visibleToRoles) {
    
    
    
    
    this.visibleToRoles = visibleToRoles;
    return this;
  }

   /**
   * Get visibleToRoles
   * @return visibleToRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InCycleViewFeatures getVisibleToRoles() {
    return visibleToRoles;
  }


  public void setVisibleToRoles(InCycleViewFeatures visibleToRoles) {
    
    
    
    this.visibleToRoles = visibleToRoles;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewWorkbookColumn instance itself
   */
  public CompReviewWorkbookColumn putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewWorkbookColumn compReviewWorkbookColumn = (CompReviewWorkbookColumn) o;
    return Objects.equals(this.name, compReviewWorkbookColumn.name) &&
        Objects.equals(this.label, compReviewWorkbookColumn.label) &&
        Objects.equals(this.color, compReviewWorkbookColumn.color) &&
        Objects.equals(this.editableFor, compReviewWorkbookColumn.editableFor) &&
        Objects.equals(this.visibleTo, compReviewWorkbookColumn.visibleTo) &&
        Objects.equals(this.visibleToGroups, compReviewWorkbookColumn.visibleToGroups) &&
        Objects.equals(this.visibleToType, compReviewWorkbookColumn.visibleToType) &&
        Objects.equals(this.visibleToRoles, compReviewWorkbookColumn.visibleToRoles)&&
        Objects.equals(this.additionalProperties, compReviewWorkbookColumn.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, label, color, editableFor, visibleTo, visibleToGroups, visibleToType, visibleToRoles, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewWorkbookColumn {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    editableFor: ").append(toIndentedString(editableFor)).append("\n");
    sb.append("    visibleTo: ").append(toIndentedString(visibleTo)).append("\n");
    sb.append("    visibleToGroups: ").append(toIndentedString(visibleToGroups)).append("\n");
    sb.append("    visibleToType: ").append(toIndentedString(visibleToType)).append("\n");
    sb.append("    visibleToRoles: ").append(toIndentedString(visibleToRoles)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("color");
    openapiFields.add("editableFor");
    openapiFields.add("visibleTo");
    openapiFields.add("visibleToGroups");
    openapiFields.add("visibleToType");
    openapiFields.add("visibleToRoles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("editableFor");
    openapiRequiredFields.add("visibleTo");
    openapiRequiredFields.add("visibleToGroups");
    openapiRequiredFields.add("visibleToType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewWorkbookColumn
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewWorkbookColumn.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewWorkbookColumn is not found in the empty JSON string", CompReviewWorkbookColumn.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewWorkbookColumn.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("editableFor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editableFor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editableFor").toString()));
      }
      if (!jsonObj.get("visibleTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibleTo").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("visibleToGroups") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("visibleToGroups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleToGroups` to be an array in the JSON string but got `%s`", jsonObj.get("visibleToGroups").toString()));
      }
      if (!jsonObj.get("visibleToType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibleToType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibleToType").toString()));
      }
      // validate the optional field `visibleToRoles`
      if (jsonObj.get("visibleToRoles") != null && !jsonObj.get("visibleToRoles").isJsonNull()) {
        InCycleViewFeatures.validateJsonObject(jsonObj.getAsJsonObject("visibleToRoles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewWorkbookColumn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewWorkbookColumn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewWorkbookColumn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewWorkbookColumn.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewWorkbookColumn>() {
           @Override
           public void write(JsonWriter out, CompReviewWorkbookColumn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewWorkbookColumn read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewWorkbookColumn instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewWorkbookColumn given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewWorkbookColumn
  * @throws IOException if the JSON string is invalid with respect to CompReviewWorkbookColumn
  */
  public static CompReviewWorkbookColumn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewWorkbookColumn.class);
  }

 /**
  * Convert an instance of CompReviewWorkbookColumn to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

