/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ShareAccess;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateTable
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateTable {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATED = "effectiveDated";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATED)
  private Boolean effectiveDated;

  /**
   * base sensitivity of this table and entities in it -- should be either ORG or HIGH
   */
  @JsonAdapter(SensitiveEnum.Adapter.class)
 public enum SensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    SensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SensitiveEnum fromValue(String value) {
      for (SensitiveEnum b : SensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private SensitiveEnum sensitive;

  public static final String SERIALIZED_NAME_SHARE_ACCESS = "shareAccess";
  @SerializedName(SERIALIZED_NAME_SHARE_ACCESS)
  private List<ShareAccess> shareAccess = null;

  public CreateTable() {
  }

  public CreateTable name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * name of table
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "budget-data", required = true, value = "name of table")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreateTable label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human readable label for the table
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Budget Data", value = "human readable label for the table")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public CreateTable effectiveDated(Boolean effectiveDated) {
    
    
    
    
    this.effectiveDated = effectiveDated;
    return this;
  }

   /**
   * whether or not the table is time tracked with effective dates (allows time travel or not). If false, then the values set in the table will be the same across all dates.
   * @return effectiveDated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "whether or not the table is time tracked with effective dates (allows time travel or not). If false, then the values set in the table will be the same across all dates.")

  public Boolean getEffectiveDated() {
    return effectiveDated;
  }


  public void setEffectiveDated(Boolean effectiveDated) {
    
    
    
    this.effectiveDated = effectiveDated;
  }


  public CreateTable sensitive(SensitiveEnum sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * base sensitivity of this table and entities in it -- should be either ORG or HIGH
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "base sensitivity of this table and entities in it -- should be either ORG or HIGH")

  public SensitiveEnum getSensitive() {
    return sensitive;
  }


  public void setSensitive(SensitiveEnum sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public CreateTable shareAccess(List<ShareAccess> shareAccess) {
    
    
    
    
    this.shareAccess = shareAccess;
    return this;
  }

  public CreateTable addShareAccessItem(ShareAccess shareAccessItem) {
    if (this.shareAccess == null) {
      this.shareAccess = new ArrayList<>();
    }
    this.shareAccess.add(shareAccessItem);
    return this;
  }

   /**
   * users who are specifically granted permission to this table
   * @return shareAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "users who are specifically granted permission to this table")

  public List<ShareAccess> getShareAccess() {
    return shareAccess;
  }


  public void setShareAccess(List<ShareAccess> shareAccess) {
    
    
    
    this.shareAccess = shareAccess;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateTable instance itself
   */
  public CreateTable putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTable createTable = (CreateTable) o;
    return Objects.equals(this.name, createTable.name) &&
        Objects.equals(this.label, createTable.label) &&
        Objects.equals(this.effectiveDated, createTable.effectiveDated) &&
        Objects.equals(this.sensitive, createTable.sensitive) &&
        Objects.equals(this.shareAccess, createTable.shareAccess)&&
        Objects.equals(this.additionalProperties, createTable.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, label, effectiveDated, sensitive, shareAccess, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTable {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    effectiveDated: ").append(toIndentedString(effectiveDated)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    shareAccess: ").append(toIndentedString(shareAccess)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("effectiveDated");
    openapiFields.add("sensitive");
    openapiFields.add("shareAccess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("effectiveDated");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateTable
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTable is not found in the empty JSON string", CreateTable.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTable.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if (jsonObj.get("shareAccess") != null && !jsonObj.get("shareAccess").isJsonNull()) {
        JsonArray jsonArrayshareAccess = jsonObj.getAsJsonArray("shareAccess");
        if (jsonArrayshareAccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareAccess").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareAccess` to be an array in the JSON string but got `%s`", jsonObj.get("shareAccess").toString()));
          }

          // validate the optional field `shareAccess` (array)
          for (int i = 0; i < jsonArrayshareAccess.size(); i++) {
            ShareAccess.validateJsonObject(jsonArrayshareAccess.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTable.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTable>() {
           @Override
           public void write(JsonWriter out, CreateTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTable read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateTable instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateTable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateTable
  * @throws IOException if the JSON string is invalid with respect to CreateTable
  */
  public static CreateTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTable.class);
  }

 /**
  * Convert an instance of CreateTable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

