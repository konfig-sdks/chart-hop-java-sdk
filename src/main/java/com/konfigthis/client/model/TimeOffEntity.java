/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeOffEntity
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffEntity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private Double days;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_TYPE_DESCRIPTION = "typeDescription";
  @SerializedName(SERIALIZED_NAME_TYPE_DESCRIPTION)
  private String typeDescription;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  /**
   * approval status of the time off
   */
  @JsonAdapter(ApprovalEnum.Adapter.class)
 public enum ApprovalEnum {
    APPROVED("APPROVED"),
    
    PENDING("PENDING"),
    
    CANCELLED("CANCELLED"),
    
    REJECTED("REJECTED"),
    
    SUPERSEDED("SUPERSEDED");

    private String value;

    ApprovalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalEnum fromValue(String value) {
      for (ApprovalEnum b : ApprovalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApprovalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApprovalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_APPROVAL = "approval";
  @SerializedName(SERIALIZED_NAME_APPROVAL)
  private ApprovalEnum approval;

  public static final String SERIALIZED_NAME_APPROVAL_AT = "approvalAt";
  @SerializedName(SERIALIZED_NAME_APPROVAL_AT)
  private String approvalAt;

  public static final String SERIALIZED_NAME_APPROVAL_USER_ID = "approvalUserId";
  @SerializedName(SERIALIZED_NAME_APPROVAL_USER_ID)
  private String approvalUserId;

  public static final String SERIALIZED_NAME_REQUEST_AT = "requestAt";
  @SerializedName(SERIALIZED_NAME_REQUEST_AT)
  private String requestAt;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public TimeOffEntity() {
  }

  public TimeOffEntity id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id of time off
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id of time off")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TimeOffEntity orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * org that the time off belongs to
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "org that the time off belongs to")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public TimeOffEntity personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * person taking the time off
   * @return personId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "person taking the time off")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public TimeOffEntity externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * external identifier, if time off synced from external system
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "external identifier, if time off synced from external system")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public TimeOffEntity startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * start date of time off, inclusive
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "start date of time off, inclusive")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public TimeOffEntity endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * end date of time off, inclusive
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "end date of time off, inclusive")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public TimeOffEntity days(Double days) {
    
    
    
    
    this.days = days;
    return this;
  }

  public TimeOffEntity days(Integer days) {
    
    
    
    
    this.days = days.doubleValue();
    return this;
  }

   /**
   * number of days used
   * @return days
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of days used")

  public Double getDays() {
    return days;
  }


  public void setDays(Double days) {
    
    
    
    this.days = days;
  }


  public TimeOffEntity hours(Double hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

  public TimeOffEntity hours(Integer hours) {
    
    
    
    
    this.hours = hours.doubleValue();
    return this;
  }

   /**
   * number of hours used
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of hours used")

  public Double getHours() {
    return hours;
  }


  public void setHours(Double hours) {
    
    
    
    this.hours = hours;
  }


  public TimeOffEntity typeDescription(String typeDescription) {
    
    
    
    
    this.typeDescription = typeDescription;
    return this;
  }

   /**
   * type of time off
   * @return typeDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "type of time off")

  public String getTypeDescription() {
    return typeDescription;
  }


  public void setTypeDescription(String typeDescription) {
    
    
    
    this.typeDescription = typeDescription;
  }


  public TimeOffEntity note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * notes on the time off
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "notes on the time off")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public TimeOffEntity approval(ApprovalEnum approval) {
    
    
    
    
    this.approval = approval;
    return this;
  }

   /**
   * approval status of the time off
   * @return approval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "approval status of the time off")

  public ApprovalEnum getApproval() {
    return approval;
  }


  public void setApproval(ApprovalEnum approval) {
    
    
    
    this.approval = approval;
  }


  public TimeOffEntity approvalAt(String approvalAt) {
    
    
    
    
    this.approvalAt = approvalAt;
    return this;
  }

   /**
   * timestamp of approval
   * @return approvalAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "timestamp of approval")

  public String getApprovalAt() {
    return approvalAt;
  }


  public void setApprovalAt(String approvalAt) {
    
    
    
    this.approvalAt = approvalAt;
  }


  public TimeOffEntity approvalUserId(String approvalUserId) {
    
    
    
    
    this.approvalUserId = approvalUserId;
    return this;
  }

   /**
   * user who either is the next one requesting approval, or the user who did the final approval or rejection
   * @return approvalUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "user who either is the next one requesting approval, or the user who did the final approval or rejection")

  public String getApprovalUserId() {
    return approvalUserId;
  }


  public void setApprovalUserId(String approvalUserId) {
    
    
    
    this.approvalUserId = approvalUserId;
  }


  public TimeOffEntity requestAt(String requestAt) {
    
    
    
    
    this.requestAt = requestAt;
    return this;
  }

   /**
   * requested at timestamp -- often the same as createAt
   * @return requestAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "requested at timestamp -- often the same as createAt")

  public String getRequestAt() {
    return requestAt;
  }


  public void setRequestAt(String requestAt) {
    
    
    
    this.requestAt = requestAt;
  }


  public TimeOffEntity createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public TimeOffEntity createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public TimeOffEntity updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public TimeOffEntity updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * updated by user id
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public TimeOffEntity deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public TimeOffEntity deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffEntity instance itself
   */
  public TimeOffEntity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffEntity timeOffEntity = (TimeOffEntity) o;
    return Objects.equals(this.id, timeOffEntity.id) &&
        Objects.equals(this.orgId, timeOffEntity.orgId) &&
        Objects.equals(this.personId, timeOffEntity.personId) &&
        Objects.equals(this.externalId, timeOffEntity.externalId) &&
        Objects.equals(this.startDate, timeOffEntity.startDate) &&
        Objects.equals(this.endDate, timeOffEntity.endDate) &&
        Objects.equals(this.days, timeOffEntity.days) &&
        Objects.equals(this.hours, timeOffEntity.hours) &&
        Objects.equals(this.typeDescription, timeOffEntity.typeDescription) &&
        Objects.equals(this.note, timeOffEntity.note) &&
        Objects.equals(this.approval, timeOffEntity.approval) &&
        Objects.equals(this.approvalAt, timeOffEntity.approvalAt) &&
        Objects.equals(this.approvalUserId, timeOffEntity.approvalUserId) &&
        Objects.equals(this.requestAt, timeOffEntity.requestAt) &&
        Objects.equals(this.createId, timeOffEntity.createId) &&
        Objects.equals(this.createAt, timeOffEntity.createAt) &&
        Objects.equals(this.updateAt, timeOffEntity.updateAt) &&
        Objects.equals(this.updateId, timeOffEntity.updateId) &&
        Objects.equals(this.deleteId, timeOffEntity.deleteId) &&
        Objects.equals(this.deleteAt, timeOffEntity.deleteAt)&&
        Objects.equals(this.additionalProperties, timeOffEntity.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgId, personId, externalId, startDate, endDate, days, hours, typeDescription, note, approval, approvalAt, approvalUserId, requestAt, createId, createAt, updateAt, updateId, deleteId, deleteAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    typeDescription: ").append(toIndentedString(typeDescription)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    approvalAt: ").append(toIndentedString(approvalAt)).append("\n");
    sb.append("    approvalUserId: ").append(toIndentedString(approvalUserId)).append("\n");
    sb.append("    requestAt: ").append(toIndentedString(requestAt)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("personId");
    openapiFields.add("externalId");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("days");
    openapiFields.add("hours");
    openapiFields.add("typeDescription");
    openapiFields.add("note");
    openapiFields.add("approval");
    openapiFields.add("approvalAt");
    openapiFields.add("approvalUserId");
    openapiFields.add("requestAt");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateAt");
    openapiFields.add("updateId");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("personId");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffEntity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffEntity is not found in the empty JSON string", TimeOffEntity.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeOffEntity.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("typeDescription") != null && !jsonObj.get("typeDescription").isJsonNull()) && !jsonObj.get("typeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeDescription").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("approval") != null && !jsonObj.get("approval").isJsonNull()) && !jsonObj.get("approval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approval").toString()));
      }
      if ((jsonObj.get("approvalAt") != null && !jsonObj.get("approvalAt").isJsonNull()) && !jsonObj.get("approvalAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalAt").toString()));
      }
      if ((jsonObj.get("approvalUserId") != null && !jsonObj.get("approvalUserId").isJsonNull()) && !jsonObj.get("approvalUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvalUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvalUserId").toString()));
      }
      if ((jsonObj.get("requestAt") != null && !jsonObj.get("requestAt").isJsonNull()) && !jsonObj.get("requestAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestAt").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffEntity>() {
           @Override
           public void write(JsonWriter out, TimeOffEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffEntity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffEntity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffEntity
  * @throws IOException if the JSON string is invalid with respect to TimeOffEntity
  */
  public static TimeOffEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffEntity.class);
  }

 /**
  * Convert an instance of TimeOffEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

