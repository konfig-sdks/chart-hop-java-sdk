/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AppConfigField;
import com.konfigthis.client.model.Bundle;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateApp
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateApp {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<URI> redirectUris = null;

  public static final String SERIALIZED_NAME_ALLOWED_IPS = "allowedIps";
  @SerializedName(SERIALIZED_NAME_ALLOWED_IPS)
  private List<String> allowedIps = null;

  public static final String SERIALIZED_NAME_CONFIG_FIELDS = "configFields";
  @SerializedName(SERIALIZED_NAME_CONFIG_FIELDS)
  private List<AppConfigField> configFields = null;

  public static final String SERIALIZED_NAME_SETUP_INSTRUCTIONS = "setupInstructions";
  @SerializedName(SERIALIZED_NAME_SETUP_INSTRUCTIONS)
  private String setupInstructions;

  public static final String SERIALIZED_NAME_CRON_ORDER = "cronOrder";
  @SerializedName(SERIALIZED_NAME_CRON_ORDER)
  private Integer cronOrder;

  /**
   * cron schedule
   */
  @JsonAdapter(CronScheduleEnum.Adapter.class)
 public enum CronScheduleEnum {
    DAILY("DAILY"),
    
    WEEKLY("WEEKLY");

    private String value;

    CronScheduleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CronScheduleEnum fromValue(String value) {
      for (CronScheduleEnum b : CronScheduleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CronScheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CronScheduleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CronScheduleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CronScheduleEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CRON_SCHEDULE = "cronSchedule";
  @SerializedName(SERIALIZED_NAME_CRON_SCHEDULE)
  private CronScheduleEnum cronSchedule;

  /**
   * Day of week if cronSchedule is WEEKLY
   */
  @JsonAdapter(CronDayOfWeekEnum.Adapter.class)
 public enum CronDayOfWeekEnum {
    MONDAY("MONDAY"),
    
    TUESDAY("TUESDAY"),
    
    WEDNESDAY("WEDNESDAY"),
    
    THURSDAY("THURSDAY"),
    
    FRIDAY("FRIDAY"),
    
    SATURDAY("SATURDAY"),
    
    SUNDAY("SUNDAY");

    private String value;

    CronDayOfWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CronDayOfWeekEnum fromValue(String value) {
      for (CronDayOfWeekEnum b : CronDayOfWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CronDayOfWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CronDayOfWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CronDayOfWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CronDayOfWeekEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CRON_DAY_OF_WEEK = "cronDayOfWeek";
  @SerializedName(SERIALIZED_NAME_CRON_DAY_OF_WEEK)
  private CronDayOfWeekEnum cronDayOfWeek;

  public static final String SERIALIZED_NAME_IMAGE_PATH = "imagePath";
  @SerializedName(SERIALIZED_NAME_IMAGE_PATH)
  private String imagePath;

  public static final String SERIALIZED_NAME_WORDMARK_IMAGE_PATH = "wordmarkImagePath";
  @SerializedName(SERIALIZED_NAME_WORDMARK_IMAGE_PATH)
  private String wordmarkImagePath;

  public static final String SERIALIZED_NAME_POWERED_BY_IMAGE_PATH = "poweredByImagePath";
  @SerializedName(SERIALIZED_NAME_POWERED_BY_IMAGE_PATH)
  private String poweredByImagePath;

  /**
   * current status of app
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    GLOBAL("GLOBAL"),
    
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE"),
    
    DEVELOPMENT("DEVELOPMENT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * minimum access level requested by app
   */
  @JsonAdapter(MinAccessEnum.Adapter.class)
 public enum MinAccessEnum {
    NONE("NONE"),
    
    VIEW("VIEW"),
    
    LIMITED("LIMITED"),
    
    MEMBER_LIMITED_COMP("MEMBER_LIMITED_COMP"),
    
    MEMBER("MEMBER"),
    
    CUSTOM("CUSTOM"),
    
    TECH_OWNER("TECH_OWNER"),
    
    TIMEOFF("TIMEOFF"),
    
    CONTACT("CONTACT"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    COMP_ALL("COMP_ALL"),
    
    RECRUIT_SENSITIVE("RECRUIT_SENSITIVE"),
    
    RECRUIT_PRIMARY("RECRUIT_PRIMARY"),
    
    SENSITIVE_LIMITED_COMP("SENSITIVE_LIMITED_COMP"),
    
    SENSITIVE("SENSITIVE"),
    
    PRIMARY("PRIMARY"),
    
    PEOPLE_OPS_ADMIN("PEOPLE_OPS_ADMIN"),
    
    PEOPLE_OPS_ADMIN_NO_COMP_DATA("PEOPLE_OPS_ADMIN_NO_COMP_DATA"),
    
    PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA("PEOPLE_OPS_ADMIN_NO_SENSITIVE_DATA"),
    
    OWNER("OWNER");

    private String value;

    MinAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinAccessEnum fromValue(String value) {
      for (MinAccessEnum b : MinAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinAccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIN_ACCESS = "minAccess";
  @SerializedName(SERIALIZED_NAME_MIN_ACCESS)
  private MinAccessEnum minAccess;

  public static final String SERIALIZED_NAME_ROLE_ID = "roleId";
  @SerializedName(SERIALIZED_NAME_ROLE_ID)
  private String roleId;

  public static final String SERIALIZED_NAME_EVENT_NOTIFY_URL = "eventNotifyUrl";
  @SerializedName(SERIALIZED_NAME_EVENT_NOTIFY_URL)
  private URI eventNotifyUrl;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Map<String, String> payload = null;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private Set<String> events = null;

  /**
   * APP, BUNDLE, or INTERNAL
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    APP("APP"),
    
    BUNDLE("BUNDLE"),
    
    INTERNAL("INTERNAL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_BUNDLE = "bundle";
  @SerializedName(SERIALIZED_NAME_BUNDLE)
  private Bundle bundle;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = null;

  public CreateApp() {
  }

  public CreateApp tags(List<String> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public CreateApp addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * tags/categories the app belongs to
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "tags/categories the app belongs to")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    
    
    
    this.tags = tags;
  }


  public CreateApp summary(String summary) {
    
    
    
    
    this.summary = summary;
    return this;
  }

   /**
   * short summary of app
   * @return summary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "The Slack app does X Y and Z", required = true, value = "short summary of app")

  public String getSummary() {
    return summary;
  }


  public void setSummary(String summary) {
    
    
    
    this.summary = summary;
  }


  public CreateApp title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * human-readable name of app
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Slack", required = true, value = "human-readable name of app")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CreateApp description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * full description of app, in Markdown
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The Slack app does X Y and Z", value = "full description of app, in Markdown")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CreateApp orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * organization id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public CreateApp name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * short unique name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "slack-import", required = true, value = "short unique name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CreateApp redirectUris(List<URI> redirectUris) {
    
    
    
    
    this.redirectUris = redirectUris;
    return this;
  }

  public CreateApp addRedirectUrisItem(URI redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

   /**
   * list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for this app
   * @return redirectUris
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for this app")

  public List<URI> getRedirectUris() {
    return redirectUris;
  }


  public void setRedirectUris(List<URI> redirectUris) {
    
    
    
    this.redirectUris = redirectUris;
  }


  public CreateApp allowedIps(List<String> allowedIps) {
    
    
    
    
    this.allowedIps = allowedIps;
    return this;
  }

  public CreateApp addAllowedIpsItem(String allowedIpsItem) {
    if (this.allowedIps == null) {
      this.allowedIps = new ArrayList<>();
    }
    this.allowedIps.add(allowedIpsItem);
    return this;
  }

   /**
   * allowlist of IPs or IP ranges that are allowed to make API calls on behalf of this app
   * @return allowedIps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "allowlist of IPs or IP ranges that are allowed to make API calls on behalf of this app")

  public List<String> getAllowedIps() {
    return allowedIps;
  }


  public void setAllowedIps(List<String> allowedIps) {
    
    
    
    this.allowedIps = allowedIps;
  }


  public CreateApp configFields(List<AppConfigField> configFields) {
    
    
    
    
    this.configFields = configFields;
    return this;
  }

  public CreateApp addConfigFieldsItem(AppConfigField configFieldsItem) {
    if (this.configFields == null) {
      this.configFields = new ArrayList<>();
    }
    this.configFields.add(configFieldsItem);
    return this;
  }

   /**
   * list of configuration fields
   * @return configFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of configuration fields")

  public List<AppConfigField> getConfigFields() {
    return configFields;
  }


  public void setConfigFields(List<AppConfigField> configFields) {
    
    
    
    this.configFields = configFields;
  }


  public CreateApp setupInstructions(String setupInstructions) {
    
    
    
    
    this.setupInstructions = setupInstructions;
    return this;
  }

   /**
   * setup instructions, in Markdown
   * @return setupInstructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "To install the Slack, use your API key from X and Y", value = "setup instructions, in Markdown")

  public String getSetupInstructions() {
    return setupInstructions;
  }


  public void setSetupInstructions(String setupInstructions) {
    
    
    
    this.setupInstructions = setupInstructions;
  }


  public CreateApp cronOrder(Integer cronOrder) {
    
    
    
    
    this.cronOrder = cronOrder;
    return this;
  }

   /**
   * execution order of the cron (lower numbers execute earlier)
   * @return cronOrder
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "execution order of the cron (lower numbers execute earlier)")

  public Integer getCronOrder() {
    return cronOrder;
  }


  public void setCronOrder(Integer cronOrder) {
    
    
    
    this.cronOrder = cronOrder;
  }


  public CreateApp cronSchedule(CronScheduleEnum cronSchedule) {
    
    
    
    
    this.cronSchedule = cronSchedule;
    return this;
  }

   /**
   * cron schedule
   * @return cronSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "cron schedule")

  public CronScheduleEnum getCronSchedule() {
    return cronSchedule;
  }


  public void setCronSchedule(CronScheduleEnum cronSchedule) {
    
    
    
    this.cronSchedule = cronSchedule;
  }


  public CreateApp cronDayOfWeek(CronDayOfWeekEnum cronDayOfWeek) {
    
    
    
    
    this.cronDayOfWeek = cronDayOfWeek;
    return this;
  }

   /**
   * Day of week if cronSchedule is WEEKLY
   * @return cronDayOfWeek
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Day of week if cronSchedule is WEEKLY")

  public CronDayOfWeekEnum getCronDayOfWeek() {
    return cronDayOfWeek;
  }


  public void setCronDayOfWeek(CronDayOfWeekEnum cronDayOfWeek) {
    
    
    
    this.cronDayOfWeek = cronDayOfWeek;
  }


  public CreateApp imagePath(String imagePath) {
    
    
    
    
    this.imagePath = imagePath;
    return this;
  }

   /**
   * path to avatar profile image, should be approximately square dimensions and show logo
   * @return imagePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path to avatar profile image, should be approximately square dimensions and show logo")

  public String getImagePath() {
    return imagePath;
  }


  public void setImagePath(String imagePath) {
    
    
    
    this.imagePath = imagePath;
  }


  public CreateApp wordmarkImagePath(String wordmarkImagePath) {
    
    
    
    
    this.wordmarkImagePath = wordmarkImagePath;
    return this;
  }

   /**
   * path to larger profile logo image containing brand wordmark, does not need to be square dimensions
   * @return wordmarkImagePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path to larger profile logo image containing brand wordmark, does not need to be square dimensions")

  public String getWordmarkImagePath() {
    return wordmarkImagePath;
  }


  public void setWordmarkImagePath(String wordmarkImagePath) {
    
    
    
    this.wordmarkImagePath = wordmarkImagePath;
  }


  public CreateApp poweredByImagePath(String poweredByImagePath) {
    
    
    
    
    this.poweredByImagePath = poweredByImagePath;
    return this;
  }

   /**
   * path to powered by image, should be approximately square dimensions and show logo
   * @return poweredByImagePath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "path to powered by image, should be approximately square dimensions and show logo")

  public String getPoweredByImagePath() {
    return poweredByImagePath;
  }


  public void setPoweredByImagePath(String poweredByImagePath) {
    
    
    
    this.poweredByImagePath = poweredByImagePath;
  }


  public CreateApp status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * current status of app
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "current status of app")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public CreateApp minAccess(MinAccessEnum minAccess) {
    
    
    
    
    this.minAccess = minAccess;
    return this;
  }

   /**
   * minimum access level requested by app
   * @return minAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "minimum access level requested by app")

  public MinAccessEnum getMinAccess() {
    return minAccess;
  }


  public void setMinAccess(MinAccessEnum minAccess) {
    
    
    
    this.minAccess = minAccess;
  }


  public CreateApp roleId(String roleId) {
    
    
    
    
    this.roleId = roleId;
    return this;
  }

   /**
   * roleId requested by app
   * @return roleId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "roleId requested by app")

  public String getRoleId() {
    return roleId;
  }


  public void setRoleId(String roleId) {
    
    
    
    this.roleId = roleId;
  }


  public CreateApp eventNotifyUrl(URI eventNotifyUrl) {
    
    
    
    
    this.eventNotifyUrl = eventNotifyUrl;
    return this;
  }

   /**
   * URL that should be notified on events
   * @return eventNotifyUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL that should be notified on events")

  public URI getEventNotifyUrl() {
    return eventNotifyUrl;
  }


  public void setEventNotifyUrl(URI eventNotifyUrl) {
    
    
    
    this.eventNotifyUrl = eventNotifyUrl;
  }


  public CreateApp payload(Map<String, String> payload) {
    
    
    
    
    this.payload = payload;
    return this;
  }

  public CreateApp putPayloadItem(String key, String payloadItem) {
    if (this.payload == null) {
      this.payload = new HashMap<>();
    }
    this.payload.put(key, payloadItem);
    return this;
  }

   /**
   * custom payload to send in lieu of regular payload
   * @return payload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "custom payload to send in lieu of regular payload")

  public Map<String, String> getPayload() {
    return payload;
  }


  public void setPayload(Map<String, String> payload) {
    
    
    
    this.payload = payload;
  }


  public CreateApp events(Set<String> events) {
    
    
    
    
    this.events = events;
    return this;
  }

  public CreateApp addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new LinkedHashSet<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * set of events to notify on
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set of events to notify on")

  public Set<String> getEvents() {
    return events;
  }


  public void setEvents(Set<String> events) {
    
    
    
    this.events = events;
  }


  public CreateApp type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * APP, BUNDLE, or INTERNAL
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "APP, BUNDLE, or INTERNAL")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CreateApp bundle(Bundle bundle) {
    
    
    
    
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Bundle getBundle() {
    return bundle;
  }


  public void setBundle(Bundle bundle) {
    
    
    
    this.bundle = bundle;
  }


  public CreateApp scopes(List<String> scopes) {
    
    
    
    
    this.scopes = scopes;
    return this;
  }

  public CreateApp addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * access scopes that the app is requesting
   * @return scopes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "access scopes that the app is requesting")

  public List<String> getScopes() {
    return scopes;
  }


  public void setScopes(List<String> scopes) {
    
    
    
    this.scopes = scopes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateApp instance itself
   */
  public CreateApp putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApp createApp = (CreateApp) o;
    return Objects.equals(this.tags, createApp.tags) &&
        Objects.equals(this.summary, createApp.summary) &&
        Objects.equals(this.title, createApp.title) &&
        Objects.equals(this.description, createApp.description) &&
        Objects.equals(this.orgId, createApp.orgId) &&
        Objects.equals(this.name, createApp.name) &&
        Objects.equals(this.redirectUris, createApp.redirectUris) &&
        Objects.equals(this.allowedIps, createApp.allowedIps) &&
        Objects.equals(this.configFields, createApp.configFields) &&
        Objects.equals(this.setupInstructions, createApp.setupInstructions) &&
        Objects.equals(this.cronOrder, createApp.cronOrder) &&
        Objects.equals(this.cronSchedule, createApp.cronSchedule) &&
        Objects.equals(this.cronDayOfWeek, createApp.cronDayOfWeek) &&
        Objects.equals(this.imagePath, createApp.imagePath) &&
        Objects.equals(this.wordmarkImagePath, createApp.wordmarkImagePath) &&
        Objects.equals(this.poweredByImagePath, createApp.poweredByImagePath) &&
        Objects.equals(this.status, createApp.status) &&
        Objects.equals(this.minAccess, createApp.minAccess) &&
        Objects.equals(this.roleId, createApp.roleId) &&
        Objects.equals(this.eventNotifyUrl, createApp.eventNotifyUrl) &&
        Objects.equals(this.payload, createApp.payload) &&
        Objects.equals(this.events, createApp.events) &&
        Objects.equals(this.type, createApp.type) &&
        Objects.equals(this.bundle, createApp.bundle) &&
        Objects.equals(this.scopes, createApp.scopes)&&
        Objects.equals(this.additionalProperties, createApp.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, summary, title, description, orgId, name, redirectUris, allowedIps, configFields, setupInstructions, cronOrder, cronSchedule, cronDayOfWeek, imagePath, wordmarkImagePath, poweredByImagePath, status, minAccess, roleId, eventNotifyUrl, payload, events, type, bundle, scopes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApp {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    allowedIps: ").append(toIndentedString(allowedIps)).append("\n");
    sb.append("    configFields: ").append(toIndentedString(configFields)).append("\n");
    sb.append("    setupInstructions: ").append(toIndentedString(setupInstructions)).append("\n");
    sb.append("    cronOrder: ").append(toIndentedString(cronOrder)).append("\n");
    sb.append("    cronSchedule: ").append(toIndentedString(cronSchedule)).append("\n");
    sb.append("    cronDayOfWeek: ").append(toIndentedString(cronDayOfWeek)).append("\n");
    sb.append("    imagePath: ").append(toIndentedString(imagePath)).append("\n");
    sb.append("    wordmarkImagePath: ").append(toIndentedString(wordmarkImagePath)).append("\n");
    sb.append("    poweredByImagePath: ").append(toIndentedString(poweredByImagePath)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    minAccess: ").append(toIndentedString(minAccess)).append("\n");
    sb.append("    roleId: ").append(toIndentedString(roleId)).append("\n");
    sb.append("    eventNotifyUrl: ").append(toIndentedString(eventNotifyUrl)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("summary");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("orgId");
    openapiFields.add("name");
    openapiFields.add("redirectUris");
    openapiFields.add("allowedIps");
    openapiFields.add("configFields");
    openapiFields.add("setupInstructions");
    openapiFields.add("cronOrder");
    openapiFields.add("cronSchedule");
    openapiFields.add("cronDayOfWeek");
    openapiFields.add("imagePath");
    openapiFields.add("wordmarkImagePath");
    openapiFields.add("poweredByImagePath");
    openapiFields.add("status");
    openapiFields.add("minAccess");
    openapiFields.add("roleId");
    openapiFields.add("eventNotifyUrl");
    openapiFields.add("payload");
    openapiFields.add("events");
    openapiFields.add("type");
    openapiFields.add("bundle");
    openapiFields.add("scopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("cronOrder");
    openapiRequiredFields.add("minAccess");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateApp
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApp is not found in the empty JSON string", CreateApp.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApp.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUris") != null && !jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedIps") != null && !jsonObj.get("allowedIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedIps` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIps").toString()));
      }
      if (jsonObj.get("configFields") != null && !jsonObj.get("configFields").isJsonNull()) {
        JsonArray jsonArrayconfigFields = jsonObj.getAsJsonArray("configFields");
        if (jsonArrayconfigFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configFields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configFields` to be an array in the JSON string but got `%s`", jsonObj.get("configFields").toString()));
          }

          // validate the optional field `configFields` (array)
          for (int i = 0; i < jsonArrayconfigFields.size(); i++) {
            AppConfigField.validateJsonObject(jsonArrayconfigFields.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("setupInstructions") != null && !jsonObj.get("setupInstructions").isJsonNull()) && !jsonObj.get("setupInstructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `setupInstructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("setupInstructions").toString()));
      }
      if ((jsonObj.get("cronSchedule") != null && !jsonObj.get("cronSchedule").isJsonNull()) && !jsonObj.get("cronSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronSchedule").toString()));
      }
      if ((jsonObj.get("cronDayOfWeek") != null && !jsonObj.get("cronDayOfWeek").isJsonNull()) && !jsonObj.get("cronDayOfWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cronDayOfWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cronDayOfWeek").toString()));
      }
      if ((jsonObj.get("imagePath") != null && !jsonObj.get("imagePath").isJsonNull()) && !jsonObj.get("imagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imagePath").toString()));
      }
      if ((jsonObj.get("wordmarkImagePath") != null && !jsonObj.get("wordmarkImagePath").isJsonNull()) && !jsonObj.get("wordmarkImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wordmarkImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wordmarkImagePath").toString()));
      }
      if ((jsonObj.get("poweredByImagePath") != null && !jsonObj.get("poweredByImagePath").isJsonNull()) && !jsonObj.get("poweredByImagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poweredByImagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poweredByImagePath").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("minAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minAccess").toString()));
      }
      if ((jsonObj.get("roleId") != null && !jsonObj.get("roleId").isJsonNull()) && !jsonObj.get("roleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleId").toString()));
      }
      if ((jsonObj.get("eventNotifyUrl") != null && !jsonObj.get("eventNotifyUrl").isJsonNull()) && !jsonObj.get("eventNotifyUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventNotifyUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventNotifyUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `bundle`
      if (jsonObj.get("bundle") != null && !jsonObj.get("bundle").isJsonNull()) {
        Bundle.validateJsonObject(jsonObj.getAsJsonObject("bundle"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApp.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApp>() {
           @Override
           public void write(JsonWriter out, CreateApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApp read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateApp instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateApp
  * @throws IOException if the JSON string is invalid with respect to CreateApp
  */
  public static CreateApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApp.class);
  }

 /**
  * Convert an instance of CreateApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

