/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NotificationJobData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NotificationRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NotificationRequest {
  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "templateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_TO_USER_IDS = "toUserIds";
  @SerializedName(SERIALIZED_NAME_TO_USER_IDS)
  private List<String> toUserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_DATA = "jobData";
  @SerializedName(SERIALIZED_NAME_JOB_DATA)
  private NotificationJobData jobData;

  public static final String SERIALIZED_NAME_ATS_NAME = "atsName";
  @SerializedName(SERIALIZED_NAME_ATS_NAME)
  private String atsName;

  public static final String SERIALIZED_NAME_ORG_NAME = "orgName";
  @SerializedName(SERIALIZED_NAME_ORG_NAME)
  private String orgName;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_SYNC_SUMMARY = "syncSummary";
  @SerializedName(SERIALIZED_NAME_SYNC_SUMMARY)
  private String syncSummary;

  public static final String SERIALIZED_NAME_PROCESS_ID = "processId";
  @SerializedName(SERIALIZED_NAME_PROCESS_ID)
  private String processId;

  public NotificationRequest() {
  }

  public NotificationRequest templateName(String templateName) {
    
    
    
    
    this.templateName = templateName;
    return this;
  }

   /**
   * name of message template
   * @return templateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "name of message template")

  public String getTemplateName() {
    return templateName;
  }


  public void setTemplateName(String templateName) {
    
    
    
    this.templateName = templateName;
  }


  public NotificationRequest toUserIds(List<String> toUserIds) {
    
    
    
    
    this.toUserIds = toUserIds;
    return this;
  }

  public NotificationRequest addToUserIdsItem(String toUserIdsItem) {
    this.toUserIds.add(toUserIdsItem);
    return this;
  }

   /**
   * user ids for users to be notified
   * @return toUserIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "user ids for users to be notified")

  public List<String> getToUserIds() {
    return toUserIds;
  }


  public void setToUserIds(List<String> toUserIds) {
    
    
    
    this.toUserIds = toUserIds;
  }


  public NotificationRequest jobData(NotificationJobData jobData) {
    
    
    
    
    this.jobData = jobData;
    return this;
  }

   /**
   * Get jobData
   * @return jobData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NotificationJobData getJobData() {
    return jobData;
  }


  public void setJobData(NotificationJobData jobData) {
    
    
    
    this.jobData = jobData;
  }


  public NotificationRequest atsName(String atsName) {
    
    
    
    
    this.atsName = atsName;
    return this;
  }

   /**
   * name of the ATS system
   * @return atsName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name of the ATS system")

  public String getAtsName() {
    return atsName;
  }


  public void setAtsName(String atsName) {
    
    
    
    this.atsName = atsName;
  }


  public NotificationRequest orgName(String orgName) {
    
    
    
    
    this.orgName = orgName;
    return this;
  }

   /**
   * name of the organization
   * @return orgName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name of the organization")

  public String getOrgName() {
    return orgName;
  }


  public void setOrgName(String orgName) {
    
    
    
    this.orgName = orgName;
  }


  public NotificationRequest userName(String userName) {
    
    
    
    
    this.userName = userName;
    return this;
  }

   /**
   * preferred name of the user
   * @return userName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "preferred name of the user")

  public String getUserName() {
    return userName;
  }


  public void setUserName(String userName) {
    
    
    
    this.userName = userName;
  }


  public NotificationRequest syncSummary(String syncSummary) {
    
    
    
    
    this.syncSummary = syncSummary;
    return this;
  }

   /**
   * summary of reason for email
   * @return syncSummary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "summary of reason for email")

  public String getSyncSummary() {
    return syncSummary;
  }


  public void setSyncSummary(String syncSummary) {
    
    
    
    this.syncSummary = syncSummary;
  }


  public NotificationRequest processId(String processId) {
    
    
    
    
    this.processId = processId;
    return this;
  }

   /**
   * id of the sync history process
   * @return processId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id of the sync history process")

  public String getProcessId() {
    return processId;
  }


  public void setProcessId(String processId) {
    
    
    
    this.processId = processId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NotificationRequest instance itself
   */
  public NotificationRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationRequest notificationRequest = (NotificationRequest) o;
    return Objects.equals(this.templateName, notificationRequest.templateName) &&
        Objects.equals(this.toUserIds, notificationRequest.toUserIds) &&
        Objects.equals(this.jobData, notificationRequest.jobData) &&
        Objects.equals(this.atsName, notificationRequest.atsName) &&
        Objects.equals(this.orgName, notificationRequest.orgName) &&
        Objects.equals(this.userName, notificationRequest.userName) &&
        Objects.equals(this.syncSummary, notificationRequest.syncSummary) &&
        Objects.equals(this.processId, notificationRequest.processId)&&
        Objects.equals(this.additionalProperties, notificationRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateName, toUserIds, jobData, atsName, orgName, userName, syncSummary, processId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationRequest {\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    toUserIds: ").append(toIndentedString(toUserIds)).append("\n");
    sb.append("    jobData: ").append(toIndentedString(jobData)).append("\n");
    sb.append("    atsName: ").append(toIndentedString(atsName)).append("\n");
    sb.append("    orgName: ").append(toIndentedString(orgName)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    syncSummary: ").append(toIndentedString(syncSummary)).append("\n");
    sb.append("    processId: ").append(toIndentedString(processId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("templateName");
    openapiFields.add("toUserIds");
    openapiFields.add("jobData");
    openapiFields.add("atsName");
    openapiFields.add("orgName");
    openapiFields.add("userName");
    openapiFields.add("syncSummary");
    openapiFields.add("processId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("templateName");
    openapiRequiredFields.add("toUserIds");
    openapiRequiredFields.add("jobData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NotificationRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NotificationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationRequest is not found in the empty JSON string", NotificationRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotificationRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("templateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("toUserIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("toUserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `toUserIds` to be an array in the JSON string but got `%s`", jsonObj.get("toUserIds").toString()));
      }
      // validate the required field `jobData`
      NotificationJobData.validateJsonObject(jsonObj.getAsJsonObject("jobData"));
      if ((jsonObj.get("atsName") != null && !jsonObj.get("atsName").isJsonNull()) && !jsonObj.get("atsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsName").toString()));
      }
      if ((jsonObj.get("orgName") != null && !jsonObj.get("orgName").isJsonNull()) && !jsonObj.get("orgName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgName").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      if ((jsonObj.get("syncSummary") != null && !jsonObj.get("syncSummary").isJsonNull()) && !jsonObj.get("syncSummary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncSummary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncSummary").toString()));
      }
      if ((jsonObj.get("processId") != null && !jsonObj.get("processId").isJsonNull()) && !jsonObj.get("processId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationRequest>() {
           @Override
           public void write(JsonWriter out, NotificationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NotificationRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NotificationRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationRequest
  * @throws IOException if the JSON string is invalid with respect to NotificationRequest
  */
  public static NotificationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationRequest.class);
  }

 /**
  * Convert an instance of NotificationRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

