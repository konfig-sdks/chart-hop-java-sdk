/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewMetadata
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewMetadata {
  public static final String SERIALIZED_NAME_COMP_REVIEW_ID = "compReviewId";
  @SerializedName(SERIALIZED_NAME_COMP_REVIEW_ID)
  private String compReviewId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_ELIGIBLE_EMPLOYEES = "eligibleEmployees";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_EMPLOYEES)
  private Integer eligibleEmployees;

  public static final String SERIALIZED_NAME_ELIGIBLE_EMPLOYEES_FILTER = "eligibleEmployeesFilter";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_EMPLOYEES_FILTER)
  private String eligibleEmployeesFilter;

  public static final String SERIALIZED_NAME_INELIGIBLE_EMPLOYEES = "ineligibleEmployees";
  @SerializedName(SERIALIZED_NAME_INELIGIBLE_EMPLOYEES)
  private Integer ineligibleEmployees;

  public static final String SERIALIZED_NAME_INELIGIBLE_EMPLOYEES_FILTER = "ineligibleEmployeesFilter";
  @SerializedName(SERIALIZED_NAME_INELIGIBLE_EMPLOYEES_FILTER)
  private String ineligibleEmployeesFilter;

  public static final String SERIALIZED_NAME_APPROVERS = "approvers";
  @SerializedName(SERIALIZED_NAME_APPROVERS)
  private Integer approvers;

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private Integer reviewers;

  public static final String SERIALIZED_NAME_COLLABORATORS = "collaborators";
  @SerializedName(SERIALIZED_NAME_COLLABORATORS)
  private Integer collaborators;

  public CompReviewMetadata() {
  }

  public CompReviewMetadata compReviewId(String compReviewId) {
    
    
    
    
    this.compReviewId = compReviewId;
    return this;
  }

   /**
   * comp review id
   * @return compReviewId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "comp review id")

  public String getCompReviewId() {
    return compReviewId;
  }


  public void setCompReviewId(String compReviewId) {
    
    
    
    this.compReviewId = compReviewId;
  }


  public CompReviewMetadata orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id (empty if built-in)
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent organization id (empty if built-in)")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public CompReviewMetadata eligibleEmployees(Integer eligibleEmployees) {
    
    
    
    
    this.eligibleEmployees = eligibleEmployees;
    return this;
  }

   /**
   * count of employees eligible for the comp review
   * @return eligibleEmployees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "count of employees eligible for the comp review")

  public Integer getEligibleEmployees() {
    return eligibleEmployees;
  }


  public void setEligibleEmployees(Integer eligibleEmployees) {
    
    
    
    this.eligibleEmployees = eligibleEmployees;
  }


  public CompReviewMetadata eligibleEmployeesFilter(String eligibleEmployeesFilter) {
    
    
    
    
    this.eligibleEmployeesFilter = eligibleEmployeesFilter;
    return this;
  }

   /**
   * filter to view eligible employees on the datasheet
   * @return eligibleEmployeesFilter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "filter to view eligible employees on the datasheet")

  public String getEligibleEmployeesFilter() {
    return eligibleEmployeesFilter;
  }


  public void setEligibleEmployeesFilter(String eligibleEmployeesFilter) {
    
    
    
    this.eligibleEmployeesFilter = eligibleEmployeesFilter;
  }


  public CompReviewMetadata ineligibleEmployees(Integer ineligibleEmployees) {
    
    
    
    
    this.ineligibleEmployees = ineligibleEmployees;
    return this;
  }

   /**
   * count of employees ineligible for the comp review
   * @return ineligibleEmployees
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "count of employees ineligible for the comp review")

  public Integer getIneligibleEmployees() {
    return ineligibleEmployees;
  }


  public void setIneligibleEmployees(Integer ineligibleEmployees) {
    
    
    
    this.ineligibleEmployees = ineligibleEmployees;
  }


  public CompReviewMetadata ineligibleEmployeesFilter(String ineligibleEmployeesFilter) {
    
    
    
    
    this.ineligibleEmployeesFilter = ineligibleEmployeesFilter;
    return this;
  }

   /**
   * filter to view ineligible employees on the datasheet
   * @return ineligibleEmployeesFilter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "filter to view ineligible employees on the datasheet")

  public String getIneligibleEmployeesFilter() {
    return ineligibleEmployeesFilter;
  }


  public void setIneligibleEmployeesFilter(String ineligibleEmployeesFilter) {
    
    
    
    this.ineligibleEmployeesFilter = ineligibleEmployeesFilter;
  }


  public CompReviewMetadata approvers(Integer approvers) {
    
    
    
    
    this.approvers = approvers;
    return this;
  }

   /**
   * count of final approvers
   * @return approvers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "count of final approvers")

  public Integer getApprovers() {
    return approvers;
  }


  public void setApprovers(Integer approvers) {
    
    
    
    this.approvers = approvers;
  }


  public CompReviewMetadata reviewers(Integer reviewers) {
    
    
    
    
    this.reviewers = reviewers;
    return this;
  }

   /**
   * count of reviewers in the comp review
   * @return reviewers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "count of reviewers in the comp review")

  public Integer getReviewers() {
    return reviewers;
  }


  public void setReviewers(Integer reviewers) {
    
    
    
    this.reviewers = reviewers;
  }


  public CompReviewMetadata collaborators(Integer collaborators) {
    
    
    
    
    this.collaborators = collaborators;
    return this;
  }

   /**
   * count of collaborators in the comp review
   * @return collaborators
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "count of collaborators in the comp review")

  public Integer getCollaborators() {
    return collaborators;
  }


  public void setCollaborators(Integer collaborators) {
    
    
    
    this.collaborators = collaborators;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewMetadata instance itself
   */
  public CompReviewMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewMetadata compReviewMetadata = (CompReviewMetadata) o;
    return Objects.equals(this.compReviewId, compReviewMetadata.compReviewId) &&
        Objects.equals(this.orgId, compReviewMetadata.orgId) &&
        Objects.equals(this.eligibleEmployees, compReviewMetadata.eligibleEmployees) &&
        Objects.equals(this.eligibleEmployeesFilter, compReviewMetadata.eligibleEmployeesFilter) &&
        Objects.equals(this.ineligibleEmployees, compReviewMetadata.ineligibleEmployees) &&
        Objects.equals(this.ineligibleEmployeesFilter, compReviewMetadata.ineligibleEmployeesFilter) &&
        Objects.equals(this.approvers, compReviewMetadata.approvers) &&
        Objects.equals(this.reviewers, compReviewMetadata.reviewers) &&
        Objects.equals(this.collaborators, compReviewMetadata.collaborators)&&
        Objects.equals(this.additionalProperties, compReviewMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compReviewId, orgId, eligibleEmployees, eligibleEmployeesFilter, ineligibleEmployees, ineligibleEmployeesFilter, approvers, reviewers, collaborators, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewMetadata {\n");
    sb.append("    compReviewId: ").append(toIndentedString(compReviewId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    eligibleEmployees: ").append(toIndentedString(eligibleEmployees)).append("\n");
    sb.append("    eligibleEmployeesFilter: ").append(toIndentedString(eligibleEmployeesFilter)).append("\n");
    sb.append("    ineligibleEmployees: ").append(toIndentedString(ineligibleEmployees)).append("\n");
    sb.append("    ineligibleEmployeesFilter: ").append(toIndentedString(ineligibleEmployeesFilter)).append("\n");
    sb.append("    approvers: ").append(toIndentedString(approvers)).append("\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    collaborators: ").append(toIndentedString(collaborators)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("compReviewId");
    openapiFields.add("orgId");
    openapiFields.add("eligibleEmployees");
    openapiFields.add("eligibleEmployeesFilter");
    openapiFields.add("ineligibleEmployees");
    openapiFields.add("ineligibleEmployeesFilter");
    openapiFields.add("approvers");
    openapiFields.add("reviewers");
    openapiFields.add("collaborators");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("compReviewId");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("eligibleEmployees");
    openapiRequiredFields.add("eligibleEmployeesFilter");
    openapiRequiredFields.add("ineligibleEmployees");
    openapiRequiredFields.add("ineligibleEmployeesFilter");
    openapiRequiredFields.add("approvers");
    openapiRequiredFields.add("reviewers");
    openapiRequiredFields.add("collaborators");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewMetadata is not found in the empty JSON string", CompReviewMetadata.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("compReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compReviewId").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("eligibleEmployeesFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eligibleEmployeesFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eligibleEmployeesFilter").toString()));
      }
      if (!jsonObj.get("ineligibleEmployeesFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ineligibleEmployeesFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ineligibleEmployeesFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewMetadata>() {
           @Override
           public void write(JsonWriter out, CompReviewMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewMetadata
  * @throws IOException if the JSON string is invalid with respect to CompReviewMetadata
  */
  public static CompReviewMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewMetadata.class);
  }

 /**
  * Convert an instance of CompReviewMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

