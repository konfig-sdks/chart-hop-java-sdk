/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Comp;
import com.konfigthis.client.model.GroupAssignment;
import com.konfigthis.client.model.JobRelationship;
import com.konfigthis.client.model.UpcomingChange;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Job
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Job {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_COMP = "comp";
  @SerializedName(SERIALIZED_NAME_COMP)
  private Comp comp;

  /**
   * view sensitive of the job while open
   */
  @JsonAdapter(SensitiveEnum.Adapter.class)
 public enum SensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    SensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SensitiveEnum fromValue(String value) {
      for (SensitiveEnum b : SensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private SensitiveEnum sensitive;

  public static final String SERIALIZED_NAME_RELATIONSHIPS = "relationships";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIPS)
  private Set<JobRelationship> relationships = null;

  public static final String SERIALIZED_NAME_MANAGER_IDS = "managerIds";
  @SerializedName(SERIALIZED_NAME_MANAGER_IDS)
  private List<String> managerIds = null;

  public static final String SERIALIZED_NAME_GROUP_IDS = "groupIds";
  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  private List<String> groupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_ASSIGNMENTS = "groupAssignments";
  @SerializedName(SERIALIZED_NAME_GROUP_ASSIGNMENTS)
  private Set<GroupAssignment> groupAssignments = new LinkedHashSet<>();

  /**
   * guidance on placement
   */
  @JsonAdapter(PlacementEnum.Adapter.class)
 public enum PlacementEnum {
    NORMAL("NORMAL"),
    
    ASSISTANT("ASSISTANT");

    private String value;

    PlacementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlacementEnum fromValue(String value) {
      for (PlacementEnum b : PlacementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlacementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlacementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlacementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlacementEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLACEMENT = "placement";
  @SerializedName(SERIALIZED_NAME_PLACEMENT)
  private PlacementEnum placement;

  /**
   * employment status
   */
  @JsonAdapter(EmploymentEnum.Adapter.class)
 public enum EmploymentEnum {
    FULL("FULL"),
    
    PART("PART"),
    
    TEMP("TEMP"),
    
    CONTRACT("CONTRACT"),
    
    INTERN("INTERN"),
    
    EXPAT("EXPAT");

    private String value;

    EmploymentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmploymentEnum fromValue(String value) {
      for (EmploymentEnum b : EmploymentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmploymentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmploymentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmploymentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmploymentEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYMENT = "employment";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT)
  private EmploymentEnum employment;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Map<String, Object> fields = new HashMap<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_START_DATE_PLANNED = "startDatePlanned";
  @SerializedName(SERIALIZED_NAME_START_DATE_PLANNED)
  private LocalDate startDatePlanned;

  public static final String SERIALIZED_NAME_PERSON_START_DATE = "personStartDate";
  @SerializedName(SERIALIZED_NAME_PERSON_START_DATE)
  private LocalDate personStartDate;

  public static final String SERIALIZED_NAME_PERSON_END_DATE = "personEndDate";
  @SerializedName(SERIALIZED_NAME_PERSON_END_DATE)
  private LocalDate personEndDate;

  public static final String SERIALIZED_NAME_PERSON_JOB_START_DATE = "personJobStartDate";
  @SerializedName(SERIALIZED_NAME_PERSON_JOB_START_DATE)
  private LocalDate personJobStartDate;

  public static final String SERIALIZED_NAME_PERSON_JOB_END_DATE = "personJobEndDate";
  @SerializedName(SERIALIZED_NAME_PERSON_JOB_END_DATE)
  private LocalDate personJobEndDate;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_UPCOMING = "upcoming";
  @SerializedName(SERIALIZED_NAME_UPCOMING)
  private List<UpcomingChange> upcoming = null;

  public static final String SERIALIZED_NAME_SCENARIO_ID = "scenarioId";
  @SerializedName(SERIALIZED_NAME_SCENARIO_ID)
  private String scenarioId;

  public static final String SERIALIZED_NAME_BACKFILL_PERSON_ID = "backfillPersonId";
  @SerializedName(SERIALIZED_NAME_BACKFILL_PERSON_ID)
  private String backfillPersonId;

  public Job() {
  }

  public Job title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * job title
   * @return title
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Senior Engineer", required = true, value = "job title")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Job jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * globally unique job id
   * @return jobId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique job id")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public Job orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public Job comp(Comp comp) {
    
    
    
    
    this.comp = comp;
    return this;
  }

   /**
   * Get comp
   * @return comp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Comp getComp() {
    return comp;
  }


  public void setComp(Comp comp) {
    
    
    
    this.comp = comp;
  }


  public Job sensitive(SensitiveEnum sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * view sensitive of the job while open
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "view sensitive of the job while open")

  public SensitiveEnum getSensitive() {
    return sensitive;
  }


  public void setSensitive(SensitiveEnum sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public Job relationships(Set<JobRelationship> relationships) {
    
    
    
    
    this.relationships = relationships;
    return this;
  }

  public Job addRelationshipsItem(JobRelationship relationshipsItem) {
    if (this.relationships == null) {
      this.relationships = new LinkedHashSet<>();
    }
    this.relationships.add(relationshipsItem);
    return this;
  }

   /**
   * relationship to other jobs
   * @return relationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "relationship to other jobs")

  public Set<JobRelationship> getRelationships() {
    return relationships;
  }


  public void setRelationships(Set<JobRelationship> relationships) {
    
    
    
    this.relationships = relationships;
  }


  public Job managerIds(List<String> managerIds) {
    
    
    
    
    this.managerIds = managerIds;
    return this;
  }

  public Job addManagerIdsItem(String managerIdsItem) {
    if (this.managerIds == null) {
      this.managerIds = new ArrayList<>();
    }
    this.managerIds.add(managerIdsItem);
    return this;
  }

   /**
   * list of managers, from immediate manager upwards
   * @return managerIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of managers, from immediate manager upwards")

  public List<String> getManagerIds() {
    return managerIds;
  }


  public void setManagerIds(List<String> managerIds) {
    
    
    
    this.managerIds = managerIds;
  }


  public Job groupIds(List<String> groupIds) {
    
    
    
    
    this.groupIds = groupIds;
    return this;
  }

  public Job addGroupIdsItem(String groupIdsItem) {
    this.groupIds.add(groupIdsItem);
    return this;
  }

   /**
   * groups that this job is a member of
   * @return groupIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "groups that this job is a member of")

  public List<String> getGroupIds() {
    return groupIds;
  }


  public void setGroupIds(List<String> groupIds) {
    
    
    
    this.groupIds = groupIds;
  }


  public Job groupAssignments(Set<GroupAssignment> groupAssignments) {
    
    
    
    
    this.groupAssignments = groupAssignments;
    return this;
  }

  public Job addGroupAssignmentsItem(GroupAssignment groupAssignmentsItem) {
    this.groupAssignments.add(groupAssignmentsItem);
    return this;
  }

   /**
   * tracked group assignments that this job is a member or lead of
   * @return groupAssignments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "tracked group assignments that this job is a member or lead of")

  public Set<GroupAssignment> getGroupAssignments() {
    return groupAssignments;
  }


  public void setGroupAssignments(Set<GroupAssignment> groupAssignments) {
    
    
    
    this.groupAssignments = groupAssignments;
  }


  public Job placement(PlacementEnum placement) {
    
    
    
    
    this.placement = placement;
    return this;
  }

   /**
   * guidance on placement
   * @return placement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "guidance on placement")

  public PlacementEnum getPlacement() {
    return placement;
  }


  public void setPlacement(PlacementEnum placement) {
    
    
    
    this.placement = placement;
  }


  public Job employment(EmploymentEnum employment) {
    
    
    
    
    this.employment = employment;
    return this;
  }

   /**
   * employment status
   * @return employment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "employment status")

  public EmploymentEnum getEmployment() {
    return employment;
  }


  public void setEmployment(EmploymentEnum employment) {
    
    
    
    this.employment = employment;
  }


  public Job fields(Map<String, Object> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public Job putFieldsItem(String key, Object fieldsItem) {
    this.fields.put(key, fieldsItem);
    return this;
  }

   /**
   * fields containing custom data
   * @return fields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "fields containing custom data")

  public Map<String, Object> getFields() {
    return fields;
  }


  public void setFields(Map<String, Object> fields) {
    
    
    
    this.fields = fields;
  }


  public Job startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * for empty jobs, expected start date - for filled jobs, confirmed start date
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for empty jobs, expected start date - for filled jobs, confirmed start date")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Job startDatePlanned(LocalDate startDatePlanned) {
    
    
    
    
    this.startDatePlanned = startDatePlanned;
    return this;
  }

   /**
   * expected start date whether job is open or has been filled - doesn&#39;t change when job is filled
   * @return startDatePlanned
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "expected start date whether job is open or has been filled - doesn't change when job is filled")

  public LocalDate getStartDatePlanned() {
    return startDatePlanned;
  }


  public void setStartDatePlanned(LocalDate startDatePlanned) {
    
    
    
    this.startDatePlanned = startDatePlanned;
  }


  public Job personStartDate(LocalDate personStartDate) {
    
    
    
    
    this.personStartDate = personStartDate;
    return this;
  }

   /**
   * if personId is present, the first day of that person in the org after the latest departure (if any)
   * @return personStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if personId is present, the first day of that person in the org after the latest departure (if any)")

  public LocalDate getPersonStartDate() {
    return personStartDate;
  }


  public void setPersonStartDate(LocalDate personStartDate) {
    
    
    
    this.personStartDate = personStartDate;
  }


  public Job personEndDate(LocalDate personEndDate) {
    
    
    
    
    this.personEndDate = personEndDate;
    return this;
  }

   /**
   * if personId is present and the person is departing, the last day of that person in the org
   * @return personEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if personId is present and the person is departing, the last day of that person in the org")

  public LocalDate getPersonEndDate() {
    return personEndDate;
  }


  public void setPersonEndDate(LocalDate personEndDate) {
    
    
    
    this.personEndDate = personEndDate;
  }


  public Job personJobStartDate(LocalDate personJobStartDate) {
    
    
    
    
    this.personJobStartDate = personJobStartDate;
    return this;
  }

   /**
   * if personId is present, the first day of that person in the job
   * @return personJobStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if personId is present, the first day of that person in the job")

  public LocalDate getPersonJobStartDate() {
    return personJobStartDate;
  }


  public void setPersonJobStartDate(LocalDate personJobStartDate) {
    
    
    
    this.personJobStartDate = personJobStartDate;
  }


  public Job personJobEndDate(LocalDate personJobEndDate) {
    
    
    
    
    this.personJobEndDate = personJobEndDate;
    return this;
  }

   /**
   * if personId is present and the person is departing or moving out, the last day of that person in the job
   * @return personJobEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if personId is present and the person is departing or moving out, the last day of that person in the job")

  public LocalDate getPersonJobEndDate() {
    return personJobEndDate;
  }


  public void setPersonJobEndDate(LocalDate personJobEndDate) {
    
    
    
    this.personJobEndDate = personJobEndDate;
  }


  public Job personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * the person holding this job -- either currently in the job, or upcoming announced hire
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "the person holding this job -- either currently in the job, or upcoming announced hire")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public Job upcoming(List<UpcomingChange> upcoming) {
    
    
    
    
    this.upcoming = upcoming;
    return this;
  }

  public Job addUpcomingItem(UpcomingChange upcomingItem) {
    if (this.upcoming == null) {
      this.upcoming = new ArrayList<>();
    }
    this.upcoming.add(upcomingItem);
    return this;
  }

   /**
   * if a HIRE, MOVE, or DEPART are upcoming, the details on those changes - should only include id, type, date, announceDate, personId
   * @return upcoming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if a HIRE, MOVE, or DEPART are upcoming, the details on those changes - should only include id, type, date, announceDate, personId")

  public List<UpcomingChange> getUpcoming() {
    return upcoming;
  }


  public void setUpcoming(List<UpcomingChange> upcoming) {
    
    
    
    this.upcoming = upcoming;
  }


  public Job scenarioId(String scenarioId) {
    
    
    
    
    this.scenarioId = scenarioId;
    return this;
  }

   /**
   * scenario that the job was created in (null if job is on primary timeline)
   * @return scenarioId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "scenario that the job was created in (null if job is on primary timeline)")

  public String getScenarioId() {
    return scenarioId;
  }


  public void setScenarioId(String scenarioId) {
    
    
    
    this.scenarioId = scenarioId;
  }


  public Job backfillPersonId(String backfillPersonId) {
    
    
    
    
    this.backfillPersonId = backfillPersonId;
    return this;
  }

   /**
   * the person who most recently held the job, who this represents a backfill for
   * @return backfillPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "the person who most recently held the job, who this represents a backfill for")

  public String getBackfillPersonId() {
    return backfillPersonId;
  }


  public void setBackfillPersonId(String backfillPersonId) {
    
    
    
    this.backfillPersonId = backfillPersonId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Job instance itself
   */
  public Job putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.title, job.title) &&
        Objects.equals(this.jobId, job.jobId) &&
        Objects.equals(this.orgId, job.orgId) &&
        Objects.equals(this.comp, job.comp) &&
        Objects.equals(this.sensitive, job.sensitive) &&
        Objects.equals(this.relationships, job.relationships) &&
        Objects.equals(this.managerIds, job.managerIds) &&
        Objects.equals(this.groupIds, job.groupIds) &&
        Objects.equals(this.groupAssignments, job.groupAssignments) &&
        Objects.equals(this.placement, job.placement) &&
        Objects.equals(this.employment, job.employment) &&
        Objects.equals(this.fields, job.fields) &&
        Objects.equals(this.startDate, job.startDate) &&
        Objects.equals(this.startDatePlanned, job.startDatePlanned) &&
        Objects.equals(this.personStartDate, job.personStartDate) &&
        Objects.equals(this.personEndDate, job.personEndDate) &&
        Objects.equals(this.personJobStartDate, job.personJobStartDate) &&
        Objects.equals(this.personJobEndDate, job.personJobEndDate) &&
        Objects.equals(this.personId, job.personId) &&
        Objects.equals(this.upcoming, job.upcoming) &&
        Objects.equals(this.scenarioId, job.scenarioId) &&
        Objects.equals(this.backfillPersonId, job.backfillPersonId)&&
        Objects.equals(this.additionalProperties, job.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, jobId, orgId, comp, sensitive, relationships, managerIds, groupIds, groupAssignments, placement, employment, fields, startDate, startDatePlanned, personStartDate, personEndDate, personJobStartDate, personJobEndDate, personId, upcoming, scenarioId, backfillPersonId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    comp: ").append(toIndentedString(comp)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    managerIds: ").append(toIndentedString(managerIds)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("    groupAssignments: ").append(toIndentedString(groupAssignments)).append("\n");
    sb.append("    placement: ").append(toIndentedString(placement)).append("\n");
    sb.append("    employment: ").append(toIndentedString(employment)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startDatePlanned: ").append(toIndentedString(startDatePlanned)).append("\n");
    sb.append("    personStartDate: ").append(toIndentedString(personStartDate)).append("\n");
    sb.append("    personEndDate: ").append(toIndentedString(personEndDate)).append("\n");
    sb.append("    personJobStartDate: ").append(toIndentedString(personJobStartDate)).append("\n");
    sb.append("    personJobEndDate: ").append(toIndentedString(personJobEndDate)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    upcoming: ").append(toIndentedString(upcoming)).append("\n");
    sb.append("    scenarioId: ").append(toIndentedString(scenarioId)).append("\n");
    sb.append("    backfillPersonId: ").append(toIndentedString(backfillPersonId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("jobId");
    openapiFields.add("orgId");
    openapiFields.add("comp");
    openapiFields.add("sensitive");
    openapiFields.add("relationships");
    openapiFields.add("managerIds");
    openapiFields.add("groupIds");
    openapiFields.add("groupAssignments");
    openapiFields.add("placement");
    openapiFields.add("employment");
    openapiFields.add("fields");
    openapiFields.add("startDate");
    openapiFields.add("startDatePlanned");
    openapiFields.add("personStartDate");
    openapiFields.add("personEndDate");
    openapiFields.add("personJobStartDate");
    openapiFields.add("personJobEndDate");
    openapiFields.add("personId");
    openapiFields.add("upcoming");
    openapiFields.add("scenarioId");
    openapiFields.add("backfillPersonId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("jobId");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("groupIds");
    openapiRequiredFields.add("groupAssignments");
    openapiRequiredFields.add("fields");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Job
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Job.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      // validate the optional field `comp`
      if (jsonObj.get("comp") != null && !jsonObj.get("comp").isJsonNull()) {
        Comp.validateJsonObject(jsonObj.getAsJsonObject("comp"));
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if (jsonObj.get("relationships") != null && !jsonObj.get("relationships").isJsonNull()) {
        JsonArray jsonArrayrelationships = jsonObj.getAsJsonArray("relationships");
        if (jsonArrayrelationships != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relationships").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relationships` to be an array in the JSON string but got `%s`", jsonObj.get("relationships").toString()));
          }

          // validate the optional field `relationships` (array)
          for (int i = 0; i < jsonArrayrelationships.size(); i++) {
            JobRelationship.validateJsonObject(jsonArrayrelationships.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("managerIds") != null && !jsonObj.get("managerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `managerIds` to be an array in the JSON string but got `%s`", jsonObj.get("managerIds").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("groupIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("groupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupIds` to be an array in the JSON string but got `%s`", jsonObj.get("groupIds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groupAssignments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("groupAssignments").toString()));
      }

      JsonArray jsonArraygroupAssignments = jsonObj.getAsJsonArray("groupAssignments");
      // validate the required field `groupAssignments` (array)
      for (int i = 0; i < jsonArraygroupAssignments.size(); i++) {
        GroupAssignment.validateJsonObject(jsonArraygroupAssignments.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("placement") != null && !jsonObj.get("placement").isJsonNull()) && !jsonObj.get("placement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placement").toString()));
      }
      if ((jsonObj.get("employment") != null && !jsonObj.get("employment").isJsonNull()) && !jsonObj.get("employment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employment").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if (jsonObj.get("upcoming") != null && !jsonObj.get("upcoming").isJsonNull()) {
        JsonArray jsonArrayupcoming = jsonObj.getAsJsonArray("upcoming");
        if (jsonArrayupcoming != null) {
          // ensure the json data is an array
          if (!jsonObj.get("upcoming").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `upcoming` to be an array in the JSON string but got `%s`", jsonObj.get("upcoming").toString()));
          }

          // validate the optional field `upcoming` (array)
          for (int i = 0; i < jsonArrayupcoming.size(); i++) {
            UpcomingChange.validateJsonObject(jsonArrayupcoming.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("scenarioId") != null && !jsonObj.get("scenarioId").isJsonNull()) && !jsonObj.get("scenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioId").toString()));
      }
      if ((jsonObj.get("backfillPersonId") != null && !jsonObj.get("backfillPersonId").isJsonNull()) && !jsonObj.get("backfillPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backfillPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backfillPersonId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Job instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Job
  * @throws IOException if the JSON string is invalid with respect to Job
  */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

 /**
  * Convert an instance of Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

