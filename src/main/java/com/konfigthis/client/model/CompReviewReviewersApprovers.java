/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewReviewersApprovers
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewReviewersApprovers {
  /**
   * Which individuals are included as reviewers
   */
  @JsonAdapter(ReviewersEnum.Adapter.class)
 public enum ReviewersEnum {
    ALL_MANAGERS("ALL_MANAGERS"),
    
    ONLY_SPECIFIC_LEVEL("ONLY_SPECIFIC_LEVEL"),
    
    ONLY_SPECIFIC_TITLES("ONLY_SPECIFIC_TITLES"),
    
    CUSTOM("CUSTOM");

    private String value;

    ReviewersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReviewersEnum fromValue(String value) {
      for (ReviewersEnum b : ReviewersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReviewersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReviewersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReviewersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReviewersEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REVIEWERS = "reviewers";
  @SerializedName(SERIALIZED_NAME_REVIEWERS)
  private ReviewersEnum reviewers;

  public static final String SERIALIZED_NAME_REVIEWER_LEVELS = "reviewerLevels";
  @SerializedName(SERIALIZED_NAME_REVIEWER_LEVELS)
  private List<Integer> reviewerLevels = null;

  public static final String SERIALIZED_NAME_REVIEWER_TITLES = "reviewerTitles";
  @SerializedName(SERIALIZED_NAME_REVIEWER_TITLES)
  private List<String> reviewerTitles = null;

  public static final String SERIALIZED_NAME_REVIEWER_FILTER = "reviewerFilter";
  @SerializedName(SERIALIZED_NAME_REVIEWER_FILTER)
  private String reviewerFilter;

  public static final String SERIALIZED_NAME_EXCLUDED_REVIEWER_IDS = "excludedReviewerIds";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_REVIEWER_IDS)
  private Set<String> excludedReviewerIds = null;

  public static final String SERIALIZED_NAME_APPROVER_IDS = "approverIds";
  @SerializedName(SERIALIZED_NAME_APPROVER_IDS)
  private Set<String> approverIds = null;

  public CompReviewReviewersApprovers() {
  }

  public CompReviewReviewersApprovers reviewers(ReviewersEnum reviewers) {
    
    
    
    
    this.reviewers = reviewers;
    return this;
  }

   /**
   * Which individuals are included as reviewers
   * @return reviewers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Which individuals are included as reviewers")

  public ReviewersEnum getReviewers() {
    return reviewers;
  }


  public void setReviewers(ReviewersEnum reviewers) {
    
    
    
    this.reviewers = reviewers;
  }


  public CompReviewReviewersApprovers reviewerLevels(List<Integer> reviewerLevels) {
    
    
    
    
    this.reviewerLevels = reviewerLevels;
    return this;
  }

  public CompReviewReviewersApprovers addReviewerLevelsItem(Integer reviewerLevelsItem) {
    if (this.reviewerLevels == null) {
      this.reviewerLevels = new ArrayList<>();
    }
    this.reviewerLevels.add(reviewerLevelsItem);
    return this;
  }

   /**
   * Levels to be included if reviewers is only specific levels
   * @return reviewerLevels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Levels to be included if reviewers is only specific levels")

  public List<Integer> getReviewerLevels() {
    return reviewerLevels;
  }


  public void setReviewerLevels(List<Integer> reviewerLevels) {
    
    
    
    this.reviewerLevels = reviewerLevels;
  }


  public CompReviewReviewersApprovers reviewerTitles(List<String> reviewerTitles) {
    
    
    
    
    this.reviewerTitles = reviewerTitles;
    return this;
  }

  public CompReviewReviewersApprovers addReviewerTitlesItem(String reviewerTitlesItem) {
    if (this.reviewerTitles == null) {
      this.reviewerTitles = new ArrayList<>();
    }
    this.reviewerTitles.add(reviewerTitlesItem);
    return this;
  }

   /**
   * Titles to be included if reviewers is only specific titles
   * @return reviewerTitles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Titles to be included if reviewers is only specific titles")

  public List<String> getReviewerTitles() {
    return reviewerTitles;
  }


  public void setReviewerTitles(List<String> reviewerTitles) {
    
    
    
    this.reviewerTitles = reviewerTitles;
  }


  public CompReviewReviewersApprovers reviewerFilter(String reviewerFilter) {
    
    
    
    
    this.reviewerFilter = reviewerFilter;
    return this;
  }

   /**
   * Filter to be applied if reviewers is custom
   * @return reviewerFilter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter to be applied if reviewers is custom")

  public String getReviewerFilter() {
    return reviewerFilter;
  }


  public void setReviewerFilter(String reviewerFilter) {
    
    
    
    this.reviewerFilter = reviewerFilter;
  }


  public CompReviewReviewersApprovers excludedReviewerIds(Set<String> excludedReviewerIds) {
    
    
    
    
    this.excludedReviewerIds = excludedReviewerIds;
    return this;
  }

  public CompReviewReviewersApprovers addExcludedReviewerIdsItem(String excludedReviewerIdsItem) {
    if (this.excludedReviewerIds == null) {
      this.excludedReviewerIds = new LinkedHashSet<>();
    }
    this.excludedReviewerIds.add(excludedReviewerIdsItem);
    return this;
  }

   /**
   * Job ids of individuals to exclude from the review
   * @return excludedReviewerIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Job ids of individuals to exclude from the review")

  public Set<String> getExcludedReviewerIds() {
    return excludedReviewerIds;
  }


  public void setExcludedReviewerIds(Set<String> excludedReviewerIds) {
    
    
    
    this.excludedReviewerIds = excludedReviewerIds;
  }


  public CompReviewReviewersApprovers approverIds(Set<String> approverIds) {
    
    
    
    
    this.approverIds = approverIds;
    return this;
  }

  public CompReviewReviewersApprovers addApproverIdsItem(String approverIdsItem) {
    if (this.approverIds == null) {
      this.approverIds = new LinkedHashSet<>();
    }
    this.approverIds.add(approverIdsItem);
    return this;
  }

   /**
   * Person ids of employees who will final approve
   * @return approverIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Person ids of employees who will final approve")

  public Set<String> getApproverIds() {
    return approverIds;
  }


  public void setApproverIds(Set<String> approverIds) {
    
    
    
    this.approverIds = approverIds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewReviewersApprovers instance itself
   */
  public CompReviewReviewersApprovers putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewReviewersApprovers compReviewReviewersApprovers = (CompReviewReviewersApprovers) o;
    return Objects.equals(this.reviewers, compReviewReviewersApprovers.reviewers) &&
        Objects.equals(this.reviewerLevels, compReviewReviewersApprovers.reviewerLevels) &&
        Objects.equals(this.reviewerTitles, compReviewReviewersApprovers.reviewerTitles) &&
        Objects.equals(this.reviewerFilter, compReviewReviewersApprovers.reviewerFilter) &&
        Objects.equals(this.excludedReviewerIds, compReviewReviewersApprovers.excludedReviewerIds) &&
        Objects.equals(this.approverIds, compReviewReviewersApprovers.approverIds)&&
        Objects.equals(this.additionalProperties, compReviewReviewersApprovers.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reviewers, reviewerLevels, reviewerTitles, reviewerFilter, excludedReviewerIds, approverIds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewReviewersApprovers {\n");
    sb.append("    reviewers: ").append(toIndentedString(reviewers)).append("\n");
    sb.append("    reviewerLevels: ").append(toIndentedString(reviewerLevels)).append("\n");
    sb.append("    reviewerTitles: ").append(toIndentedString(reviewerTitles)).append("\n");
    sb.append("    reviewerFilter: ").append(toIndentedString(reviewerFilter)).append("\n");
    sb.append("    excludedReviewerIds: ").append(toIndentedString(excludedReviewerIds)).append("\n");
    sb.append("    approverIds: ").append(toIndentedString(approverIds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reviewers");
    openapiFields.add("reviewerLevels");
    openapiFields.add("reviewerTitles");
    openapiFields.add("reviewerFilter");
    openapiFields.add("excludedReviewerIds");
    openapiFields.add("approverIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reviewers");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewReviewersApprovers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewReviewersApprovers.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewReviewersApprovers is not found in the empty JSON string", CompReviewReviewersApprovers.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewReviewersApprovers.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("reviewers").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewers` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reviewerLevels") != null && !jsonObj.get("reviewerLevels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerLevels` to be an array in the JSON string but got `%s`", jsonObj.get("reviewerLevels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reviewerTitles") != null && !jsonObj.get("reviewerTitles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerTitles` to be an array in the JSON string but got `%s`", jsonObj.get("reviewerTitles").toString()));
      }
      if ((jsonObj.get("reviewerFilter") != null && !jsonObj.get("reviewerFilter").isJsonNull()) && !jsonObj.get("reviewerFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewerFilter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedReviewerIds") != null && !jsonObj.get("excludedReviewerIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedReviewerIds` to be an array in the JSON string but got `%s`", jsonObj.get("excludedReviewerIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("approverIds") != null && !jsonObj.get("approverIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `approverIds` to be an array in the JSON string but got `%s`", jsonObj.get("approverIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewReviewersApprovers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewReviewersApprovers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewReviewersApprovers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewReviewersApprovers.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewReviewersApprovers>() {
           @Override
           public void write(JsonWriter out, CompReviewReviewersApprovers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewReviewersApprovers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewReviewersApprovers instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewReviewersApprovers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewReviewersApprovers
  * @throws IOException if the JSON string is invalid with respect to CompReviewReviewersApprovers
  */
  public static CompReviewReviewersApprovers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewReviewersApprovers.class);
  }

 /**
  * Convert an instance of CompReviewReviewersApprovers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

