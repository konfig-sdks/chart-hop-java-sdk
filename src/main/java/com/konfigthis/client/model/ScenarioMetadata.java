/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CostImpact;
import com.konfigthis.client.model.ResultsAccess;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ScenarioMetadata
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ScenarioMetadata {
  public static final String SERIALIZED_NAME_SCENARIO_ID = "scenarioId";
  @SerializedName(SERIALIZED_NAME_SCENARIO_ID)
  private String scenarioId;

  public static final String SERIALIZED_NAME_CHANGE_COUNT = "changeCount";
  @SerializedName(SERIALIZED_NAME_CHANGE_COUNT)
  private Integer changeCount;

  public static final String SERIALIZED_NAME_JOB_COUNT = "jobCount";
  @SerializedName(SERIALIZED_NAME_JOB_COUNT)
  private Integer jobCount;

  public static final String SERIALIZED_NAME_ACCESS = "access";
  @SerializedName(SERIALIZED_NAME_ACCESS)
  private List<ResultsAccess> access = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAN_CHANGE = "canChange";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE)
  private Boolean canChange;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private CostImpact cost;

  public static final String SERIALIZED_NAME_CALC_END_AT = "calcEndAt";
  @SerializedName(SERIALIZED_NAME_CALC_END_AT)
  private String calcEndAt;

  public ScenarioMetadata() {
  }

  public ScenarioMetadata scenarioId(String scenarioId) {
    
    
    
    
    this.scenarioId = scenarioId;
    return this;
  }

   /**
   * scenario id
   * @return scenarioId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "scenario id")

  public String getScenarioId() {
    return scenarioId;
  }


  public void setScenarioId(String scenarioId) {
    
    
    
    this.scenarioId = scenarioId;
  }


  public ScenarioMetadata changeCount(Integer changeCount) {
    
    
    
    
    this.changeCount = changeCount;
    return this;
  }

   /**
   * number of changes contained in scenario
   * @return changeCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "number of changes contained in scenario")

  public Integer getChangeCount() {
    return changeCount;
  }


  public void setChangeCount(Integer changeCount) {
    
    
    
    this.changeCount = changeCount;
  }


  public ScenarioMetadata jobCount(Integer jobCount) {
    
    
    
    
    this.jobCount = jobCount;
    return this;
  }

   /**
   * number of job changes contained in scenario
   * @return jobCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of job changes contained in scenario")

  public Integer getJobCount() {
    return jobCount;
  }


  public void setJobCount(Integer jobCount) {
    
    
    
    this.jobCount = jobCount;
  }


  public ScenarioMetadata access(List<ResultsAccess> access) {
    
    
    
    
    this.access = access;
    return this;
  }

  public ScenarioMetadata addAccessItem(ResultsAccess accessItem) {
    this.access.add(accessItem);
    return this;
  }

   /**
   * access information on the user for the entity
   * @return access
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "access information on the user for the entity")

  public List<ResultsAccess> getAccess() {
    return access;
  }


  public void setAccess(List<ResultsAccess> access) {
    
    
    
    this.access = access;
  }


  public ScenarioMetadata canChange(Boolean canChange) {
    
    
    
    
    this.canChange = canChange;
    return this;
  }

   /**
   * whether user can edit the scenario
   * @return canChange
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "whether user can edit the scenario")

  public Boolean getCanChange() {
    return canChange;
  }


  public void setCanChange(Boolean canChange) {
    
    
    
    this.canChange = canChange;
  }


  public ScenarioMetadata cost(CostImpact cost) {
    
    
    
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CostImpact getCost() {
    return cost;
  }


  public void setCost(CostImpact cost) {
    
    
    
    this.cost = cost;
  }


  public ScenarioMetadata calcEndAt(String calcEndAt) {
    
    
    
    
    this.calcEndAt = calcEndAt;
    return this;
  }

   /**
   * most recent summary calculation ended at timestamp
   * @return calcEndAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "most recent summary calculation ended at timestamp")

  public String getCalcEndAt() {
    return calcEndAt;
  }


  public void setCalcEndAt(String calcEndAt) {
    
    
    
    this.calcEndAt = calcEndAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ScenarioMetadata instance itself
   */
  public ScenarioMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScenarioMetadata scenarioMetadata = (ScenarioMetadata) o;
    return Objects.equals(this.scenarioId, scenarioMetadata.scenarioId) &&
        Objects.equals(this.changeCount, scenarioMetadata.changeCount) &&
        Objects.equals(this.jobCount, scenarioMetadata.jobCount) &&
        Objects.equals(this.access, scenarioMetadata.access) &&
        Objects.equals(this.canChange, scenarioMetadata.canChange) &&
        Objects.equals(this.cost, scenarioMetadata.cost) &&
        Objects.equals(this.calcEndAt, scenarioMetadata.calcEndAt)&&
        Objects.equals(this.additionalProperties, scenarioMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scenarioId, changeCount, jobCount, access, canChange, cost, calcEndAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScenarioMetadata {\n");
    sb.append("    scenarioId: ").append(toIndentedString(scenarioId)).append("\n");
    sb.append("    changeCount: ").append(toIndentedString(changeCount)).append("\n");
    sb.append("    jobCount: ").append(toIndentedString(jobCount)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("    canChange: ").append(toIndentedString(canChange)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    calcEndAt: ").append(toIndentedString(calcEndAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scenarioId");
    openapiFields.add("changeCount");
    openapiFields.add("jobCount");
    openapiFields.add("access");
    openapiFields.add("canChange");
    openapiFields.add("cost");
    openapiFields.add("calcEndAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scenarioId");
    openapiRequiredFields.add("changeCount");
    openapiRequiredFields.add("access");
    openapiRequiredFields.add("canChange");
    openapiRequiredFields.add("cost");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ScenarioMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ScenarioMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScenarioMetadata is not found in the empty JSON string", ScenarioMetadata.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScenarioMetadata.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("scenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("access").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `access` to be an array in the JSON string but got `%s`", jsonObj.get("access").toString()));
      }

      JsonArray jsonArrayaccess = jsonObj.getAsJsonArray("access");
      // validate the required field `access` (array)
      for (int i = 0; i < jsonArrayaccess.size(); i++) {
        ResultsAccess.validateJsonObject(jsonArrayaccess.get(i).getAsJsonObject());
      };
      // validate the required field `cost`
      CostImpact.validateJsonObject(jsonObj.getAsJsonObject("cost"));
      if ((jsonObj.get("calcEndAt") != null && !jsonObj.get("calcEndAt").isJsonNull()) && !jsonObj.get("calcEndAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calcEndAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calcEndAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScenarioMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScenarioMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScenarioMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScenarioMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ScenarioMetadata>() {
           @Override
           public void write(JsonWriter out, ScenarioMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ScenarioMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ScenarioMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScenarioMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScenarioMetadata
  * @throws IOException if the JSON string is invalid with respect to ScenarioMetadata
  */
  public static ScenarioMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScenarioMetadata.class);
  }

 /**
  * Convert an instance of ScenarioMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

