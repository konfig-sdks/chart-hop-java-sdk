/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FieldMapper
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FieldMapper {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CHARTHOP_FIELDS = "charthopFields";
  @SerializedName(SERIALIZED_NAME_CHARTHOP_FIELDS)
  private List<String> charthopFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMOTE_FIELDS = "remoteFields";
  @SerializedName(SERIALIZED_NAME_REMOTE_FIELDS)
  private List<String> remoteFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DEFAULT_CHARTHOP_VALUE = "defaultCharthopValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHARTHOP_VALUE)
  private String defaultCharthopValue;

  public static final String SERIALIZED_NAME_DEFAULT_REMOTE_VALUE = "defaultRemoteValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REMOTE_VALUE)
  private String defaultRemoteValue;

  public static final String SERIALIZED_NAME_DEFAULT_AMOUNT = "defaultAmount";
  @SerializedName(SERIALIZED_NAME_DEFAULT_AMOUNT)
  private Double defaultAmount;

  public static final String SERIALIZED_NAME_DEFAULT_CURRENCY = "defaultCurrency";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CURRENCY)
  private String defaultCurrency;

  public static final String SERIALIZED_NAME_TRANSFORM_FUNCTION = "transformFunction";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_FUNCTION)
  private String transformFunction;

  public static final String SERIALIZED_NAME_CHARTHOP_TO_REMOTE_TRANSFORM_FUNCTION = "charthopToRemoteTransformFunction";
  @SerializedName(SERIALIZED_NAME_CHARTHOP_TO_REMOTE_TRANSFORM_FUNCTION)
  private String charthopToRemoteTransformFunction;

  public static final String SERIALIZED_NAME_MAP = "map";
  @SerializedName(SERIALIZED_NAME_MAP)
  private Map<String, String> map = null;

  public static final String SERIALIZED_NAME_CHARTHOP_TO_REMOTE_MAP = "charthopToRemoteMap";
  @SerializedName(SERIALIZED_NAME_CHARTHOP_TO_REMOTE_MAP)
  private Map<String, String> charthopToRemoteMap = null;

  public static final String SERIALIZED_NAME_ID_FIELD = "idField";
  @SerializedName(SERIALIZED_NAME_ID_FIELD)
  private String idField;

  public static final String SERIALIZED_NAME_NAME_FIELD = "nameField";
  @SerializedName(SERIALIZED_NAME_NAME_FIELD)
  private String nameField;

  public static final String SERIALIZED_NAME_REMOTE_TO_CHARTHOP_MULTIPLIER = "remoteToCharthopMultiplier";
  @SerializedName(SERIALIZED_NAME_REMOTE_TO_CHARTHOP_MULTIPLIER)
  private Double remoteToCharthopMultiplier;

  public FieldMapper() {
  }

  public FieldMapper id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * unique id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public FieldMapper charthopFields(List<String> charthopFields) {
    
    
    
    
    this.charthopFields = charthopFields;
    return this;
  }

  public FieldMapper addCharthopFieldsItem(String charthopFieldsItem) {
    this.charthopFields.add(charthopFieldsItem);
    return this;
  }

   /**
   * list of ChartHop fields
   * @return charthopFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of ChartHop fields")

  public List<String> getCharthopFields() {
    return charthopFields;
  }


  public void setCharthopFields(List<String> charthopFields) {
    
    
    
    this.charthopFields = charthopFields;
  }


  public FieldMapper remoteFields(List<String> remoteFields) {
    
    
    
    
    this.remoteFields = remoteFields;
    return this;
  }

  public FieldMapper addRemoteFieldsItem(String remoteFieldsItem) {
    this.remoteFields.add(remoteFieldsItem);
    return this;
  }

   /**
   * list of remote fields
   * @return remoteFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of remote fields")

  public List<String> getRemoteFields() {
    return remoteFields;
  }


  public void setRemoteFields(List<String> remoteFields) {
    
    
    
    this.remoteFields = remoteFields;
  }


  public FieldMapper type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of field mapper to apply for mapping remote fields to ChartHop fields
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of field mapper to apply for mapping remote fields to ChartHop fields")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public FieldMapper defaultCharthopValue(String defaultCharthopValue) {
    
    
    
    
    this.defaultCharthopValue = defaultCharthopValue;
    return this;
  }

   /**
   * default charthop value
   * @return defaultCharthopValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default charthop value")

  public String getDefaultCharthopValue() {
    return defaultCharthopValue;
  }


  public void setDefaultCharthopValue(String defaultCharthopValue) {
    
    
    
    this.defaultCharthopValue = defaultCharthopValue;
  }


  public FieldMapper defaultRemoteValue(String defaultRemoteValue) {
    
    
    
    
    this.defaultRemoteValue = defaultRemoteValue;
    return this;
  }

   /**
   * default remote value
   * @return defaultRemoteValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default remote value")

  public String getDefaultRemoteValue() {
    return defaultRemoteValue;
  }


  public void setDefaultRemoteValue(String defaultRemoteValue) {
    
    
    
    this.defaultRemoteValue = defaultRemoteValue;
  }


  public FieldMapper defaultAmount(Double defaultAmount) {
    
    
    
    
    this.defaultAmount = defaultAmount;
    return this;
  }

  public FieldMapper defaultAmount(Integer defaultAmount) {
    
    
    
    
    this.defaultAmount = defaultAmount.doubleValue();
    return this;
  }

   /**
   * default amount
   * @return defaultAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default amount")

  public Double getDefaultAmount() {
    return defaultAmount;
  }


  public void setDefaultAmount(Double defaultAmount) {
    
    
    
    this.defaultAmount = defaultAmount;
  }


  public FieldMapper defaultCurrency(String defaultCurrency) {
    
    
    
    
    this.defaultCurrency = defaultCurrency;
    return this;
  }

   /**
   * default currency
   * @return defaultCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default currency")

  public String getDefaultCurrency() {
    return defaultCurrency;
  }


  public void setDefaultCurrency(String defaultCurrency) {
    
    
    
    this.defaultCurrency = defaultCurrency;
  }


  public FieldMapper transformFunction(String transformFunction) {
    
    
    
    
    this.transformFunction = transformFunction;
    return this;
  }

   /**
   * transform function
   * @return transformFunction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "transform function")

  public String getTransformFunction() {
    return transformFunction;
  }


  public void setTransformFunction(String transformFunction) {
    
    
    
    this.transformFunction = transformFunction;
  }


  public FieldMapper charthopToRemoteTransformFunction(String charthopToRemoteTransformFunction) {
    
    
    
    
    this.charthopToRemoteTransformFunction = charthopToRemoteTransformFunction;
    return this;
  }

   /**
   * charthop to remote transform function
   * @return charthopToRemoteTransformFunction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "charthop to remote transform function")

  public String getCharthopToRemoteTransformFunction() {
    return charthopToRemoteTransformFunction;
  }


  public void setCharthopToRemoteTransformFunction(String charthopToRemoteTransformFunction) {
    
    
    
    this.charthopToRemoteTransformFunction = charthopToRemoteTransformFunction;
  }


  public FieldMapper map(Map<String, String> map) {
    
    
    
    
    this.map = map;
    return this;
  }

  public FieldMapper putMapItem(String key, String mapItem) {
    if (this.map == null) {
      this.map = new HashMap<>();
    }
    this.map.put(key, mapItem);
    return this;
  }

   /**
   * map
   * @return map
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "map")

  public Map<String, String> getMap() {
    return map;
  }


  public void setMap(Map<String, String> map) {
    
    
    
    this.map = map;
  }


  public FieldMapper charthopToRemoteMap(Map<String, String> charthopToRemoteMap) {
    
    
    
    
    this.charthopToRemoteMap = charthopToRemoteMap;
    return this;
  }

  public FieldMapper putCharthopToRemoteMapItem(String key, String charthopToRemoteMapItem) {
    if (this.charthopToRemoteMap == null) {
      this.charthopToRemoteMap = new HashMap<>();
    }
    this.charthopToRemoteMap.put(key, charthopToRemoteMapItem);
    return this;
  }

   /**
   * charthop to remote map
   * @return charthopToRemoteMap
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "charthop to remote map")

  public Map<String, String> getCharthopToRemoteMap() {
    return charthopToRemoteMap;
  }


  public void setCharthopToRemoteMap(Map<String, String> charthopToRemoteMap) {
    
    
    
    this.charthopToRemoteMap = charthopToRemoteMap;
  }


  public FieldMapper idField(String idField) {
    
    
    
    
    this.idField = idField;
    return this;
  }

   /**
   * id field
   * @return idField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "id field")

  public String getIdField() {
    return idField;
  }


  public void setIdField(String idField) {
    
    
    
    this.idField = idField;
  }


  public FieldMapper nameField(String nameField) {
    
    
    
    
    this.nameField = nameField;
    return this;
  }

   /**
   * name field
   * @return nameField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "name field")

  public String getNameField() {
    return nameField;
  }


  public void setNameField(String nameField) {
    
    
    
    this.nameField = nameField;
  }


  public FieldMapper remoteToCharthopMultiplier(Double remoteToCharthopMultiplier) {
    
    
    
    
    this.remoteToCharthopMultiplier = remoteToCharthopMultiplier;
    return this;
  }

  public FieldMapper remoteToCharthopMultiplier(Integer remoteToCharthopMultiplier) {
    
    
    
    
    this.remoteToCharthopMultiplier = remoteToCharthopMultiplier.doubleValue();
    return this;
  }

   /**
   * remote to Charthop Multiplier
   * @return remoteToCharthopMultiplier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "remote to Charthop Multiplier")

  public Double getRemoteToCharthopMultiplier() {
    return remoteToCharthopMultiplier;
  }


  public void setRemoteToCharthopMultiplier(Double remoteToCharthopMultiplier) {
    
    
    
    this.remoteToCharthopMultiplier = remoteToCharthopMultiplier;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FieldMapper instance itself
   */
  public FieldMapper putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldMapper fieldMapper = (FieldMapper) o;
    return Objects.equals(this.id, fieldMapper.id) &&
        Objects.equals(this.charthopFields, fieldMapper.charthopFields) &&
        Objects.equals(this.remoteFields, fieldMapper.remoteFields) &&
        Objects.equals(this.type, fieldMapper.type) &&
        Objects.equals(this.defaultCharthopValue, fieldMapper.defaultCharthopValue) &&
        Objects.equals(this.defaultRemoteValue, fieldMapper.defaultRemoteValue) &&
        Objects.equals(this.defaultAmount, fieldMapper.defaultAmount) &&
        Objects.equals(this.defaultCurrency, fieldMapper.defaultCurrency) &&
        Objects.equals(this.transformFunction, fieldMapper.transformFunction) &&
        Objects.equals(this.charthopToRemoteTransformFunction, fieldMapper.charthopToRemoteTransformFunction) &&
        Objects.equals(this.map, fieldMapper.map) &&
        Objects.equals(this.charthopToRemoteMap, fieldMapper.charthopToRemoteMap) &&
        Objects.equals(this.idField, fieldMapper.idField) &&
        Objects.equals(this.nameField, fieldMapper.nameField) &&
        Objects.equals(this.remoteToCharthopMultiplier, fieldMapper.remoteToCharthopMultiplier)&&
        Objects.equals(this.additionalProperties, fieldMapper.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, charthopFields, remoteFields, type, defaultCharthopValue, defaultRemoteValue, defaultAmount, defaultCurrency, transformFunction, charthopToRemoteTransformFunction, map, charthopToRemoteMap, idField, nameField, remoteToCharthopMultiplier, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldMapper {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    charthopFields: ").append(toIndentedString(charthopFields)).append("\n");
    sb.append("    remoteFields: ").append(toIndentedString(remoteFields)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultCharthopValue: ").append(toIndentedString(defaultCharthopValue)).append("\n");
    sb.append("    defaultRemoteValue: ").append(toIndentedString(defaultRemoteValue)).append("\n");
    sb.append("    defaultAmount: ").append(toIndentedString(defaultAmount)).append("\n");
    sb.append("    defaultCurrency: ").append(toIndentedString(defaultCurrency)).append("\n");
    sb.append("    transformFunction: ").append(toIndentedString(transformFunction)).append("\n");
    sb.append("    charthopToRemoteTransformFunction: ").append(toIndentedString(charthopToRemoteTransformFunction)).append("\n");
    sb.append("    map: ").append(toIndentedString(map)).append("\n");
    sb.append("    charthopToRemoteMap: ").append(toIndentedString(charthopToRemoteMap)).append("\n");
    sb.append("    idField: ").append(toIndentedString(idField)).append("\n");
    sb.append("    nameField: ").append(toIndentedString(nameField)).append("\n");
    sb.append("    remoteToCharthopMultiplier: ").append(toIndentedString(remoteToCharthopMultiplier)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("charthopFields");
    openapiFields.add("remoteFields");
    openapiFields.add("type");
    openapiFields.add("defaultCharthopValue");
    openapiFields.add("defaultRemoteValue");
    openapiFields.add("defaultAmount");
    openapiFields.add("defaultCurrency");
    openapiFields.add("transformFunction");
    openapiFields.add("charthopToRemoteTransformFunction");
    openapiFields.add("map");
    openapiFields.add("charthopToRemoteMap");
    openapiFields.add("idField");
    openapiFields.add("nameField");
    openapiFields.add("remoteToCharthopMultiplier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("charthopFields");
    openapiRequiredFields.add("remoteFields");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FieldMapper
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FieldMapper.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FieldMapper is not found in the empty JSON string", FieldMapper.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FieldMapper.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("charthopFields") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("charthopFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `charthopFields` to be an array in the JSON string but got `%s`", jsonObj.get("charthopFields").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("remoteFields") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("remoteFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteFields` to be an array in the JSON string but got `%s`", jsonObj.get("remoteFields").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("defaultCharthopValue") != null && !jsonObj.get("defaultCharthopValue").isJsonNull()) && !jsonObj.get("defaultCharthopValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCharthopValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCharthopValue").toString()));
      }
      if ((jsonObj.get("defaultRemoteValue") != null && !jsonObj.get("defaultRemoteValue").isJsonNull()) && !jsonObj.get("defaultRemoteValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRemoteValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultRemoteValue").toString()));
      }
      if ((jsonObj.get("defaultCurrency") != null && !jsonObj.get("defaultCurrency").isJsonNull()) && !jsonObj.get("defaultCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultCurrency").toString()));
      }
      if ((jsonObj.get("transformFunction") != null && !jsonObj.get("transformFunction").isJsonNull()) && !jsonObj.get("transformFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transformFunction").toString()));
      }
      if ((jsonObj.get("charthopToRemoteTransformFunction") != null && !jsonObj.get("charthopToRemoteTransformFunction").isJsonNull()) && !jsonObj.get("charthopToRemoteTransformFunction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charthopToRemoteTransformFunction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charthopToRemoteTransformFunction").toString()));
      }
      if ((jsonObj.get("idField") != null && !jsonObj.get("idField").isJsonNull()) && !jsonObj.get("idField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idField").toString()));
      }
      if ((jsonObj.get("nameField") != null && !jsonObj.get("nameField").isJsonNull()) && !jsonObj.get("nameField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameField").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FieldMapper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FieldMapper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FieldMapper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FieldMapper.class));

       return (TypeAdapter<T>) new TypeAdapter<FieldMapper>() {
           @Override
           public void write(JsonWriter out, FieldMapper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FieldMapper read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FieldMapper instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FieldMapper given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FieldMapper
  * @throws IOException if the JSON string is invalid with respect to FieldMapper
  */
  public static FieldMapper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldMapper.class);
  }

 /**
  * Convert an instance of FieldMapper to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

