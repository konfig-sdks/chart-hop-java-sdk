/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportQuery;
import com.konfigthis.client.model.ReportQueryResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportResult {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<ReportQuery> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<ReportQueryResult> results = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUILD_START_AT = "buildStartAt";
  @SerializedName(SERIALIZED_NAME_BUILD_START_AT)
  private String buildStartAt;

  public static final String SERIALIZED_NAME_BUILD_END_AT = "buildEndAt";
  @SerializedName(SERIALIZED_NAME_BUILD_END_AT)
  private String buildEndAt;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public static final String SERIALIZED_NAME_VIEW_ID = "viewId";
  @SerializedName(SERIALIZED_NAME_VIEW_ID)
  private String viewId;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  /**
   * status of the report result
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    OK("OK"),
    
    LOCKED("LOCKED"),
    
    RETRY("RETRY"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_CHART_ID = "chartId";
  @SerializedName(SERIALIZED_NAME_CHART_ID)
  private String chartId;

  public ReportResult() {
  }

  public ReportResult id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ReportResult orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent org id
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "parent org id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public ReportResult key(String key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * identifying key for this report result
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "identifying key for this report result")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    
    
    
    this.key = key;
  }


  public ReportResult startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * date that the report result interval begins, inclusive
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "date that the report result interval begins, inclusive")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public ReportResult endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * date that the report result interval ends, exclusive
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "date that the report result interval ends, exclusive")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public ReportResult options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * date that the report result interval ends, exclusive
   * @return options
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "date that the report result interval ends, exclusive")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }


  public ReportResult queries(List<ReportQuery> queries) {
    
    
    
    
    this.queries = queries;
    return this;
  }

  public ReportResult addQueriesItem(ReportQuery queriesItem) {
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * list of queries that were requested
   * @return queries
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of queries that were requested")

  public List<ReportQuery> getQueries() {
    return queries;
  }


  public void setQueries(List<ReportQuery> queries) {
    
    
    
    this.queries = queries;
  }


  public ReportResult results(List<ReportQueryResult> results) {
    
    
    
    
    this.results = results;
    return this;
  }

  public ReportResult addResultsItem(ReportQueryResult resultsItem) {
    this.results.add(resultsItem);
    return this;
  }

   /**
   * list of the results, one per query that was requested
   * @return results
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of the results, one per query that was requested")

  public List<ReportQueryResult> getResults() {
    return results;
  }


  public void setResults(List<ReportQueryResult> results) {
    
    
    
    this.results = results;
  }


  public ReportResult buildStartAt(String buildStartAt) {
    
    
    
    
    this.buildStartAt = buildStartAt;
    return this;
  }

   /**
   * start time of last build
   * @return buildStartAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "start time of last build")

  public String getBuildStartAt() {
    return buildStartAt;
  }


  public void setBuildStartAt(String buildStartAt) {
    
    
    
    this.buildStartAt = buildStartAt;
  }


  public ReportResult buildEndAt(String buildEndAt) {
    
    
    
    
    this.buildEndAt = buildEndAt;
    return this;
  }

   /**
   * end time of last build
   * @return buildEndAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "end time of last build")

  public String getBuildEndAt() {
    return buildEndAt;
  }


  public void setBuildEndAt(String buildEndAt) {
    
    
    
    this.buildEndAt = buildEndAt;
  }


  public ReportResult message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * status or error message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "status or error message")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public ReportResult progress(Double progress) {
    
    
    
    
    this.progress = progress;
    return this;
  }

   /**
   * percent progress so far
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "percent progress so far")

  public Double getProgress() {
    return progress;
  }


  public void setProgress(Double progress) {
    
    
    
    this.progress = progress;
  }


  public ReportResult viewId(String viewId) {
    
    
    
    
    this.viewId = viewId;
    return this;
  }

   /**
   * viewer user id
   * @return viewId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "viewer user id")

  public String getViewId() {
    return viewId;
  }


  public void setViewId(String viewId) {
    
    
    
    this.viewId = viewId;
  }


  public ReportResult createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public ReportResult createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", required = true, value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public ReportResult status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * status of the report result
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "status of the report result")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public ReportResult reportId(String reportId) {
    
    
    
    
    this.reportId = reportId;
    return this;
  }

   /**
   * corresponding report id for the built query
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "corresponding report id for the built query")

  public String getReportId() {
    return reportId;
  }


  public void setReportId(String reportId) {
    
    
    
    this.reportId = reportId;
  }


  public ReportResult chartId(String chartId) {
    
    
    
    
    this.chartId = chartId;
    return this;
  }

   /**
   * corresponding chart id for the built query
   * @return chartId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "corresponding chart id for the built query")

  public String getChartId() {
    return chartId;
  }


  public void setChartId(String chartId) {
    
    
    
    this.chartId = chartId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportResult instance itself
   */
  public ReportResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportResult reportResult = (ReportResult) o;
    return Objects.equals(this.id, reportResult.id) &&
        Objects.equals(this.orgId, reportResult.orgId) &&
        Objects.equals(this.key, reportResult.key) &&
        Objects.equals(this.startDate, reportResult.startDate) &&
        Objects.equals(this.endDate, reportResult.endDate) &&
        Objects.equals(this.options, reportResult.options) &&
        Objects.equals(this.queries, reportResult.queries) &&
        Objects.equals(this.results, reportResult.results) &&
        Objects.equals(this.buildStartAt, reportResult.buildStartAt) &&
        Objects.equals(this.buildEndAt, reportResult.buildEndAt) &&
        Objects.equals(this.message, reportResult.message) &&
        Objects.equals(this.progress, reportResult.progress) &&
        Objects.equals(this.viewId, reportResult.viewId) &&
        Objects.equals(this.createId, reportResult.createId) &&
        Objects.equals(this.createAt, reportResult.createAt) &&
        Objects.equals(this.status, reportResult.status) &&
        Objects.equals(this.reportId, reportResult.reportId) &&
        Objects.equals(this.chartId, reportResult.chartId)&&
        Objects.equals(this.additionalProperties, reportResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgId, key, startDate, endDate, options, queries, results, buildStartAt, buildEndAt, message, progress, viewId, createId, createAt, status, reportId, chartId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportResult {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    buildStartAt: ").append(toIndentedString(buildStartAt)).append("\n");
    sb.append("    buildEndAt: ").append(toIndentedString(buildEndAt)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    viewId: ").append(toIndentedString(viewId)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    chartId: ").append(toIndentedString(chartId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("key");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("options");
    openapiFields.add("queries");
    openapiFields.add("results");
    openapiFields.add("buildStartAt");
    openapiFields.add("buildEndAt");
    openapiFields.add("message");
    openapiFields.add("progress");
    openapiFields.add("viewId");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("status");
    openapiFields.add("reportId");
    openapiFields.add("chartId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("orgId");
    openapiRequiredFields.add("key");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("endDate");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("queries");
    openapiRequiredFields.add("results");
    openapiRequiredFields.add("createId");
    openapiRequiredFields.add("createAt");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportResult is not found in the empty JSON string", ReportResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if (!jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("queries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `queries` to be an array in the JSON string but got `%s`", jsonObj.get("queries").toString()));
      }

      JsonArray jsonArrayqueries = jsonObj.getAsJsonArray("queries");
      // validate the required field `queries` (array)
      for (int i = 0; i < jsonArrayqueries.size(); i++) {
        ReportQuery.validateJsonObject(jsonArrayqueries.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("results").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
      }

      JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
      // validate the required field `results` (array)
      for (int i = 0; i < jsonArrayresults.size(); i++) {
        ReportQueryResult.validateJsonObject(jsonArrayresults.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("buildStartAt") != null && !jsonObj.get("buildStartAt").isJsonNull()) && !jsonObj.get("buildStartAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildStartAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildStartAt").toString()));
      }
      if ((jsonObj.get("buildEndAt") != null && !jsonObj.get("buildEndAt").isJsonNull()) && !jsonObj.get("buildEndAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildEndAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildEndAt").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("viewId") != null && !jsonObj.get("viewId").isJsonNull()) && !jsonObj.get("viewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `viewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("viewId").toString()));
      }
      if (!jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if (!jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("reportId") != null && !jsonObj.get("reportId").isJsonNull()) && !jsonObj.get("reportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportId").toString()));
      }
      if ((jsonObj.get("chartId") != null && !jsonObj.get("chartId").isJsonNull()) && !jsonObj.get("chartId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chartId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chartId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportResult>() {
           @Override
           public void write(JsonWriter out, ReportResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportResult
  * @throws IOException if the JSON string is invalid with respect to ReportResult
  */
  public static ReportResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportResult.class);
  }

 /**
  * Convert an instance of ReportResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

