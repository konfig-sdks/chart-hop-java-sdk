/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AiModelConfig
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AiModelConfig {
  public static final String SERIALIZED_NAME_MODEL_ID = "modelId";
  @SerializedName(SERIALIZED_NAME_MODEL_ID)
  private String modelId;

  public static final String SERIALIZED_NAME_PROMPT_BEFORE = "promptBefore";
  @SerializedName(SERIALIZED_NAME_PROMPT_BEFORE)
  private String promptBefore;

  public static final String SERIALIZED_NAME_PROMPT_AFTER = "promptAfter";
  @SerializedName(SERIALIZED_NAME_PROMPT_AFTER)
  private String promptAfter;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "maxTokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Double temperature;

  public static final String SERIALIZED_NAME_TOP_P = "topP";
  @SerializedName(SERIALIZED_NAME_TOP_P)
  private Integer topP;

  public static final String SERIALIZED_NAME_STOP_SEQUENCES = "stopSequences";
  @SerializedName(SERIALIZED_NAME_STOP_SEQUENCES)
  private String stopSequences;

  public static final String SERIALIZED_NAME_MAX_STRING_LENGTH = "maxStringLength";
  @SerializedName(SERIALIZED_NAME_MAX_STRING_LENGTH)
  private Integer maxStringLength;

  public AiModelConfig() {
  }

  public AiModelConfig modelId(String modelId) {
    
    
    
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Get modelId
   * @return modelId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getModelId() {
    return modelId;
  }


  public void setModelId(String modelId) {
    
    
    
    this.modelId = modelId;
  }


  public AiModelConfig promptBefore(String promptBefore) {
    
    
    
    
    this.promptBefore = promptBefore;
    return this;
  }

   /**
   * Get promptBefore
   * @return promptBefore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPromptBefore() {
    return promptBefore;
  }


  public void setPromptBefore(String promptBefore) {
    
    
    
    this.promptBefore = promptBefore;
  }


  public AiModelConfig promptAfter(String promptAfter) {
    
    
    
    
    this.promptAfter = promptAfter;
    return this;
  }

   /**
   * Get promptAfter
   * @return promptAfter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPromptAfter() {
    return promptAfter;
  }


  public void setPromptAfter(String promptAfter) {
    
    
    
    this.promptAfter = promptAfter;
  }


  public AiModelConfig maxTokens(Integer maxTokens) {
    
    
    
    
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * Get maxTokens
   * @return maxTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaxTokens() {
    return maxTokens;
  }


  public void setMaxTokens(Integer maxTokens) {
    
    
    
    this.maxTokens = maxTokens;
  }


  public AiModelConfig temperature(Double temperature) {
    
    
    
    
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Double getTemperature() {
    return temperature;
  }


  public void setTemperature(Double temperature) {
    
    
    
    this.temperature = temperature;
  }


  public AiModelConfig topP(Integer topP) {
    
    
    
    
    this.topP = topP;
    return this;
  }

   /**
   * Get topP
   * @return topP
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTopP() {
    return topP;
  }


  public void setTopP(Integer topP) {
    
    
    
    this.topP = topP;
  }


  public AiModelConfig stopSequences(String stopSequences) {
    
    
    
    
    this.stopSequences = stopSequences;
    return this;
  }

   /**
   * Get stopSequences
   * @return stopSequences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStopSequences() {
    return stopSequences;
  }


  public void setStopSequences(String stopSequences) {
    
    
    
    this.stopSequences = stopSequences;
  }


  public AiModelConfig maxStringLength(Integer maxStringLength) {
    
    
    
    
    this.maxStringLength = maxStringLength;
    return this;
  }

   /**
   * Get maxStringLength
   * @return maxStringLength
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMaxStringLength() {
    return maxStringLength;
  }


  public void setMaxStringLength(Integer maxStringLength) {
    
    
    
    this.maxStringLength = maxStringLength;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AiModelConfig instance itself
   */
  public AiModelConfig putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AiModelConfig aiModelConfig = (AiModelConfig) o;
    return Objects.equals(this.modelId, aiModelConfig.modelId) &&
        Objects.equals(this.promptBefore, aiModelConfig.promptBefore) &&
        Objects.equals(this.promptAfter, aiModelConfig.promptAfter) &&
        Objects.equals(this.maxTokens, aiModelConfig.maxTokens) &&
        Objects.equals(this.temperature, aiModelConfig.temperature) &&
        Objects.equals(this.topP, aiModelConfig.topP) &&
        Objects.equals(this.stopSequences, aiModelConfig.stopSequences) &&
        Objects.equals(this.maxStringLength, aiModelConfig.maxStringLength)&&
        Objects.equals(this.additionalProperties, aiModelConfig.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelId, promptBefore, promptAfter, maxTokens, temperature, topP, stopSequences, maxStringLength, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AiModelConfig {\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    promptBefore: ").append(toIndentedString(promptBefore)).append("\n");
    sb.append("    promptAfter: ").append(toIndentedString(promptAfter)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    stopSequences: ").append(toIndentedString(stopSequences)).append("\n");
    sb.append("    maxStringLength: ").append(toIndentedString(maxStringLength)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelId");
    openapiFields.add("promptBefore");
    openapiFields.add("promptAfter");
    openapiFields.add("maxTokens");
    openapiFields.add("temperature");
    openapiFields.add("topP");
    openapiFields.add("stopSequences");
    openapiFields.add("maxStringLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("modelId");
    openapiRequiredFields.add("promptBefore");
    openapiRequiredFields.add("promptAfter");
    openapiRequiredFields.add("maxTokens");
    openapiRequiredFields.add("temperature");
    openapiRequiredFields.add("topP");
    openapiRequiredFields.add("maxStringLength");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AiModelConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AiModelConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AiModelConfig is not found in the empty JSON string", AiModelConfig.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AiModelConfig.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("modelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelId").toString()));
      }
      if (!jsonObj.get("promptBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promptBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promptBefore").toString()));
      }
      if (!jsonObj.get("promptAfter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promptAfter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promptAfter").toString()));
      }
      if ((jsonObj.get("stopSequences") != null && !jsonObj.get("stopSequences").isJsonNull()) && !jsonObj.get("stopSequences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopSequences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopSequences").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AiModelConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AiModelConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AiModelConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AiModelConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AiModelConfig>() {
           @Override
           public void write(JsonWriter out, AiModelConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AiModelConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AiModelConfig instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AiModelConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AiModelConfig
  * @throws IOException if the JSON string is invalid with respect to AiModelConfig
  */
  public static AiModelConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AiModelConfig.class);
  }

 /**
  * Convert an instance of AiModelConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

