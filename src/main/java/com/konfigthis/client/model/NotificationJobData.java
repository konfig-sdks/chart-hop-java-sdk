/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NotificationJobData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NotificationJobData {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_URL = "jobUrl";
  @SerializedName(SERIALIZED_NAME_JOB_URL)
  private URI jobUrl;

  public static final String SERIALIZED_NAME_JOB_PROFILE_URL = "jobProfileUrl";
  @SerializedName(SERIALIZED_NAME_JOB_PROFILE_URL)
  private URI jobProfileUrl;

  public static final String SERIALIZED_NAME_ATS_JOB_URL = "atsJobUrl";
  @SerializedName(SERIALIZED_NAME_ATS_JOB_URL)
  private URI atsJobUrl;

  public static final String SERIALIZED_NAME_ATS_JOB_ID = "atsJobId";
  @SerializedName(SERIALIZED_NAME_ATS_JOB_ID)
  private String atsJobId;

  public static final String SERIALIZED_NAME_ATS_JOB_REQ = "atsJobReq";
  @SerializedName(SERIALIZED_NAME_ATS_JOB_REQ)
  private String atsJobReq;

  public static final String SERIALIZED_NAME_ATS_JOB_REQ_FIELD = "atsJobReqField";
  @SerializedName(SERIALIZED_NAME_ATS_JOB_REQ_FIELD)
  private String atsJobReqField;

  public static final String SERIALIZED_NAME_OPEN_JOBS_URL = "openJobsUrl";
  @SerializedName(SERIALIZED_NAME_OPEN_JOBS_URL)
  private URI openJobsUrl;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MANAGER = "manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private String manager;

  public static final String SERIALIZED_NAME_BACKFILL = "backfill";
  @SerializedName(SERIALIZED_NAME_BACKFILL)
  private String backfill;

  public static final String SERIALIZED_NAME_HIRE_MGR = "hireMgr";
  @SerializedName(SERIALIZED_NAME_HIRE_MGR)
  private String hireMgr;

  public static final String SERIALIZED_NAME_RECRUITER = "recruiter";
  @SerializedName(SERIALIZED_NAME_RECRUITER)
  private String recruiter;

  public static final String SERIALIZED_NAME_RECRUIT_PRIORITY = "recruitPriority";
  @SerializedName(SERIALIZED_NAME_RECRUIT_PRIORITY)
  private String recruitPriority;

  public static final String SERIALIZED_NAME_RECRUIT = "recruit";
  @SerializedName(SERIALIZED_NAME_RECRUIT)
  private String recruit;

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private String sensitive;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_EST_START_DATE = "estStartDate";
  @SerializedName(SERIALIZED_NAME_EST_START_DATE)
  private LocalDate estStartDate;

  public static final String SERIALIZED_NAME_ANNOUNCE_DATE = "announceDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCE_DATE)
  private LocalDate announceDate;

  public static final String SERIALIZED_NAME_HIRE_NAME = "hireName";
  @SerializedName(SERIALIZED_NAME_HIRE_NAME)
  private String hireName;

  public NotificationJobData() {
  }

  public NotificationJobData title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public NotificationJobData jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public NotificationJobData jobUrl(URI jobUrl) {
    
    
    
    
    this.jobUrl = jobUrl;
    return this;
  }

   /**
   * Get jobUrl
   * @return jobUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getJobUrl() {
    return jobUrl;
  }


  public void setJobUrl(URI jobUrl) {
    
    
    
    this.jobUrl = jobUrl;
  }


  public NotificationJobData jobProfileUrl(URI jobProfileUrl) {
    
    
    
    
    this.jobProfileUrl = jobProfileUrl;
    return this;
  }

   /**
   * Get jobProfileUrl
   * @return jobProfileUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getJobProfileUrl() {
    return jobProfileUrl;
  }


  public void setJobProfileUrl(URI jobProfileUrl) {
    
    
    
    this.jobProfileUrl = jobProfileUrl;
  }


  public NotificationJobData atsJobUrl(URI atsJobUrl) {
    
    
    
    
    this.atsJobUrl = atsJobUrl;
    return this;
  }

   /**
   * Get atsJobUrl
   * @return atsJobUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getAtsJobUrl() {
    return atsJobUrl;
  }


  public void setAtsJobUrl(URI atsJobUrl) {
    
    
    
    this.atsJobUrl = atsJobUrl;
  }


  public NotificationJobData atsJobId(String atsJobId) {
    
    
    
    
    this.atsJobId = atsJobId;
    return this;
  }

   /**
   * Get atsJobId
   * @return atsJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAtsJobId() {
    return atsJobId;
  }


  public void setAtsJobId(String atsJobId) {
    
    
    
    this.atsJobId = atsJobId;
  }


  public NotificationJobData atsJobReq(String atsJobReq) {
    
    
    
    
    this.atsJobReq = atsJobReq;
    return this;
  }

   /**
   * Get atsJobReq
   * @return atsJobReq
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAtsJobReq() {
    return atsJobReq;
  }


  public void setAtsJobReq(String atsJobReq) {
    
    
    
    this.atsJobReq = atsJobReq;
  }


  public NotificationJobData atsJobReqField(String atsJobReqField) {
    
    
    
    
    this.atsJobReqField = atsJobReqField;
    return this;
  }

   /**
   * Get atsJobReqField
   * @return atsJobReqField
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAtsJobReqField() {
    return atsJobReqField;
  }


  public void setAtsJobReqField(String atsJobReqField) {
    
    
    
    this.atsJobReqField = atsJobReqField;
  }


  public NotificationJobData openJobsUrl(URI openJobsUrl) {
    
    
    
    
    this.openJobsUrl = openJobsUrl;
    return this;
  }

   /**
   * Get openJobsUrl
   * @return openJobsUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getOpenJobsUrl() {
    return openJobsUrl;
  }


  public void setOpenJobsUrl(URI openJobsUrl) {
    
    
    
    this.openJobsUrl = openJobsUrl;
  }


  public NotificationJobData department(String department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    
    
    
    this.department = department;
  }


  public NotificationJobData location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public NotificationJobData manager(String manager) {
    
    
    
    
    this.manager = manager;
    return this;
  }

   /**
   * Get manager
   * @return manager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getManager() {
    return manager;
  }


  public void setManager(String manager) {
    
    
    
    this.manager = manager;
  }


  public NotificationJobData backfill(String backfill) {
    
    
    
    
    this.backfill = backfill;
    return this;
  }

   /**
   * Get backfill
   * @return backfill
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBackfill() {
    return backfill;
  }


  public void setBackfill(String backfill) {
    
    
    
    this.backfill = backfill;
  }


  public NotificationJobData hireMgr(String hireMgr) {
    
    
    
    
    this.hireMgr = hireMgr;
    return this;
  }

   /**
   * Get hireMgr
   * @return hireMgr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHireMgr() {
    return hireMgr;
  }


  public void setHireMgr(String hireMgr) {
    
    
    
    this.hireMgr = hireMgr;
  }


  public NotificationJobData recruiter(String recruiter) {
    
    
    
    
    this.recruiter = recruiter;
    return this;
  }

   /**
   * Get recruiter
   * @return recruiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecruiter() {
    return recruiter;
  }


  public void setRecruiter(String recruiter) {
    
    
    
    this.recruiter = recruiter;
  }


  public NotificationJobData recruitPriority(String recruitPriority) {
    
    
    
    
    this.recruitPriority = recruitPriority;
    return this;
  }

   /**
   * Get recruitPriority
   * @return recruitPriority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecruitPriority() {
    return recruitPriority;
  }


  public void setRecruitPriority(String recruitPriority) {
    
    
    
    this.recruitPriority = recruitPriority;
  }


  public NotificationJobData recruit(String recruit) {
    
    
    
    
    this.recruit = recruit;
    return this;
  }

   /**
   * Get recruit
   * @return recruit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRecruit() {
    return recruit;
  }


  public void setRecruit(String recruit) {
    
    
    
    this.recruit = recruit;
  }


  public NotificationJobData sensitive(String sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * Get sensitive
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSensitive() {
    return sensitive;
  }


  public void setSensitive(String sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public NotificationJobData startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public NotificationJobData estStartDate(LocalDate estStartDate) {
    
    
    
    
    this.estStartDate = estStartDate;
    return this;
  }

   /**
   * Get estStartDate
   * @return estStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getEstStartDate() {
    return estStartDate;
  }


  public void setEstStartDate(LocalDate estStartDate) {
    
    
    
    this.estStartDate = estStartDate;
  }


  public NotificationJobData announceDate(LocalDate announceDate) {
    
    
    
    
    this.announceDate = announceDate;
    return this;
  }

   /**
   * Get announceDate
   * @return announceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getAnnounceDate() {
    return announceDate;
  }


  public void setAnnounceDate(LocalDate announceDate) {
    
    
    
    this.announceDate = announceDate;
  }


  public NotificationJobData hireName(String hireName) {
    
    
    
    
    this.hireName = hireName;
    return this;
  }

   /**
   * Get hireName
   * @return hireName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHireName() {
    return hireName;
  }


  public void setHireName(String hireName) {
    
    
    
    this.hireName = hireName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NotificationJobData instance itself
   */
  public NotificationJobData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationJobData notificationJobData = (NotificationJobData) o;
    return Objects.equals(this.title, notificationJobData.title) &&
        Objects.equals(this.jobId, notificationJobData.jobId) &&
        Objects.equals(this.jobUrl, notificationJobData.jobUrl) &&
        Objects.equals(this.jobProfileUrl, notificationJobData.jobProfileUrl) &&
        Objects.equals(this.atsJobUrl, notificationJobData.atsJobUrl) &&
        Objects.equals(this.atsJobId, notificationJobData.atsJobId) &&
        Objects.equals(this.atsJobReq, notificationJobData.atsJobReq) &&
        Objects.equals(this.atsJobReqField, notificationJobData.atsJobReqField) &&
        Objects.equals(this.openJobsUrl, notificationJobData.openJobsUrl) &&
        Objects.equals(this.department, notificationJobData.department) &&
        Objects.equals(this.location, notificationJobData.location) &&
        Objects.equals(this.manager, notificationJobData.manager) &&
        Objects.equals(this.backfill, notificationJobData.backfill) &&
        Objects.equals(this.hireMgr, notificationJobData.hireMgr) &&
        Objects.equals(this.recruiter, notificationJobData.recruiter) &&
        Objects.equals(this.recruitPriority, notificationJobData.recruitPriority) &&
        Objects.equals(this.recruit, notificationJobData.recruit) &&
        Objects.equals(this.sensitive, notificationJobData.sensitive) &&
        Objects.equals(this.startDate, notificationJobData.startDate) &&
        Objects.equals(this.estStartDate, notificationJobData.estStartDate) &&
        Objects.equals(this.announceDate, notificationJobData.announceDate) &&
        Objects.equals(this.hireName, notificationJobData.hireName)&&
        Objects.equals(this.additionalProperties, notificationJobData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, jobId, jobUrl, jobProfileUrl, atsJobUrl, atsJobId, atsJobReq, atsJobReqField, openJobsUrl, department, location, manager, backfill, hireMgr, recruiter, recruitPriority, recruit, sensitive, startDate, estStartDate, announceDate, hireName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationJobData {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobUrl: ").append(toIndentedString(jobUrl)).append("\n");
    sb.append("    jobProfileUrl: ").append(toIndentedString(jobProfileUrl)).append("\n");
    sb.append("    atsJobUrl: ").append(toIndentedString(atsJobUrl)).append("\n");
    sb.append("    atsJobId: ").append(toIndentedString(atsJobId)).append("\n");
    sb.append("    atsJobReq: ").append(toIndentedString(atsJobReq)).append("\n");
    sb.append("    atsJobReqField: ").append(toIndentedString(atsJobReqField)).append("\n");
    sb.append("    openJobsUrl: ").append(toIndentedString(openJobsUrl)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    backfill: ").append(toIndentedString(backfill)).append("\n");
    sb.append("    hireMgr: ").append(toIndentedString(hireMgr)).append("\n");
    sb.append("    recruiter: ").append(toIndentedString(recruiter)).append("\n");
    sb.append("    recruitPriority: ").append(toIndentedString(recruitPriority)).append("\n");
    sb.append("    recruit: ").append(toIndentedString(recruit)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    estStartDate: ").append(toIndentedString(estStartDate)).append("\n");
    sb.append("    announceDate: ").append(toIndentedString(announceDate)).append("\n");
    sb.append("    hireName: ").append(toIndentedString(hireName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("jobId");
    openapiFields.add("jobUrl");
    openapiFields.add("jobProfileUrl");
    openapiFields.add("atsJobUrl");
    openapiFields.add("atsJobId");
    openapiFields.add("atsJobReq");
    openapiFields.add("atsJobReqField");
    openapiFields.add("openJobsUrl");
    openapiFields.add("department");
    openapiFields.add("location");
    openapiFields.add("manager");
    openapiFields.add("backfill");
    openapiFields.add("hireMgr");
    openapiFields.add("recruiter");
    openapiFields.add("recruitPriority");
    openapiFields.add("recruit");
    openapiFields.add("sensitive");
    openapiFields.add("startDate");
    openapiFields.add("estStartDate");
    openapiFields.add("announceDate");
    openapiFields.add("hireName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NotificationJobData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NotificationJobData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationJobData is not found in the empty JSON string", NotificationJobData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobUrl") != null && !jsonObj.get("jobUrl").isJsonNull()) && !jsonObj.get("jobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobUrl").toString()));
      }
      if ((jsonObj.get("jobProfileUrl") != null && !jsonObj.get("jobProfileUrl").isJsonNull()) && !jsonObj.get("jobProfileUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobProfileUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobProfileUrl").toString()));
      }
      if ((jsonObj.get("atsJobUrl") != null && !jsonObj.get("atsJobUrl").isJsonNull()) && !jsonObj.get("atsJobUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsJobUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsJobUrl").toString()));
      }
      if ((jsonObj.get("atsJobId") != null && !jsonObj.get("atsJobId").isJsonNull()) && !jsonObj.get("atsJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsJobId").toString()));
      }
      if ((jsonObj.get("atsJobReq") != null && !jsonObj.get("atsJobReq").isJsonNull()) && !jsonObj.get("atsJobReq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsJobReq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsJobReq").toString()));
      }
      if ((jsonObj.get("atsJobReqField") != null && !jsonObj.get("atsJobReqField").isJsonNull()) && !jsonObj.get("atsJobReqField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `atsJobReqField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("atsJobReqField").toString()));
      }
      if ((jsonObj.get("openJobsUrl") != null && !jsonObj.get("openJobsUrl").isJsonNull()) && !jsonObj.get("openJobsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openJobsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openJobsUrl").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("manager") != null && !jsonObj.get("manager").isJsonNull()) && !jsonObj.get("manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manager").toString()));
      }
      if ((jsonObj.get("backfill") != null && !jsonObj.get("backfill").isJsonNull()) && !jsonObj.get("backfill").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backfill` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backfill").toString()));
      }
      if ((jsonObj.get("hireMgr") != null && !jsonObj.get("hireMgr").isJsonNull()) && !jsonObj.get("hireMgr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hireMgr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hireMgr").toString()));
      }
      if ((jsonObj.get("recruiter") != null && !jsonObj.get("recruiter").isJsonNull()) && !jsonObj.get("recruiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruiter").toString()));
      }
      if ((jsonObj.get("recruitPriority") != null && !jsonObj.get("recruitPriority").isJsonNull()) && !jsonObj.get("recruitPriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruitPriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruitPriority").toString()));
      }
      if ((jsonObj.get("recruit") != null && !jsonObj.get("recruit").isJsonNull()) && !jsonObj.get("recruit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recruit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recruit").toString()));
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if ((jsonObj.get("hireName") != null && !jsonObj.get("hireName").isJsonNull()) && !jsonObj.get("hireName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hireName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hireName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationJobData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationJobData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationJobData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationJobData.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationJobData>() {
           @Override
           public void write(JsonWriter out, NotificationJobData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationJobData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NotificationJobData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NotificationJobData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationJobData
  * @throws IOException if the JSON string is invalid with respect to NotificationJobData
  */
  public static NotificationJobData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationJobData.class);
  }

 /**
  * Convert an instance of NotificationJobData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

