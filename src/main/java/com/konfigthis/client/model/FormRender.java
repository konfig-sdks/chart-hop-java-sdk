/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FormRenderBlock;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FormRender
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FormRender {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Map<String, Object> options = new HashMap<>();

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private List<FormRenderBlock> blocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RERENDER_QUESTION_IDS = "rerenderQuestionIds";
  @SerializedName(SERIALIZED_NAME_RERENDER_QUESTION_IDS)
  private Set<String> rerenderQuestionIds = new LinkedHashSet<>();

  /**
   * Gets or Sets responseSensitive
   */
  @JsonAdapter(ResponseSensitiveEnum.Adapter.class)
 public enum ResponseSensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    ResponseSensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResponseSensitiveEnum fromValue(String value) {
      for (ResponseSensitiveEnum b : ResponseSensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResponseSensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResponseSensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResponseSensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResponseSensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_RESPONSE_SENSITIVE = "responseSensitive";
  @SerializedName(SERIALIZED_NAME_RESPONSE_SENSITIVE)
  private ResponseSensitiveEnum responseSensitive;

  /**
   * Gets or Sets authorSensitive
   */
  @JsonAdapter(AuthorSensitiveEnum.Adapter.class)
 public enum AuthorSensitiveEnum {
    ANONYMOUS("ANONYMOUS"),
    
    PRIVATE("PRIVATE"),
    
    HIGH("HIGH"),
    
    MANAGER("MANAGER");

    private String value;

    AuthorSensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorSensitiveEnum fromValue(String value) {
      for (AuthorSensitiveEnum b : AuthorSensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorSensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorSensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorSensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorSensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUTHOR_SENSITIVE = "authorSensitive";
  @SerializedName(SERIALIZED_NAME_AUTHOR_SENSITIVE)
  private AuthorSensitiveEnum authorSensitive;

  public FormRender() {
  }

  public FormRender id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public FormRender label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public FormRender options(Map<String, Object> options) {
    
    
    
    
    this.options = options;
    return this;
  }

  public FormRender putOptionsItem(String key, Object optionsItem) {
    this.options.put(key, optionsItem);
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, Object> getOptions() {
    return options;
  }


  public void setOptions(Map<String, Object> options) {
    
    
    
    this.options = options;
  }


  public FormRender blocks(List<FormRenderBlock> blocks) {
    
    
    
    
    this.blocks = blocks;
    return this;
  }

  public FormRender addBlocksItem(FormRenderBlock blocksItem) {
    this.blocks.add(blocksItem);
    return this;
  }

   /**
   * Get blocks
   * @return blocks
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<FormRenderBlock> getBlocks() {
    return blocks;
  }


  public void setBlocks(List<FormRenderBlock> blocks) {
    
    
    
    this.blocks = blocks;
  }


  public FormRender rerenderQuestionIds(Set<String> rerenderQuestionIds) {
    
    
    
    
    this.rerenderQuestionIds = rerenderQuestionIds;
    return this;
  }

  public FormRender addRerenderQuestionIdsItem(String rerenderQuestionIdsItem) {
    this.rerenderQuestionIds.add(rerenderQuestionIdsItem);
    return this;
  }

   /**
   * Get rerenderQuestionIds
   * @return rerenderQuestionIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<String> getRerenderQuestionIds() {
    return rerenderQuestionIds;
  }


  public void setRerenderQuestionIds(Set<String> rerenderQuestionIds) {
    
    
    
    this.rerenderQuestionIds = rerenderQuestionIds;
  }


  public FormRender responseSensitive(ResponseSensitiveEnum responseSensitive) {
    
    
    
    
    this.responseSensitive = responseSensitive;
    return this;
  }

   /**
   * Get responseSensitive
   * @return responseSensitive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ResponseSensitiveEnum getResponseSensitive() {
    return responseSensitive;
  }


  public void setResponseSensitive(ResponseSensitiveEnum responseSensitive) {
    
    
    
    this.responseSensitive = responseSensitive;
  }


  public FormRender authorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    
    this.authorSensitive = authorSensitive;
    return this;
  }

   /**
   * Get authorSensitive
   * @return authorSensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AuthorSensitiveEnum getAuthorSensitive() {
    return authorSensitive;
  }


  public void setAuthorSensitive(AuthorSensitiveEnum authorSensitive) {
    
    
    
    this.authorSensitive = authorSensitive;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FormRender instance itself
   */
  public FormRender putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormRender formRender = (FormRender) o;
    return Objects.equals(this.id, formRender.id) &&
        Objects.equals(this.label, formRender.label) &&
        Objects.equals(this.options, formRender.options) &&
        Objects.equals(this.blocks, formRender.blocks) &&
        Objects.equals(this.rerenderQuestionIds, formRender.rerenderQuestionIds) &&
        Objects.equals(this.responseSensitive, formRender.responseSensitive) &&
        Objects.equals(this.authorSensitive, formRender.authorSensitive)&&
        Objects.equals(this.additionalProperties, formRender.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, options, blocks, rerenderQuestionIds, responseSensitive, authorSensitive, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormRender {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    rerenderQuestionIds: ").append(toIndentedString(rerenderQuestionIds)).append("\n");
    sb.append("    responseSensitive: ").append(toIndentedString(responseSensitive)).append("\n");
    sb.append("    authorSensitive: ").append(toIndentedString(authorSensitive)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("label");
    openapiFields.add("options");
    openapiFields.add("blocks");
    openapiFields.add("rerenderQuestionIds");
    openapiFields.add("responseSensitive");
    openapiFields.add("authorSensitive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("options");
    openapiRequiredFields.add("blocks");
    openapiRequiredFields.add("rerenderQuestionIds");
    openapiRequiredFields.add("responseSensitive");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FormRender
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FormRender.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormRender is not found in the empty JSON string", FormRender.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FormRender.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("blocks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocks` to be an array in the JSON string but got `%s`", jsonObj.get("blocks").toString()));
      }

      JsonArray jsonArrayblocks = jsonObj.getAsJsonArray("blocks");
      // validate the required field `blocks` (array)
      for (int i = 0; i < jsonArrayblocks.size(); i++) {
        FormRenderBlock.validateJsonObject(jsonArrayblocks.get(i).getAsJsonObject());
      };
      // ensure the required json array is present
      if (jsonObj.get("rerenderQuestionIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rerenderQuestionIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rerenderQuestionIds` to be an array in the JSON string but got `%s`", jsonObj.get("rerenderQuestionIds").toString()));
      }
      if (!jsonObj.get("responseSensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseSensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseSensitive").toString()));
      }
      if ((jsonObj.get("authorSensitive") != null && !jsonObj.get("authorSensitive").isJsonNull()) && !jsonObj.get("authorSensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorSensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorSensitive").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormRender.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormRender' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormRender> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormRender.class));

       return (TypeAdapter<T>) new TypeAdapter<FormRender>() {
           @Override
           public void write(JsonWriter out, FormRender value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FormRender read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FormRender instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FormRender given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FormRender
  * @throws IOException if the JSON string is invalid with respect to FormRender
  */
  public static FormRender fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormRender.class);
  }

 /**
  * Convert an instance of FormRender to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

