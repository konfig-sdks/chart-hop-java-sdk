/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.TableRef;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PartialField
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PartialField {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_IN_USE = "inUse";
  @SerializedName(SERIALIZED_NAME_IN_USE)
  private Boolean inUse;

  public static final String SERIALIZED_NAME_EXPR = "expr";
  @SerializedName(SERIALIZED_NAME_EXPR)
  private String expr;

  /**
   * the expected type of the evaluated expression
   */
  @JsonAdapter(ExprTypeEnum.Adapter.class)
 public enum ExprTypeEnum {
    ADDRESS("ADDRESS"),
    
    BOOLEAN("BOOLEAN"),
    
    COMP("COMP"),
    
    COMPOUND("COMPOUND"),
    
    COMP_BAND("COMP_BAND"),
    
    CONTACTS("CONTACTS"),
    
    CURRENCY("CURRENCY"),
    
    DATE("DATE"),
    
    DECIMAL("DECIMAL"),
    
    ELAPSED_DAYS("ELAPSED_DAYS"),
    
    ELAPSED_MONTHS("ELAPSED_MONTHS"),
    
    ELAPSED_YEARS("ELAPSED_YEARS"),
    
    EMAIL("EMAIL"),
    
    ENUM("ENUM"),
    
    ENUM_EXPR("ENUM_EXPR"),
    
    ENUM_MULTI("ENUM_MULTI"),
    
    ENUM_SCALE("ENUM_SCALE"),
    
    EXPR("EXPR"),
    
    FILE("FILE"),
    
    GROUP("GROUP"),
    
    GROUPS("GROUPS"),
    
    GROUP_ASSIGNMENTS("GROUP_ASSIGNMENTS"),
    
    GROUP_TYPE("GROUP_TYPE"),
    
    IMAGE("IMAGE"),
    
    INTEGER("INTEGER"),
    
    JOB("JOB"),
    
    JOBS("JOBS"),
    
    JOB_TIER("JOB_TIER"),
    
    LIST("LIST"),
    
    MONEY("MONEY"),
    
    NAME("NAME"),
    
    OBJECT("OBJECT"),
    
    PAY_INTERVAL("PAY_INTERVAL"),
    
    PERCENT("PERCENT"),
    
    PERSON("PERSON"),
    
    PERSONS("PERSONS"),
    
    PHONE("PHONE"),
    
    STOCKGRANT("STOCKGRANT"),
    
    STRING("STRING"),
    
    TABLE_REF("TABLE_REF"),
    
    TEXT("TEXT"),
    
    TIMEOFF("TIMEOFF"),
    
    TIMESTAMP("TIMESTAMP"),
    
    TRACKED_GROUP("TRACKED_GROUP"),
    
    URL("URL"),
    
    USER("USER"),
    
    VARIABLE_COMP("VARIABLE_COMP"),
    
    VARIABLE_COMPS("VARIABLE_COMPS");

    private String value;

    ExprTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExprTypeEnum fromValue(String value) {
      for (ExprTypeEnum b : ExprTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExprTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExprTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExprTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExprTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EXPR_TYPE = "exprType";
  @SerializedName(SERIALIZED_NAME_EXPR_TYPE)
  private ExprTypeEnum exprType;

  /**
   * type of field
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    ADDRESS("ADDRESS"),
    
    BOOLEAN("BOOLEAN"),
    
    COMP("COMP"),
    
    COMPOUND("COMPOUND"),
    
    COMP_BAND("COMP_BAND"),
    
    CONTACTS("CONTACTS"),
    
    CURRENCY("CURRENCY"),
    
    DATE("DATE"),
    
    DECIMAL("DECIMAL"),
    
    ELAPSED_DAYS("ELAPSED_DAYS"),
    
    ELAPSED_MONTHS("ELAPSED_MONTHS"),
    
    ELAPSED_YEARS("ELAPSED_YEARS"),
    
    EMAIL("EMAIL"),
    
    ENUM("ENUM"),
    
    ENUM_EXPR("ENUM_EXPR"),
    
    ENUM_MULTI("ENUM_MULTI"),
    
    ENUM_SCALE("ENUM_SCALE"),
    
    EXPR("EXPR"),
    
    FILE("FILE"),
    
    GROUP("GROUP"),
    
    GROUPS("GROUPS"),
    
    GROUP_ASSIGNMENTS("GROUP_ASSIGNMENTS"),
    
    GROUP_TYPE("GROUP_TYPE"),
    
    IMAGE("IMAGE"),
    
    INTEGER("INTEGER"),
    
    JOB("JOB"),
    
    JOBS("JOBS"),
    
    JOB_TIER("JOB_TIER"),
    
    LIST("LIST"),
    
    MONEY("MONEY"),
    
    NAME("NAME"),
    
    OBJECT("OBJECT"),
    
    PAY_INTERVAL("PAY_INTERVAL"),
    
    PERCENT("PERCENT"),
    
    PERSON("PERSON"),
    
    PERSONS("PERSONS"),
    
    PHONE("PHONE"),
    
    STOCKGRANT("STOCKGRANT"),
    
    STRING("STRING"),
    
    TABLE_REF("TABLE_REF"),
    
    TEXT("TEXT"),
    
    TIMEOFF("TIMEOFF"),
    
    TIMESTAMP("TIMESTAMP"),
    
    TRACKED_GROUP("TRACKED_GROUP"),
    
    URL("URL"),
    
    USER("USER"),
    
    VARIABLE_COMP("VARIABLE_COMP"),
    
    VARIABLE_COMPS("VARIABLE_COMPS");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  /**
   * plural type of the field (either SINGLE, LIST, or SET)
   */
  @JsonAdapter(PluralEnum.Adapter.class)
 public enum PluralEnum {
    SINGLE("SINGLE"),
    
    LIST("LIST"),
    
    SET("SET");

    private String value;

    PluralEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PluralEnum fromValue(String value) {
      for (PluralEnum b : PluralEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PluralEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PluralEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PluralEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PluralEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PLURAL = "plural";
  @SerializedName(SERIALIZED_NAME_PLURAL)
  private PluralEnum plural;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<EnumValue> values = null;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "defaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private Object defaultValue;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  /**
   * entity type of field
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
 public enum EntityTypeEnum {
    JOB("JOB"),
    
    JOB_OPEN("JOB_OPEN"),
    
    JOB_FILLED("JOB_FILLED"),
    
    PERSON("PERSON"),
    
    CHANGE("CHANGE"),
    
    TABLE("TABLE"),
    
    ORG("ORG"),
    
    USER("USER"),
    
    NONE("NONE");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  /**
   * sensitivity level of data
   */
  @JsonAdapter(SensitiveEnum.Adapter.class)
 public enum SensitiveEnum {
    GLOBAL("GLOBAL"),
    
    ORG("ORG"),
    
    ORG_OTHER("ORG_OTHER"),
    
    PERSONAL_DEMOG("PERSONAL_DEMOG"),
    
    PERSONAL_BIRTH("PERSONAL_BIRTH"),
    
    PERSONAL_CONTACT("PERSONAL_CONTACT"),
    
    PERSONAL_PRIVATE("PERSONAL_PRIVATE"),
    
    SENSITIVE_BIRTH("SENSITIVE_BIRTH"),
    
    SENSITIVE_CONTACT("SENSITIVE_CONTACT"),
    
    TIMEOFF("TIMEOFF"),
    
    COMP_CASH("COMP_CASH"),
    
    COMP_EQUITY("COMP_EQUITY"),
    
    SENSITIVE("SENSITIVE"),
    
    PERSONAL("PERSONAL"),
    
    MANAGER("MANAGER"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    DIRECT("DIRECT"),
    
    PEERS("PEERS"),
    
    HIGH("HIGH"),
    
    PRIVATE("PRIVATE");

    private String value;

    SensitiveEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SensitiveEnum fromValue(String value) {
      for (SensitiveEnum b : SensitiveEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SensitiveEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SensitiveEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SensitiveEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SensitiveEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SENSITIVE = "sensitive";
  @SerializedName(SERIALIZED_NAME_SENSITIVE)
  private SensitiveEnum sensitive;

  public static final String SERIALIZED_NAME_HIDE_EXPR = "hideExpr";
  @SerializedName(SERIALIZED_NAME_HIDE_EXPR)
  private Boolean hideExpr;

  public static final String SERIALIZED_NAME_EXPIRE_DAYS = "expireDays";
  @SerializedName(SERIALIZED_NAME_EXPIRE_DAYS)
  private Integer expireDays;

  /**
   * the status of the field
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    HIDDEN("HIDDEN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TABLE_ID = "tableId";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_TABLE_REF = "tableRef";
  @SerializedName(SERIALIZED_NAME_TABLE_REF)
  private TableRef tableRef;

  public static final String SERIALIZED_NAME_IS_UNIQUE = "isUnique";
  @SerializedName(SERIALIZED_NAME_IS_UNIQUE)
  private Boolean isUnique;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "isRequired";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_IS_EFFECTIVE_DATED = "isEffectiveDated";
  @SerializedName(SERIALIZED_NAME_IS_EFFECTIVE_DATED)
  private Boolean isEffectiveDated;

  /**
   * Gets or Sets dataFetchTypes
   */
  @JsonAdapter(DataFetchTypesEnum.Adapter.class)
 public enum DataFetchTypesEnum {
    BASIC("BASIC"),
    
    UPDATE("UPDATE"),
    
    CHANGE("CHANGE"),
    
    RELATIONSHIP_MANAGER("RELATIONSHIP_MANAGER"),
    
    RELATIONSHIP_ALL("RELATIONSHIP_ALL"),
    
    TITLE("TITLE"),
    
    PROMOTION("PROMOTION"),
    
    GROUP("GROUP"),
    
    COMP("COMP"),
    
    COMP_HISTORY("COMP_HISTORY"),
    
    GRANT("GRANT"),
    
    TIMEOFF("TIMEOFF"),
    
    PERSON_JOIN("PERSON_JOIN"),
    
    ALL_DATA("ALL_DATA");

    private String value;

    DataFetchTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFetchTypesEnum fromValue(String value) {
      for (DataFetchTypesEnum b : DataFetchTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataFetchTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFetchTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFetchTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataFetchTypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_FETCH_TYPES = "dataFetchTypes";
  @SerializedName(SERIALIZED_NAME_DATA_FETCH_TYPES)
  private Set<DataFetchTypesEnum> dataFetchTypes = null;

  public static final String SERIALIZED_NAME_ALIASES = "aliases";
  @SerializedName(SERIALIZED_NAME_ALIASES)
  private Set<String> aliases = null;

  /**
   * unique ID for the function that runs to calculate the value of this field. For native fields only
   */
  @JsonAdapter(CalcEnum.Adapter.class)
 public enum CalcEnum {
    ADDRESS("ADDRESS"),
    
    AGE("AGE"),
    
    ANNIVERSARY("ANNIVERSARY"),
    
    ANNUAL_BASE_MONEY("ANNUAL_BASE_MONEY"),
    
    BACKFILL("BACKFILL"),
    
    BAND("BAND"),
    
    BAND_RANGE("BAND_RANGE"),
    
    BASE("BASE"),
    
    BASE_CAL_YEAR_PRORATED("BASE_CAL_YEAR_PRORATED"),
    
    BASE_CAL_YTD("BASE_CAL_YTD"),
    
    BASE_COMP("BASE_COMP"),
    
    BASE_COMP_AMOUNT("BASE_COMP_AMOUNT"),
    
    BASE_COMP_ANNUALIZED("BASE_COMP_ANNUALIZED"),
    
    BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY("BASE_COMP_ANNUALIZED_AS_ORG_CURRENCY"),
    
    BASE_COMP_AS_ORG_CURRENCY("BASE_COMP_AS_ORG_CURRENCY"),
    
    BASE_COMP_CHANGES("BASE_COMP_CHANGES"),
    
    BASE_COMP_CURRENCY("BASE_COMP_CURRENCY"),
    
    BASE_COMP_HOURS_PER_WEEK("BASE_COMP_HOURS_PER_WEEK"),
    
    BASE_COMP_INTERVAL("BASE_COMP_INTERVAL"),
    
    BASE_COMP_LAST_RAISE_DATE("BASE_COMP_LAST_RAISE_DATE"),
    
    BASE_COMP_LAST_RAISE_MONTHS_SINCE("BASE_COMP_LAST_RAISE_MONTHS_SINCE"),
    
    BASE_COMP_LAST_RAISE_PAY("BASE_COMP_LAST_RAISE_PAY"),
    
    BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY("BASE_COMP_LAST_RAISE_PAY_AS_ORG_CURRENCY"),
    
    BASE_COMP_LAST_RAISE_PERCENT("BASE_COMP_LAST_RAISE_PERCENT"),
    
    BASE_COMP_LAST_RAISE_TYPE("BASE_COMP_LAST_RAISE_TYPE"),
    
    BASE_COMP_PAY("BASE_COMP_PAY"),
    
    BASE_COMP_PAY_AS_ORG_CURRENCY("BASE_COMP_PAY_AS_ORG_CURRENCY"),
    
    BASE_COMP_WEEKS_PER_YEAR("BASE_COMP_WEEKS_PER_YEAR"),
    
    BASE_FISCAL_YEAR_PRORATED("BASE_FISCAL_YEAR_PRORATED"),
    
    BASE_FISCAL_YTD("BASE_FISCAL_YTD"),
    
    BASE_PRIMARY("BASE_PRIMARY"),
    
    BASE_RAISE_AMOUNT("BASE_RAISE_AMOUNT"),
    
    BASE_RAISE_DATE("BASE_RAISE_DATE"),
    
    BASE_RAISE_PERCENT("BASE_RAISE_PERCENT"),
    
    BIRTH_DATE("BIRTH_DATE"),
    
    BIRTHDAY("BIRTHDAY"),
    
    BONUS_TARGET("BONUS_TARGET"),
    
    BUDGET_COST("BUDGET_COST"),
    
    BUSINESS_UNITS("BUSINESS_UNITS"),
    
    CAL_YEAR_VEST_SHARES("CAL_YEAR_VEST_SHARES"),
    
    CAL_YEAR_VEST_VALUE("CAL_YEAR_VEST_VALUE"),
    
    CAN_APPROVE_CHANGE("CAN_APPROVE_CHANGE"),
    
    CAN_EDIT_JOB("CAN_EDIT_JOB"),
    
    CASH_COMP("CASH_COMP"),
    
    CASH_COMP_LOCAL("CASH_COMP_LOCAL"),
    
    CHANGE("CHANGE"),
    
    CHANGE_ID("CHANGE_ID"),
    
    COMMISSION_TARGET("COMMISSION_TARGET"),
    
    COMP("COMP"),
    
    COMP_CHANGE_PERCENT("COMP_CHANGE_PERCENT"),
    
    COMPA_RATIO_MID("COMPA_RATIO_MID"),
    
    COMPA_RATIO_TARGET("COMPA_RATIO_TARGET"),
    
    CONTACT("CONTACT"),
    
    COST("COST"),
    
    CREATE_DATE("CREATE_DATE"),
    
    CURRENCY("CURRENCY"),
    
    DATA("DATA"),
    
    DATE("DATE"),
    
    DATE_OF("DATE_OF"),
    
    DAYS_ACTIVE("DAYS_ACTIVE"),
    
    DAYS_OFF("DAYS_OFF"),
    
    DAYS_OFF_TAKEN("DAYS_OFF_TAKEN"),
    
    DAYS_OFF_UPCOMING("DAYS_OFF_UPCOMING"),
    
    DAYS_OPEN("DAYS_OPEN"),
    
    DB("DB"),
    
    DEPART("DEPART"),
    
    DEPARTMENT("DEPARTMENT"),
    
    DEPARTMENT_FUNC("DEPARTMENT_FUNC"),
    
    DIRECT_JOBS("DIRECT_JOBS"),
    
    DIRECT_JOB_COUNT("DIRECT_JOB_COUNT"),
    
    DIRECT_PERSON_COUNT("DIRECT_PERSON_COUNT"),
    
    EMPLOYMENT("EMPLOYMENT"),
    
    END_DATE_JOB("END_DATE_JOB"),
    
    END_DATE_ORG("END_DATE_ORG"),
    
    ETHNICITY("ETHNICITY"),
    
    FISCAL_YEAR_COST("FISCAL_YEAR_COST"),
    
    GENDER("GENDER"),
    
    GEOIP("GEOIP"),
    
    GEOIP_ADDRESS("GEOIP_ADDRESS"),
    
    GRAND_MANAGER("GRAND_MANAGER"),
    
    GRANT_SHARES("GRANT_SHARES"),
    
    GRANT_TYPE("GRANT_TYPE"),
    
    GRANT_VALUE("GRANT_VALUE"),
    
    GRANTS("GRANTS"),
    
    GROUP_IDS("GROUP_IDS"),
    
    HEADCOUNT("HEADCOUNT"),
    
    HISTORIC_BACKFILL("HISTORIC_BACKFILL"),
    
    HOUR("HOUR"),
    
    HOURLY("HOURLY"),
    
    HOURLY_PRIMARY("HOURLY_PRIMARY"),
    
    HOURS_PER_WEEK("HOURS_PER_WEEK"),
    
    IMAGE("IMAGE"),
    
    INDIRECT("INDIRECT"),
    
    INDIRECT_JOBS("INDIRECT_JOBS"),
    
    JOB("JOB"),
    
    JOB_ID("JOB_ID"),
    
    JOB_CODE("JOB_CODE"),
    
    JOBCOUNT("JOBCOUNT"),
    
    LAST_GRANT("LAST_GRANT"),
    
    LAST_GRANT_DATE("LAST_GRANT_DATE"),
    
    LAST_GRANT_ORIGINAL_VALUE("LAST_GRANT_ORIGINAL_VALUE"),
    
    LOCATION("LOCATION"),
    
    MANAGE_JOBS("MANAGE_JOBS"),
    
    MANAGE_PERSONS("MANAGE_PERSONS"),
    
    MANAGER("MANAGER"),
    
    MANAGER_COUNT("MANAGER_COUNT"),
    
    MANAGER_FILLED("MANAGER_FILLED"),
    
    MANAGER_ID("MANAGER_ID"),
    
    MANAGERS("MANAGERS"),
    
    MANAGER_PERSON("MANAGER_PERSON"),
    
    MANAGER_PERSONS("MANAGER_PERSONS"),
    
    ME("ME"),
    
    MERGE_SCENARIO_ID("MERGE_SCENARIO_ID"),
    
    NAME("NAME"),
    
    NAME_AUDIO("NAME_AUDIO"),
    
    NAME_TITLE("NAME_TITLE"),
    
    NEXT_DAY_OFF("NEXT_DAY_OFF"),
    
    NEXT_TIME_OFF("NEXT_TIME_OFF"),
    
    NEXT_YEAR_VEST_SHARES("NEXT_YEAR_VEST_SHARES"),
    
    NEXT_YEAR_VEST_VALUE("NEXT_YEAR_VEST_VALUE"),
    
    NOTE("NOTE"),
    
    NOOP("NOOP"),
    
    OPEN("OPEN"),
    
    ORG("ORG"),
    
    PERSON("PERSON"),
    
    PERSON_ID("PERSON_ID"),
    
    PLACEMENT("PLACEMENT"),
    
    PREV_DAY_OFF("PREV_DAY_OFF"),
    
    PREV_TIME_OFF("PREV_TIME_OFF"),
    
    PROMOTION("PROMOTION"),
    
    PROMOTION_DATE("PROMOTION_DATE"),
    
    PROPOSED("PROPOSED"),
    
    Q("Q"),
    
    RAISE_AMOUNT("RAISE_AMOUNT"),
    
    RAISE_DATE("RAISE_DATE"),
    
    RAISE_PERCENT("RAISE_PERCENT"),
    
    RAISE_PROMOTION_DATE("RAISE_PROMOTION_DATE"),
    
    REASON("REASON"),
    
    REGRET("REGRET"),
    
    RELATIONSHIPS("RELATIONSHIPS"),
    
    REMOTE_WORK_ADDRESS("REMOTE_WORK_ADDRESS"),
    
    SCENARIO("SCENARIO"),
    
    SCENARIO_CHANGED("SCENARIO_CHANGED"),
    
    SENSITIVE("SENSITIVE"),
    
    SENSITIVE_FIELDS("SENSITIVE_FIELDS"),
    
    START_DATE("START_DATE"),
    
    START_DATE_JOB("START_DATE_JOB"),
    
    START_DATE_ORG("START_DATE_ORG"),
    
    START_DATE_PLANNED("START_DATE_PLANNED"),
    
    STATE("STATE"),
    
    STRIKE_PRICE("STRIKE_PRICE"),
    
    TARGET_HOURS_PER_WEEK("TARGET_HOURS_PER_WEEK"),
    
    TARGET_WEEKS_PER_YEAR("TARGET_WEEKS_PER_YEAR"),
    
    TEAM("TEAM"),
    
    TENURE_JOB("TENURE_JOB"),
    
    TENURE_ORG("TENURE_ORG"),
    
    TIMEZONE_OFFSET("TIMEZONE_OFFSET"),
    
    TITLE("TITLE"),
    
    TITLE_DATE("TITLE_DATE"),
    
    TODAY("TODAY"),
    
    TOTAL_COMP("TOTAL_COMP"),
    
    TOTAL_COMP_LOCAL("TOTAL_COMP_LOCAL"),
    
    TOTAL_ORG_SHARES("TOTAL_ORG_SHARES"),
    
    TOTAL_SHARES("TOTAL_SHARES"),
    
    TOTAL_SHARES_VALUE("TOTAL_SHARES_VALUE"),
    
    UNDER("UNDER"),
    
    UNDER_INCLUDING("UNDER_INCLUDING"),
    
    UNDER_JOBS("UNDER_JOBS"),
    
    UNVESTED_SHARES("UNVESTED_SHARES"),
    
    UNVESTED_VALUE("UNVESTED_VALUE"),
    
    UPDATE("UPDATE"),
    
    USER_ACTIVE_DAYS("USER_ACTIVE_DAYS"),
    
    USER_CAN_EDIT_COMP_FOR_JOB("USER_CAN_EDIT_COMP_FOR_JOB"),
    
    USER("USER"),
    
    VARIABLE("VARIABLE"),
    
    VARIABLE_AMOUNT("VARIABLE_AMOUNT"),
    
    VARIABLE_INTERVAL("VARIABLE_INTERVAL"),
    
    VARIABLE_PERCENT("VARIABLE_PERCENT"),
    
    VARIABLE_PRIMARY("VARIABLE_PRIMARY"),
    
    VARIABLE_TARGET("VARIABLE_TARGET"),
    
    VARIABLE_TARGET_AMOUNT("VARIABLE_TARGET_AMOUNT"),
    
    VARIABLE_TARGET_ANNUALIZED("VARIABLE_TARGET_ANNUALIZED"),
    
    VARIABLE_TARGET_CURRENCY("VARIABLE_TARGET_CURRENCY"),
    
    VARIABLE_TARGET_PERCENT("VARIABLE_TARGET_PERCENT"),
    
    VARIABLE_TARGET_TYPE("VARIABLE_TARGET_TYPE"),
    
    VARIABLE_TARGETS("VARIABLE_TARGETS"),
    
    VARIABLE_TARGETS_LAST_RAISE_DATE("VARIABLE_TARGETS_LAST_RAISE_DATE"),
    
    VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE("VARIABLE_TARGETS_LAST_RAISE_MONTHS_SINCE"),
    
    VARIABLE_TARGETS_LAST_RAISE_PAY("VARIABLE_TARGETS_LAST_RAISE_PAY"),
    
    VARIABLE_TARGETS_LAST_RAISE_PERCENT("VARIABLE_TARGETS_LAST_RAISE_PERCENT"),
    
    VARIABLE_TYPE("VARIABLE_TYPE"),
    
    VESTED_DATE("VESTED_DATE"),
    
    VESTED_SHARES("VESTED_SHARES"),
    
    VESTED_VALUE("VESTED_VALUE"),
    
    WEEKS_PER_YEAR("WEEKS_PER_YEAR"),
    
    WORK_ADDRESS("WORK_ADDRESS");

    private String value;

    CalcEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalcEnum fromValue(String value) {
      for (CalcEnum b : CalcEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalcEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalcEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalcEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalcEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALC = "calc";
  @SerializedName(SERIALIZED_NAME_CALC)
  private CalcEnum calc;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  /**
   * indicates how this field is calculated (whether it&#39;s stored in the DB, evaluated through the expression service, or compound)
   */
  @JsonAdapter(ClassificationEnum.Adapter.class)
 public enum ClassificationEnum {
    COMPOUND("COMPOUND");

    private String value;

    ClassificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationEnum fromValue(String value) {
      for (ClassificationEnum b : ClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClassificationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private ClassificationEnum classification;

  public static final String SERIALIZED_NAME_PLACES = "places";
  @SerializedName(SERIALIZED_NAME_PLACES)
  private Integer places;

  public static final String SERIALIZED_NAME_CREATE_ID = "createId";
  @SerializedName(SERIALIZED_NAME_CREATE_ID)
  private String createId;

  public static final String SERIALIZED_NAME_CREATE_AT = "createAt";
  @SerializedName(SERIALIZED_NAME_CREATE_AT)
  private String createAt;

  public static final String SERIALIZED_NAME_UPDATE_ID = "updateId";
  @SerializedName(SERIALIZED_NAME_UPDATE_ID)
  private String updateId;

  public static final String SERIALIZED_NAME_UPDATE_AT = "updateAt";
  @SerializedName(SERIALIZED_NAME_UPDATE_AT)
  private String updateAt;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public PartialField() {
  }

  public PartialField description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * description of field
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This field tracks the most recent performance rating for an individual.", value = "description of field")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PartialField id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * globally unique id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "globally unique id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public PartialField orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id (empty if global)
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent organization id (empty if global)")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public PartialField name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * short field name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "summary", value = "short field name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PartialField label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human-readable full name of field
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Job Summary", value = "human-readable full name of field")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public PartialField question(String question) {
    
    
    
    
    this.question = question;
    return this;
  }

   /**
   * human-readable question associated with field
   * @return question
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "What do you think of this placeholder question?", value = "human-readable question associated with field")

  public String getQuestion() {
    return question;
  }


  public void setQuestion(String question) {
    
    
    
    this.question = question;
  }


  public PartialField inUse(Boolean inUse) {
    
    
    
    
    this.inUse = inUse;
    return this;
  }

   /**
   * disallow any updates to this Field (except for field.question string)
   * @return inUse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "disallow any updates to this Field (except for field.question string)")

  public Boolean getInUse() {
    return inUse;
  }


  public void setInUse(Boolean inUse) {
    
    
    
    this.inUse = inUse;
  }


  public PartialField expr(String expr) {
    
    
    
    
    this.expr = expr;
    return this;
  }

   /**
   * calculated expression
   * @return expr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "(base + variable) / 12", value = "calculated expression")

  public String getExpr() {
    return expr;
  }


  public void setExpr(String expr) {
    
    
    
    this.expr = expr;
  }


  public PartialField exprType(ExprTypeEnum exprType) {
    
    
    
    
    this.exprType = exprType;
    return this;
  }

   /**
   * the expected type of the evaluated expression
   * @return exprType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the expected type of the evaluated expression")

  public ExprTypeEnum getExprType() {
    return exprType;
  }


  public void setExprType(ExprTypeEnum exprType) {
    
    
    
    this.exprType = exprType;
  }


  public PartialField type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of field
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "type of field")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public PartialField plural(PluralEnum plural) {
    
    
    
    
    this.plural = plural;
    return this;
  }

   /**
   * plural type of the field (either SINGLE, LIST, or SET)
   * @return plural
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "plural type of the field (either SINGLE, LIST, or SET)")

  public PluralEnum getPlural() {
    return plural;
  }


  public void setPlural(PluralEnum plural) {
    
    
    
    this.plural = plural;
  }


  public PartialField values(List<EnumValue> values) {
    
    
    
    
    this.values = values;
    return this;
  }

  public PartialField addValuesItem(EnumValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * possible values (enum type only)
   * @return values
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "possible values (enum type only)")

  public List<EnumValue> getValues() {
    return values;
  }


  public void setValues(List<EnumValue> values) {
    
    
    
    this.values = values;
  }


  public PartialField defaultValue(Object defaultValue) {
    
    
    
    
    this.defaultValue = defaultValue;
    return this;
  }

   /**
   * default value if field is not set
   * @return defaultValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "default value if field is not set")

  public Object getDefaultValue() {
    return defaultValue;
  }


  public void setDefaultValue(Object defaultValue) {
    
    
    
    this.defaultValue = defaultValue;
  }


  public PartialField options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * validation options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "validation options")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }


  public PartialField entityType(EntityTypeEnum entityType) {
    
    
    
    
    this.entityType = entityType;
    return this;
  }

   /**
   * entity type of field
   * @return entityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "entity type of field")

  public EntityTypeEnum getEntityType() {
    return entityType;
  }


  public void setEntityType(EntityTypeEnum entityType) {
    
    
    
    this.entityType = entityType;
  }


  public PartialField sensitive(SensitiveEnum sensitive) {
    
    
    
    
    this.sensitive = sensitive;
    return this;
  }

   /**
   * sensitivity level of data
   * @return sensitive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sensitivity level of data")

  public SensitiveEnum getSensitive() {
    return sensitive;
  }


  public void setSensitive(SensitiveEnum sensitive) {
    
    
    
    this.sensitive = sensitive;
  }


  public PartialField hideExpr(Boolean hideExpr) {
    
    
    
    
    this.hideExpr = hideExpr;
    return this;
  }

   /**
   * hide expression-derived values from non-sensitive users
   * @return hideExpr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "hide expression-derived values from non-sensitive users")

  public Boolean getHideExpr() {
    return hideExpr;
  }


  public void setHideExpr(Boolean hideExpr) {
    
    
    
    this.hideExpr = hideExpr;
  }


  public PartialField expireDays(Integer expireDays) {
    if (expireDays != null && expireDays < 1) {
      throw new IllegalArgumentException("Invalid value for expireDays. Must be greater than or equal to 1.");
    }
    
    
    
    this.expireDays = expireDays;
    return this;
  }

   /**
   * number of days after which the data becomes invalid
   * minimum: 1
   * @return expireDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of days after which the data becomes invalid")

  public Integer getExpireDays() {
    return expireDays;
  }


  public void setExpireDays(Integer expireDays) {
    if (expireDays != null && expireDays < 1) {
      throw new IllegalArgumentException("Invalid value for expireDays. Must be greater than or equal to 1.");
    }
    
    
    this.expireDays = expireDays;
  }


  public PartialField status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * the status of the field
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the status of the field")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public PartialField tableId(String tableId) {
    
    
    
    
    this.tableId = tableId;
    return this;
  }

   /**
   * the table id this field applies to, only applicable when EntityType equals TABLE
   * @return tableId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the table id this field applies to, only applicable when EntityType equals TABLE")

  public String getTableId() {
    return tableId;
  }


  public void setTableId(String tableId) {
    
    
    
    this.tableId = tableId;
  }


  public PartialField tableRef(TableRef tableRef) {
    
    
    
    
    this.tableRef = tableRef;
    return this;
  }

   /**
   * Get tableRef
   * @return tableRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TableRef getTableRef() {
    return tableRef;
  }


  public void setTableRef(TableRef tableRef) {
    
    
    
    this.tableRef = tableRef;
  }


  public PartialField isUnique(Boolean isUnique) {
    
    
    
    
    this.isUnique = isUnique;
    return this;
  }

   /**
   * indicates that this field value is unique in conjunction with entityType PERSON or JOB
   * @return isUnique
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "indicates that this field value is unique in conjunction with entityType PERSON or JOB")

  public Boolean getIsUnique() {
    return isUnique;
  }


  public void setIsUnique(Boolean isUnique) {
    
    
    
    this.isUnique = isUnique;
  }


  public PartialField isRequired(Boolean isRequired) {
    
    
    
    
    this.isRequired = isRequired;
    return this;
  }

   /**
   * indicates that this field value is required
   * @return isRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "indicates that this field value is required")

  public Boolean getIsRequired() {
    return isRequired;
  }


  public void setIsRequired(Boolean isRequired) {
    
    
    
    this.isRequired = isRequired;
  }


  public PartialField isEffectiveDated(Boolean isEffectiveDated) {
    
    
    
    
    this.isEffectiveDated = isEffectiveDated;
    return this;
  }

   /**
   * indicates that this field value is effective-dated
   * @return isEffectiveDated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "indicates that this field value is effective-dated")

  public Boolean getIsEffectiveDated() {
    return isEffectiveDated;
  }


  public void setIsEffectiveDated(Boolean isEffectiveDated) {
    
    
    
    this.isEffectiveDated = isEffectiveDated;
  }


  public PartialField dataFetchTypes(Set<DataFetchTypesEnum> dataFetchTypes) {
    
    
    
    
    this.dataFetchTypes = dataFetchTypes;
    return this;
  }

  public PartialField addDataFetchTypesItem(DataFetchTypesEnum dataFetchTypesItem) {
    if (this.dataFetchTypes == null) {
      this.dataFetchTypes = new LinkedHashSet<>();
    }
    this.dataFetchTypes.add(dataFetchTypesItem);
    return this;
  }

   /**
   * set of data fetch types
   * @return dataFetchTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set of data fetch types")

  public Set<DataFetchTypesEnum> getDataFetchTypes() {
    return dataFetchTypes;
  }


  public void setDataFetchTypes(Set<DataFetchTypesEnum> dataFetchTypes) {
    
    
    
    this.dataFetchTypes = dataFetchTypes;
  }


  public PartialField aliases(Set<String> aliases) {
    
    
    
    
    this.aliases = aliases;
    return this;
  }

  public PartialField addAliasesItem(String aliasesItem) {
    if (this.aliases == null) {
      this.aliases = new LinkedHashSet<>();
    }
    this.aliases.add(aliasesItem);
    return this;
  }

   /**
   * set of aliases for this field
   * @return aliases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "set of aliases for this field")

  public Set<String> getAliases() {
    return aliases;
  }


  public void setAliases(Set<String> aliases) {
    
    
    
    this.aliases = aliases;
  }


  public PartialField calc(CalcEnum calc) {
    
    
    
    
    this.calc = calc;
    return this;
  }

   /**
   * unique ID for the function that runs to calculate the value of this field. For native fields only
   * @return calc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "unique ID for the function that runs to calculate the value of this field. For native fields only")

  public CalcEnum getCalc() {
    return calc;
  }


  public void setCalc(CalcEnum calc) {
    
    
    
    this.calc = calc;
  }


  public PartialField categoryId(String categoryId) {
    
    
    
    
    this.categoryId = categoryId;
    return this;
  }

   /**
   * ID of the category to which this field belongs, if any
   * @return categoryId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the category to which this field belongs, if any")

  public String getCategoryId() {
    return categoryId;
  }


  public void setCategoryId(String categoryId) {
    
    
    
    this.categoryId = categoryId;
  }


  public PartialField classification(ClassificationEnum classification) {
    
    
    
    
    this.classification = classification;
    return this;
  }

   /**
   * indicates how this field is calculated (whether it&#39;s stored in the DB, evaluated through the expression service, or compound)
   * @return classification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "indicates how this field is calculated (whether it's stored in the DB, evaluated through the expression service, or compound)")

  public ClassificationEnum getClassification() {
    return classification;
  }


  public void setClassification(ClassificationEnum classification) {
    
    
    
    this.classification = classification;
  }


  public PartialField places(Integer places) {
    
    
    
    
    this.places = places;
    return this;
  }

   /**
   * number of decimal places for money values
   * @return places
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "number of decimal places for money values")

  public Integer getPlaces() {
    return places;
  }


  public void setPlaces(Integer places) {
    
    
    
    this.places = places;
  }


  public PartialField createId(String createId) {
    
    
    
    
    this.createId = createId;
    return this;
  }

   /**
   * created by user id
   * @return createId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "created by user id")

  public String getCreateId() {
    return createId;
  }


  public void setCreateId(String createId) {
    
    
    
    this.createId = createId;
  }


  public PartialField createAt(String createAt) {
    
    
    
    
    this.createAt = createAt;
    return this;
  }

   /**
   * created timestamp
   * @return createAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "created timestamp")

  public String getCreateAt() {
    return createAt;
  }


  public void setCreateAt(String createAt) {
    
    
    
    this.createAt = createAt;
  }


  public PartialField updateId(String updateId) {
    
    
    
    
    this.updateId = updateId;
    return this;
  }

   /**
   * last updated by user id
   * @return updateId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "last updated by user id")

  public String getUpdateId() {
    return updateId;
  }


  public void setUpdateId(String updateId) {
    
    
    
    this.updateId = updateId;
  }


  public PartialField updateAt(String updateAt) {
    
    
    
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * last updated timestamp
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "last updated timestamp")

  public String getUpdateAt() {
    return updateAt;
  }


  public void setUpdateAt(String updateAt) {
    
    
    
    this.updateAt = updateAt;
  }


  public PartialField deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public PartialField deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PartialField instance itself
   */
  public PartialField putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartialField partialField = (PartialField) o;
    return Objects.equals(this.description, partialField.description) &&
        Objects.equals(this.id, partialField.id) &&
        Objects.equals(this.orgId, partialField.orgId) &&
        Objects.equals(this.name, partialField.name) &&
        Objects.equals(this.label, partialField.label) &&
        Objects.equals(this.question, partialField.question) &&
        Objects.equals(this.inUse, partialField.inUse) &&
        Objects.equals(this.expr, partialField.expr) &&
        Objects.equals(this.exprType, partialField.exprType) &&
        Objects.equals(this.type, partialField.type) &&
        Objects.equals(this.plural, partialField.plural) &&
        Objects.equals(this.values, partialField.values) &&
        Objects.equals(this.defaultValue, partialField.defaultValue) &&
        Objects.equals(this.options, partialField.options) &&
        Objects.equals(this.entityType, partialField.entityType) &&
        Objects.equals(this.sensitive, partialField.sensitive) &&
        Objects.equals(this.hideExpr, partialField.hideExpr) &&
        Objects.equals(this.expireDays, partialField.expireDays) &&
        Objects.equals(this.status, partialField.status) &&
        Objects.equals(this.tableId, partialField.tableId) &&
        Objects.equals(this.tableRef, partialField.tableRef) &&
        Objects.equals(this.isUnique, partialField.isUnique) &&
        Objects.equals(this.isRequired, partialField.isRequired) &&
        Objects.equals(this.isEffectiveDated, partialField.isEffectiveDated) &&
        Objects.equals(this.dataFetchTypes, partialField.dataFetchTypes) &&
        Objects.equals(this.aliases, partialField.aliases) &&
        Objects.equals(this.calc, partialField.calc) &&
        Objects.equals(this.categoryId, partialField.categoryId) &&
        Objects.equals(this.classification, partialField.classification) &&
        Objects.equals(this.places, partialField.places) &&
        Objects.equals(this.createId, partialField.createId) &&
        Objects.equals(this.createAt, partialField.createAt) &&
        Objects.equals(this.updateId, partialField.updateId) &&
        Objects.equals(this.updateAt, partialField.updateAt) &&
        Objects.equals(this.deleteId, partialField.deleteId) &&
        Objects.equals(this.deleteAt, partialField.deleteAt)&&
        Objects.equals(this.additionalProperties, partialField.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, orgId, name, label, question, inUse, expr, exprType, type, plural, values, defaultValue, options, entityType, sensitive, hideExpr, expireDays, status, tableId, tableRef, isUnique, isRequired, isEffectiveDated, dataFetchTypes, aliases, calc, categoryId, classification, places, createId, createAt, updateId, updateAt, deleteId, deleteAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartialField {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    expr: ").append(toIndentedString(expr)).append("\n");
    sb.append("    exprType: ").append(toIndentedString(exprType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    plural: ").append(toIndentedString(plural)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
    sb.append("    hideExpr: ").append(toIndentedString(hideExpr)).append("\n");
    sb.append("    expireDays: ").append(toIndentedString(expireDays)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    tableRef: ").append(toIndentedString(tableRef)).append("\n");
    sb.append("    isUnique: ").append(toIndentedString(isUnique)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    isEffectiveDated: ").append(toIndentedString(isEffectiveDated)).append("\n");
    sb.append("    dataFetchTypes: ").append(toIndentedString(dataFetchTypes)).append("\n");
    sb.append("    aliases: ").append(toIndentedString(aliases)).append("\n");
    sb.append("    calc: ").append(toIndentedString(calc)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    places: ").append(toIndentedString(places)).append("\n");
    sb.append("    createId: ").append(toIndentedString(createId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateId: ").append(toIndentedString(updateId)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("orgId");
    openapiFields.add("name");
    openapiFields.add("label");
    openapiFields.add("question");
    openapiFields.add("inUse");
    openapiFields.add("expr");
    openapiFields.add("exprType");
    openapiFields.add("type");
    openapiFields.add("plural");
    openapiFields.add("values");
    openapiFields.add("defaultValue");
    openapiFields.add("options");
    openapiFields.add("entityType");
    openapiFields.add("sensitive");
    openapiFields.add("hideExpr");
    openapiFields.add("expireDays");
    openapiFields.add("status");
    openapiFields.add("tableId");
    openapiFields.add("tableRef");
    openapiFields.add("isUnique");
    openapiFields.add("isRequired");
    openapiFields.add("isEffectiveDated");
    openapiFields.add("dataFetchTypes");
    openapiFields.add("aliases");
    openapiFields.add("calc");
    openapiFields.add("categoryId");
    openapiFields.add("classification");
    openapiFields.add("places");
    openapiFields.add("createId");
    openapiFields.add("createAt");
    openapiFields.add("updateId");
    openapiFields.add("updateAt");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PartialField
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PartialField.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartialField is not found in the empty JSON string", PartialField.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("question") != null && !jsonObj.get("question").isJsonNull()) && !jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      if ((jsonObj.get("expr") != null && !jsonObj.get("expr").isJsonNull()) && !jsonObj.get("expr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expr").toString()));
      }
      if ((jsonObj.get("exprType") != null && !jsonObj.get("exprType").isJsonNull()) && !jsonObj.get("exprType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exprType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exprType").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("plural") != null && !jsonObj.get("plural").isJsonNull()) && !jsonObj.get("plural").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plural` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plural").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            EnumValue.validateJsonObject(jsonArrayvalues.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("sensitive") != null && !jsonObj.get("sensitive").isJsonNull()) && !jsonObj.get("sensitive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitive").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tableId") != null && !jsonObj.get("tableId").isJsonNull()) && !jsonObj.get("tableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableId").toString()));
      }
      // validate the optional field `tableRef`
      if (jsonObj.get("tableRef") != null && !jsonObj.get("tableRef").isJsonNull()) {
        TableRef.validateJsonObject(jsonObj.getAsJsonObject("tableRef"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataFetchTypes") != null && !jsonObj.get("dataFetchTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFetchTypes` to be an array in the JSON string but got `%s`", jsonObj.get("dataFetchTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("aliases") != null && !jsonObj.get("aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliases` to be an array in the JSON string but got `%s`", jsonObj.get("aliases").toString()));
      }
      if ((jsonObj.get("calc") != null && !jsonObj.get("calc").isJsonNull()) && !jsonObj.get("calc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calc").toString()));
      }
      if ((jsonObj.get("categoryId") != null && !jsonObj.get("categoryId").isJsonNull()) && !jsonObj.get("categoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `categoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("categoryId").toString()));
      }
      if ((jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) && !jsonObj.get("classification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classification").toString()));
      }
      if ((jsonObj.get("createId") != null && !jsonObj.get("createId").isJsonNull()) && !jsonObj.get("createId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createId").toString()));
      }
      if ((jsonObj.get("createAt") != null && !jsonObj.get("createAt").isJsonNull()) && !jsonObj.get("createAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createAt").toString()));
      }
      if ((jsonObj.get("updateId") != null && !jsonObj.get("updateId").isJsonNull()) && !jsonObj.get("updateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateId").toString()));
      }
      if ((jsonObj.get("updateAt") != null && !jsonObj.get("updateAt").isJsonNull()) && !jsonObj.get("updateAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateAt").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartialField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartialField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartialField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartialField.class));

       return (TypeAdapter<T>) new TypeAdapter<PartialField>() {
           @Override
           public void write(JsonWriter out, PartialField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PartialField read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PartialField instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PartialField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PartialField
  * @throws IOException if the JSON string is invalid with respect to PartialField
  */
  public static PartialField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartialField.class);
  }

 /**
  * Convert an instance of PartialField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

