/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DueDate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateTaskConfig
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateTaskConfig {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ASSESSMENT_ID = "assessmentId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_ID)
  private String assessmentId;

  public static final String SERIALIZED_NAME_PARENT_ENTITY_ID = "parentEntityId";
  @SerializedName(SERIALIZED_NAME_PARENT_ENTITY_ID)
  private String parentEntityId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  /**
   * type of task generated by the task config
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    FORM_SUBMIT("FORM_SUBMIT"),
    
    CHANGE_APPROVE("CHANGE_APPROVE"),
    
    TIMEOFF_APPROVE("TIMEOFF_APPROVE"),
    
    SCENARIO_CHANGES_APPROVE("SCENARIO_CHANGES_APPROVE"),
    
    SCENARIO_CHANGES_CREATE("SCENARIO_CHANGES_CREATE"),
    
    ORG_IMPORT("ORG_IMPORT"),
    
    COMP_REVIEW_APPROVAL_SUBMIT("COMP_REVIEW_APPROVAL_SUBMIT"),
    
    SCENARIO_APPROVAL_SUBMIT("SCENARIO_APPROVAL_SUBMIT"),
    
    APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER("APPROVAL_CHAIN_UPDATE_FALLBACK_APPROVER"),
    
    ACTION("ACTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private DueDate dueDate;

  /**
   * sets pastDueAction on the task when it&#39;s generated
   */
  @JsonAdapter(PastDueActionEnum.Adapter.class)
 public enum PastDueActionEnum {
    NONE("NONE"),
    
    SET_EXPIRED("SET_EXPIRED");

    private String value;

    PastDueActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PastDueActionEnum fromValue(String value) {
      for (PastDueActionEnum b : PastDueActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PastDueActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PastDueActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PastDueActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PastDueActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PAST_DUE_ACTION = "pastDueAction";
  @SerializedName(SERIALIZED_NAME_PAST_DUE_ACTION)
  private PastDueActionEnum pastDueAction;

  public static final String SERIALIZED_NAME_IS_SKIPPABLE = "isSkippable";
  @SerializedName(SERIALIZED_NAME_IS_SKIPPABLE)
  private Boolean isSkippable;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DELETE_ID = "deleteId";
  @SerializedName(SERIALIZED_NAME_DELETE_ID)
  private String deleteId;

  public static final String SERIALIZED_NAME_DELETE_AT = "deleteAt";
  @SerializedName(SERIALIZED_NAME_DELETE_AT)
  private String deleteAt;

  public CreateTaskConfig() {
  }

  public CreateTaskConfig description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * description for all tasks associated with the config that should be used in notifications
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "description for all tasks associated with the config that should be used in notifications")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CreateTaskConfig assessmentId(String assessmentId) {
    
    
    
    
    this.assessmentId = assessmentId;
    return this;
  }

   /**
   * parent assessment id that this task config belongs to
   * @return assessmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent assessment id that this task config belongs to")

  public String getAssessmentId() {
    return assessmentId;
  }


  public void setAssessmentId(String assessmentId) {
    
    
    
    this.assessmentId = assessmentId;
  }


  public CreateTaskConfig parentEntityId(String parentEntityId) {
    
    
    
    
    this.parentEntityId = parentEntityId;
    return this;
  }

   /**
   * parent entity id that this task config belongs to, should be used with entityId
   * @return parentEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent entity id that this task config belongs to, should be used with entityId")

  public String getParentEntityId() {
    return parentEntityId;
  }


  public void setParentEntityId(String parentEntityId) {
    
    
    
    this.parentEntityId = parentEntityId;
  }


  public CreateTaskConfig entityId(String entityId) {
    
    
    
    
    this.entityId = entityId;
    return this;
  }

   /**
   * the primary entity being referenced by the task config
   * @return entityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", required = true, value = "the primary entity being referenced by the task config")

  public String getEntityId() {
    return entityId;
  }


  public void setEntityId(String entityId) {
    
    
    
    this.entityId = entityId;
  }


  public CreateTaskConfig type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of task generated by the task config
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "type of task generated by the task config")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CreateTaskConfig dueDate(DueDate dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DueDate getDueDate() {
    return dueDate;
  }


  public void setDueDate(DueDate dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public CreateTaskConfig pastDueAction(PastDueActionEnum pastDueAction) {
    
    
    
    
    this.pastDueAction = pastDueAction;
    return this;
  }

   /**
   * sets pastDueAction on the task when it&#39;s generated
   * @return pastDueAction
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "sets pastDueAction on the task when it's generated")

  public PastDueActionEnum getPastDueAction() {
    return pastDueAction;
  }


  public void setPastDueAction(PastDueActionEnum pastDueAction) {
    
    
    
    this.pastDueAction = pastDueAction;
  }


  public CreateTaskConfig isSkippable(Boolean isSkippable) {
    
    
    
    
    this.isSkippable = isSkippable;
    return this;
  }

   /**
   * sets isSkippable on the task
   * @return isSkippable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "sets isSkippable on the task")

  public Boolean getIsSkippable() {
    return isSkippable;
  }


  public void setIsSkippable(Boolean isSkippable) {
    
    
    
    this.isSkippable = isSkippable;
  }


  public CreateTaskConfig label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * human-readable label that should be used for all tasks associated with the config as the task name
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "human-readable label that should be used for all tasks associated with the config as the task name")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public CreateTaskConfig deleteId(String deleteId) {
    
    
    
    
    this.deleteId = deleteId;
    return this;
  }

   /**
   * deleted by user id
   * @return deleteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "deleted by user id")

  public String getDeleteId() {
    return deleteId;
  }


  public void setDeleteId(String deleteId) {
    
    
    
    this.deleteId = deleteId;
  }


  public CreateTaskConfig deleteAt(String deleteAt) {
    
    
    
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * deleted timestamp
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2017-01-24T13:57:52Z", value = "deleted timestamp")

  public String getDeleteAt() {
    return deleteAt;
  }


  public void setDeleteAt(String deleteAt) {
    
    
    
    this.deleteAt = deleteAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateTaskConfig instance itself
   */
  public CreateTaskConfig putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTaskConfig createTaskConfig = (CreateTaskConfig) o;
    return Objects.equals(this.description, createTaskConfig.description) &&
        Objects.equals(this.assessmentId, createTaskConfig.assessmentId) &&
        Objects.equals(this.parentEntityId, createTaskConfig.parentEntityId) &&
        Objects.equals(this.entityId, createTaskConfig.entityId) &&
        Objects.equals(this.type, createTaskConfig.type) &&
        Objects.equals(this.dueDate, createTaskConfig.dueDate) &&
        Objects.equals(this.pastDueAction, createTaskConfig.pastDueAction) &&
        Objects.equals(this.isSkippable, createTaskConfig.isSkippable) &&
        Objects.equals(this.label, createTaskConfig.label) &&
        Objects.equals(this.deleteId, createTaskConfig.deleteId) &&
        Objects.equals(this.deleteAt, createTaskConfig.deleteAt)&&
        Objects.equals(this.additionalProperties, createTaskConfig.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, assessmentId, parentEntityId, entityId, type, dueDate, pastDueAction, isSkippable, label, deleteId, deleteAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTaskConfig {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    assessmentId: ").append(toIndentedString(assessmentId)).append("\n");
    sb.append("    parentEntityId: ").append(toIndentedString(parentEntityId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    pastDueAction: ").append(toIndentedString(pastDueAction)).append("\n");
    sb.append("    isSkippable: ").append(toIndentedString(isSkippable)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    deleteId: ").append(toIndentedString(deleteId)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("assessmentId");
    openapiFields.add("parentEntityId");
    openapiFields.add("entityId");
    openapiFields.add("type");
    openapiFields.add("dueDate");
    openapiFields.add("pastDueAction");
    openapiFields.add("isSkippable");
    openapiFields.add("label");
    openapiFields.add("deleteId");
    openapiFields.add("deleteAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("pastDueAction");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateTaskConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateTaskConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTaskConfig is not found in the empty JSON string", CreateTaskConfig.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTaskConfig.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("assessmentId") != null && !jsonObj.get("assessmentId").isJsonNull()) && !jsonObj.get("assessmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentId").toString()));
      }
      if ((jsonObj.get("parentEntityId") != null && !jsonObj.get("parentEntityId").isJsonNull()) && !jsonObj.get("parentEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentEntityId").toString()));
      }
      if (!jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `dueDate`
      if (jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) {
        DueDate.validateJsonObject(jsonObj.getAsJsonObject("dueDate"));
      }
      if (!jsonObj.get("pastDueAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pastDueAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pastDueAction").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("deleteId") != null && !jsonObj.get("deleteId").isJsonNull()) && !jsonObj.get("deleteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteId").toString()));
      }
      if ((jsonObj.get("deleteAt") != null && !jsonObj.get("deleteAt").isJsonNull()) && !jsonObj.get("deleteAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTaskConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTaskConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTaskConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTaskConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTaskConfig>() {
           @Override
           public void write(JsonWriter out, CreateTaskConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTaskConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateTaskConfig instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateTaskConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateTaskConfig
  * @throws IOException if the JSON string is invalid with respect to CreateTaskConfig
  */
  public static CreateTaskConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTaskConfig.class);
  }

 /**
  * Convert an instance of CreateTaskConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

