/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportDateInterval;
import com.konfigthis.client.model.ReportGroupByDimension;
import com.konfigthis.client.model.ReportSeriesResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportQueryResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportQueryResult {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<ReportSeriesResult> series = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_GROUP_BYS = "groupBys";
  @SerializedName(SERIALIZED_NAME_GROUP_BYS)
  private List<ReportGroupByDimension> groupBys = null;

  public static final String SERIALIZED_NAME_DATE_INTERVALS = "dateIntervals";
  @SerializedName(SERIALIZED_NAME_DATE_INTERVALS)
  private List<ReportDateInterval> dateIntervals = null;

  public ReportQueryResult() {
  }

  public ReportQueryResult version(Integer version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * version used to generate the results
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "version used to generate the results")

  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    
    
    
    this.version = version;
  }


  public ReportQueryResult series(List<ReportSeriesResult> series) {
    
    
    
    
    this.series = series;
    return this;
  }

  public ReportQueryResult addSeriesItem(ReportSeriesResult seriesItem) {
    this.series.add(seriesItem);
    return this;
  }

   /**
   * list of series results
   * @return series
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "list of series results")

  public List<ReportSeriesResult> getSeries() {
    return series;
  }


  public void setSeries(List<ReportSeriesResult> series) {
    
    
    
    this.series = series;
  }


  public ReportQueryResult content(String content) {
    
    
    
    
    this.content = content;
    return this;
  }

   /**
   * the results of rendering the content block, if a content template was used in the query
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the results of rendering the content block, if a content template was used in the query")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    
    
    
    this.content = content;
  }


  public ReportQueryResult groupBys(List<ReportGroupByDimension> groupBys) {
    
    
    
    
    this.groupBys = groupBys;
    return this;
  }

  public ReportQueryResult addGroupBysItem(ReportGroupByDimension groupBysItem) {
    if (this.groupBys == null) {
      this.groupBys = new ArrayList<>();
    }
    this.groupBys.add(groupBysItem);
    return this;
  }

   /**
   * list of group-by dimensions with default values
   * @return groupBys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of group-by dimensions with default values")

  public List<ReportGroupByDimension> getGroupBys() {
    return groupBys;
  }


  public void setGroupBys(List<ReportGroupByDimension> groupBys) {
    
    
    
    this.groupBys = groupBys;
  }


  public ReportQueryResult dateIntervals(List<ReportDateInterval> dateIntervals) {
    
    
    
    
    this.dateIntervals = dateIntervals;
    return this;
  }

  public ReportQueryResult addDateIntervalsItem(ReportDateInterval dateIntervalsItem) {
    if (this.dateIntervals == null) {
      this.dateIntervals = new ArrayList<>();
    }
    this.dateIntervals.add(dateIntervalsItem);
    return this;
  }

   /**
   * list of group-by dimensions with default values
   * @return dateIntervals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "list of group-by dimensions with default values")

  public List<ReportDateInterval> getDateIntervals() {
    return dateIntervals;
  }


  public void setDateIntervals(List<ReportDateInterval> dateIntervals) {
    
    
    
    this.dateIntervals = dateIntervals;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportQueryResult instance itself
   */
  public ReportQueryResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportQueryResult reportQueryResult = (ReportQueryResult) o;
    return Objects.equals(this.version, reportQueryResult.version) &&
        Objects.equals(this.series, reportQueryResult.series) &&
        Objects.equals(this.content, reportQueryResult.content) &&
        Objects.equals(this.groupBys, reportQueryResult.groupBys) &&
        Objects.equals(this.dateIntervals, reportQueryResult.dateIntervals)&&
        Objects.equals(this.additionalProperties, reportQueryResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, series, content, groupBys, dateIntervals, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportQueryResult {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    groupBys: ").append(toIndentedString(groupBys)).append("\n");
    sb.append("    dateIntervals: ").append(toIndentedString(dateIntervals)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("series");
    openapiFields.add("content");
    openapiFields.add("groupBys");
    openapiFields.add("dateIntervals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("series");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportQueryResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportQueryResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportQueryResult is not found in the empty JSON string", ReportQueryResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportQueryResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("series").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
      }

      JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
      // validate the required field `series` (array)
      for (int i = 0; i < jsonArrayseries.size(); i++) {
        ReportSeriesResult.validateJsonObject(jsonArrayseries.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (jsonObj.get("groupBys") != null && !jsonObj.get("groupBys").isJsonNull()) {
        JsonArray jsonArraygroupBys = jsonObj.getAsJsonArray("groupBys");
        if (jsonArraygroupBys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupBys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupBys` to be an array in the JSON string but got `%s`", jsonObj.get("groupBys").toString()));
          }

          // validate the optional field `groupBys` (array)
          for (int i = 0; i < jsonArraygroupBys.size(); i++) {
            ReportGroupByDimension.validateJsonObject(jsonArraygroupBys.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("dateIntervals") != null && !jsonObj.get("dateIntervals").isJsonNull()) {
        JsonArray jsonArraydateIntervals = jsonObj.getAsJsonArray("dateIntervals");
        if (jsonArraydateIntervals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dateIntervals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dateIntervals` to be an array in the JSON string but got `%s`", jsonObj.get("dateIntervals").toString()));
          }

          // validate the optional field `dateIntervals` (array)
          for (int i = 0; i < jsonArraydateIntervals.size(); i++) {
            ReportDateInterval.validateJsonObject(jsonArraydateIntervals.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportQueryResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportQueryResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportQueryResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportQueryResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportQueryResult>() {
           @Override
           public void write(JsonWriter out, ReportQueryResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportQueryResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportQueryResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportQueryResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportQueryResult
  * @throws IOException if the JSON string is invalid with respect to ReportQueryResult
  */
  public static ReportQueryResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportQueryResult.class);
  }

 /**
  * Convert an instance of ReportQueryResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

