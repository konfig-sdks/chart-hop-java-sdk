/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.JobUpdate;
import com.konfigthis.client.model.PartialJob;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateChange
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateChange {
  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_ORG_ID = "orgId";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private String orgId;

  public static final String SERIALIZED_NAME_SCENARIO_ID = "scenarioId";
  @SerializedName(SERIALIZED_NAME_SCENARIO_ID)
  private String scenarioId;

  public static final String SERIALIZED_NAME_PERSON_ID = "personId";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_OTHER_JOB_ID = "otherJobId";
  @SerializedName(SERIALIZED_NAME_OTHER_JOB_ID)
  private String otherJobId;

  /**
   * type of change
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    HIRE("HIRE"),
    
    DEPART("DEPART"),
    
    MOVE("MOVE"),
    
    UPCOMING("UPCOMING"),
    
    CREATE("CREATE"),
    
    UPDATE("UPDATE"),
    
    DATA("DATA"),
    
    DELETE("DELETE"),
    
    RELATE("RELATE"),
    
    BACKFILL("BACKFILL");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_ANNOUNCE_DATE = "announceDate";
  @SerializedName(SERIALIZED_NAME_ANNOUNCE_DATE)
  private LocalDate announceDate;

  /**
   * for DEPART changes, the type of departure
   */
  @JsonAdapter(DepartTypeEnum.Adapter.class)
 public enum DepartTypeEnum {
    VOLUNTARY("VOLUNTARY"),
    
    INVOLUNTARY("INVOLUNTARY");

    private String value;

    DepartTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartTypeEnum fromValue(String value) {
      for (DepartTypeEnum b : DepartTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_TYPE = "departType";
  @SerializedName(SERIALIZED_NAME_DEPART_TYPE)
  private DepartTypeEnum departType;

  /**
   * for DEPART changes, whether the departure is regrettable
   */
  @JsonAdapter(DepartRegretEnum.Adapter.class)
 public enum DepartRegretEnum {
    REGRET("REGRET"),
    
    NONREGRET("NONREGRET");

    private String value;

    DepartRegretEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepartRegretEnum fromValue(String value) {
      for (DepartRegretEnum b : DepartRegretEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DepartRegretEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepartRegretEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepartRegretEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DepartRegretEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DEPART_REGRET = "departRegret";
  @SerializedName(SERIALIZED_NAME_DEPART_REGRET)
  private DepartRegretEnum departRegret;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  /**
   * if it&#39;s a promotion or a demotion
   */
  @JsonAdapter(PromotionTypeEnum.Adapter.class)
 public enum PromotionTypeEnum {
    PROMOTION("PROMOTION"),
    
    DEMOTION("DEMOTION"),
    
    NONE("NONE");

    private String value;

    PromotionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PromotionTypeEnum fromValue(String value) {
      for (PromotionTypeEnum b : PromotionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PromotionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PromotionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PromotionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PromotionTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotionType";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private PromotionTypeEnum promotionType;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private PartialJob job;

  public static final String SERIALIZED_NAME_UPDATE = "update";
  @SerializedName(SERIALIZED_NAME_UPDATE)
  private JobUpdate update;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public CreateChange() {
  }

  public CreateChange jobId(String jobId) {
    
    
    
    
    this.jobId = jobId;
    return this;
  }

   /**
   * job id
   * @return jobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "job id")

  public String getJobId() {
    return jobId;
  }


  public void setJobId(String jobId) {
    
    
    
    this.jobId = jobId;
  }


  public CreateChange orgId(String orgId) {
    
    
    
    
    this.orgId = orgId;
    return this;
  }

   /**
   * parent organization id
   * @return orgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "parent organization id")

  public String getOrgId() {
    return orgId;
  }


  public void setOrgId(String orgId) {
    
    
    
    this.orgId = orgId;
  }


  public CreateChange scenarioId(String scenarioId) {
    
    
    
    
    this.scenarioId = scenarioId;
    return this;
  }

   /**
   * scenario that this change belongs to
   * @return scenarioId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "scenario that this change belongs to")

  public String getScenarioId() {
    return scenarioId;
  }


  public void setScenarioId(String scenarioId) {
    
    
    
    this.scenarioId = scenarioId;
  }


  public CreateChange personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * the id of the person involved, or empty if no person attached to job
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the id of the person involved, or empty if no person attached to job")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public CreateChange otherJobId(String otherJobId) {
    
    
    
    
    this.otherJobId = otherJobId;
    return this;
  }

   /**
   * for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job
   * @return otherJobId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "588f7ee98f138b19220041a7", value = "for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job")

  public String getOtherJobId() {
    return otherJobId;
  }


  public void setOtherJobId(String otherJobId) {
    
    
    
    this.otherJobId = otherJobId;
  }


  public CreateChange type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * type of change
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "type of change")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CreateChange date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * date of change
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "date of change")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public CreateChange announceDate(LocalDate announceDate) {
    
    
    
    
    this.announceDate = announceDate;
    return this;
  }

   /**
   * for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change
   * @return announceDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change")

  public LocalDate getAnnounceDate() {
    return announceDate;
  }


  public void setAnnounceDate(LocalDate announceDate) {
    
    
    
    this.announceDate = announceDate;
  }


  public CreateChange departType(DepartTypeEnum departType) {
    
    
    
    
    this.departType = departType;
    return this;
  }

   /**
   * for DEPART changes, the type of departure
   * @return departType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, the type of departure")

  public DepartTypeEnum getDepartType() {
    return departType;
  }


  public void setDepartType(DepartTypeEnum departType) {
    
    
    
    this.departType = departType;
  }


  public CreateChange departRegret(DepartRegretEnum departRegret) {
    
    
    
    
    this.departRegret = departRegret;
    return this;
  }

   /**
   * for DEPART changes, whether the departure is regrettable
   * @return departRegret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "for DEPART changes, whether the departure is regrettable")

  public DepartRegretEnum getDepartRegret() {
    return departRegret;
  }


  public void setDepartRegret(DepartRegretEnum departRegret) {
    
    
    
    this.departRegret = departRegret;
  }


  public CreateChange reason(String reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * the reason of the change
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the reason of the change")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    
    
    
    this.reason = reason;
  }


  public CreateChange promotionType(PromotionTypeEnum promotionType) {
    
    
    
    
    this.promotionType = promotionType;
    return this;
  }

   /**
   * if it&#39;s a promotion or a demotion
   * @return promotionType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if it's a promotion or a demotion")

  public PromotionTypeEnum getPromotionType() {
    return promotionType;
  }


  public void setPromotionType(PromotionTypeEnum promotionType) {
    
    
    
    this.promotionType = promotionType;
  }


  public CreateChange job(PartialJob job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialJob getJob() {
    return job;
  }


  public void setJob(PartialJob job) {
    
    
    
    this.job = job;
  }


  public CreateChange update(JobUpdate update) {
    
    
    
    
    this.update = update;
    return this;
  }

   /**
   * Get update
   * @return update
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobUpdate getUpdate() {
    return update;
  }


  public void setUpdate(JobUpdate update) {
    
    
    
    this.update = update;
  }


  public CreateChange note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * note on the change
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "note on the change")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateChange instance itself
   */
  public CreateChange putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChange createChange = (CreateChange) o;
    return Objects.equals(this.jobId, createChange.jobId) &&
        Objects.equals(this.orgId, createChange.orgId) &&
        Objects.equals(this.scenarioId, createChange.scenarioId) &&
        Objects.equals(this.personId, createChange.personId) &&
        Objects.equals(this.otherJobId, createChange.otherJobId) &&
        Objects.equals(this.type, createChange.type) &&
        Objects.equals(this.date, createChange.date) &&
        Objects.equals(this.announceDate, createChange.announceDate) &&
        Objects.equals(this.departType, createChange.departType) &&
        Objects.equals(this.departRegret, createChange.departRegret) &&
        Objects.equals(this.reason, createChange.reason) &&
        Objects.equals(this.promotionType, createChange.promotionType) &&
        Objects.equals(this.job, createChange.job) &&
        Objects.equals(this.update, createChange.update) &&
        Objects.equals(this.note, createChange.note)&&
        Objects.equals(this.additionalProperties, createChange.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, orgId, scenarioId, personId, otherJobId, type, date, announceDate, departType, departRegret, reason, promotionType, job, update, note, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChange {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    scenarioId: ").append(toIndentedString(scenarioId)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    otherJobId: ").append(toIndentedString(otherJobId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    announceDate: ").append(toIndentedString(announceDate)).append("\n");
    sb.append("    departType: ").append(toIndentedString(departType)).append("\n");
    sb.append("    departRegret: ").append(toIndentedString(departRegret)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    update: ").append(toIndentedString(update)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobId");
    openapiFields.add("orgId");
    openapiFields.add("scenarioId");
    openapiFields.add("personId");
    openapiFields.add("otherJobId");
    openapiFields.add("type");
    openapiFields.add("date");
    openapiFields.add("announceDate");
    openapiFields.add("departType");
    openapiFields.add("departRegret");
    openapiFields.add("reason");
    openapiFields.add("promotionType");
    openapiFields.add("job");
    openapiFields.add("update");
    openapiFields.add("note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateChange
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateChange is not found in the empty JSON string", CreateChange.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("orgId") != null && !jsonObj.get("orgId").isJsonNull()) && !jsonObj.get("orgId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgId").toString()));
      }
      if ((jsonObj.get("scenarioId") != null && !jsonObj.get("scenarioId").isJsonNull()) && !jsonObj.get("scenarioId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioId").toString()));
      }
      if ((jsonObj.get("personId") != null && !jsonObj.get("personId").isJsonNull()) && !jsonObj.get("personId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personId").toString()));
      }
      if ((jsonObj.get("otherJobId") != null && !jsonObj.get("otherJobId").isJsonNull()) && !jsonObj.get("otherJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otherJobId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("departType") != null && !jsonObj.get("departType").isJsonNull()) && !jsonObj.get("departType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departType").toString()));
      }
      if ((jsonObj.get("departRegret") != null && !jsonObj.get("departRegret").isJsonNull()) && !jsonObj.get("departRegret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `departRegret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("departRegret").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("promotionType") != null && !jsonObj.get("promotionType").isJsonNull()) && !jsonObj.get("promotionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionType").toString()));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        PartialJob.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      // validate the optional field `update`
      if (jsonObj.get("update") != null && !jsonObj.get("update").isJsonNull()) {
        JobUpdate.validateJsonObject(jsonObj.getAsJsonObject("update"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateChange.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateChange>() {
           @Override
           public void write(JsonWriter out, CreateChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateChange read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateChange instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateChange given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateChange
  * @throws IOException if the JSON string is invalid with respect to CreateChange
  */
  public static CreateChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateChange.class);
  }

 /**
  * Convert an instance of CreateChange to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

