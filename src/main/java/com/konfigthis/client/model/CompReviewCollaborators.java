/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CollaboratorMatrix;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompReviewCollaborators
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompReviewCollaborators {
  /**
   * What type of HRBP collaboration the comp review uses
   */
  @JsonAdapter(CollaborationTypeEnum.Adapter.class)
 public enum CollaborationTypeEnum {
    NONE("NONE"),
    
    STATIC("STATIC"),
    
    DYNAMIC("DYNAMIC");

    private String value;

    CollaborationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollaborationTypeEnum fromValue(String value) {
      for (CollaborationTypeEnum b : CollaborationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CollaborationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollaborationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollaborationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CollaborationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLLABORATION_TYPE = "collaborationType";
  @SerializedName(SERIALIZED_NAME_COLLABORATION_TYPE)
  private CollaborationTypeEnum collaborationType;

  /**
   * What level of access collaborators should have
   */
  @JsonAdapter(CollaboratorAccessEnum.Adapter.class)
 public enum CollaboratorAccessEnum {
    READ("READ"),
    
    EDIT("EDIT"),
    
    SUBMIT("SUBMIT");

    private String value;

    CollaboratorAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollaboratorAccessEnum fromValue(String value) {
      for (CollaboratorAccessEnum b : CollaboratorAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CollaboratorAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollaboratorAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollaboratorAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CollaboratorAccessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLLABORATOR_ACCESS = "collaboratorAccess";
  @SerializedName(SERIALIZED_NAME_COLLABORATOR_ACCESS)
  private CollaboratorAccessEnum collaboratorAccess;

  public static final String SERIALIZED_NAME_COLLABORATOR_JOB_IDS = "collaboratorJobIds";
  @SerializedName(SERIALIZED_NAME_COLLABORATOR_JOB_IDS)
  private Set<String> collaboratorJobIds = null;

  public static final String SERIALIZED_NAME_COLLABORATOR_MATRIX = "collaboratorMatrix";
  @SerializedName(SERIALIZED_NAME_COLLABORATOR_MATRIX)
  private CollaboratorMatrix collaboratorMatrix;

  public static final String SERIALIZED_NAME_JOB_TO_COLLABORATORS_MAP = "jobToCollaboratorsMap";
  @SerializedName(SERIALIZED_NAME_JOB_TO_COLLABORATORS_MAP)
  private Map<String, Set<String>> jobToCollaboratorsMap = new HashMap<>();

  public CompReviewCollaborators() {
  }

  public CompReviewCollaborators collaborationType(CollaborationTypeEnum collaborationType) {
    
    
    
    
    this.collaborationType = collaborationType;
    return this;
  }

   /**
   * What type of HRBP collaboration the comp review uses
   * @return collaborationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "What type of HRBP collaboration the comp review uses")

  public CollaborationTypeEnum getCollaborationType() {
    return collaborationType;
  }


  public void setCollaborationType(CollaborationTypeEnum collaborationType) {
    
    
    
    this.collaborationType = collaborationType;
  }


  public CompReviewCollaborators collaboratorAccess(CollaboratorAccessEnum collaboratorAccess) {
    
    
    
    
    this.collaboratorAccess = collaboratorAccess;
    return this;
  }

   /**
   * What level of access collaborators should have
   * @return collaboratorAccess
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "What level of access collaborators should have")

  public CollaboratorAccessEnum getCollaboratorAccess() {
    return collaboratorAccess;
  }


  public void setCollaboratorAccess(CollaboratorAccessEnum collaboratorAccess) {
    
    
    
    this.collaboratorAccess = collaboratorAccess;
  }


  public CompReviewCollaborators collaboratorJobIds(Set<String> collaboratorJobIds) {
    
    
    
    
    this.collaboratorJobIds = collaboratorJobIds;
    return this;
  }

  public CompReviewCollaborators addCollaboratorJobIdsItem(String collaboratorJobIdsItem) {
    if (this.collaboratorJobIds == null) {
      this.collaboratorJobIds = new LinkedHashSet<>();
    }
    this.collaboratorJobIds.add(collaboratorJobIdsItem);
    return this;
  }

   /**
   * A list of collaborators for all reviewers, used when collaborationType is STATIC
   * @return collaboratorJobIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of collaborators for all reviewers, used when collaborationType is STATIC")

  public Set<String> getCollaboratorJobIds() {
    return collaboratorJobIds;
  }


  public void setCollaboratorJobIds(Set<String> collaboratorJobIds) {
    
    
    
    this.collaboratorJobIds = collaboratorJobIds;
  }


  public CompReviewCollaborators collaboratorMatrix(CollaboratorMatrix collaboratorMatrix) {
    
    
    
    
    this.collaboratorMatrix = collaboratorMatrix;
    return this;
  }

   /**
   * Get collaboratorMatrix
   * @return collaboratorMatrix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CollaboratorMatrix getCollaboratorMatrix() {
    return collaboratorMatrix;
  }


  public void setCollaboratorMatrix(CollaboratorMatrix collaboratorMatrix) {
    
    
    
    this.collaboratorMatrix = collaboratorMatrix;
  }


  public CompReviewCollaborators jobToCollaboratorsMap(Map<String, Set<String>> jobToCollaboratorsMap) {
    
    
    
    
    this.jobToCollaboratorsMap = jobToCollaboratorsMap;
    return this;
  }

  public CompReviewCollaborators putJobToCollaboratorsMapItem(String key, Set<String> jobToCollaboratorsMapItem) {
    this.jobToCollaboratorsMap.put(key, jobToCollaboratorsMapItem);
    return this;
  }

   /**
   * A map of reviewer job ID to a set of collaborator job IDs indicating which collaborators are collaborating with a given reviewer
   * @return jobToCollaboratorsMap
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A map of reviewer job ID to a set of collaborator job IDs indicating which collaborators are collaborating with a given reviewer")

  public Map<String, Set<String>> getJobToCollaboratorsMap() {
    return jobToCollaboratorsMap;
  }


  public void setJobToCollaboratorsMap(Map<String, Set<String>> jobToCollaboratorsMap) {
    
    
    
    this.jobToCollaboratorsMap = jobToCollaboratorsMap;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompReviewCollaborators instance itself
   */
  public CompReviewCollaborators putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompReviewCollaborators compReviewCollaborators = (CompReviewCollaborators) o;
    return Objects.equals(this.collaborationType, compReviewCollaborators.collaborationType) &&
        Objects.equals(this.collaboratorAccess, compReviewCollaborators.collaboratorAccess) &&
        Objects.equals(this.collaboratorJobIds, compReviewCollaborators.collaboratorJobIds) &&
        Objects.equals(this.collaboratorMatrix, compReviewCollaborators.collaboratorMatrix) &&
        Objects.equals(this.jobToCollaboratorsMap, compReviewCollaborators.jobToCollaboratorsMap)&&
        Objects.equals(this.additionalProperties, compReviewCollaborators.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collaborationType, collaboratorAccess, collaboratorJobIds, collaboratorMatrix, jobToCollaboratorsMap, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompReviewCollaborators {\n");
    sb.append("    collaborationType: ").append(toIndentedString(collaborationType)).append("\n");
    sb.append("    collaboratorAccess: ").append(toIndentedString(collaboratorAccess)).append("\n");
    sb.append("    collaboratorJobIds: ").append(toIndentedString(collaboratorJobIds)).append("\n");
    sb.append("    collaboratorMatrix: ").append(toIndentedString(collaboratorMatrix)).append("\n");
    sb.append("    jobToCollaboratorsMap: ").append(toIndentedString(jobToCollaboratorsMap)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collaborationType");
    openapiFields.add("collaboratorAccess");
    openapiFields.add("collaboratorJobIds");
    openapiFields.add("collaboratorMatrix");
    openapiFields.add("jobToCollaboratorsMap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("collaborationType");
    openapiRequiredFields.add("collaboratorAccess");
    openapiRequiredFields.add("jobToCollaboratorsMap");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompReviewCollaborators
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompReviewCollaborators.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompReviewCollaborators is not found in the empty JSON string", CompReviewCollaborators.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompReviewCollaborators.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("collaborationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaborationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaborationType").toString()));
      }
      if (!jsonObj.get("collaboratorAccess").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaboratorAccess` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collaboratorAccess").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("collaboratorJobIds") != null && !jsonObj.get("collaboratorJobIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `collaboratorJobIds` to be an array in the JSON string but got `%s`", jsonObj.get("collaboratorJobIds").toString()));
      }
      // validate the optional field `collaboratorMatrix`
      if (jsonObj.get("collaboratorMatrix") != null && !jsonObj.get("collaboratorMatrix").isJsonNull()) {
        CollaboratorMatrix.validateJsonObject(jsonObj.getAsJsonObject("collaboratorMatrix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompReviewCollaborators.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompReviewCollaborators' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompReviewCollaborators> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompReviewCollaborators.class));

       return (TypeAdapter<T>) new TypeAdapter<CompReviewCollaborators>() {
           @Override
           public void write(JsonWriter out, CompReviewCollaborators value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompReviewCollaborators read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompReviewCollaborators instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompReviewCollaborators given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompReviewCollaborators
  * @throws IOException if the JSON string is invalid with respect to CompReviewCollaborators
  */
  public static CompReviewCollaborators fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompReviewCollaborators.class);
  }

 /**
  * Convert an instance of CompReviewCollaborators to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

