/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.GroupByConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportSeriesQuery
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportSeriesQuery {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_Y = "y";
  @SerializedName(SERIALIZED_NAME_Y)
  private String y;

  public static final String SERIALIZED_NAME_X = "x";
  @SerializedName(SERIALIZED_NAME_X)
  private String x;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public static final String SERIALIZED_NAME_GROUP_BY_CONFIGS = "groupByConfigs";
  @SerializedName(SERIALIZED_NAME_GROUP_BY_CONFIGS)
  private List<GroupByConfig> groupByConfigs = null;

  public ReportSeriesQuery() {
  }

  public ReportSeriesQuery label(String label) {
    
    
    
    
    this.label = label;
    return this;
  }

   /**
   * label to use
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "label to use")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    
    
    
    this.label = label;
  }


  public ReportSeriesQuery color(String color) {
    
    
    
    
    this.color = color;
    return this;
  }

   /**
   * color to use
   * @return color
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "color to use")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    
    
    
    this.color = color;
  }


  public ReportSeriesQuery y(String y) {
    
    
    
    
    this.y = y;
    return this;
  }

   /**
   * y-value to calculate
   * @return y
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sum{headcount, gender:f} / sum{headcount}", required = true, value = "y-value to calculate")

  public String getY() {
    return y;
  }


  public void setY(String y) {
    
    
    
    this.y = y;
  }


  public ReportSeriesQuery x(String x) {
    
    
    
    
    this.x = x;
    return this;
  }

   /**
   * x-value to calculate (only needed for future scatterplot feature)
   * @return x
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sum{headcount, gender:f} / sum{headcount}", value = "x-value to calculate (only needed for future scatterplot feature)")

  public String getX() {
    return x;
  }


  public void setX(String x) {
    
    
    
    this.x = x;
  }


  public ReportSeriesQuery options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * special options, such as scenarioId, format, projectHires
   * @return options
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "special options, such as scenarioId, format, projectHires")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }


  public ReportSeriesQuery groupByConfigs(List<GroupByConfig> groupByConfigs) {
    
    
    
    
    this.groupByConfigs = groupByConfigs;
    return this;
  }

  public ReportSeriesQuery addGroupByConfigsItem(GroupByConfig groupByConfigsItem) {
    if (this.groupByConfigs == null) {
      this.groupByConfigs = new ArrayList<>();
    }
    this.groupByConfigs.add(groupByConfigsItem);
    return this;
  }

   /**
   * Configuration for aggregations performed by the groupBy operator
   * @return groupByConfigs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Configuration for aggregations performed by the groupBy operator")

  public List<GroupByConfig> getGroupByConfigs() {
    return groupByConfigs;
  }


  public void setGroupByConfigs(List<GroupByConfig> groupByConfigs) {
    
    
    
    this.groupByConfigs = groupByConfigs;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportSeriesQuery instance itself
   */
  public ReportSeriesQuery putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportSeriesQuery reportSeriesQuery = (ReportSeriesQuery) o;
    return Objects.equals(this.label, reportSeriesQuery.label) &&
        Objects.equals(this.color, reportSeriesQuery.color) &&
        Objects.equals(this.y, reportSeriesQuery.y) &&
        Objects.equals(this.x, reportSeriesQuery.x) &&
        Objects.equals(this.options, reportSeriesQuery.options) &&
        Objects.equals(this.groupByConfigs, reportSeriesQuery.groupByConfigs)&&
        Objects.equals(this.additionalProperties, reportSeriesQuery.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, color, y, x, options, groupByConfigs, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportSeriesQuery {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    y: ").append(toIndentedString(y)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    groupByConfigs: ").append(toIndentedString(groupByConfigs)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("color");
    openapiFields.add("y");
    openapiFields.add("x");
    openapiFields.add("options");
    openapiFields.add("groupByConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("color");
    openapiRequiredFields.add("y");
    openapiRequiredFields.add("options");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportSeriesQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportSeriesQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportSeriesQuery is not found in the empty JSON string", ReportSeriesQuery.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportSeriesQuery.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("y").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `y` to be a primitive type in the JSON string but got `%s`", jsonObj.get("y").toString()));
      }
      if ((jsonObj.get("x") != null && !jsonObj.get("x").isJsonNull()) && !jsonObj.get("x").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `x` to be a primitive type in the JSON string but got `%s`", jsonObj.get("x").toString()));
      }
      if (jsonObj.get("groupByConfigs") != null && !jsonObj.get("groupByConfigs").isJsonNull()) {
        JsonArray jsonArraygroupByConfigs = jsonObj.getAsJsonArray("groupByConfigs");
        if (jsonArraygroupByConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groupByConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groupByConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("groupByConfigs").toString()));
          }

          // validate the optional field `groupByConfigs` (array)
          for (int i = 0; i < jsonArraygroupByConfigs.size(); i++) {
            GroupByConfig.validateJsonObject(jsonArraygroupByConfigs.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportSeriesQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportSeriesQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportSeriesQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportSeriesQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportSeriesQuery>() {
           @Override
           public void write(JsonWriter out, ReportSeriesQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportSeriesQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportSeriesQuery instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportSeriesQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportSeriesQuery
  * @throws IOException if the JSON string is invalid with respect to ReportSeriesQuery
  */
  public static ReportSeriesQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportSeriesQuery.class);
  }

 /**
  * Convert an instance of ReportSeriesQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

