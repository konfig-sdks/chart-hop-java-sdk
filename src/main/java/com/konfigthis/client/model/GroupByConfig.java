/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LabelOverride;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GroupByConfig
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GroupByConfig {
  public static final String SERIALIZED_NAME_OVERRIDES = "overrides";
  @SerializedName(SERIALIZED_NAME_OVERRIDES)
  private List<LabelOverride> overrides = null;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_INCLUDE_OTHER = "includeOther";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OTHER)
  private Boolean includeOther;

  public static final String SERIALIZED_NAME_INCLUDE_NONE = "includeNone";
  @SerializedName(SERIALIZED_NAME_INCLUDE_NONE)
  private Boolean includeNone;

  public static final String SERIALIZED_NAME_INCLUDE_ALL_VALUES = "includeAllValues";
  @SerializedName(SERIALIZED_NAME_INCLUDE_ALL_VALUES)
  private Boolean includeAllValues;

  public static final String SERIALIZED_NAME_FIELD_ID = "fieldId";
  @SerializedName(SERIALIZED_NAME_FIELD_ID)
  private String fieldId;

  public static final String SERIALIZED_NAME_QUESTION_ID = "questionId";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  private String questionId;

  /**
   * Whether to sort the results -- by default, will sort by label if there is no limit, will sort by value descending if there is a limit
   */
  @JsonAdapter(SortByEnum.Adapter.class)
 public enum SortByEnum {
    LABEL("LABEL"),
    
    KEY("KEY"),
    
    VALUE("VALUE"),
    
    COUNT("COUNT");

    private String value;

    SortByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortByEnum fromValue(String value) {
      for (SortByEnum b : SortByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT_BY = "sortBy";
  @SerializedName(SERIALIZED_NAME_SORT_BY)
  private SortByEnum sortBy;

  /**
   * The direction to sort the results
   */
  @JsonAdapter(SortDirectionEnum.Adapter.class)
 public enum SortDirectionEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortDirectionEnum fromValue(String value) {
      for (SortDirectionEnum b : SortDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortDirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  private SortDirectionEnum sortDirection;

  public GroupByConfig() {
  }

  public GroupByConfig overrides(List<LabelOverride> overrides) {
    
    
    
    
    this.overrides = overrides;
    return this;
  }

  public GroupByConfig addOverridesItem(LabelOverride overridesItem) {
    if (this.overrides == null) {
      this.overrides = new ArrayList<>();
    }
    this.overrides.add(overridesItem);
    return this;
  }

   /**
   * Overrides by label of label, color, or sort order
   * @return overrides
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Overrides by label of label, color, or sort order")

  public List<LabelOverride> getOverrides() {
    return overrides;
  }


  public void setOverrides(List<LabelOverride> overrides) {
    
    
    
    this.overrides = overrides;
  }


  public GroupByConfig limit(Integer limit) {
    
    
    
    
    this.limit = limit;
    return this;
  }

   /**
   * Maximum number of results to display
   * @return limit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum number of results to display")

  public Integer getLimit() {
    return limit;
  }


  public void setLimit(Integer limit) {
    
    
    
    this.limit = limit;
  }


  public GroupByConfig includeOther(Boolean includeOther) {
    
    
    
    
    this.includeOther = includeOther;
    return this;
  }

   /**
   * When combined with limit, whether to include an &#39;Other&#39; group
   * @return includeOther
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When combined with limit, whether to include an 'Other' group")

  public Boolean getIncludeOther() {
    return includeOther;
  }


  public void setIncludeOther(Boolean includeOther) {
    
    
    
    this.includeOther = includeOther;
  }


  public GroupByConfig includeNone(Boolean includeNone) {
    
    
    
    
    this.includeNone = includeNone;
    return this;
  }

   /**
   * Whether to include a &#39;None&#39; group (null values aggregated)
   * @return includeNone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to include a 'None' group (null values aggregated)")

  public Boolean getIncludeNone() {
    return includeNone;
  }


  public void setIncludeNone(Boolean includeNone) {
    
    
    
    this.includeNone = includeNone;
  }


  public GroupByConfig includeAllValues(Boolean includeAllValues) {
    
    
    
    
    this.includeAllValues = includeAllValues;
    return this;
  }

   /**
   * When combined with fieldId or questionId, will include all values from that fieldId or questionId, even if none of them were used
   * @return includeAllValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When combined with fieldId or questionId, will include all values from that fieldId or questionId, even if none of them were used")

  public Boolean getIncludeAllValues() {
    return includeAllValues;
  }


  public void setIncludeAllValues(Boolean includeAllValues) {
    
    
    
    this.includeAllValues = includeAllValues;
  }


  public GroupByConfig fieldId(String fieldId) {
    
    
    
    
    this.fieldId = fieldId;
    return this;
  }

   /**
   * The field to use to retrieve values, when includeAllValues is in use
   * @return fieldId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The field to use to retrieve values, when includeAllValues is in use")

  public String getFieldId() {
    return fieldId;
  }


  public void setFieldId(String fieldId) {
    
    
    
    this.fieldId = fieldId;
  }


  public GroupByConfig questionId(String questionId) {
    
    
    
    
    this.questionId = questionId;
    return this;
  }

   /**
   * The question to use to retrieve values, when includeAllValues is in use
   * @return questionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The question to use to retrieve values, when includeAllValues is in use")

  public String getQuestionId() {
    return questionId;
  }


  public void setQuestionId(String questionId) {
    
    
    
    this.questionId = questionId;
  }


  public GroupByConfig sortBy(SortByEnum sortBy) {
    
    
    
    
    this.sortBy = sortBy;
    return this;
  }

   /**
   * Whether to sort the results -- by default, will sort by label if there is no limit, will sort by value descending if there is a limit
   * @return sortBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to sort the results -- by default, will sort by label if there is no limit, will sort by value descending if there is a limit")

  public SortByEnum getSortBy() {
    return sortBy;
  }


  public void setSortBy(SortByEnum sortBy) {
    
    
    
    this.sortBy = sortBy;
  }


  public GroupByConfig sortDirection(SortDirectionEnum sortDirection) {
    
    
    
    
    this.sortDirection = sortDirection;
    return this;
  }

   /**
   * The direction to sort the results
   * @return sortDirection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The direction to sort the results")

  public SortDirectionEnum getSortDirection() {
    return sortDirection;
  }


  public void setSortDirection(SortDirectionEnum sortDirection) {
    
    
    
    this.sortDirection = sortDirection;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GroupByConfig instance itself
   */
  public GroupByConfig putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupByConfig groupByConfig = (GroupByConfig) o;
    return Objects.equals(this.overrides, groupByConfig.overrides) &&
        Objects.equals(this.limit, groupByConfig.limit) &&
        Objects.equals(this.includeOther, groupByConfig.includeOther) &&
        Objects.equals(this.includeNone, groupByConfig.includeNone) &&
        Objects.equals(this.includeAllValues, groupByConfig.includeAllValues) &&
        Objects.equals(this.fieldId, groupByConfig.fieldId) &&
        Objects.equals(this.questionId, groupByConfig.questionId) &&
        Objects.equals(this.sortBy, groupByConfig.sortBy) &&
        Objects.equals(this.sortDirection, groupByConfig.sortDirection)&&
        Objects.equals(this.additionalProperties, groupByConfig.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overrides, limit, includeOther, includeNone, includeAllValues, fieldId, questionId, sortBy, sortDirection, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupByConfig {\n");
    sb.append("    overrides: ").append(toIndentedString(overrides)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    includeOther: ").append(toIndentedString(includeOther)).append("\n");
    sb.append("    includeNone: ").append(toIndentedString(includeNone)).append("\n");
    sb.append("    includeAllValues: ").append(toIndentedString(includeAllValues)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    sortBy: ").append(toIndentedString(sortBy)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overrides");
    openapiFields.add("limit");
    openapiFields.add("includeOther");
    openapiFields.add("includeNone");
    openapiFields.add("includeAllValues");
    openapiFields.add("fieldId");
    openapiFields.add("questionId");
    openapiFields.add("sortBy");
    openapiFields.add("sortDirection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GroupByConfig
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GroupByConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupByConfig is not found in the empty JSON string", GroupByConfig.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("overrides") != null && !jsonObj.get("overrides").isJsonNull()) {
        JsonArray jsonArrayoverrides = jsonObj.getAsJsonArray("overrides");
        if (jsonArrayoverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("overrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `overrides` to be an array in the JSON string but got `%s`", jsonObj.get("overrides").toString()));
          }

          // validate the optional field `overrides` (array)
          for (int i = 0; i < jsonArrayoverrides.size(); i++) {
            LabelOverride.validateJsonObject(jsonArrayoverrides.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("fieldId") != null && !jsonObj.get("fieldId").isJsonNull()) && !jsonObj.get("fieldId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldId").toString()));
      }
      if ((jsonObj.get("questionId") != null && !jsonObj.get("questionId").isJsonNull()) && !jsonObj.get("questionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionId").toString()));
      }
      if ((jsonObj.get("sortBy") != null && !jsonObj.get("sortBy").isJsonNull()) && !jsonObj.get("sortBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortBy").toString()));
      }
      if ((jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) && !jsonObj.get("sortDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDirection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupByConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupByConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupByConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupByConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupByConfig>() {
           @Override
           public void write(JsonWriter out, GroupByConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupByConfig read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GroupByConfig instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GroupByConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GroupByConfig
  * @throws IOException if the JSON string is invalid with respect to GroupByConfig
  */
  public static GroupByConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupByConfig.class);
  }

 /**
  * Convert an instance of GroupByConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

