/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ReportFilter;
import com.konfigthis.client.model.ReportSeriesQuery;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReportQuery
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReportQuery {
  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<ReportSeriesQuery> series = null;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<ReportFilter> filters = null;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  /**
   * interval, if the query is a timeseries; if no interval, query is crosstabbed
   */
  @JsonAdapter(IntervalEnum.Adapter.class)
 public enum IntervalEnum {
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH"),
    
    QUARTER("QUARTER"),
    
    FISCAL_QUARTER("FISCAL_QUARTER"),
    
    YEAR("YEAR"),
    
    FISCAL_YEAR("FISCAL_YEAR");

    private String value;

    IntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntervalEnum fromValue(String value) {
      for (IntervalEnum b : IntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntervalEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private IntervalEnum interval;

  public static final String SERIALIZED_NAME_INTERVAL_DATES = "intervalDates";
  @SerializedName(SERIALIZED_NAME_INTERVAL_DATES)
  private List<LocalDate> intervalDates = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private Object options;

  public ReportQuery() {
  }

  public ReportQuery series(List<ReportSeriesQuery> series) {
    
    
    
    
    this.series = series;
    return this;
  }

  public ReportQuery addSeriesItem(ReportSeriesQuery seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<>();
    }
    this.series.add(seriesItem);
    return this;
  }

   /**
   * series to evaluate
   * @return series
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "series to evaluate")

  public List<ReportSeriesQuery> getSeries() {
    return series;
  }


  public void setSeries(List<ReportSeriesQuery> series) {
    
    
    
    this.series = series;
  }


  public ReportQuery filters(List<ReportFilter> filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

  public ReportQuery addFiltersItem(ReportFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * filters to crosstab all results by (deprecated in reports V2, should use groupBy instead)
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "filters to crosstab all results by (deprecated in reports V2, should use groupBy instead)")

  public List<ReportFilter> getFilters() {
    return filters;
  }


  public void setFilters(List<ReportFilter> filters) {
    
    
    
    this.filters = filters;
  }


  public ReportQuery content(String content) {
    
    
    
    
    this.content = content;
    return this;
  }

   /**
   * content block to evaluate as a Carrot Template, as an alternative to using series
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "content block to evaluate as a Carrot Template, as an alternative to using series")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    
    
    
    this.content = content;
  }


  public ReportQuery startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * start date, in either relative (-7d) or exact (YYYY-MM-DD) format
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "start date, in either relative (-7d) or exact (YYYY-MM-DD) format")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public ReportQuery endDate(String endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * end date, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "end date, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today")

  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    
    
    
    this.endDate = endDate;
  }


  public ReportQuery interval(IntervalEnum interval) {
    
    
    
    
    this.interval = interval;
    return this;
  }

   /**
   * interval, if the query is a timeseries; if no interval, query is crosstabbed
   * @return interval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "interval, if the query is a timeseries; if no interval, query is crosstabbed")

  public IntervalEnum getInterval() {
    return interval;
  }


  public void setInterval(IntervalEnum interval) {
    
    
    
    this.interval = interval;
  }


  public ReportQuery intervalDates(List<LocalDate> intervalDates) {
    
    
    
    
    this.intervalDates = intervalDates;
    return this;
  }

  public ReportQuery addIntervalDatesItem(LocalDate intervalDatesItem) {
    if (this.intervalDates == null) {
      this.intervalDates = new ArrayList<>();
    }
    this.intervalDates.add(intervalDatesItem);
    return this;
  }

   /**
   * interval dates, if a specific set of irregular dates are being queried in a timeseries
   * @return intervalDates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "interval dates, if a specific set of irregular dates are being queried in a timeseries")

  public List<LocalDate> getIntervalDates() {
    return intervalDates;
  }


  public void setIntervalDates(List<LocalDate> intervalDates) {
    
    
    
    this.intervalDates = intervalDates;
  }


  public ReportQuery options(Object options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * options, including format, scenarioId, projectHires
   * @return options
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "options, including format, scenarioId, projectHires")

  public Object getOptions() {
    return options;
  }


  public void setOptions(Object options) {
    
    
    
    this.options = options;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReportQuery instance itself
   */
  public ReportQuery putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportQuery reportQuery = (ReportQuery) o;
    return Objects.equals(this.series, reportQuery.series) &&
        Objects.equals(this.filters, reportQuery.filters) &&
        Objects.equals(this.content, reportQuery.content) &&
        Objects.equals(this.startDate, reportQuery.startDate) &&
        Objects.equals(this.endDate, reportQuery.endDate) &&
        Objects.equals(this.interval, reportQuery.interval) &&
        Objects.equals(this.intervalDates, reportQuery.intervalDates) &&
        Objects.equals(this.options, reportQuery.options)&&
        Objects.equals(this.additionalProperties, reportQuery.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(series, filters, content, startDate, endDate, interval, intervalDates, options, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportQuery {\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalDates: ").append(toIndentedString(intervalDates)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("series");
    openapiFields.add("filters");
    openapiFields.add("content");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("interval");
    openapiFields.add("intervalDates");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("options");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReportQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReportQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportQuery is not found in the empty JSON string", ReportQuery.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReportQuery.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("series") != null && !jsonObj.get("series").isJsonNull()) {
        JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
        if (jsonArrayseries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("series").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
          }

          // validate the optional field `series` (array)
          for (int i = 0; i < jsonArrayseries.size(); i++) {
            ReportSeriesQuery.validateJsonObject(jsonArrayseries.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            ReportFilter.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("intervalDates") != null && !jsonObj.get("intervalDates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `intervalDates` to be an array in the JSON string but got `%s`", jsonObj.get("intervalDates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportQuery>() {
           @Override
           public void write(JsonWriter out, ReportQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReportQuery instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReportQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReportQuery
  * @throws IOException if the JSON string is invalid with respect to ReportQuery
  */
  public static ReportQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportQuery.class);
  }

 /**
  * Convert an instance of ReportQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

