/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.App;
import com.konfigthis.client.model.AppConfigField;
import com.konfigthis.client.model.Bundle;
import com.konfigthis.client.model.BundleInstallValidate;
import com.konfigthis.client.model.CreateApp;
import com.konfigthis.client.model.CreateUser;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.NotifyRequest;
import com.konfigthis.client.model.OrgAccess;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsApp;
import com.konfigthis.client.model.ResultsUser;
import com.konfigthis.client.model.ScopeRequest;
import java.net.URI;
import com.konfigthis.client.model.UpdateApp;
import com.konfigthis.client.model.UpdateUser;
import com.konfigthis.client.model.User;
import com.konfigthis.client.model.UserEmailSetting;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAppCall(CreateApp createApp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApp;

        // create path and map variables
        String localVarPath = "/v1/app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAppValidateBeforeCall(CreateApp createApp, final ApiCallback _callback) throws ApiException {
        return createNewAppCall(createApp, _callback);

    }


    private ApiResponse<App> createNewAppWithHttpInfo(CreateApp createApp) throws ApiException {
        okhttp3.Call localVarCall = createNewAppValidateBeforeCall(createApp, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAppAsync(CreateApp createApp, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAppValidateBeforeCall(createApp, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAppRequestBuilder {
        private final String summary;
        private final String title;
        private final String orgId;
        private final String name;
        private final Integer cronOrder;
        private final String minAccess;
        private final String type;
        private List<String> tags;
        private String description;
        private List<URI> redirectUris;
        private List<String> allowedIps;
        private List<AppConfigField> configFields;
        private String setupInstructions;
        private String cronSchedule;
        private String cronDayOfWeek;
        private String imagePath;
        private String wordmarkImagePath;
        private String poweredByImagePath;
        private String status;
        private String roleId;
        private URI eventNotifyUrl;
        private Map<String, String> payload;
        private Set<String> events;
        private Bundle bundle;
        private List<String> scopes;

        private CreateNewAppRequestBuilder(String summary, String title, String orgId, String name, Integer cronOrder, String minAccess, String type) {
            this.summary = summary;
            this.title = title;
            this.orgId = orgId;
            this.name = name;
            this.cronOrder = cronOrder;
            this.minAccess = minAccess;
            this.type = type;
        }

        /**
         * Set tags
         * @param tags tags/categories the app belongs to (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description full description of app, in Markdown (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set redirectUris
         * @param redirectUris list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for this app (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder redirectUris(List<URI> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }
        
        /**
         * Set allowedIps
         * @param allowedIps allowlist of IPs or IP ranges that are allowed to make API calls on behalf of this app (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder allowedIps(List<String> allowedIps) {
            this.allowedIps = allowedIps;
            return this;
        }
        
        /**
         * Set configFields
         * @param configFields list of configuration fields (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder configFields(List<AppConfigField> configFields) {
            this.configFields = configFields;
            return this;
        }
        
        /**
         * Set setupInstructions
         * @param setupInstructions setup instructions, in Markdown (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder setupInstructions(String setupInstructions) {
            this.setupInstructions = setupInstructions;
            return this;
        }
        
        /**
         * Set cronSchedule
         * @param cronSchedule cron schedule (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder cronSchedule(String cronSchedule) {
            this.cronSchedule = cronSchedule;
            return this;
        }
        
        /**
         * Set cronDayOfWeek
         * @param cronDayOfWeek Day of week if cronSchedule is WEEKLY (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder cronDayOfWeek(String cronDayOfWeek) {
            this.cronDayOfWeek = cronDayOfWeek;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to avatar profile image, should be approximately square dimensions and show logo (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set wordmarkImagePath
         * @param wordmarkImagePath path to larger profile logo image containing brand wordmark, does not need to be square dimensions (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder wordmarkImagePath(String wordmarkImagePath) {
            this.wordmarkImagePath = wordmarkImagePath;
            return this;
        }
        
        /**
         * Set poweredByImagePath
         * @param poweredByImagePath path to powered by image, should be approximately square dimensions and show logo (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder poweredByImagePath(String poweredByImagePath) {
            this.poweredByImagePath = poweredByImagePath;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of app (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId roleId requested by app (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder roleId(String roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set eventNotifyUrl
         * @param eventNotifyUrl URL that should be notified on events (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder eventNotifyUrl(URI eventNotifyUrl) {
            this.eventNotifyUrl = eventNotifyUrl;
            return this;
        }
        
        /**
         * Set payload
         * @param payload custom payload to send in lieu of regular payload (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder payload(Map<String, String> payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set events
         * @param events set of events to notify on (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder events(Set<String> events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set bundle
         * @param bundle  (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder bundle(Bundle bundle) {
            this.bundle = bundle;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes access scopes that the app is requesting (optional)
         * @return CreateNewAppRequestBuilder
         */
        public CreateNewAppRequestBuilder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Build call for createNewApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateApp createApp = buildBodyParams();
            return createNewAppCall(createApp, _callback);
        }

        private CreateApp buildBodyParams() {
            CreateApp createApp = new CreateApp();
            createApp.tags(this.tags);
            createApp.summary(this.summary);
            createApp.title(this.title);
            createApp.description(this.description);
            createApp.orgId(this.orgId);
            createApp.name(this.name);
            createApp.redirectUris(this.redirectUris);
            createApp.allowedIps(this.allowedIps);
            createApp.configFields(this.configFields);
            createApp.setupInstructions(this.setupInstructions);
            createApp.cronOrder(this.cronOrder);
            if (this.cronSchedule != null)
            createApp.cronSchedule(CreateApp.CronScheduleEnum.fromValue(this.cronSchedule));
            if (this.cronDayOfWeek != null)
            createApp.cronDayOfWeek(CreateApp.CronDayOfWeekEnum.fromValue(this.cronDayOfWeek));
            createApp.imagePath(this.imagePath);
            createApp.wordmarkImagePath(this.wordmarkImagePath);
            createApp.poweredByImagePath(this.poweredByImagePath);
            if (this.status != null)
            createApp.status(CreateApp.StatusEnum.fromValue(this.status));
            if (this.minAccess != null)
            createApp.minAccess(CreateApp.MinAccessEnum.fromValue(this.minAccess));
            createApp.roleId(this.roleId);
            createApp.eventNotifyUrl(this.eventNotifyUrl);
            createApp.payload(this.payload);
            createApp.events(this.events);
            if (this.type != null)
            createApp.type(CreateApp.TypeEnum.fromValue(this.type));
            createApp.bundle(this.bundle);
            createApp.scopes(this.scopes);
            return createApp;
        }

        /**
         * Execute createNewApp request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            CreateApp createApp = buildBodyParams();
            ApiResponse<App> localVarResp = createNewAppWithHttpInfo(createApp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApp request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            CreateApp createApp = buildBodyParams();
            return createNewAppWithHttpInfo(createApp);
        }

        /**
         * Execute createNewApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            CreateApp createApp = buildBodyParams();
            return createNewAppAsync(createApp, _callback);
        }
    }

    /**
     * Create a new app
     * 
     * @return CreateNewAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAppRequestBuilder createNewApp(String summary, String title, String orgId, String name, Integer cronOrder, String minAccess, String type) throws IllegalArgumentException {
        if (summary == null) throw new IllegalArgumentException("\"summary\" is required but got null");
            

        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (cronOrder == null) throw new IllegalArgumentException("\"cronOrder\" is required but got null");
        if (minAccess == null) throw new IllegalArgumentException("\"minAccess\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateNewAppRequestBuilder(summary, title, orgId, name, cronOrder, minAccess, type);
    }
    private okhttp3.Call findInstalledAppUsersCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInstalledAppUsersValidateBeforeCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInstalledAppUsers(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling findInstalledAppUsers(Async)");
        }

        return findInstalledAppUsersCall(orgId, appUserId, _callback);

    }


    private ApiResponse<User> findInstalledAppUsersWithHttpInfo(String orgId, String appUserId) throws ApiException {
        okhttp3.Call localVarCall = findInstalledAppUsersValidateBeforeCall(orgId, appUserId, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInstalledAppUsersAsync(String orgId, String appUserId, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInstalledAppUsersValidateBeforeCall(orgId, appUserId, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInstalledAppUsersRequestBuilder {
        private final String orgId;
        private final String appUserId;

        private FindInstalledAppUsersRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Build call for findInstalledAppUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInstalledAppUsersCall(orgId, appUserId, _callback);
        }


        /**
         * Execute findInstalledAppUsers request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = findInstalledAppUsersWithHttpInfo(orgId, appUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInstalledAppUsers request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return findInstalledAppUsersWithHttpInfo(orgId, appUserId);
        }

        /**
         * Execute findInstalledAppUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return findInstalledAppUsersAsync(orgId, appUserId, _callback);
        }
    }

    /**
     * Get an installed app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return FindInstalledAppUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInstalledAppUsersRequestBuilder findInstalledAppUsers(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new FindInstalledAppUsersRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call findInstalledAppUsers_0Call(String orgId, String type, String tags, String statuses, Boolean includeFormer, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (includeFormer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFormer", includeFormer));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInstalledAppUsers_0ValidateBeforeCall(String orgId, String type, String tags, String statuses, Boolean includeFormer, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInstalledAppUsers_0(Async)");
        }

        return findInstalledAppUsers_0Call(orgId, type, tags, statuses, includeFormer, from, limit, _callback);

    }


    private ApiResponse<ResultsUser> findInstalledAppUsers_0WithHttpInfo(String orgId, String type, String tags, String statuses, Boolean includeFormer, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = findInstalledAppUsers_0ValidateBeforeCall(orgId, type, tags, statuses, includeFormer, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInstalledAppUsers_0Async(String orgId, String type, String tags, String statuses, Boolean includeFormer, String from, Integer limit, final ApiCallback<ResultsUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInstalledAppUsers_0ValidateBeforeCall(orgId, type, tags, statuses, includeFormer, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInstalledAppUsers0RequestBuilder {
        private final String orgId;
        private String type;
        private String tags;
        private String statuses;
        private Boolean includeFormer;
        private String from;
        private Integer limit;

        private FindInstalledAppUsers0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type Filter by type (app, bundle) (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Filter by tag (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Filter by App User statuses, comma-separated. Accepted values: [&#39;NORMAL&#39;, &#39;INACTIVE&#39;, &#39;UNINSTALLED&#39;] (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder statuses(String statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set includeFormer
         * @param includeFormer Whether to include app users with NONE access to orgs they pertain to.  Default is false (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder includeFormer(Boolean includeFormer) {
            this.includeFormer = includeFormer;
            return this;
        }
        
        /**
         * Set from
         * @param from App id to start from (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindInstalledAppUsers0RequestBuilder
         */
        public FindInstalledAppUsers0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for findInstalledAppUsers_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInstalledAppUsers_0Call(orgId, type, tags, statuses, includeFormer, from, limit, _callback);
        }


        /**
         * Execute findInstalledAppUsers_0 request
         * @return ResultsUser
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsUser execute() throws ApiException {
            ApiResponse<ResultsUser> localVarResp = findInstalledAppUsers_0WithHttpInfo(orgId, type, tags, statuses, includeFormer, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInstalledAppUsers_0 request with HTTP info returned
         * @return ApiResponse&lt;ResultsUser&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsUser> executeWithHttpInfo() throws ApiException {
            return findInstalledAppUsers_0WithHttpInfo(orgId, type, tags, statuses, includeFormer, from, limit);
        }

        /**
         * Execute findInstalledAppUsers_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsUser> _callback) throws ApiException {
            return findInstalledAppUsers_0Async(orgId, type, tags, statuses, includeFormer, from, limit, _callback);
        }
    }

    /**
     * Find installed app users
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindInstalledAppUsers0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInstalledAppUsers0RequestBuilder findInstalledAppUsers_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindInstalledAppUsers0RequestBuilder(orgId);
    }
    private okhttp3.Call generateOrRegenerateAccessTokenCall(String orgId, String appUserId, ScopeRequest scopeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeRequest;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}/token"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateOrRegenerateAccessTokenValidateBeforeCall(String orgId, String appUserId, ScopeRequest scopeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generateOrRegenerateAccessToken(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling generateOrRegenerateAccessToken(Async)");
        }

        return generateOrRegenerateAccessTokenCall(orgId, appUserId, scopeRequest, _callback);

    }


    private ApiResponse<AccessTokenResponse> generateOrRegenerateAccessTokenWithHttpInfo(String orgId, String appUserId, ScopeRequest scopeRequest) throws ApiException {
        okhttp3.Call localVarCall = generateOrRegenerateAccessTokenValidateBeforeCall(orgId, appUserId, scopeRequest, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateOrRegenerateAccessTokenAsync(String orgId, String appUserId, ScopeRequest scopeRequest, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateOrRegenerateAccessTokenValidateBeforeCall(orgId, appUserId, scopeRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateOrRegenerateAccessTokenRequestBuilder {
        private final String scope;
        private final String orgId;
        private final String appUserId;

        private GenerateOrRegenerateAccessTokenRequestBuilder(String scope, String orgId, String appUserId) {
            this.scope = scope;
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Build call for generateOrRegenerateAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScopeRequest scopeRequest = buildBodyParams();
            return generateOrRegenerateAccessTokenCall(orgId, appUserId, scopeRequest, _callback);
        }

        private ScopeRequest buildBodyParams() {
            ScopeRequest scopeRequest = new ScopeRequest();
            scopeRequest.scope(this.scope);
            return scopeRequest;
        }

        /**
         * Execute generateOrRegenerateAccessToken request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            ScopeRequest scopeRequest = buildBodyParams();
            ApiResponse<AccessTokenResponse> localVarResp = generateOrRegenerateAccessTokenWithHttpInfo(orgId, appUserId, scopeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateOrRegenerateAccessToken request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            ScopeRequest scopeRequest = buildBodyParams();
            return generateOrRegenerateAccessTokenWithHttpInfo(orgId, appUserId, scopeRequest);
        }

        /**
         * Execute generateOrRegenerateAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            ScopeRequest scopeRequest = buildBodyParams();
            return generateOrRegenerateAccessTokenAsync(orgId, appUserId, scopeRequest, _callback);
        }
    }

    /**
     * Generate or regenerate a long-lived access token for the app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return GenerateOrRegenerateAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GenerateOrRegenerateAccessTokenRequestBuilder generateOrRegenerateAccessToken(String scope, String orgId, String appUserId) throws IllegalArgumentException {
        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new GenerateOrRegenerateAccessTokenRequestBuilder(scope, orgId, appUserId);
    }
    private okhttp3.Call getActiveAppsByOrgCall(String orgId, String q, String type, String tags, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActiveAppsByOrgValidateBeforeCall(String orgId, String q, String type, String tags, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getActiveAppsByOrg(Async)");
        }

        return getActiveAppsByOrgCall(orgId, q, type, tags, from, limit, _callback);

    }


    private ApiResponse<ResultsApp> getActiveAppsByOrgWithHttpInfo(String orgId, String q, String type, String tags, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getActiveAppsByOrgValidateBeforeCall(orgId, q, type, tags, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActiveAppsByOrgAsync(String orgId, String q, String type, String tags, String from, Integer limit, final ApiCallback<ResultsApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActiveAppsByOrgValidateBeforeCall(orgId, q, type, tags, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActiveAppsByOrgRequestBuilder {
        private final String orgId;
        private String q;
        private String type;
        private String tags;
        private String from;
        private Integer limit;

        private GetActiveAppsByOrgRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set q
         * @param q Search query (optional)
         * @return GetActiveAppsByOrgRequestBuilder
         */
        public GetActiveAppsByOrgRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set type
         * @param type Filter by type (app, bundle) (optional)
         * @return GetActiveAppsByOrgRequestBuilder
         */
        public GetActiveAppsByOrgRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set tags
         * @param tags Filter by tags (optional)
         * @return GetActiveAppsByOrgRequestBuilder
         */
        public GetActiveAppsByOrgRequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set from
         * @param from App id to start from (optional)
         * @return GetActiveAppsByOrgRequestBuilder
         */
        public GetActiveAppsByOrgRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetActiveAppsByOrgRequestBuilder
         */
        public GetActiveAppsByOrgRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getActiveAppsByOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActiveAppsByOrgCall(orgId, q, type, tags, from, limit, _callback);
        }


        /**
         * Execute getActiveAppsByOrg request
         * @return ResultsApp
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApp execute() throws ApiException {
            ApiResponse<ResultsApp> localVarResp = getActiveAppsByOrgWithHttpInfo(orgId, q, type, tags, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActiveAppsByOrg request with HTTP info returned
         * @return ApiResponse&lt;ResultsApp&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApp> executeWithHttpInfo() throws ApiException {
            return getActiveAppsByOrgWithHttpInfo(orgId, q, type, tags, from, limit);
        }

        /**
         * Execute getActiveAppsByOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApp> _callback) throws ApiException {
            return getActiveAppsByOrgAsync(orgId, q, type, tags, from, limit, _callback);
        }
    }

    /**
     * Return all active apps available for a particular org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetActiveAppsByOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetActiveAppsByOrgRequestBuilder getActiveAppsByOrg(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetActiveAppsByOrgRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getById(Async)");
        }

        return getByIdCall(appId, _callback);

    }


    private ApiResponse<App> getByIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String appId, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String appId;

        private GetByIdRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(appId, _callback);
        }


        /**
         * Execute getById request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            ApiResponse<App> localVarResp = getByIdWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(appId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            return getByIdAsync(appId, _callback);
        }
    }

    /**
     * Return a particular app by id
     * 
     * @param appId App id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetByIdRequestBuilder(appId);
    }
    private okhttp3.Call getByNameCall(String appName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/name/{appName}"
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNameValidateBeforeCall(String appName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling getByName(Async)");
        }

        return getByNameCall(appName, _callback);

    }


    private ApiResponse<App> getByNameWithHttpInfo(String appName) throws ApiException {
        okhttp3.Call localVarCall = getByNameValidateBeforeCall(appName, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByNameAsync(String appName, final ApiCallback<App> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNameValidateBeforeCall(appName, _callback);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByNameRequestBuilder {
        private final String appName;

        private GetByNameRequestBuilder(String appName) {
            this.appName = appName;
        }

        /**
         * Build call for getByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByNameCall(appName, _callback);
        }


        /**
         * Execute getByName request
         * @return App
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public App execute() throws ApiException {
            ApiResponse<App> localVarResp = getByNameWithHttpInfo(appName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByName request with HTTP info returned
         * @return ApiResponse&lt;App&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<App> executeWithHttpInfo() throws ApiException {
            return getByNameWithHttpInfo(appName);
        }

        /**
         * Execute getByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<App> _callback) throws ApiException {
            return getByNameAsync(appName, _callback);
        }
    }

    /**
     * Return a particular app by name
     * 
     * @param appName App name (required)
     * @return GetByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByNameRequestBuilder getByName(String appName) throws IllegalArgumentException {
        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new GetByNameRequestBuilder(appName);
    }
    private okhttp3.Call getInstalledAppByNameCall(String orgId, String appName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/name/{appName}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstalledAppByNameValidateBeforeCall(String orgId, String appName, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getInstalledAppByName(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling getInstalledAppByName(Async)");
        }

        return getInstalledAppByNameCall(orgId, appName, includeInactive, _callback);

    }


    private ApiResponse<User> getInstalledAppByNameWithHttpInfo(String orgId, String appName, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = getInstalledAppByNameValidateBeforeCall(orgId, appName, includeInactive, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInstalledAppByNameAsync(String orgId, String appName, Boolean includeInactive, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInstalledAppByNameValidateBeforeCall(orgId, appName, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInstalledAppByNameRequestBuilder {
        private final String orgId;
        private final String appName;
        private Boolean includeInactive;

        private GetInstalledAppByNameRequestBuilder(String orgId, String appName) {
            this.orgId = orgId;
            this.appName = appName;
        }

        /**
         * Set includeInactive
         * @param includeInactive If the installed appUser is inactive, load inactive instead (optional)
         * @return GetInstalledAppByNameRequestBuilder
         */
        public GetInstalledAppByNameRequestBuilder includeInactive(Boolean includeInactive) {
            this.includeInactive = includeInactive;
            return this;
        }
        
        /**
         * Build call for getInstalledAppByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInstalledAppByNameCall(orgId, appName, includeInactive, _callback);
        }


        /**
         * Execute getInstalledAppByName request
         * @return User
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public User execute() throws ApiException {
            ApiResponse<User> localVarResp = getInstalledAppByNameWithHttpInfo(orgId, appName, includeInactive);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInstalledAppByName request with HTTP info returned
         * @return ApiResponse&lt;User&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<User> executeWithHttpInfo() throws ApiException {
            return getInstalledAppByNameWithHttpInfo(orgId, appName, includeInactive);
        }

        /**
         * Execute getInstalledAppByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<User> _callback) throws ApiException {
            return getInstalledAppByNameAsync(orgId, appName, includeInactive, _callback);
        }
    }

    /**
     * Get an installed app by name
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appName App name (required)
     * @return GetInstalledAppByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetInstalledAppByNameRequestBuilder getInstalledAppByName(String orgId, String appName) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new GetInstalledAppByNameRequestBuilder(orgId, appName);
    }
    private okhttp3.Call getOauth2AuthorizationCodeCall(String orgId, String appUserId, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}/code"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauth2AuthorizationCodeValidateBeforeCall(String orgId, String appUserId, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOauth2AuthorizationCode(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling getOauth2AuthorizationCode(Async)");
        }

        return getOauth2AuthorizationCodeCall(orgId, appUserId, scope, _callback);

    }


    private ApiResponse<AccessTokenResponse> getOauth2AuthorizationCodeWithHttpInfo(String orgId, String appUserId, String scope) throws ApiException {
        okhttp3.Call localVarCall = getOauth2AuthorizationCodeValidateBeforeCall(orgId, appUserId, scope, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOauth2AuthorizationCodeAsync(String orgId, String appUserId, String scope, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauth2AuthorizationCodeValidateBeforeCall(orgId, appUserId, scope, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOauth2AuthorizationCodeRequestBuilder {
        private final String orgId;
        private final String appUserId;
        private String scope;

        private GetOauth2AuthorizationCodeRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Set scope
         * @param scope Scopes (optional)
         * @return GetOauth2AuthorizationCodeRequestBuilder
         */
        public GetOauth2AuthorizationCodeRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Build call for getOauth2AuthorizationCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOauth2AuthorizationCodeCall(orgId, appUserId, scope, _callback);
        }


        /**
         * Execute getOauth2AuthorizationCode request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            ApiResponse<AccessTokenResponse> localVarResp = getOauth2AuthorizationCodeWithHttpInfo(orgId, appUserId, scope);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOauth2AuthorizationCode request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            return getOauth2AuthorizationCodeWithHttpInfo(orgId, appUserId, scope);
        }

        /**
         * Execute getOauth2AuthorizationCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            return getOauth2AuthorizationCodeAsync(orgId, appUserId, scope, _callback);
        }
    }

    /**
     * Retrieve an Oauth2 authorization code for this app, which can be exchanged for an access token
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return GetOauth2AuthorizationCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetOauth2AuthorizationCodeRequestBuilder getOauth2AuthorizationCode(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new GetOauth2AuthorizationCodeRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call getTokenForAppCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}/token"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenForAppValidateBeforeCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getTokenForApp(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling getTokenForApp(Async)");
        }

        return getTokenForAppCall(orgId, appUserId, _callback);

    }


    private ApiResponse<AccessTokenResponse> getTokenForAppWithHttpInfo(String orgId, String appUserId) throws ApiException {
        okhttp3.Call localVarCall = getTokenForAppValidateBeforeCall(orgId, appUserId, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTokenForAppAsync(String orgId, String appUserId, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenForAppValidateBeforeCall(orgId, appUserId, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTokenForAppRequestBuilder {
        private final String orgId;
        private final String appUserId;

        private GetTokenForAppRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Build call for getTokenForApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTokenForAppCall(orgId, appUserId, _callback);
        }


        /**
         * Execute getTokenForApp request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            ApiResponse<AccessTokenResponse> localVarResp = getTokenForAppWithHttpInfo(orgId, appUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTokenForApp request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            return getTokenForAppWithHttpInfo(orgId, appUserId);
        }

        /**
         * Execute getTokenForApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            return getTokenForAppAsync(orgId, appUserId, _callback);
        }
    }

    /**
     * Retrieve the current token for this app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return GetTokenForAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenForAppRequestBuilder getTokenForApp(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new GetTokenForAppRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call getTokenForApp_0Call(String orgId, String appUserId, String installDataName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}/installdata/{installDataName}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()))
            .replace("{" + "installDataName" + "}", localVarApiClient.escapeString(installDataName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenForApp_0ValidateBeforeCall(String orgId, String appUserId, String installDataName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getTokenForApp_0(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling getTokenForApp_0(Async)");
        }

        // verify the required parameter 'installDataName' is set
        if (installDataName == null) {
            throw new ApiException("Missing the required parameter 'installDataName' when calling getTokenForApp_0(Async)");
        }

        return getTokenForApp_0Call(orgId, appUserId, installDataName, _callback);

    }


    private ApiResponse<Void> getTokenForApp_0WithHttpInfo(String orgId, String appUserId, String installDataName) throws ApiException {
        okhttp3.Call localVarCall = getTokenForApp_0ValidateBeforeCall(orgId, appUserId, installDataName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getTokenForApp_0Async(String orgId, String appUserId, String installDataName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokenForApp_0ValidateBeforeCall(orgId, appUserId, installDataName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetTokenForApp0RequestBuilder {
        private final String orgId;
        private final String appUserId;
        private final String installDataName;

        private GetTokenForApp0RequestBuilder(String orgId, String appUserId, String installDataName) {
            this.orgId = orgId;
            this.appUserId = appUserId;
            this.installDataName = installDataName;
        }

        /**
         * Build call for getTokenForApp_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTokenForApp_0Call(orgId, appUserId, installDataName, _callback);
        }


        /**
         * Execute getTokenForApp_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getTokenForApp_0WithHttpInfo(orgId, appUserId, installDataName);
        }

        /**
         * Execute getTokenForApp_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getTokenForApp_0WithHttpInfo(orgId, appUserId, installDataName);
        }

        /**
         * Execute getTokenForApp_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getTokenForApp_0Async(orgId, appUserId, installDataName, _callback);
        }
    }

    /**
     * Retrieve the current token for this app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @param installDataName Name (required)
     * @return GetTokenForApp0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetTokenForApp0RequestBuilder getTokenForApp_0(String orgId, String appUserId, String installDataName) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        if (installDataName == null) throw new IllegalArgumentException("\"installDataName\" is required but got null");
            

        return new GetTokenForApp0RequestBuilder(orgId, appUserId, installDataName);
    }
    private okhttp3.Call installAppForOrgCall(String orgId, CreateUser createUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUser;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call installAppForOrgValidateBeforeCall(String orgId, CreateUser createUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling installAppForOrg(Async)");
        }

        return installAppForOrgCall(orgId, createUser, _callback);

    }


    private ApiResponse<Void> installAppForOrgWithHttpInfo(String orgId, CreateUser createUser) throws ApiException {
        okhttp3.Call localVarCall = installAppForOrgValidateBeforeCall(orgId, createUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call installAppForOrgAsync(String orgId, CreateUser createUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = installAppForOrgValidateBeforeCall(orgId, createUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InstallAppForOrgRequestBuilder {
        private final Set<OrgAccess> orgs;
        private final String orgId;
        private String appId;
        private Name name;
        private String email;
        private String imagePath;
        private String status;
        private Object options;
        private Object internalOptions;
        private Object secrets;
        private List<UserEmailSetting> emailSettings;

        private InstallAppForOrgRequestBuilder(Set<OrgAccess> orgs, String orgId) {
            this.orgs = orgs;
            this.orgId = orgId;
        }

        /**
         * Set appId
         * @param appId if the user is an app user, the id of the app (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder name(Name name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email email address of user (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to full-sized profile image in storage (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of user (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set options
         * @param options for apps, options (specific options are specific to the particular app); for users, user-set preferences (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions internal (ChartHop controlled) options (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder internalOptions(Object internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Set secrets
         * @param secrets write-only secrets; the content of these secrets are not retrievable via the external-facing API (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder secrets(Object secrets) {
            this.secrets = secrets;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings Email settings for the user (optional)
         * @return InstallAppForOrgRequestBuilder
         */
        public InstallAppForOrgRequestBuilder emailSettings(List<UserEmailSetting> emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Build call for installAppForOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUser createUser = buildBodyParams();
            return installAppForOrgCall(orgId, createUser, _callback);
        }

        private CreateUser buildBodyParams() {
            CreateUser createUser = new CreateUser();
            createUser.appId(this.appId);
            createUser.name(this.name);
            createUser.email(this.email);
            createUser.orgs(this.orgs);
            createUser.imagePath(this.imagePath);
            if (this.status != null)
            createUser.status(CreateUser.StatusEnum.fromValue(this.status));
            createUser.options(this.options);
            createUser.internalOptions(this.internalOptions);
            createUser.secrets(this.secrets);
            createUser.emailSettings(this.emailSettings);
            return createUser;
        }

        /**
         * Execute installAppForOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateUser createUser = buildBodyParams();
            installAppForOrgWithHttpInfo(orgId, createUser);
        }

        /**
         * Execute installAppForOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateUser createUser = buildBodyParams();
            return installAppForOrgWithHttpInfo(orgId, createUser);
        }

        /**
         * Execute installAppForOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateUser createUser = buildBodyParams();
            return installAppForOrgAsync(orgId, createUser, _callback);
        }
    }

    /**
     * Install an app for a particular org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return InstallAppForOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public InstallAppForOrgRequestBuilder installAppForOrg(Set<OrgAccess> orgs, String orgId) throws IllegalArgumentException {
        if (orgs == null) throw new IllegalArgumentException("\"orgs\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new InstallAppForOrgRequestBuilder(orgs, orgId);
    }
    private okhttp3.Call listPublicGlobalAppsCall(String tag, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicGlobalAppsValidateBeforeCall(String tag, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        return listPublicGlobalAppsCall(tag, from, limit, _callback);

    }


    private ApiResponse<ResultsApp> listPublicGlobalAppsWithHttpInfo(String tag, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPublicGlobalAppsValidateBeforeCall(tag, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPublicGlobalAppsAsync(String tag, String from, Integer limit, final ApiCallback<ResultsApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicGlobalAppsValidateBeforeCall(tag, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPublicGlobalAppsRequestBuilder {
        private String tag;
        private String from;
        private Integer limit;

        private ListPublicGlobalAppsRequestBuilder() {
        }

        /**
         * Set tag
         * @param tag Tag to filter by (optional)
         * @return ListPublicGlobalAppsRequestBuilder
         */
        public ListPublicGlobalAppsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set from
         * @param from App id to start from (optional)
         * @return ListPublicGlobalAppsRequestBuilder
         */
        public ListPublicGlobalAppsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListPublicGlobalAppsRequestBuilder
         */
        public ListPublicGlobalAppsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listPublicGlobalApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPublicGlobalAppsCall(tag, from, limit, _callback);
        }


        /**
         * Execute listPublicGlobalApps request
         * @return ResultsApp
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApp execute() throws ApiException {
            ApiResponse<ResultsApp> localVarResp = listPublicGlobalAppsWithHttpInfo(tag, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPublicGlobalApps request with HTTP info returned
         * @return ApiResponse&lt;ResultsApp&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApp> executeWithHttpInfo() throws ApiException {
            return listPublicGlobalAppsWithHttpInfo(tag, from, limit);
        }

        /**
         * Execute listPublicGlobalApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApp> _callback) throws ApiException {
            return listPublicGlobalAppsAsync(tag, from, limit, _callback);
        }
    }

    /**
     * Return all publicly visible global apps
     * 
     * @return ListPublicGlobalAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListPublicGlobalAppsRequestBuilder listPublicGlobalApps() throws IllegalArgumentException {
        return new ListPublicGlobalAppsRequestBuilder();
    }
    private okhttp3.Call removeByIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeById(Async)");
        }

        return removeByIdCall(appId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String appId;

        private RemoveByIdRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(appId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(appId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(appId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(appId, _callback);
        }
    }

    /**
     * Delete an app
     * 
     * @param appId App id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(appId);
    }
    private okhttp3.Call runInstalledAppCall(String orgId, String appUserId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}/run"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call runInstalledAppValidateBeforeCall(String orgId, String appUserId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling runInstalledApp(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling runInstalledApp(Async)");
        }

        return runInstalledAppCall(orgId, appUserId, requestBody, _callback);

    }


    private ApiResponse<Process> runInstalledAppWithHttpInfo(String orgId, String appUserId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = runInstalledAppValidateBeforeCall(orgId, appUserId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call runInstalledAppAsync(String orgId, String appUserId, Map<String, Object> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = runInstalledAppValidateBeforeCall(orgId, appUserId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RunInstalledAppRequestBuilder {
        private final String orgId;
        private final String appUserId;

        private RunInstalledAppRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Build call for runInstalledApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return runInstalledAppCall(orgId, appUserId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute runInstalledApp request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = runInstalledAppWithHttpInfo(orgId, appUserId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute runInstalledApp request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return runInstalledAppWithHttpInfo(orgId, appUserId, requestBody);
        }

        /**
         * Execute runInstalledApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return runInstalledAppAsync(orgId, appUserId, requestBody, _callback);
        }
    }

    /**
     * Run an installed app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return RunInstalledAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RunInstalledAppRequestBuilder runInstalledApp(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new RunInstalledAppRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call sendEmailNotificationCall(NotifyRequest notifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notifyRequest;

        // create path and map variables
        String localVarPath = "/v1/app/notify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailNotificationValidateBeforeCall(NotifyRequest notifyRequest, final ApiCallback _callback) throws ApiException {
        return sendEmailNotificationCall(notifyRequest, _callback);

    }


    private ApiResponse<Void> sendEmailNotificationWithHttpInfo(NotifyRequest notifyRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailNotificationValidateBeforeCall(notifyRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailNotificationAsync(NotifyRequest notifyRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailNotificationValidateBeforeCall(notifyRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendEmailNotificationRequestBuilder {
        private String emailSubject;
        private String emailContentHtml;
        private String emailMarkdown;
        private String chatMarkdown;
        private String notifyType;

        private SendEmailNotificationRequestBuilder() {
        }

        /**
         * Set emailSubject
         * @param emailSubject email subject line (optional)
         * @return SendEmailNotificationRequestBuilder
         */
        public SendEmailNotificationRequestBuilder emailSubject(String emailSubject) {
            this.emailSubject = emailSubject;
            return this;
        }
        
        /**
         * Set emailContentHtml
         * @param emailContentHtml email HTML content (optional)
         * @return SendEmailNotificationRequestBuilder
         */
        public SendEmailNotificationRequestBuilder emailContentHtml(String emailContentHtml) {
            this.emailContentHtml = emailContentHtml;
            return this;
        }
        
        /**
         * Set emailMarkdown
         * @param emailMarkdown email Markdown content (optional)
         * @return SendEmailNotificationRequestBuilder
         */
        public SendEmailNotificationRequestBuilder emailMarkdown(String emailMarkdown) {
            this.emailMarkdown = emailMarkdown;
            return this;
        }
        
        /**
         * Set chatMarkdown
         * @param chatMarkdown chat Markdown content, if chat message should be different/abbreviated (optional)
         * @return SendEmailNotificationRequestBuilder
         */
        public SendEmailNotificationRequestBuilder chatMarkdown(String chatMarkdown) {
            this.chatMarkdown = chatMarkdown;
            return this;
        }
        
        /**
         * Set notifyType
         * @param notifyType Type of notification (optional)
         * @return SendEmailNotificationRequestBuilder
         */
        public SendEmailNotificationRequestBuilder notifyType(String notifyType) {
            this.notifyType = notifyType;
            return this;
        }
        
        /**
         * Build call for sendEmailNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotifyRequest notifyRequest = buildBodyParams();
            return sendEmailNotificationCall(notifyRequest, _callback);
        }

        private NotifyRequest buildBodyParams() {
            NotifyRequest notifyRequest = new NotifyRequest();
            notifyRequest.emailSubject(this.emailSubject);
            notifyRequest.emailContentHtml(this.emailContentHtml);
            notifyRequest.emailMarkdown(this.emailMarkdown);
            notifyRequest.chatMarkdown(this.chatMarkdown);
            notifyRequest.notifyType(this.notifyType);
            return notifyRequest;
        }

        /**
         * Execute sendEmailNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            NotifyRequest notifyRequest = buildBodyParams();
            sendEmailNotificationWithHttpInfo(notifyRequest);
        }

        /**
         * Execute sendEmailNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            NotifyRequest notifyRequest = buildBodyParams();
            return sendEmailNotificationWithHttpInfo(notifyRequest);
        }

        /**
         * Execute sendEmailNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            NotifyRequest notifyRequest = buildBodyParams();
            return sendEmailNotificationAsync(notifyRequest, _callback);
        }
    }

    /**
     * Send an email notification to the configured notify users, on behalf of an app
     * 
     * @return SendEmailNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailNotificationRequestBuilder sendEmailNotification() throws IllegalArgumentException {
        return new SendEmailNotificationRequestBuilder();
    }
    private okhttp3.Call uninstallAppByUserIdCall(String orgId, String appUserId, String keepEntityIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keepEntityIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keepEntityIds", keepEntityIds));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uninstallAppByUserIdValidateBeforeCall(String orgId, String appUserId, String keepEntityIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling uninstallAppByUserId(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling uninstallAppByUserId(Async)");
        }

        return uninstallAppByUserIdCall(orgId, appUserId, keepEntityIds, _callback);

    }


    private ApiResponse<Void> uninstallAppByUserIdWithHttpInfo(String orgId, String appUserId, String keepEntityIds) throws ApiException {
        okhttp3.Call localVarCall = uninstallAppByUserIdValidateBeforeCall(orgId, appUserId, keepEntityIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uninstallAppByUserIdAsync(String orgId, String appUserId, String keepEntityIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uninstallAppByUserIdValidateBeforeCall(orgId, appUserId, keepEntityIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UninstallAppByUserIdRequestBuilder {
        private final String orgId;
        private final String appUserId;
        private String keepEntityIds;

        private UninstallAppByUserIdRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Set keepEntityIds
         * @param keepEntityIds Comma-separated list of bundle-installed entities to delete -- if this parameter is omitted, all bundle-installed entities will be deleted (optional)
         * @return UninstallAppByUserIdRequestBuilder
         */
        public UninstallAppByUserIdRequestBuilder keepEntityIds(String keepEntityIds) {
            this.keepEntityIds = keepEntityIds;
            return this;
        }
        
        /**
         * Build call for uninstallAppByUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uninstallAppByUserIdCall(orgId, appUserId, keepEntityIds, _callback);
        }


        /**
         * Execute uninstallAppByUserId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            uninstallAppByUserIdWithHttpInfo(orgId, appUserId, keepEntityIds);
        }

        /**
         * Execute uninstallAppByUserId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return uninstallAppByUserIdWithHttpInfo(orgId, appUserId, keepEntityIds);
        }

        /**
         * Execute uninstallAppByUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return uninstallAppByUserIdAsync(orgId, appUserId, keepEntityIds, _callback);
        }
    }

    /**
     * Uninstall an app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return UninstallAppByUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UninstallAppByUserIdRequestBuilder uninstallAppByUserId(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new UninstallAppByUserIdRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call updateExistingAppCall(String appId, UpdateApp updateApp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApp;

        // create path and map variables
        String localVarPath = "/v1/app/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingAppValidateBeforeCall(String appId, UpdateApp updateApp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateExistingApp(Async)");
        }

        return updateExistingAppCall(appId, updateApp, _callback);

    }


    private ApiResponse<Void> updateExistingAppWithHttpInfo(String appId, UpdateApp updateApp) throws ApiException {
        okhttp3.Call localVarCall = updateExistingAppValidateBeforeCall(appId, updateApp, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingAppAsync(String appId, UpdateApp updateApp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingAppValidateBeforeCall(appId, updateApp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingAppRequestBuilder {
        private final String appId;
        private List<String> tags;
        private String summary;
        private String title;
        private String description;
        private String name;
        private List<URI> redirectUris;
        private List<String> allowedIps;
        private List<AppConfigField> configFields;
        private String setupInstructions;
        private Integer cronOrder;
        private String cronSchedule;
        private String cronDayOfWeek;
        private String imagePath;
        private String wordmarkImagePath;
        private String poweredByImagePath;
        private String status;
        private String minAccess;
        private String roleId;
        private URI eventNotifyUrl;
        private Map<String, String> payload;
        private Set<String> events;
        private String type;
        private Bundle bundle;
        private List<String> scopes;

        private UpdateExistingAppRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set tags
         * @param tags tags/categories the app belongs to (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set summary
         * @param summary short summary of app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder summary(String summary) {
            this.summary = summary;
            return this;
        }
        
        /**
         * Set title
         * @param title human-readable name of app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description full description of app, in Markdown (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name short unique name (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set redirectUris
         * @param redirectUris list of acceptable Oauth2 redirect URIs, if Oauth2 is supported for this app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder redirectUris(List<URI> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }
        
        /**
         * Set allowedIps
         * @param allowedIps allowlist of IPs or IP ranges that are allowed to make API calls on behalf of this app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder allowedIps(List<String> allowedIps) {
            this.allowedIps = allowedIps;
            return this;
        }
        
        /**
         * Set configFields
         * @param configFields list of configuration fields (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder configFields(List<AppConfigField> configFields) {
            this.configFields = configFields;
            return this;
        }
        
        /**
         * Set setupInstructions
         * @param setupInstructions setup instructions, in Markdown (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder setupInstructions(String setupInstructions) {
            this.setupInstructions = setupInstructions;
            return this;
        }
        
        /**
         * Set cronOrder
         * @param cronOrder execution order of the cron (lower numbers execute earlier) (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder cronOrder(Integer cronOrder) {
            this.cronOrder = cronOrder;
            return this;
        }
        
        /**
         * Set cronSchedule
         * @param cronSchedule cron schedule (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder cronSchedule(String cronSchedule) {
            this.cronSchedule = cronSchedule;
            return this;
        }
        
        /**
         * Set cronDayOfWeek
         * @param cronDayOfWeek Day of week if cronSchedule is WEEKLY (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder cronDayOfWeek(String cronDayOfWeek) {
            this.cronDayOfWeek = cronDayOfWeek;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to avatar profile image, should be approximately square dimensions and show logo (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set wordmarkImagePath
         * @param wordmarkImagePath path to larger profile logo image containing brand wordmark, does not need to be square dimensions (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder wordmarkImagePath(String wordmarkImagePath) {
            this.wordmarkImagePath = wordmarkImagePath;
            return this;
        }
        
        /**
         * Set poweredByImagePath
         * @param poweredByImagePath path to powered by image, should be approximately square dimensions and show logo (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder poweredByImagePath(String poweredByImagePath) {
            this.poweredByImagePath = poweredByImagePath;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set minAccess
         * @param minAccess minimum access level requested by app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder minAccess(String minAccess) {
            this.minAccess = minAccess;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId roleId requested by app (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder roleId(String roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Set eventNotifyUrl
         * @param eventNotifyUrl URL that should be notified on events (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder eventNotifyUrl(URI eventNotifyUrl) {
            this.eventNotifyUrl = eventNotifyUrl;
            return this;
        }
        
        /**
         * Set payload
         * @param payload custom payload to send in lieu of regular payload (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder payload(Map<String, String> payload) {
            this.payload = payload;
            return this;
        }
        
        /**
         * Set events
         * @param events set of events to notify on (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder events(Set<String> events) {
            this.events = events;
            return this;
        }
        
        /**
         * Set type
         * @param type APP, BUNDLE, or INTERNAL (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set bundle
         * @param bundle  (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder bundle(Bundle bundle) {
            this.bundle = bundle;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes access scopes that the app is requesting (optional)
         * @return UpdateExistingAppRequestBuilder
         */
        public UpdateExistingAppRequestBuilder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Build call for updateExistingApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateApp updateApp = buildBodyParams();
            return updateExistingAppCall(appId, updateApp, _callback);
        }

        private UpdateApp buildBodyParams() {
            UpdateApp updateApp = new UpdateApp();
            updateApp.tags(this.tags);
            updateApp.summary(this.summary);
            updateApp.title(this.title);
            updateApp.description(this.description);
            updateApp.name(this.name);
            updateApp.redirectUris(this.redirectUris);
            updateApp.allowedIps(this.allowedIps);
            updateApp.configFields(this.configFields);
            updateApp.setupInstructions(this.setupInstructions);
            updateApp.cronOrder(this.cronOrder);
            if (this.cronSchedule != null)
            updateApp.cronSchedule(UpdateApp.CronScheduleEnum.fromValue(this.cronSchedule));
            if (this.cronDayOfWeek != null)
            updateApp.cronDayOfWeek(UpdateApp.CronDayOfWeekEnum.fromValue(this.cronDayOfWeek));
            updateApp.imagePath(this.imagePath);
            updateApp.wordmarkImagePath(this.wordmarkImagePath);
            updateApp.poweredByImagePath(this.poweredByImagePath);
            if (this.status != null)
            updateApp.status(UpdateApp.StatusEnum.fromValue(this.status));
            if (this.minAccess != null)
            updateApp.minAccess(UpdateApp.MinAccessEnum.fromValue(this.minAccess));
            updateApp.roleId(this.roleId);
            updateApp.eventNotifyUrl(this.eventNotifyUrl);
            updateApp.payload(this.payload);
            updateApp.events(this.events);
            if (this.type != null)
            updateApp.type(UpdateApp.TypeEnum.fromValue(this.type));
            updateApp.bundle(this.bundle);
            updateApp.scopes(this.scopes);
            return updateApp;
        }

        /**
         * Execute updateExistingApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateApp updateApp = buildBodyParams();
            updateExistingAppWithHttpInfo(appId, updateApp);
        }

        /**
         * Execute updateExistingApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateApp updateApp = buildBodyParams();
            return updateExistingAppWithHttpInfo(appId, updateApp);
        }

        /**
         * Execute updateExistingApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateApp updateApp = buildBodyParams();
            return updateExistingAppAsync(appId, updateApp, _callback);
        }
    }

    /**
     * Update an existing app
     * 
     * @param appId App id (required)
     * @return UpdateExistingAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingAppRequestBuilder updateExistingApp(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new UpdateExistingAppRequestBuilder(appId);
    }
    private okhttp3.Call updateInstalledAppCall(String orgId, String appUserId, Boolean includeInactive, UpdateUser updateUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUser;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/{appUserId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstalledAppValidateBeforeCall(String orgId, String appUserId, Boolean includeInactive, UpdateUser updateUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateInstalledApp(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling updateInstalledApp(Async)");
        }

        return updateInstalledAppCall(orgId, appUserId, includeInactive, updateUser, _callback);

    }


    private ApiResponse<Void> updateInstalledAppWithHttpInfo(String orgId, String appUserId, Boolean includeInactive, UpdateUser updateUser) throws ApiException {
        okhttp3.Call localVarCall = updateInstalledAppValidateBeforeCall(orgId, appUserId, includeInactive, updateUser, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateInstalledAppAsync(String orgId, String appUserId, Boolean includeInactive, UpdateUser updateUser, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstalledAppValidateBeforeCall(orgId, appUserId, includeInactive, updateUser, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateInstalledAppRequestBuilder {
        private final String orgId;
        private final String appUserId;
        private String appId;
        private Name name;
        private String email;
        private Set<OrgAccess> orgs;
        private String imagePath;
        private String status;
        private Object options;
        private Object internalOptions;
        private Object secrets;
        private List<UserEmailSetting> emailSettings;
        private Boolean includeInactive;

        private UpdateInstalledAppRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Set appId
         * @param appId if the user is an app user, the id of the app (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder name(Name name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email email address of user (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set orgs
         * @param orgs list of member orgs with permission levels (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder orgs(Set<OrgAccess> orgs) {
            this.orgs = orgs;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to full-sized profile image in storage (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of user (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set options
         * @param options for apps, options (specific options are specific to the particular app); for users, user-set preferences (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions internal (ChartHop controlled) options (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder internalOptions(Object internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Set secrets
         * @param secrets write-only secrets; the content of these secrets are not retrievable via the external-facing API (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder secrets(Object secrets) {
            this.secrets = secrets;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings Email settings for the user (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder emailSettings(List<UserEmailSetting> emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Set includeInactive
         * @param includeInactive If the installed appUser is inactive, load inactive instead (optional)
         * @return UpdateInstalledAppRequestBuilder
         */
        public UpdateInstalledAppRequestBuilder includeInactive(Boolean includeInactive) {
            this.includeInactive = includeInactive;
            return this;
        }
        
        /**
         * Build call for updateInstalledApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateUser updateUser = buildBodyParams();
            return updateInstalledAppCall(orgId, appUserId, includeInactive, updateUser, _callback);
        }

        private UpdateUser buildBodyParams() {
            UpdateUser updateUser = new UpdateUser();
            updateUser.appId(this.appId);
            updateUser.name(this.name);
            updateUser.email(this.email);
            updateUser.orgs(this.orgs);
            updateUser.imagePath(this.imagePath);
            if (this.status != null)
            updateUser.status(UpdateUser.StatusEnum.fromValue(this.status));
            updateUser.options(this.options);
            updateUser.internalOptions(this.internalOptions);
            updateUser.secrets(this.secrets);
            updateUser.emailSettings(this.emailSettings);
            return updateUser;
        }

        /**
         * Execute updateInstalledApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateUser updateUser = buildBodyParams();
            updateInstalledAppWithHttpInfo(orgId, appUserId, includeInactive, updateUser);
        }

        /**
         * Execute updateInstalledApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateUser updateUser = buildBodyParams();
            return updateInstalledAppWithHttpInfo(orgId, appUserId, includeInactive, updateUser);
        }

        /**
         * Execute updateInstalledApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateUser updateUser = buildBodyParams();
            return updateInstalledAppAsync(orgId, appUserId, includeInactive, updateUser, _callback);
        }
    }

    /**
     * Update the settings of an installed app
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId App user id (required)
     * @return UpdateInstalledAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateInstalledAppRequestBuilder updateInstalledApp(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new UpdateInstalledAppRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call validateAppInstallationCall(String orgId, CreateUser createUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUser;

        // create path and map variables
        String localVarPath = "/v1/app/org/{orgId}/install/validate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateAppInstallationValidateBeforeCall(String orgId, CreateUser createUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling validateAppInstallation(Async)");
        }

        return validateAppInstallationCall(orgId, createUser, _callback);

    }


    private ApiResponse<BundleInstallValidate> validateAppInstallationWithHttpInfo(String orgId, CreateUser createUser) throws ApiException {
        okhttp3.Call localVarCall = validateAppInstallationValidateBeforeCall(orgId, createUser, null);
        Type localVarReturnType = new TypeToken<BundleInstallValidate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateAppInstallationAsync(String orgId, CreateUser createUser, final ApiCallback<BundleInstallValidate> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateAppInstallationValidateBeforeCall(orgId, createUser, _callback);
        Type localVarReturnType = new TypeToken<BundleInstallValidate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateAppInstallationRequestBuilder {
        private final Set<OrgAccess> orgs;
        private final String orgId;
        private String appId;
        private Name name;
        private String email;
        private String imagePath;
        private String status;
        private Object options;
        private Object internalOptions;
        private Object secrets;
        private List<UserEmailSetting> emailSettings;

        private ValidateAppInstallationRequestBuilder(Set<OrgAccess> orgs, String orgId) {
            this.orgs = orgs;
            this.orgId = orgId;
        }

        /**
         * Set appId
         * @param appId if the user is an app user, the id of the app (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder name(Name name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email email address of user (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to full-sized profile image in storage (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of user (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set options
         * @param options for apps, options (specific options are specific to the particular app); for users, user-set preferences (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions internal (ChartHop controlled) options (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder internalOptions(Object internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Set secrets
         * @param secrets write-only secrets; the content of these secrets are not retrievable via the external-facing API (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder secrets(Object secrets) {
            this.secrets = secrets;
            return this;
        }
        
        /**
         * Set emailSettings
         * @param emailSettings Email settings for the user (optional)
         * @return ValidateAppInstallationRequestBuilder
         */
        public ValidateAppInstallationRequestBuilder emailSettings(List<UserEmailSetting> emailSettings) {
            this.emailSettings = emailSettings;
            return this;
        }
        
        /**
         * Build call for validateAppInstallation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateUser createUser = buildBodyParams();
            return validateAppInstallationCall(orgId, createUser, _callback);
        }

        private CreateUser buildBodyParams() {
            CreateUser createUser = new CreateUser();
            createUser.appId(this.appId);
            createUser.name(this.name);
            createUser.email(this.email);
            createUser.orgs(this.orgs);
            createUser.imagePath(this.imagePath);
            if (this.status != null)
            createUser.status(CreateUser.StatusEnum.fromValue(this.status));
            createUser.options(this.options);
            createUser.internalOptions(this.internalOptions);
            createUser.secrets(this.secrets);
            createUser.emailSettings(this.emailSettings);
            return createUser;
        }

        /**
         * Execute validateAppInstallation request
         * @return BundleInstallValidate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public BundleInstallValidate execute() throws ApiException {
            CreateUser createUser = buildBodyParams();
            ApiResponse<BundleInstallValidate> localVarResp = validateAppInstallationWithHttpInfo(orgId, createUser);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateAppInstallation request with HTTP info returned
         * @return ApiResponse&lt;BundleInstallValidate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BundleInstallValidate> executeWithHttpInfo() throws ApiException {
            CreateUser createUser = buildBodyParams();
            return validateAppInstallationWithHttpInfo(orgId, createUser);
        }

        /**
         * Execute validateAppInstallation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BundleInstallValidate> _callback) throws ApiException {
            CreateUser createUser = buildBodyParams();
            return validateAppInstallationAsync(orgId, createUser, _callback);
        }
    }

    /**
     * Validate the installation of an app for a particular org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ValidateAppInstallationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ValidateAppInstallationRequestBuilder validateAppInstallation(Set<OrgAccess> orgs, String orgId) throws IllegalArgumentException {
        if (orgs == null) throw new IllegalArgumentException("\"orgs\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ValidateAppInstallationRequestBuilder(orgs, orgId);
    }
}
