/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BulkJobUpdateRequest;
import com.konfigthis.client.model.GraphCountsResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.OrgCount;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.UpdateOperation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewJobCall(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewJobValidateBeforeCall(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewJob(Async)");
        }

        return createNewJobCall(orgId, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Object> createNewJobWithHttpInfo(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createNewJobValidateBeforeCall(orgId, scenarioId, date, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewJobAsync(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewJobValidateBeforeCall(orgId, scenarioId, date, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewJobRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;

        private CreateNewJobRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to create the job in (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of job creation (optional)
         * @return CreateNewJobRequestBuilder
         */
        public CreateNewJobRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createNewJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewJobCall(orgId, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute createNewJob request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewJobWithHttpInfo(orgId, scenarioId, date, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewJob request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewJobWithHttpInfo(orgId, scenarioId, date, requestBody);
        }

        /**
         * Execute createNewJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewJobAsync(orgId, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Create a job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewJobRequestBuilder createNewJob(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewJobRequestBuilder(orgId);
    }
    private okhttp3.Call findInOrganizationCall(String orgId, String jobId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/{jobId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInOrganizationValidateBeforeCall(String orgId, String jobId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInOrganization(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling findInOrganization(Async)");
        }

        return findInOrganizationCall(orgId, jobId, scenarioId, date, fields, format, _callback);

    }


    private ApiResponse<Object> findInOrganizationWithHttpInfo(String orgId, String jobId, String scenarioId, LocalDate date, String fields, String format) throws ApiException {
        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, jobId, scenarioId, date, fields, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInOrganizationAsync(String orgId, String jobId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, jobId, scenarioId, date, fields, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInOrganizationRequestBuilder {
        private final String orgId;
        private final String jobId;
        private String scenarioId;
        private LocalDate date;
        private String fields;
        private String format;

        private FindInOrganizationRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for findInOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInOrganizationCall(orgId, jobId, scenarioId, date, fields, format, _callback);
        }


        /**
         * Execute findInOrganization request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = findInOrganizationWithHttpInfo(orgId, jobId, scenarioId, date, fields, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInOrganization request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return findInOrganizationWithHttpInfo(orgId, jobId, scenarioId, date, fields, format);
        }

        /**
         * Execute findInOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return findInOrganizationAsync(orgId, jobId, scenarioId, date, fields, format, _callback);
        }
    }

    /**
     * Return a particular job by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return FindInOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInOrganizationRequestBuilder findInOrganization(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new FindInOrganizationRequestBuilder(orgId, jobId);
    }
    private okhttp3.Call findInOrganization_0Call(String orgId, String scenarioId, String compReviewId, String approvalChainId, LocalDate date, String q, String from, Integer limit, String fields, List<String> fieldsList, String format, Boolean useScenarioChanges, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (compReviewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compReviewId", compReviewId));
        }

        if (approvalChainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalChainId", approvalChainId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldsList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fieldsList", fieldsList));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (useScenarioChanges != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useScenarioChanges", useScenarioChanges));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInOrganization_0ValidateBeforeCall(String orgId, String scenarioId, String compReviewId, String approvalChainId, LocalDate date, String q, String from, Integer limit, String fields, List<String> fieldsList, String format, Boolean useScenarioChanges, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInOrganization_0(Async)");
        }

        return findInOrganization_0Call(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess, _callback);

    }


    private ApiResponse<ResultsData> findInOrganization_0WithHttpInfo(String orgId, String scenarioId, String compReviewId, String approvalChainId, LocalDate date, String q, String from, Integer limit, String fields, List<String> fieldsList, String format, Boolean useScenarioChanges, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = findInOrganization_0ValidateBeforeCall(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInOrganization_0Async(String orgId, String scenarioId, String compReviewId, String approvalChainId, LocalDate date, String q, String from, Integer limit, String fields, List<String> fieldsList, String format, Boolean useScenarioChanges, String returnAccess, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInOrganization_0ValidateBeforeCall(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInOrganization0RequestBuilder {
        private final String orgId;
        private String scenarioId;
        private String compReviewId;
        private String approvalChainId;
        private LocalDate date;
        private String q;
        private String from;
        private Integer limit;
        private String fields;
        private List<String> fieldsList;
        private String format;
        private Boolean useScenarioChanges;
        private String returnAccess;

        private FindInOrganization0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set compReviewId
         * @param compReviewId Comp review id to query (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder compReviewId(String compReviewId) {
            this.compReviewId = compReviewId;
            return this;
        }
        
        /**
         * Set approvalChainId
         * @param approvalChainId Approval chain id to query; only relevant when there is a comp review id (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder approvalChainId(String approvalChainId) {
            this.approvalChainId = approvalChainId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set q
         * @param q Search query (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set from
         * @param from Job id to start paginating from (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set fieldsList
         * @param fieldsList Fields to retrieve, list syntax (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder fieldsList(List<String> fieldsList) {
            this.fieldsList = fieldsList;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set useScenarioChanges
         * @param useScenarioChanges Find jobs only based on the changes that are in the scenario. This option also allows you to reference the change within the filter, which is otherwise not allowed (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder useScenarioChanges(Boolean useScenarioChanges) {
            this.useScenarioChanges = useScenarioChanges;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return FindInOrganization0RequestBuilder
         */
        public FindInOrganization0RequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for findInOrganization_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInOrganization_0Call(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess, _callback);
        }


        /**
         * Execute findInOrganization_0 request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findInOrganization_0WithHttpInfo(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInOrganization_0 request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findInOrganization_0WithHttpInfo(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess);
        }

        /**
         * Execute findInOrganization_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findInOrganization_0Async(orgId, scenarioId, compReviewId, approvalChainId, date, q, from, limit, fields, fieldsList, format, useScenarioChanges, returnAccess, _callback);
        }
    }

    /**
     * Find jobs in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindInOrganization0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInOrganization0RequestBuilder findInOrganization_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindInOrganization0RequestBuilder(orgId);
    }
    private okhttp3.Call getOrganizationJobCountCall(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/count"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationJobCountValidateBeforeCall(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOrganizationJobCount(Async)");
        }

        return getOrganizationJobCountCall(orgId, scenarioId, date, q, _callback);

    }


    private ApiResponse<OrgCount> getOrganizationJobCountWithHttpInfo(String orgId, String scenarioId, LocalDate date, String q) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationJobCountValidateBeforeCall(orgId, scenarioId, date, q, null);
        Type localVarReturnType = new TypeToken<OrgCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationJobCountAsync(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback<OrgCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationJobCountValidateBeforeCall(orgId, scenarioId, date, q, _callback);
        Type localVarReturnType = new TypeToken<OrgCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizationJobCountRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;
        private String q;

        private GetOrganizationJobCountRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GetOrganizationJobCountRequestBuilder
         */
        public GetOrganizationJobCountRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetOrganizationJobCountRequestBuilder
         */
        public GetOrganizationJobCountRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set q
         * @param q Search query (optional)
         * @return GetOrganizationJobCountRequestBuilder
         */
        public GetOrganizationJobCountRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getOrganizationJobCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationJobCountCall(orgId, scenarioId, date, q, _callback);
        }


        /**
         * Execute getOrganizationJobCount request
         * @return OrgCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public OrgCount execute() throws ApiException {
            ApiResponse<OrgCount> localVarResp = getOrganizationJobCountWithHttpInfo(orgId, scenarioId, date, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganizationJobCount request with HTTP info returned
         * @return ApiResponse&lt;OrgCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgCount> executeWithHttpInfo() throws ApiException {
            return getOrganizationJobCountWithHttpInfo(orgId, scenarioId, date, q);
        }

        /**
         * Execute getOrganizationJobCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgCount> _callback) throws ApiException {
            return getOrganizationJobCountAsync(orgId, scenarioId, date, q, _callback);
        }
    }

    /**
     * Count jobs or people in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetOrganizationJobCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationJobCountRequestBuilder getOrganizationJobCount(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetOrganizationJobCountRequestBuilder(orgId);
    }
    private okhttp3.Call getRegionJobsGraphCall(String orgId, String start, Integer depth, Integer approxLimit, String scenarioId, String q, LocalDate date, String fields, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/graph"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (approxLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approxLimit", approxLimit));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRegionJobsGraphValidateBeforeCall(String orgId, String start, Integer depth, Integer approxLimit, String scenarioId, String q, LocalDate date, String fields, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getRegionJobsGraph(Async)");
        }

        return getRegionJobsGraphCall(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess, _callback);

    }


    private ApiResponse<ResultsData> getRegionJobsGraphWithHttpInfo(String orgId, String start, Integer depth, Integer approxLimit, String scenarioId, String q, LocalDate date, String fields, String format, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getRegionJobsGraphValidateBeforeCall(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRegionJobsGraphAsync(String orgId, String start, Integer depth, Integer approxLimit, String scenarioId, String q, LocalDate date, String fields, String format, String returnAccess, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRegionJobsGraphValidateBeforeCall(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRegionJobsGraphRequestBuilder {
        private final String orgId;
        private String start;
        private Integer depth;
        private Integer approxLimit;
        private String scenarioId;
        private String q;
        private LocalDate date;
        private String fields;
        private String format;
        private String returnAccess;

        private GetRegionJobsGraphRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set start
         * @param start Job id to use as the starting point for the search (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set depth
         * @param depth Number of levels down to search (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder depth(Integer depth) {
            this.depth = depth;
            return this;
        }
        
        /**
         * Set approxLimit
         * @param approxLimit Number of results to return, approximately (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder approxLimit(Integer approxLimit) {
            this.approxLimit = approxLimit;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set q
         * @param q Query string to filter by (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetRegionJobsGraphRequestBuilder
         */
        public GetRegionJobsGraphRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getRegionJobsGraph
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRegionJobsGraphCall(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess, _callback);
        }


        /**
         * Execute getRegionJobsGraph request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getRegionJobsGraphWithHttpInfo(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRegionJobsGraph request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getRegionJobsGraphWithHttpInfo(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess);
        }

        /**
         * Execute getRegionJobsGraph request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getRegionJobsGraphAsync(orgId, start, depth, approxLimit, scenarioId, q, date, fields, format, returnAccess, _callback);
        }
    }

    /**
     * Retrieve jobs from a region of the job graph
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetRegionJobsGraphRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetRegionJobsGraphRequestBuilder getRegionJobsGraph(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetRegionJobsGraphRequestBuilder(orgId);
    }
    private okhttp3.Call getSiblingsAndDirectsMapCall(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/graph-counts"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiblingsAndDirectsMapValidateBeforeCall(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getSiblingsAndDirectsMap(Async)");
        }

        return getSiblingsAndDirectsMapCall(orgId, scenarioId, date, q, _callback);

    }


    private ApiResponse<GraphCountsResponse> getSiblingsAndDirectsMapWithHttpInfo(String orgId, String scenarioId, LocalDate date, String q) throws ApiException {
        okhttp3.Call localVarCall = getSiblingsAndDirectsMapValidateBeforeCall(orgId, scenarioId, date, q, null);
        Type localVarReturnType = new TypeToken<GraphCountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSiblingsAndDirectsMapAsync(String orgId, String scenarioId, LocalDate date, String q, final ApiCallback<GraphCountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiblingsAndDirectsMapValidateBeforeCall(orgId, scenarioId, date, q, _callback);
        Type localVarReturnType = new TypeToken<GraphCountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSiblingsAndDirectsMapRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;
        private String q;

        private GetSiblingsAndDirectsMapRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GetSiblingsAndDirectsMapRequestBuilder
         */
        public GetSiblingsAndDirectsMapRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetSiblingsAndDirectsMapRequestBuilder
         */
        public GetSiblingsAndDirectsMapRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set q
         * @param q Query string to filter by (optional)
         * @return GetSiblingsAndDirectsMapRequestBuilder
         */
        public GetSiblingsAndDirectsMapRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getSiblingsAndDirectsMap
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSiblingsAndDirectsMapCall(orgId, scenarioId, date, q, _callback);
        }


        /**
         * Execute getSiblingsAndDirectsMap request
         * @return GraphCountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public GraphCountsResponse execute() throws ApiException {
            ApiResponse<GraphCountsResponse> localVarResp = getSiblingsAndDirectsMapWithHttpInfo(orgId, scenarioId, date, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSiblingsAndDirectsMap request with HTTP info returned
         * @return ApiResponse&lt;GraphCountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GraphCountsResponse> executeWithHttpInfo() throws ApiException {
            return getSiblingsAndDirectsMapWithHttpInfo(orgId, scenarioId, date, q);
        }

        /**
         * Execute getSiblingsAndDirectsMap request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GraphCountsResponse> _callback) throws ApiException {
            return getSiblingsAndDirectsMapAsync(orgId, scenarioId, date, q, _callback);
        }
    }

    /**
     * Returns a map of jobId to their sibling and direct counts and the corresponding ids
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetSiblingsAndDirectsMapRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetSiblingsAndDirectsMapRequestBuilder getSiblingsAndDirectsMap(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetSiblingsAndDirectsMapRequestBuilder(orgId);
    }
    private okhttp3.Call listOccupiedPositionsByJobAndDateCall(String orgId, String jobId, String scenarioId, LocalDate date, String from, Integer limit, String positionFields, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/{jobId}/position"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (positionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionFields", positionFields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOccupiedPositionsByJobAndDateValidateBeforeCall(String orgId, String jobId, String scenarioId, LocalDate date, String from, Integer limit, String positionFields, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOccupiedPositionsByJobAndDate(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling listOccupiedPositionsByJobAndDate(Async)");
        }

        return listOccupiedPositionsByJobAndDateCall(orgId, jobId, scenarioId, date, from, limit, positionFields, format, _callback);

    }


    private ApiResponse<ResultsData> listOccupiedPositionsByJobAndDateWithHttpInfo(String orgId, String jobId, String scenarioId, LocalDate date, String from, Integer limit, String positionFields, String format) throws ApiException {
        okhttp3.Call localVarCall = listOccupiedPositionsByJobAndDateValidateBeforeCall(orgId, jobId, scenarioId, date, from, limit, positionFields, format, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOccupiedPositionsByJobAndDateAsync(String orgId, String jobId, String scenarioId, LocalDate date, String from, Integer limit, String positionFields, String format, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOccupiedPositionsByJobAndDateValidateBeforeCall(orgId, jobId, scenarioId, date, from, limit, positionFields, format, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOccupiedPositionsByJobAndDateRequestBuilder {
        private final String orgId;
        private final String jobId;
        private String scenarioId;
        private LocalDate date;
        private String from;
        private Integer limit;
        private String positionFields;
        private String format;

        private ListOccupiedPositionsByJobAndDateRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the job in (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of un-assignment (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set from
         * @param from Position id to start paginating from (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set positionFields
         * @param positionFields Position fields to retrieve, comma-separated (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder positionFields(String positionFields) {
            this.positionFields = positionFields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return ListOccupiedPositionsByJobAndDateRequestBuilder
         */
        public ListOccupiedPositionsByJobAndDateRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for listOccupiedPositionsByJobAndDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOccupiedPositionsByJobAndDateCall(orgId, jobId, scenarioId, date, from, limit, positionFields, format, _callback);
        }


        /**
         * Execute listOccupiedPositionsByJobAndDate request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = listOccupiedPositionsByJobAndDateWithHttpInfo(orgId, jobId, scenarioId, date, from, limit, positionFields, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOccupiedPositionsByJobAndDate request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return listOccupiedPositionsByJobAndDateWithHttpInfo(orgId, jobId, scenarioId, date, from, limit, positionFields, format);
        }

        /**
         * Execute listOccupiedPositionsByJobAndDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return listOccupiedPositionsByJobAndDateAsync(orgId, jobId, scenarioId, date, from, limit, positionFields, format, _callback);
        }
    }

    /**
     * Get a list of positions occupied by a job on specific date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return ListOccupiedPositionsByJobAndDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListOccupiedPositionsByJobAndDateRequestBuilder listOccupiedPositionsByJobAndDate(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new ListOccupiedPositionsByJobAndDateRequestBuilder(orgId, jobId);
    }
    private okhttp3.Call performBulkUpdateCall(String orgId, BulkJobUpdateRequest bulkJobUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkJobUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/bulkupdate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performBulkUpdateValidateBeforeCall(String orgId, BulkJobUpdateRequest bulkJobUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling performBulkUpdate(Async)");
        }

        return performBulkUpdateCall(orgId, bulkJobUpdateRequest, _callback);

    }


    private ApiResponse<Process> performBulkUpdateWithHttpInfo(String orgId, BulkJobUpdateRequest bulkJobUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = performBulkUpdateValidateBeforeCall(orgId, bulkJobUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performBulkUpdateAsync(String orgId, BulkJobUpdateRequest bulkJobUpdateRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = performBulkUpdateValidateBeforeCall(orgId, bulkJobUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformBulkUpdateRequestBuilder {
        private final List<UpdateOperation> updates;
        private final LocalDate date;
        private final String orgId;
        private String scenarioId;
        private String note;

        private PerformBulkUpdateRequestBuilder(List<UpdateOperation> updates, LocalDate date, String orgId) {
            this.updates = updates;
            this.date = date;
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId scenario id (optional)
         * @return PerformBulkUpdateRequestBuilder
         */
        public PerformBulkUpdateRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set note
         * @param note note for update (optional)
         * @return PerformBulkUpdateRequestBuilder
         */
        public PerformBulkUpdateRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for performBulkUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkJobUpdateRequest bulkJobUpdateRequest = buildBodyParams();
            return performBulkUpdateCall(orgId, bulkJobUpdateRequest, _callback);
        }

        private BulkJobUpdateRequest buildBodyParams() {
            BulkJobUpdateRequest bulkJobUpdateRequest = new BulkJobUpdateRequest();
            bulkJobUpdateRequest.updates(this.updates);
            bulkJobUpdateRequest.date(this.date);
            bulkJobUpdateRequest.scenarioId(this.scenarioId);
            bulkJobUpdateRequest.note(this.note);
            return bulkJobUpdateRequest;
        }

        /**
         * Execute performBulkUpdate request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            BulkJobUpdateRequest bulkJobUpdateRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = performBulkUpdateWithHttpInfo(orgId, bulkJobUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performBulkUpdate request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            BulkJobUpdateRequest bulkJobUpdateRequest = buildBodyParams();
            return performBulkUpdateWithHttpInfo(orgId, bulkJobUpdateRequest);
        }

        /**
         * Execute performBulkUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            BulkJobUpdateRequest bulkJobUpdateRequest = buildBodyParams();
            return performBulkUpdateAsync(orgId, bulkJobUpdateRequest, _callback);
        }
    }

    /**
     * Perform a bulk update on a number of jobs
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return PerformBulkUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PerformBulkUpdateRequestBuilder performBulkUpdate(List<UpdateOperation> updates, LocalDate date, String orgId) throws IllegalArgumentException {
        if (updates == null) throw new IllegalArgumentException("\"updates\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new PerformBulkUpdateRequestBuilder(updates, date, orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String jobId, String scenarioId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/{jobId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String jobId, String scenarioId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, jobId, scenarioId, date, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String jobId, String scenarioId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, jobId, scenarioId, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String jobId, String scenarioId, LocalDate date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, jobId, scenarioId, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String jobId;
        private String scenarioId;
        private LocalDate date;

        private RemoveByIdRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the job in (optional)
         * @return RemoveByIdRequestBuilder
         */
        public RemoveByIdRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of job update (optional)
         * @return RemoveByIdRequestBuilder
         */
        public RemoveByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, jobId, scenarioId, date, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, jobId, scenarioId, date);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, jobId, scenarioId, date);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, jobId, scenarioId, date, _callback);
        }
    }

    /**
     * Delete a job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, jobId);
    }
    private okhttp3.Call updateJobDetailsCall(String orgId, String jobId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/job/{jobId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobDetailsValidateBeforeCall(String orgId, String jobId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateJobDetails(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling updateJobDetails(Async)");
        }

        return updateJobDetailsCall(orgId, jobId, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Void> updateJobDetailsWithHttpInfo(String orgId, String jobId, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateJobDetailsValidateBeforeCall(orgId, jobId, scenarioId, date, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateJobDetailsAsync(String orgId, String jobId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobDetailsValidateBeforeCall(orgId, jobId, scenarioId, date, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateJobDetailsRequestBuilder {
        private final String orgId;
        private final String jobId;
        private String scenarioId;
        private LocalDate date;

        private UpdateJobDetailsRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the job in (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of job update (optional)
         * @return UpdateJobDetailsRequestBuilder
         */
        public UpdateJobDetailsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateJobDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateJobDetailsCall(orgId, jobId, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateJobDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateJobDetailsWithHttpInfo(orgId, jobId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateJobDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateJobDetailsWithHttpInfo(orgId, jobId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateJobDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateJobDetailsAsync(orgId, jobId, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Update a job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return UpdateJobDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobDetailsRequestBuilder updateJobDetails(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new UpdateJobDetailsRequestBuilder(orgId, jobId);
    }
}
