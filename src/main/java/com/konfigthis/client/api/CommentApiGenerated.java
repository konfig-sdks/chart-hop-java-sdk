/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Comment;
import com.konfigthis.client.model.CreateComment;
import com.konfigthis.client.model.Markup;
import com.konfigthis.client.model.ResultsComment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CommentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCommentCall(String orgId, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComment;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCommentValidateBeforeCall(String orgId, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewComment(Async)");
        }

        return createNewCommentCall(orgId, createComment, _callback);

    }


    private ApiResponse<Comment> createNewCommentWithHttpInfo(String orgId, CreateComment createComment) throws ApiException {
        okhttp3.Call localVarCall = createNewCommentValidateBeforeCall(orgId, createComment, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCommentAsync(String orgId, CreateComment createComment, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCommentValidateBeforeCall(orgId, createComment, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCommentRequestBuilder {
        private final String entityId;
        private final String entityType;
        private final Markup content;
        private final String orgId;
        private String parentEntityId;

        private CreateNewCommentRequestBuilder(String entityId, String entityType, Markup content, String orgId) {
            this.entityId = entityId;
            this.entityType = entityType;
            this.content = content;
            this.orgId = orgId;
        }

        /**
         * Set parentEntityId
         * @param parentEntityId parent entity id that this comment belongs to, should be used with entityId (optional)
         * @return CreateNewCommentRequestBuilder
         */
        public CreateNewCommentRequestBuilder parentEntityId(String parentEntityId) {
            this.parentEntityId = parentEntityId;
            return this;
        }
        
        /**
         * Build call for createNewComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createNewCommentCall(orgId, createComment, _callback);
        }

        private CreateComment buildBodyParams() {
            CreateComment createComment = new CreateComment();
            createComment.parentEntityId(this.parentEntityId);
            createComment.entityId(this.entityId);
            if (this.entityType != null)
            createComment.entityType(CreateComment.EntityTypeEnum.fromValue(this.entityType));
            createComment.content(this.content);
            return createComment;
        }

        /**
         * Execute createNewComment request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            CreateComment createComment = buildBodyParams();
            ApiResponse<Comment> localVarResp = createNewCommentWithHttpInfo(orgId, createComment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewComment request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createNewCommentWithHttpInfo(orgId, createComment);
        }

        /**
         * Execute createNewComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return createNewCommentAsync(orgId, createComment, _callback);
        }
    }

    /**
     * Post a comment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCommentRequestBuilder createNewComment(String entityId, String entityType, Markup content, String orgId) throws IllegalArgumentException {
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        if (entityType == null) throw new IllegalArgumentException("\"entityType\" is required but got null");
            

        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewCommentRequestBuilder(entityId, entityType, content, orgId);
    }
    private okhttp3.Call getByEntityIdCall(String orgId, String entityId, String from, Integer limit, Boolean desc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment/entity/{entityId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEntityIdValidateBeforeCall(String orgId, String entityId, String from, Integer limit, Boolean desc, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByEntityId(Async)");
        }

        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling getByEntityId(Async)");
        }

        return getByEntityIdCall(orgId, entityId, from, limit, desc, _callback);

    }


    private ApiResponse<ResultsComment> getByEntityIdWithHttpInfo(String orgId, String entityId, String from, Integer limit, Boolean desc) throws ApiException {
        okhttp3.Call localVarCall = getByEntityIdValidateBeforeCall(orgId, entityId, from, limit, desc, null);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEntityIdAsync(String orgId, String entityId, String from, Integer limit, Boolean desc, final ApiCallback<ResultsComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEntityIdValidateBeforeCall(orgId, entityId, from, limit, desc, _callback);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEntityIdRequestBuilder {
        private final String orgId;
        private final String entityId;
        private String from;
        private Integer limit;
        private Boolean desc;

        private GetByEntityIdRequestBuilder(String orgId, String entityId) {
            this.orgId = orgId;
            this.entityId = entityId;
        }

        /**
         * Set from
         * @param from Comment id to start paginating from (optional)
         * @return GetByEntityIdRequestBuilder
         */
        public GetByEntityIdRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetByEntityIdRequestBuilder
         */
        public GetByEntityIdRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set desc
         * @param desc Descending (default false) (optional)
         * @return GetByEntityIdRequestBuilder
         */
        public GetByEntityIdRequestBuilder desc(Boolean desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Build call for getByEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEntityIdCall(orgId, entityId, from, limit, desc, _callback);
        }


        /**
         * Execute getByEntityId request
         * @return ResultsComment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsComment execute() throws ApiException {
            ApiResponse<ResultsComment> localVarResp = getByEntityIdWithHttpInfo(orgId, entityId, from, limit, desc);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEntityId request with HTTP info returned
         * @return ApiResponse&lt;ResultsComment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsComment> executeWithHttpInfo() throws ApiException {
            return getByEntityIdWithHttpInfo(orgId, entityId, from, limit, desc);
        }

        /**
         * Execute getByEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsComment> _callback) throws ApiException {
            return getByEntityIdAsync(orgId, entityId, from, limit, desc, _callback);
        }
    }

    /**
     * Return comments on a particular entity paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param entityId Entity id (required)
     * @return GetByEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByEntityIdRequestBuilder getByEntityId(String orgId, String entityId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        return new GetByEntityIdRequestBuilder(orgId, entityId);
    }
    private okhttp3.Call getByIdCall(String orgId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment/{commentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getById(Async)");
        }

        return getByIdCall(orgId, commentId, _callback);

    }


    private ApiResponse<Comment> getByIdWithHttpInfo(String orgId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, commentId, null);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String commentId, final ApiCallback<Comment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, commentId, _callback);
        Type localVarReturnType = new TypeToken<Comment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String commentId;

        private GetByIdRequestBuilder(String orgId, String commentId) {
            this.orgId = orgId;
            this.commentId = commentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, commentId, _callback);
        }


        /**
         * Execute getById request
         * @return Comment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Comment execute() throws ApiException {
            ApiResponse<Comment> localVarResp = getByIdWithHttpInfo(orgId, commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Comment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Comment> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, commentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Comment> _callback) throws ApiException {
            return getByIdAsync(orgId, commentId, _callback);
        }
    }

    /**
     * Return a particular comment by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param commentId Comment id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String commentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, commentId);
    }
    private okhttp3.Call listCommentsOnCompReviewCall(String orgId, String compReviewId, String approvalRequestId, String from, Integer limit, Boolean desc, Boolean isPreview, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment/comp-review/{compReviewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (approvalRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRequestId", approvalRequestId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommentsOnCompReviewValidateBeforeCall(String orgId, String compReviewId, String approvalRequestId, String from, Integer limit, Boolean desc, Boolean isPreview, String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listCommentsOnCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling listCommentsOnCompReview(Async)");
        }

        return listCommentsOnCompReviewCall(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId, _callback);

    }


    private ApiResponse<ResultsComment> listCommentsOnCompReviewWithHttpInfo(String orgId, String compReviewId, String approvalRequestId, String from, Integer limit, Boolean desc, Boolean isPreview, String jobId) throws ApiException {
        okhttp3.Call localVarCall = listCommentsOnCompReviewValidateBeforeCall(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId, null);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCommentsOnCompReviewAsync(String orgId, String compReviewId, String approvalRequestId, String from, Integer limit, Boolean desc, Boolean isPreview, String jobId, final ApiCallback<ResultsComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommentsOnCompReviewValidateBeforeCall(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId, _callback);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCommentsOnCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private String approvalRequestId;
        private String from;
        private Integer limit;
        private Boolean desc;
        private Boolean isPreview;
        private String jobId;

        private ListCommentsOnCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set approvalRequestId
         * @param approvalRequestId Approval request id (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder approvalRequestId(String approvalRequestId) {
            this.approvalRequestId = approvalRequestId;
            return this;
        }
        
        /**
         * Set from
         * @param from Comment id to start paginating from (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set desc
         * @param desc Descending (default false) (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder desc(Boolean desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set isPreview
         * @param isPreview Whether comments are viewed in preview mode, defaults false (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId Optional preview user jobId (optional)
         * @return ListCommentsOnCompReviewRequestBuilder
         */
        public ListCommentsOnCompReviewRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for listCommentsOnCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCommentsOnCompReviewCall(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId, _callback);
        }


        /**
         * Execute listCommentsOnCompReview request
         * @return ResultsComment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsComment execute() throws ApiException {
            ApiResponse<ResultsComment> localVarResp = listCommentsOnCompReviewWithHttpInfo(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCommentsOnCompReview request with HTTP info returned
         * @return ApiResponse&lt;ResultsComment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsComment> executeWithHttpInfo() throws ApiException {
            return listCommentsOnCompReviewWithHttpInfo(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId);
        }

        /**
         * Execute listCommentsOnCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsComment> _callback) throws ApiException {
            return listCommentsOnCompReviewAsync(orgId, compReviewId, approvalRequestId, from, limit, desc, isPreview, jobId, _callback);
        }
    }

    /**
     * Return comments on changes within a comp review, paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return ListCommentsOnCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListCommentsOnCompReviewRequestBuilder listCommentsOnCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new ListCommentsOnCompReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call listCommentsOnScenarioAndChangesCall(String orgId, String scenarioId, String from, Integer limit, Boolean desc, Boolean includeChangeComments, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment/scenario/{scenarioId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        if (includeChangeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeChangeComments", includeChangeComments));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCommentsOnScenarioAndChangesValidateBeforeCall(String orgId, String scenarioId, String from, Integer limit, Boolean desc, Boolean includeChangeComments, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listCommentsOnScenarioAndChanges(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling listCommentsOnScenarioAndChanges(Async)");
        }

        return listCommentsOnScenarioAndChangesCall(orgId, scenarioId, from, limit, desc, includeChangeComments, _callback);

    }


    private ApiResponse<ResultsComment> listCommentsOnScenarioAndChangesWithHttpInfo(String orgId, String scenarioId, String from, Integer limit, Boolean desc, Boolean includeChangeComments) throws ApiException {
        okhttp3.Call localVarCall = listCommentsOnScenarioAndChangesValidateBeforeCall(orgId, scenarioId, from, limit, desc, includeChangeComments, null);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCommentsOnScenarioAndChangesAsync(String orgId, String scenarioId, String from, Integer limit, Boolean desc, Boolean includeChangeComments, final ApiCallback<ResultsComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCommentsOnScenarioAndChangesValidateBeforeCall(orgId, scenarioId, from, limit, desc, includeChangeComments, _callback);
        Type localVarReturnType = new TypeToken<ResultsComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCommentsOnScenarioAndChangesRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private String from;
        private Integer limit;
        private Boolean desc;
        private Boolean includeChangeComments;

        private ListCommentsOnScenarioAndChangesRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set from
         * @param from Comment id to start paginating from (optional)
         * @return ListCommentsOnScenarioAndChangesRequestBuilder
         */
        public ListCommentsOnScenarioAndChangesRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListCommentsOnScenarioAndChangesRequestBuilder
         */
        public ListCommentsOnScenarioAndChangesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set desc
         * @param desc Descending (default false) (optional)
         * @return ListCommentsOnScenarioAndChangesRequestBuilder
         */
        public ListCommentsOnScenarioAndChangesRequestBuilder desc(Boolean desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set includeChangeComments
         * @param includeChangeComments Whether to also include comments on changes within the scenario (default false) (optional)
         * @return ListCommentsOnScenarioAndChangesRequestBuilder
         */
        public ListCommentsOnScenarioAndChangesRequestBuilder includeChangeComments(Boolean includeChangeComments) {
            this.includeChangeComments = includeChangeComments;
            return this;
        }
        
        /**
         * Build call for listCommentsOnScenarioAndChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCommentsOnScenarioAndChangesCall(orgId, scenarioId, from, limit, desc, includeChangeComments, _callback);
        }


        /**
         * Execute listCommentsOnScenarioAndChanges request
         * @return ResultsComment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsComment execute() throws ApiException {
            ApiResponse<ResultsComment> localVarResp = listCommentsOnScenarioAndChangesWithHttpInfo(orgId, scenarioId, from, limit, desc, includeChangeComments);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCommentsOnScenarioAndChanges request with HTTP info returned
         * @return ApiResponse&lt;ResultsComment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsComment> executeWithHttpInfo() throws ApiException {
            return listCommentsOnScenarioAndChangesWithHttpInfo(orgId, scenarioId, from, limit, desc, includeChangeComments);
        }

        /**
         * Execute listCommentsOnScenarioAndChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsComment> _callback) throws ApiException {
            return listCommentsOnScenarioAndChangesAsync(orgId, scenarioId, from, limit, desc, includeChangeComments, _callback);
        }
    }

    /**
     * Return comments on a scenario and the changes within, paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return ListCommentsOnScenarioAndChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListCommentsOnScenarioAndChangesRequestBuilder listCommentsOnScenarioAndChanges(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new ListCommentsOnScenarioAndChangesRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comment/{commentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, commentId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String commentId;

        private RemoveByIdRequestBuilder(String orgId, String commentId) {
            this.orgId = orgId;
            this.commentId = commentId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, commentId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, commentId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, commentId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, commentId, _callback);
        }
    }

    /**
     * Delete a comment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param commentId Comment id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String commentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, commentId);
    }
}
