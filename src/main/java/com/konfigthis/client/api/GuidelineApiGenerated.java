/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BasisFieldMatrix;
import com.konfigthis.client.model.CreateGuideline;
import com.konfigthis.client.model.Guideline;
import com.konfigthis.client.model.MoneyRange;
import com.konfigthis.client.model.ResultsGuideline;
import com.konfigthis.client.model.ResultsGuidelineCalculation;
import com.konfigthis.client.model.UpdateGuideline;
import com.konfigthis.client.model.ValueRange;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GuidelineApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GuidelineApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GuidelineApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call allForCompReviewCall(String orgId, String compReviewId, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (compReviewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compReviewId", compReviewId));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allForCompReviewValidateBeforeCall(String orgId, String compReviewId, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling allForCompReview(Async)");
        }

        return allForCompReviewCall(orgId, compReviewId, includeDeleted, _callback);

    }


    private ApiResponse<ResultsGuideline> allForCompReviewWithHttpInfo(String orgId, String compReviewId, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = allForCompReviewValidateBeforeCall(orgId, compReviewId, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ResultsGuideline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call allForCompReviewAsync(String orgId, String compReviewId, Boolean includeDeleted, final ApiCallback<ResultsGuideline> _callback) throws ApiException {

        okhttp3.Call localVarCall = allForCompReviewValidateBeforeCall(orgId, compReviewId, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ResultsGuideline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AllForCompReviewRequestBuilder {
        private final String orgId;
        private String compReviewId;
        private Boolean includeDeleted;

        private AllForCompReviewRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set compReviewId
         * @param compReviewId comp review id (optional)
         * @return AllForCompReviewRequestBuilder
         */
        public AllForCompReviewRequestBuilder compReviewId(String compReviewId) {
            this.compReviewId = compReviewId;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted include deleted guidelines (optional)
         * @return AllForCompReviewRequestBuilder
         */
        public AllForCompReviewRequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for allForCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return allForCompReviewCall(orgId, compReviewId, includeDeleted, _callback);
        }


        /**
         * Execute allForCompReview request
         * @return ResultsGuideline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ResultsGuideline execute() throws ApiException {
            ApiResponse<ResultsGuideline> localVarResp = allForCompReviewWithHttpInfo(orgId, compReviewId, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute allForCompReview request with HTTP info returned
         * @return ApiResponse&lt;ResultsGuideline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsGuideline> executeWithHttpInfo() throws ApiException {
            return allForCompReviewWithHttpInfo(orgId, compReviewId, includeDeleted);
        }

        /**
         * Execute allForCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsGuideline> _callback) throws ApiException {
            return allForCompReviewAsync(orgId, compReviewId, includeDeleted, _callback);
        }
    }

    /**
     * Get all guidelines for a given comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return AllForCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public AllForCompReviewRequestBuilder allForCompReview(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new AllForCompReviewRequestBuilder(orgId);
    }
    private okhttp3.Call calculateMatrixValuesForSpecificGuidelineCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline/{id}/calculate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateMatrixValuesForSpecificGuidelineValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling calculateMatrixValuesForSpecificGuideline(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling calculateMatrixValuesForSpecificGuideline(Async)");
        }

        return calculateMatrixValuesForSpecificGuidelineCall(orgId, id, _callback);

    }


    private ApiResponse<ResultsGuidelineCalculation> calculateMatrixValuesForSpecificGuidelineWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = calculateMatrixValuesForSpecificGuidelineValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<ResultsGuidelineCalculation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateMatrixValuesForSpecificGuidelineAsync(String orgId, String id, final ApiCallback<ResultsGuidelineCalculation> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateMatrixValuesForSpecificGuidelineValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<ResultsGuidelineCalculation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateMatrixValuesForSpecificGuidelineRequestBuilder {
        private final String orgId;
        private final String id;

        private CalculateMatrixValuesForSpecificGuidelineRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for calculateMatrixValuesForSpecificGuideline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateMatrixValuesForSpecificGuidelineCall(orgId, id, _callback);
        }


        /**
         * Execute calculateMatrixValuesForSpecificGuideline request
         * @return ResultsGuidelineCalculation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ResultsGuidelineCalculation execute() throws ApiException {
            ApiResponse<ResultsGuidelineCalculation> localVarResp = calculateMatrixValuesForSpecificGuidelineWithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateMatrixValuesForSpecificGuideline request with HTTP info returned
         * @return ApiResponse&lt;ResultsGuidelineCalculation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsGuidelineCalculation> executeWithHttpInfo() throws ApiException {
            return calculateMatrixValuesForSpecificGuidelineWithHttpInfo(orgId, id);
        }

        /**
         * Execute calculateMatrixValuesForSpecificGuideline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsGuidelineCalculation> _callback) throws ApiException {
            return calculateMatrixValuesForSpecificGuidelineAsync(orgId, id, _callback);
        }
    }

    /**
     * Calculate the matrix values for a specific guideline (which may apply to multiple scenarios in the comp review)
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param id ID of the desired guideline (required)
     * @return CalculateMatrixValuesForSpecificGuidelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CalculateMatrixValuesForSpecificGuidelineRequestBuilder calculateMatrixValuesForSpecificGuideline(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CalculateMatrixValuesForSpecificGuidelineRequestBuilder(orgId, id);
    }
    private okhttp3.Call createNewGuidelineCall(String orgId, CreateGuideline createGuideline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGuideline;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGuidelineValidateBeforeCall(String orgId, CreateGuideline createGuideline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewGuideline(Async)");
        }

        return createNewGuidelineCall(orgId, createGuideline, _callback);

    }


    private ApiResponse<Void> createNewGuidelineWithHttpInfo(String orgId, CreateGuideline createGuideline) throws ApiException {
        okhttp3.Call localVarCall = createNewGuidelineValidateBeforeCall(orgId, createGuideline, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewGuidelineAsync(String orgId, CreateGuideline createGuideline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGuidelineValidateBeforeCall(orgId, createGuideline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewGuidelineRequestBuilder {
        private final String compReviewId;
        private final String label;
        private final String appliedField;
        private final String sourceField;
        private final String calculationType;
        private final String flagMode;
        private final Boolean enablePopulateValue;
        private final String basisType;
        private final String orgId;
        private String budgetPoolId;
        private String participantsExpr;
        private Double flagDeviationThreshold;
        private String basisExpr;
        private BasisFieldMatrix basisFieldMatrix;
        private MoneyRange fixedAmountRange;
        private ValueRange fixedValueRange;

        private CreateNewGuidelineRequestBuilder(String compReviewId, String label, String appliedField, String sourceField, String calculationType, String flagMode, Boolean enablePopulateValue, String basisType, String orgId) {
            this.compReviewId = compReviewId;
            this.label = label;
            this.appliedField = appliedField;
            this.sourceField = sourceField;
            this.calculationType = calculationType;
            this.flagMode = flagMode;
            this.enablePopulateValue = enablePopulateValue;
            this.basisType = basisType;
            this.orgId = orgId;
        }

        /**
         * Set budgetPoolId
         * @param budgetPoolId the budget pool the guideline is allocated from (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder budgetPoolId(String budgetPoolId) {
            this.budgetPoolId = budgetPoolId;
            return this;
        }
        
        /**
         * Set participantsExpr
         * @param participantsExpr CQL filter to determine which employees the guideline applies to (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder participantsExpr(String participantsExpr) {
            this.participantsExpr = participantsExpr;
            return this;
        }
        
        /**
         * Set flagDeviationThreshold
         * @param flagDeviationThreshold the threshold (percent) against which deviations from the guideline are flagged (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder flagDeviationThreshold(Double flagDeviationThreshold) {
            this.flagDeviationThreshold = flagDeviationThreshold;
            return this;
        }
        
        /**
         * Set basisExpr
         * @param basisExpr if basisType.CUSTOM, the custom CQL expression used to generate the guideline value (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder basisExpr(String basisExpr) {
            this.basisExpr = basisExpr;
            return this;
        }
        
        /**
         * Set basisFieldMatrix
         * @param basisFieldMatrix  (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder basisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
            this.basisFieldMatrix = basisFieldMatrix;
            return this;
        }
        
        /**
         * Set fixedAmountRange
         * @param fixedAmountRange  (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder fixedAmountRange(MoneyRange fixedAmountRange) {
            this.fixedAmountRange = fixedAmountRange;
            return this;
        }
        
        /**
         * Set fixedValueRange
         * @param fixedValueRange  (optional)
         * @return CreateNewGuidelineRequestBuilder
         */
        public CreateNewGuidelineRequestBuilder fixedValueRange(ValueRange fixedValueRange) {
            this.fixedValueRange = fixedValueRange;
            return this;
        }
        
        /**
         * Build call for createNewGuideline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateGuideline createGuideline = buildBodyParams();
            return createNewGuidelineCall(orgId, createGuideline, _callback);
        }

        private CreateGuideline buildBodyParams() {
            CreateGuideline createGuideline = new CreateGuideline();
            createGuideline.compReviewId(this.compReviewId);
            createGuideline.label(this.label);
            createGuideline.budgetPoolId(this.budgetPoolId);
            createGuideline.participantsExpr(this.participantsExpr);
            createGuideline.appliedField(this.appliedField);
            createGuideline.sourceField(this.sourceField);
            if (this.calculationType != null)
            createGuideline.calculationType(CreateGuideline.CalculationTypeEnum.fromValue(this.calculationType));
            if (this.flagMode != null)
            createGuideline.flagMode(CreateGuideline.FlagModeEnum.fromValue(this.flagMode));
            createGuideline.flagDeviationThreshold(this.flagDeviationThreshold);
            createGuideline.enablePopulateValue(this.enablePopulateValue);
            if (this.basisType != null)
            createGuideline.basisType(CreateGuideline.BasisTypeEnum.fromValue(this.basisType));
            createGuideline.basisExpr(this.basisExpr);
            createGuideline.basisFieldMatrix(this.basisFieldMatrix);
            createGuideline.fixedAmountRange(this.fixedAmountRange);
            createGuideline.fixedValueRange(this.fixedValueRange);
            return createGuideline;
        }

        /**
         * Execute createNewGuideline request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateGuideline createGuideline = buildBodyParams();
            createNewGuidelineWithHttpInfo(orgId, createGuideline);
        }

        /**
         * Execute createNewGuideline request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateGuideline createGuideline = buildBodyParams();
            return createNewGuidelineWithHttpInfo(orgId, createGuideline);
        }

        /**
         * Execute createNewGuideline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateGuideline createGuideline = buildBodyParams();
            return createNewGuidelineAsync(orgId, createGuideline, _callback);
        }
    }

    /**
     * Create a new guideline
     * 
     * @param orgId  (required)
     * @return CreateNewGuidelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGuidelineRequestBuilder createNewGuideline(String compReviewId, String label, String appliedField, String sourceField, String calculationType, String flagMode, Boolean enablePopulateValue, String basisType, String orgId) throws IllegalArgumentException {
        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (appliedField == null) throw new IllegalArgumentException("\"appliedField\" is required but got null");
            

        if (sourceField == null) throw new IllegalArgumentException("\"sourceField\" is required but got null");
            

        if (calculationType == null) throw new IllegalArgumentException("\"calculationType\" is required but got null");
            

        if (flagMode == null) throw new IllegalArgumentException("\"flagMode\" is required but got null");
            

        if (enablePopulateValue == null) throw new IllegalArgumentException("\"enablePopulateValue\" is required but got null");
        if (basisType == null) throw new IllegalArgumentException("\"basisType\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewGuidelineRequestBuilder(compReviewId, label, appliedField, sourceField, calculationType, flagMode, enablePopulateValue, basisType, orgId);
    }
    private okhttp3.Call getSpecificGuidelineCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificGuidelineValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getSpecificGuideline(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificGuideline(Async)");
        }

        return getSpecificGuidelineCall(orgId, id, _callback);

    }


    private ApiResponse<Guideline> getSpecificGuidelineWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = getSpecificGuidelineValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<Guideline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificGuidelineAsync(String orgId, String id, final ApiCallback<Guideline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificGuidelineValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<Guideline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificGuidelineRequestBuilder {
        private final String orgId;
        private final String id;

        private GetSpecificGuidelineRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for getSpecificGuideline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificGuidelineCall(orgId, id, _callback);
        }


        /**
         * Execute getSpecificGuideline request
         * @return Guideline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Guideline execute() throws ApiException {
            ApiResponse<Guideline> localVarResp = getSpecificGuidelineWithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificGuideline request with HTTP info returned
         * @return ApiResponse&lt;Guideline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Guideline> executeWithHttpInfo() throws ApiException {
            return getSpecificGuidelineWithHttpInfo(orgId, id);
        }

        /**
         * Execute getSpecificGuideline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Guideline> _callback) throws ApiException {
            return getSpecificGuidelineAsync(orgId, id, _callback);
        }
    }

    /**
     * Get a specific guideline
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param id ID of the desired guideline (required)
     * @return GetSpecificGuidelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificGuidelineRequestBuilder getSpecificGuideline(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSpecificGuidelineRequestBuilder(orgId, id);
    }
    private okhttp3.Call removeByIdCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, id, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String id;

        private RemoveByIdRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, id, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, id);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, id);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, id, _callback);
        }
    }

    /**
     * Delete a guideline
     * 
     * @param orgId  (required)
     * @param id  (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, id);
    }
    private okhttp3.Call updateGuidelineCall(String orgId, String id, UpdateGuideline updateGuideline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGuideline;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/guideline/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGuidelineValidateBeforeCall(String orgId, String id, UpdateGuideline updateGuideline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateGuideline(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGuideline(Async)");
        }

        return updateGuidelineCall(orgId, id, updateGuideline, _callback);

    }


    private ApiResponse<Void> updateGuidelineWithHttpInfo(String orgId, String id, UpdateGuideline updateGuideline) throws ApiException {
        okhttp3.Call localVarCall = updateGuidelineValidateBeforeCall(orgId, id, updateGuideline, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateGuidelineAsync(String orgId, String id, UpdateGuideline updateGuideline, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGuidelineValidateBeforeCall(orgId, id, updateGuideline, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateGuidelineRequestBuilder {
        private final String orgId;
        private final String id;
        private String label;
        private String budgetPoolId;
        private String participantsExpr;
        private String appliedField;
        private String sourceField;
        private String calculationType;
        private String flagMode;
        private Double flagDeviationThreshold;
        private Boolean enablePopulateValue;
        private String basisType;
        private String basisExpr;
        private BasisFieldMatrix basisFieldMatrix;
        private MoneyRange fixedAmountRange;
        private ValueRange fixedValueRange;

        private UpdateGuidelineRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Set label
         * @param label guideline name (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set budgetPoolId
         * @param budgetPoolId the budget pool the guideline is allocated from (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder budgetPoolId(String budgetPoolId) {
            this.budgetPoolId = budgetPoolId;
            return this;
        }
        
        /**
         * Set participantsExpr
         * @param participantsExpr CQL filter to determine which employees the guideline applies to (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder participantsExpr(String participantsExpr) {
            this.participantsExpr = participantsExpr;
            return this;
        }
        
        /**
         * Set appliedField
         * @param appliedField the field the guideline applies to (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder appliedField(String appliedField) {
            this.appliedField = appliedField;
            return this;
        }
        
        /**
         * Set sourceField
         * @param sourceField the field the guideline is calculated from (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder sourceField(String sourceField) {
            this.sourceField = sourceField;
            return this;
        }
        
        /**
         * Set calculationType
         * @param calculationType how does the guideline calculate the target value? e.g. is there a range (min/max) or only a target (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder calculationType(String calculationType) {
            this.calculationType = calculationType;
            return this;
        }
        
        /**
         * Set flagMode
         * @param flagMode how does the guideline indicate deviations from the target amount (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder flagMode(String flagMode) {
            this.flagMode = flagMode;
            return this;
        }
        
        /**
         * Set flagDeviationThreshold
         * @param flagDeviationThreshold the threshold (percent) against which deviations from the guideline are flagged (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder flagDeviationThreshold(Double flagDeviationThreshold) {
            this.flagDeviationThreshold = flagDeviationThreshold;
            return this;
        }
        
        /**
         * Set enablePopulateValue
         * @param enablePopulateValue whether or not the target values from the guidelines are pre-populated in the given columns (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder enablePopulateValue(Boolean enablePopulateValue) {
            this.enablePopulateValue = enablePopulateValue;
            return this;
        }
        
        /**
         * Set basisType
         * @param basisType how an individual guideline value itself is calculated, e.g. percentage of the appliedField, fixed amount, or custom CQL (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder basisType(String basisType) {
            this.basisType = basisType;
            return this;
        }
        
        /**
         * Set basisExpr
         * @param basisExpr if basisType.CUSTOM, the custom CQL expression used to generate the guideline value (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder basisExpr(String basisExpr) {
            this.basisExpr = basisExpr;
            return this;
        }
        
        /**
         * Set basisFieldMatrix
         * @param basisFieldMatrix  (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder basisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
            this.basisFieldMatrix = basisFieldMatrix;
            return this;
        }
        
        /**
         * Set fixedAmountRange
         * @param fixedAmountRange  (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder fixedAmountRange(MoneyRange fixedAmountRange) {
            this.fixedAmountRange = fixedAmountRange;
            return this;
        }
        
        /**
         * Set fixedValueRange
         * @param fixedValueRange  (optional)
         * @return UpdateGuidelineRequestBuilder
         */
        public UpdateGuidelineRequestBuilder fixedValueRange(ValueRange fixedValueRange) {
            this.fixedValueRange = fixedValueRange;
            return this;
        }
        
        /**
         * Build call for updateGuideline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateGuideline updateGuideline = buildBodyParams();
            return updateGuidelineCall(orgId, id, updateGuideline, _callback);
        }

        private UpdateGuideline buildBodyParams() {
            UpdateGuideline updateGuideline = new UpdateGuideline();
            updateGuideline.label(this.label);
            updateGuideline.budgetPoolId(this.budgetPoolId);
            updateGuideline.participantsExpr(this.participantsExpr);
            updateGuideline.appliedField(this.appliedField);
            updateGuideline.sourceField(this.sourceField);
            if (this.calculationType != null)
            updateGuideline.calculationType(UpdateGuideline.CalculationTypeEnum.fromValue(this.calculationType));
            if (this.flagMode != null)
            updateGuideline.flagMode(UpdateGuideline.FlagModeEnum.fromValue(this.flagMode));
            updateGuideline.flagDeviationThreshold(this.flagDeviationThreshold);
            updateGuideline.enablePopulateValue(this.enablePopulateValue);
            if (this.basisType != null)
            updateGuideline.basisType(UpdateGuideline.BasisTypeEnum.fromValue(this.basisType));
            updateGuideline.basisExpr(this.basisExpr);
            updateGuideline.basisFieldMatrix(this.basisFieldMatrix);
            updateGuideline.fixedAmountRange(this.fixedAmountRange);
            updateGuideline.fixedValueRange(this.fixedValueRange);
            return updateGuideline;
        }

        /**
         * Execute updateGuideline request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateGuideline updateGuideline = buildBodyParams();
            updateGuidelineWithHttpInfo(orgId, id, updateGuideline);
        }

        /**
         * Execute updateGuideline request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateGuideline updateGuideline = buildBodyParams();
            return updateGuidelineWithHttpInfo(orgId, id, updateGuideline);
        }

        /**
         * Execute updateGuideline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateGuideline updateGuideline = buildBodyParams();
            return updateGuidelineAsync(orgId, id, updateGuideline, _callback);
        }
    }

    /**
     * Update a guideline
     * 
     * @param orgId  (required)
     * @param id  (required)
     * @return UpdateGuidelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGuidelineRequestBuilder updateGuideline(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateGuidelineRequestBuilder(orgId, id);
    }
}
