/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateReport;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.Report;
import com.konfigthis.client.model.ReportCount;
import com.konfigthis.client.model.ReportDataStreamResults;
import com.konfigthis.client.model.ReportFilter;
import com.konfigthis.client.model.ReportQuery;
import com.konfigthis.client.model.ReportResult;
import com.konfigthis.client.model.ReportSeriesQuery;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkDeleteCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/bulk-delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkDelete(Async)");
        }

        return bulkDeleteCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> bulkDeleteWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkDeleteAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkDeleteRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private BulkDeleteRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of report ids to delete (optional)
         * @return BulkDeleteRequestBuilder
         */
        public BulkDeleteRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for bulkDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute bulkDelete request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkDeleteWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkDelete request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute bulkDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete a set of reports
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkDeleteRequestBuilder bulkDelete(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkDeleteRequestBuilder(orgId);
    }
    private okhttp3.Call createExactCopyCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/clone"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createExactCopyValidateBeforeCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createExactCopy(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling createExactCopy(Async)");
        }

        return createExactCopyCall(orgId, reportId, _callback);

    }


    private ApiResponse<Report> createExactCopyWithHttpInfo(String orgId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = createExactCopyValidateBeforeCall(orgId, reportId, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createExactCopyAsync(String orgId, String reportId, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = createExactCopyValidateBeforeCall(orgId, reportId, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateExactCopyRequestBuilder {
        private final String orgId;
        private final String reportId;

        private CreateExactCopyRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Build call for createExactCopy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createExactCopyCall(orgId, reportId, _callback);
        }


        /**
         * Execute createExactCopy request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            ApiResponse<Report> localVarResp = createExactCopyWithHttpInfo(orgId, reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createExactCopy request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            return createExactCopyWithHttpInfo(orgId, reportId);
        }

        /**
         * Execute createExactCopy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            return createExactCopyAsync(orgId, reportId, _callback);
        }
    }

    /**
     * Create an exact copy of an existing report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return CreateExactCopyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateExactCopyRequestBuilder createExactCopy(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new CreateExactCopyRequestBuilder(orgId, reportId);
    }
    private okhttp3.Call createNewReportCall(String orgId, CreateReport createReport, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReport;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewReportValidateBeforeCall(String orgId, CreateReport createReport, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewReport(Async)");
        }

        return createNewReportCall(orgId, createReport, _callback);

    }


    private ApiResponse<Report> createNewReportWithHttpInfo(String orgId, CreateReport createReport) throws ApiException {
        okhttp3.Call localVarCall = createNewReportValidateBeforeCall(orgId, createReport, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewReportAsync(String orgId, CreateReport createReport, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewReportValidateBeforeCall(orgId, createReport, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewReportRequestBuilder {
        private final String label;
        private final String orgId;
        private String description;
        private String filter;
        private String share;
        private String sensitive;
        private List<ShareAccess> shareAccess;
        private List<String> chartIds;

        private CreateNewReportRequestBuilder(String label, String orgId) {
            this.label = label;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description report description (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set filter
         * @param filter filter automatically applied to every chart in this report (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set share
         * @param share sharing settings of report (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder share(String share) {
            this.share = share;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of report (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to view or edit this report (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set chartIds
         * @param chartIds list of charts in this report (optional)
         * @return CreateNewReportRequestBuilder
         */
        public CreateNewReportRequestBuilder chartIds(List<String> chartIds) {
            this.chartIds = chartIds;
            return this;
        }
        
        /**
         * Build call for createNewReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateReport createReport = buildBodyParams();
            return createNewReportCall(orgId, createReport, _callback);
        }

        private CreateReport buildBodyParams() {
            CreateReport createReport = new CreateReport();
            createReport.description(this.description);
            createReport.label(this.label);
            createReport.filter(this.filter);
            if (this.share != null)
            createReport.share(CreateReport.ShareEnum.fromValue(this.share));
            if (this.sensitive != null)
            createReport.sensitive(CreateReport.SensitiveEnum.fromValue(this.sensitive));
            createReport.shareAccess(this.shareAccess);
            createReport.chartIds(this.chartIds);
            return createReport;
        }

        /**
         * Execute createNewReport request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            CreateReport createReport = buildBodyParams();
            ApiResponse<Report> localVarResp = createNewReportWithHttpInfo(orgId, createReport);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewReport request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            CreateReport createReport = buildBodyParams();
            return createNewReportWithHttpInfo(orgId, createReport);
        }

        /**
         * Execute createNewReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            CreateReport createReport = buildBodyParams();
            return createNewReportAsync(orgId, createReport, _callback);
        }
    }

    /**
     * Create a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewReportRequestBuilder createNewReport(String label, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewReportRequestBuilder(label, orgId);
    }
    private okhttp3.Call duplicateReportsCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/bulk-duplicate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateReportsValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling duplicateReports(Async)");
        }

        return duplicateReportsCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> duplicateReportsWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = duplicateReportsValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call duplicateReportsAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateReportsValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DuplicateReportsRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private DuplicateReportsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of report ids to duplicate (optional)
         * @return DuplicateReportsRequestBuilder
         */
        public DuplicateReportsRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for duplicateReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return duplicateReportsCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute duplicateReports request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = duplicateReportsWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute duplicateReports request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return duplicateReportsWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute duplicateReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return duplicateReportsAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Duplicate a set of reports
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DuplicateReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DuplicateReportsRequestBuilder duplicateReports(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DuplicateReportsRequestBuilder(orgId);
    }
    private okhttp3.Call exportChartCsvCall(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart/{chartId}/export/csv"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (projectHires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectHires", projectHires));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (changeGroupingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingType", changeGroupingType));
        }

        if (changeGroupingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingId", changeGroupingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportChartCsvValidateBeforeCall(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportChartCsv(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling exportChartCsv(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling exportChartCsv(Async)");
        }

        return exportChartCsvCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);

    }


    private ApiResponse<Process> exportChartCsvWithHttpInfo(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId) throws ApiException {
        okhttp3.Call localVarCall = exportChartCsvValidateBeforeCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportChartCsvAsync(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportChartCsvValidateBeforeCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExportChartCsvRequestBuilder {
        private final String orgId;
        private final String reportId;
        private final String chartId;
        private String startDate;
        private String endDate;
        private String interval;
        private String scenarioId;
        private Boolean projectHires;
        private String filter;
        private String changeGroupingType;
        private String changeGroupingId;

        private ExportChartCsvRequestBuilder(String orgId, String reportId, String chartId) {
            this.orgId = orgId;
            this.reportId = reportId;
            this.chartId = chartId;
        }

        /**
         * Set startDate
         * @param startDate Start date, inclusive (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date, exclusive (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Interval (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set projectHires
         * @param projectHires Project future hires (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder projectHires(Boolean projectHires) {
            this.projectHires = projectHires;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Additional filter to apply (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType Type of change grouping (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId Change grouping id to query (null for primary) (optional)
         * @return ExportChartCsvRequestBuilder
         */
        public ExportChartCsvRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Build call for exportChartCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exportChartCsvCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        }


        /**
         * Execute exportChartCsv request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = exportChartCsvWithHttpInfo(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exportChartCsv request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return exportChartCsvWithHttpInfo(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId);
        }

        /**
         * Execute exportChartCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return exportChartCsvAsync(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        }
    }

    /**
     * Export a particular chart in a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @param chartId Chart id (required)
     * @return ExportChartCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportChartCsvRequestBuilder exportChartCsv(String orgId, String reportId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new ExportChartCsvRequestBuilder(orgId, reportId, chartId);
    }
    private okhttp3.Call findReportByIdCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findReportByIdValidateBeforeCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findReportById(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling findReportById(Async)");
        }

        return findReportByIdCall(orgId, reportId, _callback);

    }


    private ApiResponse<Report> findReportByIdWithHttpInfo(String orgId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = findReportByIdValidateBeforeCall(orgId, reportId, null);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findReportByIdAsync(String orgId, String reportId, final ApiCallback<Report> _callback) throws ApiException {

        okhttp3.Call localVarCall = findReportByIdValidateBeforeCall(orgId, reportId, _callback);
        Type localVarReturnType = new TypeToken<Report>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindReportByIdRequestBuilder {
        private final String orgId;
        private final String reportId;

        private FindReportByIdRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Build call for findReportById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findReportByIdCall(orgId, reportId, _callback);
        }


        /**
         * Execute findReportById request
         * @return Report
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Report execute() throws ApiException {
            ApiResponse<Report> localVarResp = findReportByIdWithHttpInfo(orgId, reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findReportById request with HTTP info returned
         * @return ApiResponse&lt;Report&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Report> executeWithHttpInfo() throws ApiException {
            return findReportByIdWithHttpInfo(orgId, reportId);
        }

        /**
         * Execute findReportById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Report> _callback) throws ApiException {
            return findReportByIdAsync(orgId, reportId, _callback);
        }
    }

    /**
     * Return a particular report by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return FindReportByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindReportByIdRequestBuilder findReportById(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new FindReportByIdRequestBuilder(orgId, reportId);
    }
    private okhttp3.Call getAllPaginatedCall(String orgId, String fromId, Integer limit, String sort, String filter, String fields, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromId", fromId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaginatedValidateBeforeCall(String orgId, String fromId, Integer limit, String sort, String filter, String fields, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPaginated(Async)");
        }

        return getAllPaginatedCall(orgId, fromId, limit, sort, filter, fields, format, returnAccess, _callback);

    }


    private ApiResponse<ReportDataStreamResults> getAllPaginatedWithHttpInfo(String orgId, String fromId, Integer limit, String sort, String filter, String fields, String format, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, fromId, limit, sort, filter, fields, format, returnAccess, null);
        Type localVarReturnType = new TypeToken<ReportDataStreamResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaginatedAsync(String orgId, String fromId, Integer limit, String sort, String filter, String fields, String format, String returnAccess, final ApiCallback<ReportDataStreamResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, fromId, limit, sort, filter, fields, format, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ReportDataStreamResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaginatedRequestBuilder {
        private final String orgId;
        private String fromId;
        private Integer limit;
        private String sort;
        private String filter;
        private String fields;
        private String format;
        private String returnAccess;

        private GetAllPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set fromId
         * @param fromId Offset (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder fromId(String fromId) {
            this.fromId = fromId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filter (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getAllPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaginatedCall(orgId, fromId, limit, sort, filter, fields, format, returnAccess, _callback);
        }


        /**
         * Execute getAllPaginated request
         * @return ReportDataStreamResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportDataStreamResults execute() throws ApiException {
            ApiResponse<ReportDataStreamResults> localVarResp = getAllPaginatedWithHttpInfo(orgId, fromId, limit, sort, filter, fields, format, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaginated request with HTTP info returned
         * @return ApiResponse&lt;ReportDataStreamResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportDataStreamResults> executeWithHttpInfo() throws ApiException {
            return getAllPaginatedWithHttpInfo(orgId, fromId, limit, sort, filter, fields, format, returnAccess);
        }

        /**
         * Execute getAllPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportDataStreamResults> _callback) throws ApiException {
            return getAllPaginatedAsync(orgId, fromId, limit, sort, filter, fields, format, returnAccess, _callback);
        }
    }

    /**
     * Return all reports in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaginatedRequestBuilder getAllPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call getAllReportChartsCall(String orgId, String reportId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/query"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (projectHires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectHires", projectHires));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (changeGroupingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingType", changeGroupingType));
        }

        if (changeGroupingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingId", changeGroupingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllReportChartsValidateBeforeCall(String orgId, String reportId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllReportCharts(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getAllReportCharts(Async)");
        }

        return getAllReportChartsCall(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);

    }


    private ApiResponse<List<ReportResult>> getAllReportChartsWithHttpInfo(String orgId, String reportId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId) throws ApiException {
        okhttp3.Call localVarCall = getAllReportChartsValidateBeforeCall(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, null);
        Type localVarReturnType = new TypeToken<List<ReportResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllReportChartsAsync(String orgId, String reportId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String filter, String changeGroupingType, String changeGroupingId, final ApiCallback<List<ReportResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllReportChartsValidateBeforeCall(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        Type localVarReturnType = new TypeToken<List<ReportResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllReportChartsRequestBuilder {
        private final String orgId;
        private final String reportId;
        private String startDate;
        private String endDate;
        private String interval;
        private String scenarioId;
        private Boolean projectHires;
        private String filter;
        private String changeGroupingType;
        private String changeGroupingId;

        private GetAllReportChartsRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Set startDate
         * @param startDate Start date, inclusive (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date, exclusive (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Interval (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set projectHires
         * @param projectHires Project future hires (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder projectHires(Boolean projectHires) {
            this.projectHires = projectHires;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Filter to apply to all results (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType Type of change grouping (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId Change grouping id to query (null for primary) (optional)
         * @return GetAllReportChartsRequestBuilder
         */
        public GetAllReportChartsRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Build call for getAllReportCharts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllReportChartsCall(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        }


        /**
         * Execute getAllReportCharts request
         * @return List&lt;ReportResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public List<ReportResult> execute() throws ApiException {
            ApiResponse<List<ReportResult>> localVarResp = getAllReportChartsWithHttpInfo(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllReportCharts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ReportResult&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ReportResult>> executeWithHttpInfo() throws ApiException {
            return getAllReportChartsWithHttpInfo(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId);
        }

        /**
         * Execute getAllReportCharts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ReportResult>> _callback) throws ApiException {
            return getAllReportChartsAsync(orgId, reportId, startDate, endDate, interval, scenarioId, projectHires, filter, changeGroupingType, changeGroupingId, _callback);
        }
    }

    /**
     * Query all the charts in a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return GetAllReportChartsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllReportChartsRequestBuilder getAllReportCharts(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetAllReportChartsRequestBuilder(orgId, reportId);
    }
    private okhttp3.Call getCountOfReportsInOrganizationCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/count"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCountOfReportsInOrganizationValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCountOfReportsInOrganization(Async)");
        }

        return getCountOfReportsInOrganizationCall(orgId, _callback);

    }


    private ApiResponse<ReportCount> getCountOfReportsInOrganizationWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getCountOfReportsInOrganizationValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<ReportCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCountOfReportsInOrganizationAsync(String orgId, final ApiCallback<ReportCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCountOfReportsInOrganizationValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<ReportCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCountOfReportsInOrganizationRequestBuilder {
        private final String orgId;

        private GetCountOfReportsInOrganizationRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getCountOfReportsInOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCountOfReportsInOrganizationCall(orgId, _callback);
        }


        /**
         * Execute getCountOfReportsInOrganization request
         * @return ReportCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportCount execute() throws ApiException {
            ApiResponse<ReportCount> localVarResp = getCountOfReportsInOrganizationWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCountOfReportsInOrganization request with HTTP info returned
         * @return ApiResponse&lt;ReportCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportCount> executeWithHttpInfo() throws ApiException {
            return getCountOfReportsInOrganizationWithHttpInfo(orgId);
        }

        /**
         * Execute getCountOfReportsInOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportCount> _callback) throws ApiException {
            return getCountOfReportsInOrganizationAsync(orgId, _callback);
        }
    }

    /**
     * Return count of reports in an organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetCountOfReportsInOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCountOfReportsInOrganizationRequestBuilder getCountOfReportsInOrganization(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetCountOfReportsInOrganizationRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, reportId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, reportId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String reportId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, reportId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String reportId;

        private RemoveByIdRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, reportId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, reportId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, reportId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, reportId, _callback);
        }
    }

    /**
     * Delete a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, reportId);
    }
    private okhttp3.Call timeseriesDataArbitraryQueriesCall(String orgId, ReportQuery reportQuery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportQuery;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/query"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeseriesDataArbitraryQueriesValidateBeforeCall(String orgId, ReportQuery reportQuery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling timeseriesDataArbitraryQueries(Async)");
        }

        return timeseriesDataArbitraryQueriesCall(orgId, reportQuery, _callback);

    }


    private ApiResponse<List<ReportResult>> timeseriesDataArbitraryQueriesWithHttpInfo(String orgId, ReportQuery reportQuery) throws ApiException {
        okhttp3.Call localVarCall = timeseriesDataArbitraryQueriesValidateBeforeCall(orgId, reportQuery, null);
        Type localVarReturnType = new TypeToken<List<ReportResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call timeseriesDataArbitraryQueriesAsync(String orgId, ReportQuery reportQuery, final ApiCallback<List<ReportResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeseriesDataArbitraryQueriesValidateBeforeCall(orgId, reportQuery, _callback);
        Type localVarReturnType = new TypeToken<List<ReportResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TimeseriesDataArbitraryQueriesRequestBuilder {
        private final Object options;
        private final String orgId;
        private List<ReportSeriesQuery> series;
        private List<ReportFilter> filters;
        private String content;
        private String startDate;
        private String endDate;
        private String interval;
        private List<LocalDate> intervalDates;

        private TimeseriesDataArbitraryQueriesRequestBuilder(Object options, String orgId) {
            this.options = options;
            this.orgId = orgId;
        }

        /**
         * Set series
         * @param series series to evaluate (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder series(List<ReportSeriesQuery> series) {
            this.series = series;
            return this;
        }
        
        /**
         * Set filters
         * @param filters filters to crosstab all results by (deprecated in reports V2, should use groupBy instead) (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder filters(List<ReportFilter> filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set content
         * @param content content block to evaluate as a Carrot Template, as an alternative to using series (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date, in either relative (-7d) or exact (YYYY-MM-DD) format (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end date, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval interval, if the query is a timeseries; if no interval, query is crosstabbed (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set intervalDates
         * @param intervalDates interval dates, if a specific set of irregular dates are being queried in a timeseries (optional)
         * @return TimeseriesDataArbitraryQueriesRequestBuilder
         */
        public TimeseriesDataArbitraryQueriesRequestBuilder intervalDates(List<LocalDate> intervalDates) {
            this.intervalDates = intervalDates;
            return this;
        }
        
        /**
         * Build call for timeseriesDataArbitraryQueries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReportQuery reportQuery = buildBodyParams();
            return timeseriesDataArbitraryQueriesCall(orgId, reportQuery, _callback);
        }

        private ReportQuery buildBodyParams() {
            ReportQuery reportQuery = new ReportQuery();
            reportQuery.series(this.series);
            reportQuery.filters(this.filters);
            reportQuery.content(this.content);
            reportQuery.startDate(this.startDate);
            reportQuery.endDate(this.endDate);
            if (this.interval != null)
            reportQuery.interval(ReportQuery.IntervalEnum.fromValue(this.interval));
            reportQuery.intervalDates(this.intervalDates);
            reportQuery.options(this.options);
            return reportQuery;
        }

        /**
         * Execute timeseriesDataArbitraryQueries request
         * @return List&lt;ReportResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public List<ReportResult> execute() throws ApiException {
            ReportQuery reportQuery = buildBodyParams();
            ApiResponse<List<ReportResult>> localVarResp = timeseriesDataArbitraryQueriesWithHttpInfo(orgId, reportQuery);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute timeseriesDataArbitraryQueries request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ReportResult&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ReportResult>> executeWithHttpInfo() throws ApiException {
            ReportQuery reportQuery = buildBodyParams();
            return timeseriesDataArbitraryQueriesWithHttpInfo(orgId, reportQuery);
        }

        /**
         * Execute timeseriesDataArbitraryQueries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ReportResult>> _callback) throws ApiException {
            ReportQuery reportQuery = buildBodyParams();
            return timeseriesDataArbitraryQueriesAsync(orgId, reportQuery, _callback);
        }
    }

    /**
     * Return timeseries data from arbitrary queries
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return TimeseriesDataArbitraryQueriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public TimeseriesDataArbitraryQueriesRequestBuilder timeseriesDataArbitraryQueries(Object options, String orgId) throws IllegalArgumentException {
        if (options == null) throw new IllegalArgumentException("\"options\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new TimeseriesDataArbitraryQueriesRequestBuilder(options, orgId);
    }
    private okhttp3.Call updateExistingReportCall(String orgId, String reportId, String referencedReportUrl, UpdateReport updateReport, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateReport;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referencedReportUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referencedReportUrl", referencedReportUrl));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingReportValidateBeforeCall(String orgId, String reportId, String referencedReportUrl, UpdateReport updateReport, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingReport(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling updateExistingReport(Async)");
        }

        return updateExistingReportCall(orgId, reportId, referencedReportUrl, updateReport, _callback);

    }


    private ApiResponse<Void> updateExistingReportWithHttpInfo(String orgId, String reportId, String referencedReportUrl, UpdateReport updateReport) throws ApiException {
        okhttp3.Call localVarCall = updateExistingReportValidateBeforeCall(orgId, reportId, referencedReportUrl, updateReport, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingReportAsync(String orgId, String reportId, String referencedReportUrl, UpdateReport updateReport, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingReportValidateBeforeCall(orgId, reportId, referencedReportUrl, updateReport, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingReportRequestBuilder {
        private final String orgId;
        private final String reportId;
        private String description;
        private String label;
        private String filter;
        private String share;
        private String sensitive;
        private List<ShareAccess> shareAccess;
        private List<String> chartIds;
        private String referencedReportUrl;

        private UpdateExistingReportRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Set description
         * @param description report description (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set label
         * @param label report label (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set filter
         * @param filter filter automatically applied to every chart in this report (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set share
         * @param share sharing settings of report (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder share(String share) {
            this.share = share;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of report (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to view or edit this report (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set chartIds
         * @param chartIds list of charts in this report (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder chartIds(List<String> chartIds) {
            this.chartIds = chartIds;
            return this;
        }
        
        /**
         * Set referencedReportUrl
         * @param referencedReportUrl Displayed report url (optional)
         * @return UpdateExistingReportRequestBuilder
         */
        public UpdateExistingReportRequestBuilder referencedReportUrl(String referencedReportUrl) {
            this.referencedReportUrl = referencedReportUrl;
            return this;
        }
        
        /**
         * Build call for updateExistingReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateReport updateReport = buildBodyParams();
            return updateExistingReportCall(orgId, reportId, referencedReportUrl, updateReport, _callback);
        }

        private UpdateReport buildBodyParams() {
            UpdateReport updateReport = new UpdateReport();
            updateReport.description(this.description);
            updateReport.label(this.label);
            updateReport.filter(this.filter);
            if (this.share != null)
            updateReport.share(UpdateReport.ShareEnum.fromValue(this.share));
            if (this.sensitive != null)
            updateReport.sensitive(UpdateReport.SensitiveEnum.fromValue(this.sensitive));
            updateReport.shareAccess(this.shareAccess);
            updateReport.chartIds(this.chartIds);
            return updateReport;
        }

        /**
         * Execute updateExistingReport request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateReport updateReport = buildBodyParams();
            updateExistingReportWithHttpInfo(orgId, reportId, referencedReportUrl, updateReport);
        }

        /**
         * Execute updateExistingReport request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateReport updateReport = buildBodyParams();
            return updateExistingReportWithHttpInfo(orgId, reportId, referencedReportUrl, updateReport);
        }

        /**
         * Execute updateExistingReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateReport updateReport = buildBodyParams();
            return updateExistingReportAsync(orgId, reportId, referencedReportUrl, updateReport, _callback);
        }
    }

    /**
     * Update an existing report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return UpdateExistingReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingReportRequestBuilder updateExistingReport(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new UpdateExistingReportRequestBuilder(orgId, reportId);
    }
}
