/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Geocode;
import java.time.LocalDate;
import com.konfigthis.client.model.ResultsData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PersonApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PersonApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPersonCall(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPersonValidateBeforeCall(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewPerson(Async)");
        }

        return createNewPersonCall(orgId, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Object> createNewPersonWithHttpInfo(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createNewPersonValidateBeforeCall(orgId, scenarioId, date, requestBody, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPersonAsync(String orgId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPersonValidateBeforeCall(orgId, scenarioId, date, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPersonRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;

        private CreateNewPersonRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to create the person in (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of person creation (optional)
         * @return CreateNewPersonRequestBuilder
         */
        public CreateNewPersonRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createNewPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewPersonCall(orgId, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute createNewPerson request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewPersonWithHttpInfo(orgId, scenarioId, date, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPerson request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewPersonWithHttpInfo(orgId, scenarioId, date, requestBody);
        }

        /**
         * Execute createNewPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewPersonAsync(orgId, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Create a person
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPersonRequestBuilder createNewPerson(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewPersonRequestBuilder(orgId);
    }
    private okhttp3.Call findInOrganizationCall(String orgId, String scenarioId, LocalDate date, LocalDate startDate, LocalDate endDate, String q, String from, Integer limit, String fields, List<String> fieldsList, Boolean includeAll, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldsList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fieldsList", fieldsList));
        }

        if (includeAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAll", includeAll));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInOrganizationValidateBeforeCall(String orgId, String scenarioId, LocalDate date, LocalDate startDate, LocalDate endDate, String q, String from, Integer limit, String fields, List<String> fieldsList, Boolean includeAll, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInOrganization(Async)");
        }

        return findInOrganizationCall(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess, _callback);

    }


    private ApiResponse<ResultsData> findInOrganizationWithHttpInfo(String orgId, String scenarioId, LocalDate date, LocalDate startDate, LocalDate endDate, String q, String from, Integer limit, String fields, List<String> fieldsList, Boolean includeAll, String format, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInOrganizationAsync(String orgId, String scenarioId, LocalDate date, LocalDate startDate, LocalDate endDate, String q, String from, Integer limit, String fields, List<String> fieldsList, Boolean includeAll, String format, String returnAccess, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInOrganizationRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;
        private LocalDate startDate;
        private LocalDate endDate;
        private String q;
        private String from;
        private Integer limit;
        private String fields;
        private List<String> fieldsList;
        private Boolean includeAll;
        private String format;
        private String returnAccess;

        private FindInOrganizationRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start date, if retrieving persons employed between two dates (inclusive) (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date, if retrieving persons employed between two dates (inclusive) (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set q
         * @param q Search query (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set from
         * @param from Person id to start paginating from (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set fieldsList
         * @param fieldsList Fields to retrieve, list syntax (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder fieldsList(List<String> fieldsList) {
            this.fieldsList = fieldsList;
            return this;
        }
        
        /**
         * Set includeAll
         * @param includeAll Include all persons in the system, including ex-employees or persons who were never in jobs (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder includeAll(Boolean includeAll) {
            this.includeAll = includeAll;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for findInOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInOrganizationCall(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess, _callback);
        }


        /**
         * Execute findInOrganization request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findInOrganizationWithHttpInfo(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInOrganization request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findInOrganizationWithHttpInfo(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess);
        }

        /**
         * Execute findInOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findInOrganizationAsync(orgId, scenarioId, date, startDate, endDate, q, from, limit, fields, fieldsList, includeAll, format, returnAccess, _callback);
        }
    }

    /**
     * Find persons in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindInOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInOrganizationRequestBuilder findInOrganization(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindInOrganizationRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String personId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person/{personId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String personId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getById(Async)");
        }

        return getByIdCall(orgId, personId, scenarioId, date, fields, format, _callback);

    }


    private ApiResponse<Object> getByIdWithHttpInfo(String orgId, String personId, String scenarioId, LocalDate date, String fields, String format) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, personId, scenarioId, date, fields, format, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String personId, String scenarioId, LocalDate date, String fields, String format, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, personId, scenarioId, date, fields, format, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String personId;
        private String scenarioId;
        private LocalDate date;
        private String fields;
        private String format;

        private GetByIdRequestBuilder(String orgId, String personId) {
            this.orgId = orgId;
            this.personId = personId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, personId, scenarioId, date, fields, format, _callback);
        }


        /**
         * Execute getById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByIdWithHttpInfo(orgId, personId, scenarioId, date, fields, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, personId, scenarioId, date, fields, format);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByIdAsync(orgId, personId, scenarioId, date, fields, format, _callback);
        }
    }

    /**
     * Return a particular person by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param personId Person id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String personId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, personId);
    }
    private okhttp3.Call getGeocodesForOrgCall(String orgId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person/geocodes"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGeocodesForOrgValidateBeforeCall(String orgId, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getGeocodesForOrg(Async)");
        }

        return getGeocodesForOrgCall(orgId, fields, _callback);

    }


    private ApiResponse<List<Geocode>> getGeocodesForOrgWithHttpInfo(String orgId, String fields) throws ApiException {
        okhttp3.Call localVarCall = getGeocodesForOrgValidateBeforeCall(orgId, fields, null);
        Type localVarReturnType = new TypeToken<List<Geocode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGeocodesForOrgAsync(String orgId, String fields, final ApiCallback<List<Geocode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGeocodesForOrgValidateBeforeCall(orgId, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Geocode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGeocodesForOrgRequestBuilder {
        private final String orgId;
        private String fields;

        private GetGeocodesForOrgRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetGeocodesForOrgRequestBuilder
         */
        public GetGeocodesForOrgRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getGeocodesForOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGeocodesForOrgCall(orgId, fields, _callback);
        }


        /**
         * Execute getGeocodesForOrg request
         * @return List&lt;Geocode&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public List<Geocode> execute() throws ApiException {
            ApiResponse<List<Geocode>> localVarResp = getGeocodesForOrgWithHttpInfo(orgId, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGeocodesForOrg request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Geocode&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Geocode>> executeWithHttpInfo() throws ApiException {
            return getGeocodesForOrgWithHttpInfo(orgId, fields);
        }

        /**
         * Execute getGeocodesForOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Geocode>> _callback) throws ApiException {
            return getGeocodesForOrgAsync(orgId, fields, _callback);
        }
    }

    /**
     * Return all geocodes for persons in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetGeocodesForOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetGeocodesForOrgRequestBuilder getGeocodesForOrg(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetGeocodesForOrgRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person/{personId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, personId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String personId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, personId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String personId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, personId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String personId;

        private RemoveByIdRequestBuilder(String orgId, String personId) {
            this.orgId = orgId;
            this.personId = personId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, personId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, personId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, personId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, personId, _callback);
        }
    }

    /**
     * Delete a person
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param personId Person id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String personId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, personId);
    }
    private okhttp3.Call updateByIdCall(String orgId, String personId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/person/{personId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String orgId, String personId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateById(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling updateById(Async)");
        }

        return updateByIdCall(orgId, personId, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String orgId, String personId, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(orgId, personId, scenarioId, date, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String orgId, String personId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(orgId, personId, scenarioId, date, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String orgId;
        private final String personId;
        private String scenarioId;
        private LocalDate date;

        private UpdateByIdRequestBuilder(String orgId, String personId) {
            this.orgId = orgId;
            this.personId = personId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the person in (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of person update (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdCall(orgId, personId, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateByIdWithHttpInfo(orgId, personId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdWithHttpInfo(orgId, personId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateByIdAsync(orgId, personId, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Update a person
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param personId Person id (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String orgId, String personId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(orgId, personId);
    }
}
