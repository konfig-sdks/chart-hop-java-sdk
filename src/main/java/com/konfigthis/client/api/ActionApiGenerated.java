/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Action;
import com.konfigthis.client.model.ActionRunRequest;
import com.konfigthis.client.model.CreateAction;
import com.konfigthis.client.model.CreateActionBody;
import com.konfigthis.client.model.PartialTaskConfig;
import com.konfigthis.client.model.PatchActionBody;
import com.konfigthis.client.model.ResultsAction;
import com.konfigthis.client.model.UpdateAction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ActionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ActionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ActionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewActionCall(String orgId, CreateActionBody createActionBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createActionBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewActionValidateBeforeCall(String orgId, CreateActionBody createActionBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewAction(Async)");
        }

        return createNewActionCall(orgId, createActionBody, _callback);

    }


    private ApiResponse<Action> createNewActionWithHttpInfo(String orgId, CreateActionBody createActionBody) throws ApiException {
        okhttp3.Call localVarCall = createNewActionValidateBeforeCall(orgId, createActionBody, null);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewActionAsync(String orgId, CreateActionBody createActionBody, final ApiCallback<Action> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewActionValidateBeforeCall(orgId, createActionBody, _callback);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewActionRequestBuilder {
        private final CreateAction action;
        private final String orgId;
        private List<PartialTaskConfig> stepTaskConfigs;

        private CreateNewActionRequestBuilder(CreateAction action, String orgId) {
            this.action = action;
            this.orgId = orgId;
        }

        /**
         * Set stepTaskConfigs
         * @param stepTaskConfigs  (optional)
         * @return CreateNewActionRequestBuilder
         */
        public CreateNewActionRequestBuilder stepTaskConfigs(List<PartialTaskConfig> stepTaskConfigs) {
            this.stepTaskConfigs = stepTaskConfigs;
            return this;
        }
        
        /**
         * Build call for createNewAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateActionBody createActionBody = buildBodyParams();
            return createNewActionCall(orgId, createActionBody, _callback);
        }

        private CreateActionBody buildBodyParams() {
            CreateActionBody createActionBody = new CreateActionBody();
            createActionBody.action(this.action);
            createActionBody.stepTaskConfigs(this.stepTaskConfigs);
            return createActionBody;
        }

        /**
         * Execute createNewAction request
         * @return Action
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Action execute() throws ApiException {
            CreateActionBody createActionBody = buildBodyParams();
            ApiResponse<Action> localVarResp = createNewActionWithHttpInfo(orgId, createActionBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAction request with HTTP info returned
         * @return ApiResponse&lt;Action&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Action> executeWithHttpInfo() throws ApiException {
            CreateActionBody createActionBody = buildBodyParams();
            return createNewActionWithHttpInfo(orgId, createActionBody);
        }

        /**
         * Execute createNewAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Action> _callback) throws ApiException {
            CreateActionBody createActionBody = buildBodyParams();
            return createNewActionAsync(orgId, createActionBody, _callback);
        }
    }

    /**
     * Create an action
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewActionRequestBuilder createNewAction(CreateAction action, String orgId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewActionRequestBuilder(action, orgId);
    }
    private okhttp3.Call deleteActionByIdCall(String orgId, String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action/{actionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteActionByIdValidateBeforeCall(String orgId, String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteActionById(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling deleteActionById(Async)");
        }

        return deleteActionByIdCall(orgId, actionId, _callback);

    }


    private ApiResponse<Void> deleteActionByIdWithHttpInfo(String orgId, String actionId) throws ApiException {
        okhttp3.Call localVarCall = deleteActionByIdValidateBeforeCall(orgId, actionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteActionByIdAsync(String orgId, String actionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteActionByIdValidateBeforeCall(orgId, actionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteActionByIdRequestBuilder {
        private final String orgId;
        private final String actionId;

        private DeleteActionByIdRequestBuilder(String orgId, String actionId) {
            this.orgId = orgId;
            this.actionId = actionId;
        }

        /**
         * Build call for deleteActionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteActionByIdCall(orgId, actionId, _callback);
        }


        /**
         * Execute deleteActionById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteActionByIdWithHttpInfo(orgId, actionId);
        }

        /**
         * Execute deleteActionById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteActionByIdWithHttpInfo(orgId, actionId);
        }

        /**
         * Execute deleteActionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteActionByIdAsync(orgId, actionId, _callback);
        }
    }

    /**
     * Delete an action
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param actionId Action id (required)
     * @return DeleteActionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteActionByIdRequestBuilder deleteActionById(String orgId, String actionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new DeleteActionByIdRequestBuilder(orgId, actionId);
    }
    private okhttp3.Call executeActionForTestingCall(String orgId, String actionId, ActionRunRequest actionRunRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionRunRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action/{actionId}/run"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeActionForTestingValidateBeforeCall(String orgId, String actionId, ActionRunRequest actionRunRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling executeActionForTesting(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling executeActionForTesting(Async)");
        }

        return executeActionForTestingCall(orgId, actionId, actionRunRequest, _callback);

    }


    private ApiResponse<Void> executeActionForTestingWithHttpInfo(String orgId, String actionId, ActionRunRequest actionRunRequest) throws ApiException {
        okhttp3.Call localVarCall = executeActionForTestingValidateBeforeCall(orgId, actionId, actionRunRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call executeActionForTestingAsync(String orgId, String actionId, ActionRunRequest actionRunRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeActionForTestingValidateBeforeCall(orgId, actionId, actionRunRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ExecuteActionForTestingRequestBuilder {
        private final String jobId;
        private final String eventCode;
        private final String orgId;
        private final String actionId;

        private ExecuteActionForTestingRequestBuilder(String jobId, String eventCode, String orgId, String actionId) {
            this.jobId = jobId;
            this.eventCode = eventCode;
            this.orgId = orgId;
            this.actionId = actionId;
        }

        /**
         * Build call for executeActionForTesting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ActionRunRequest actionRunRequest = buildBodyParams();
            return executeActionForTestingCall(orgId, actionId, actionRunRequest, _callback);
        }

        private ActionRunRequest buildBodyParams() {
            ActionRunRequest actionRunRequest = new ActionRunRequest();
            actionRunRequest.jobId(this.jobId);
            actionRunRequest.eventCode(this.eventCode);
            return actionRunRequest;
        }

        /**
         * Execute executeActionForTesting request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ActionRunRequest actionRunRequest = buildBodyParams();
            executeActionForTestingWithHttpInfo(orgId, actionId, actionRunRequest);
        }

        /**
         * Execute executeActionForTesting request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ActionRunRequest actionRunRequest = buildBodyParams();
            return executeActionForTestingWithHttpInfo(orgId, actionId, actionRunRequest);
        }

        /**
         * Execute executeActionForTesting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ActionRunRequest actionRunRequest = buildBodyParams();
            return executeActionForTestingAsync(orgId, actionId, actionRunRequest, _callback);
        }
    }

    /**
     * Run an action - for testing
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param actionId Action id (required)
     * @return ExecuteActionForTestingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExecuteActionForTestingRequestBuilder executeActionForTesting(String jobId, String eventCode, String orgId, String actionId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        if (eventCode == null) throw new IllegalArgumentException("\"eventCode\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new ExecuteActionForTestingRequestBuilder(jobId, eventCode, orgId, actionId);
    }
    private okhttp3.Call getActionByIdCall(String orgId, String actionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action/{actionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActionByIdValidateBeforeCall(String orgId, String actionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getActionById(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling getActionById(Async)");
        }

        return getActionByIdCall(orgId, actionId, _callback);

    }


    private ApiResponse<Action> getActionByIdWithHttpInfo(String orgId, String actionId) throws ApiException {
        okhttp3.Call localVarCall = getActionByIdValidateBeforeCall(orgId, actionId, null);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getActionByIdAsync(String orgId, String actionId, final ApiCallback<Action> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActionByIdValidateBeforeCall(orgId, actionId, _callback);
        Type localVarReturnType = new TypeToken<Action>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetActionByIdRequestBuilder {
        private final String orgId;
        private final String actionId;

        private GetActionByIdRequestBuilder(String orgId, String actionId) {
            this.orgId = orgId;
            this.actionId = actionId;
        }

        /**
         * Build call for getActionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getActionByIdCall(orgId, actionId, _callback);
        }


        /**
         * Execute getActionById request
         * @return Action
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Action execute() throws ApiException {
            ApiResponse<Action> localVarResp = getActionByIdWithHttpInfo(orgId, actionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getActionById request with HTTP info returned
         * @return ApiResponse&lt;Action&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Action> executeWithHttpInfo() throws ApiException {
            return getActionByIdWithHttpInfo(orgId, actionId);
        }

        /**
         * Execute getActionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Action> _callback) throws ApiException {
            return getActionByIdAsync(orgId, actionId, _callback);
        }
    }

    /**
     * Return a particular action by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param actionId Action id (required)
     * @return GetActionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetActionByIdRequestBuilder getActionById(String orgId, String actionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new GetActionByIdRequestBuilder(orgId, actionId);
    }
    private okhttp3.Call getAllPaginatedCall(String orgId, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaginatedValidateBeforeCall(String orgId, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPaginated(Async)");
        }

        return getAllPaginatedCall(orgId, from, limit, _callback);

    }


    private ApiResponse<ResultsAction> getAllPaginatedWithHttpInfo(String orgId, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaginatedAsync(String orgId, String from, Integer limit, final ApiCallback<ResultsAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaginatedRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;

        private GetAllPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Action id to start paginating from (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaginatedCall(orgId, from, limit, _callback);
        }


        /**
         * Execute getAllPaginated request
         * @return ResultsAction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsAction execute() throws ApiException {
            ApiResponse<ResultsAction> localVarResp = getAllPaginatedWithHttpInfo(orgId, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsAction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsAction> executeWithHttpInfo() throws ApiException {
            return getAllPaginatedWithHttpInfo(orgId, from, limit);
        }

        /**
         * Execute getAllPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsAction> _callback) throws ApiException {
            return getAllPaginatedAsync(orgId, from, limit, _callback);
        }
    }

    /**
     * Return all actions in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaginatedRequestBuilder getAllPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call updateExistingActionByIdCall(String orgId, String actionId, PatchActionBody patchActionBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchActionBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/action/{actionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "actionId" + "}", localVarApiClient.escapeString(actionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingActionByIdValidateBeforeCall(String orgId, String actionId, PatchActionBody patchActionBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingActionById(Async)");
        }

        // verify the required parameter 'actionId' is set
        if (actionId == null) {
            throw new ApiException("Missing the required parameter 'actionId' when calling updateExistingActionById(Async)");
        }

        return updateExistingActionByIdCall(orgId, actionId, patchActionBody, _callback);

    }


    private ApiResponse<Void> updateExistingActionByIdWithHttpInfo(String orgId, String actionId, PatchActionBody patchActionBody) throws ApiException {
        okhttp3.Call localVarCall = updateExistingActionByIdValidateBeforeCall(orgId, actionId, patchActionBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingActionByIdAsync(String orgId, String actionId, PatchActionBody patchActionBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingActionByIdValidateBeforeCall(orgId, actionId, patchActionBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingActionByIdRequestBuilder {
        private final UpdateAction action;
        private final String orgId;
        private final String actionId;
        private List<PartialTaskConfig> stepTaskConfigs;

        private UpdateExistingActionByIdRequestBuilder(UpdateAction action, String orgId, String actionId) {
            this.action = action;
            this.orgId = orgId;
            this.actionId = actionId;
        }

        /**
         * Set stepTaskConfigs
         * @param stepTaskConfigs  (optional)
         * @return UpdateExistingActionByIdRequestBuilder
         */
        public UpdateExistingActionByIdRequestBuilder stepTaskConfigs(List<PartialTaskConfig> stepTaskConfigs) {
            this.stepTaskConfigs = stepTaskConfigs;
            return this;
        }
        
        /**
         * Build call for updateExistingActionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchActionBody patchActionBody = buildBodyParams();
            return updateExistingActionByIdCall(orgId, actionId, patchActionBody, _callback);
        }

        private PatchActionBody buildBodyParams() {
            PatchActionBody patchActionBody = new PatchActionBody();
            patchActionBody.action(this.action);
            patchActionBody.stepTaskConfigs(this.stepTaskConfigs);
            return patchActionBody;
        }

        /**
         * Execute updateExistingActionById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PatchActionBody patchActionBody = buildBodyParams();
            updateExistingActionByIdWithHttpInfo(orgId, actionId, patchActionBody);
        }

        /**
         * Execute updateExistingActionById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PatchActionBody patchActionBody = buildBodyParams();
            return updateExistingActionByIdWithHttpInfo(orgId, actionId, patchActionBody);
        }

        /**
         * Execute updateExistingActionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PatchActionBody patchActionBody = buildBodyParams();
            return updateExistingActionByIdAsync(orgId, actionId, patchActionBody, _callback);
        }
    }

    /**
     * Update an existing action
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param actionId Action id (required)
     * @return UpdateExistingActionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingActionByIdRequestBuilder updateExistingActionById(UpdateAction action, String orgId, String actionId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (actionId == null) throw new IllegalArgumentException("\"actionId\" is required but got null");
            

        return new UpdateExistingActionByIdRequestBuilder(action, orgId, actionId);
    }
}
