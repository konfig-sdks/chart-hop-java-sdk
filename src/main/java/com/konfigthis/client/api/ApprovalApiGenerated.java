/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApprovalChain;
import com.konfigthis.client.model.ApprovalChainStage;
import com.konfigthis.client.model.ApprovalGroup;
import com.konfigthis.client.model.ApprovalRequest;
import com.konfigthis.client.model.ApprovalRequestCreateBody;
import com.konfigthis.client.model.ApprovalRequestDeleteBody;
import com.konfigthis.client.model.ApprovalRequestPatchBody;
import com.konfigthis.client.model.CreateApprovalChain;
import com.konfigthis.client.model.CreateApprovalChainStage;
import com.konfigthis.client.model.DefaultChainCreateBody;
import com.konfigthis.client.model.ReassignApproverPatchBody;
import com.konfigthis.client.model.ResultsApprovalChain;
import com.konfigthis.client.model.ResultsApprovalChainStage;
import com.konfigthis.client.model.ResultsApprovalRequest;
import com.konfigthis.client.model.ResultsApprovalRequestCompReviewResponse;
import com.konfigthis.client.model.ResultsApprovalRequestScenarioResponse;
import com.konfigthis.client.model.SendReminderBody;
import com.konfigthis.client.model.UpdateApprovalChain;
import com.konfigthis.client.model.UpdateApprovalChainStage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApprovalApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApprovalApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApprovalApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createChainCall(String orgId, Boolean createDefaultStages, CreateApprovalChain createApprovalChain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApprovalChain;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createDefaultStages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createDefaultStages", createDefaultStages));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChainValidateBeforeCall(String orgId, Boolean createDefaultStages, CreateApprovalChain createApprovalChain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createChain(Async)");
        }

        return createChainCall(orgId, createDefaultStages, createApprovalChain, _callback);

    }


    private ApiResponse<ApprovalChain> createChainWithHttpInfo(String orgId, Boolean createDefaultStages, CreateApprovalChain createApprovalChain) throws ApiException {
        okhttp3.Call localVarCall = createChainValidateBeforeCall(orgId, createDefaultStages, createApprovalChain, null);
        Type localVarReturnType = new TypeToken<ApprovalChain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChainAsync(String orgId, Boolean createDefaultStages, CreateApprovalChain createApprovalChain, final ApiCallback<ApprovalChain> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChainValidateBeforeCall(orgId, createDefaultStages, createApprovalChain, _callback);
        Type localVarReturnType = new TypeToken<ApprovalChain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChainRequestBuilder {
        private final String name;
        private final Boolean isPreview;
        private final Set<String> approvalNotifierUserIds;
        private final String orgId;
        private String entityId;
        private String entityType;
        private String fallbackApproverJobId;
        private String fallbackApproverJobError;
        private Boolean createDefaultStages;

        private CreateChainRequestBuilder(String name, Boolean isPreview, Set<String> approvalNotifierUserIds, String orgId) {
            this.name = name;
            this.isPreview = isPreview;
            this.approvalNotifierUserIds = approvalNotifierUserIds;
            this.orgId = orgId;
        }

        /**
         * Set entityId
         * @param entityId entity id (optional)
         * @return CreateChainRequestBuilder
         */
        public CreateChainRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType entity type (optional)
         * @return CreateChainRequestBuilder
         */
        public CreateChainRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set fallbackApproverJobId
         * @param fallbackApproverJobId the jobId of the fallback approver (optional)
         * @return CreateChainRequestBuilder
         */
        public CreateChainRequestBuilder fallbackApproverJobId(String fallbackApproverJobId) {
            this.fallbackApproverJobId = fallbackApproverJobId;
            return this;
        }
        
        /**
         * Set fallbackApproverJobError
         * @param fallbackApproverJobError most recent error for fallback approver (optional)
         * @return CreateChainRequestBuilder
         */
        public CreateChainRequestBuilder fallbackApproverJobError(String fallbackApproverJobError) {
            this.fallbackApproverJobError = fallbackApproverJobError;
            return this;
        }
        
        /**
         * Set createDefaultStages
         * @param createDefaultStages Create default stages (optional)
         * @return CreateChainRequestBuilder
         */
        public CreateChainRequestBuilder createDefaultStages(Boolean createDefaultStages) {
            this.createDefaultStages = createDefaultStages;
            return this;
        }
        
        /**
         * Build call for createChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateApprovalChain createApprovalChain = buildBodyParams();
            return createChainCall(orgId, createDefaultStages, createApprovalChain, _callback);
        }

        private CreateApprovalChain buildBodyParams() {
            CreateApprovalChain createApprovalChain = new CreateApprovalChain();
            createApprovalChain.entityId(this.entityId);
            if (this.entityType != null)
            createApprovalChain.entityType(CreateApprovalChain.EntityTypeEnum.fromValue(this.entityType));
            createApprovalChain.name(this.name);
            createApprovalChain.isPreview(this.isPreview);
            createApprovalChain.fallbackApproverJobId(this.fallbackApproverJobId);
            createApprovalChain.fallbackApproverJobError(this.fallbackApproverJobError);
            createApprovalChain.approvalNotifierUserIds(this.approvalNotifierUserIds);
            return createApprovalChain;
        }

        /**
         * Execute createChain request
         * @return ApprovalChain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalChain execute() throws ApiException {
            CreateApprovalChain createApprovalChain = buildBodyParams();
            ApiResponse<ApprovalChain> localVarResp = createChainWithHttpInfo(orgId, createDefaultStages, createApprovalChain);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChain request with HTTP info returned
         * @return ApiResponse&lt;ApprovalChain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalChain> executeWithHttpInfo() throws ApiException {
            CreateApprovalChain createApprovalChain = buildBodyParams();
            return createChainWithHttpInfo(orgId, createDefaultStages, createApprovalChain);
        }

        /**
         * Execute createChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalChain> _callback) throws ApiException {
            CreateApprovalChain createApprovalChain = buildBodyParams();
            return createChainAsync(orgId, createDefaultStages, createApprovalChain, _callback);
        }
    }

    /**
     * Create an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateChainRequestBuilder createChain(String name, Boolean isPreview, Set<String> approvalNotifierUserIds, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (isPreview == null) throw new IllegalArgumentException("\"isPreview\" is required but got null");
        if (approvalNotifierUserIds == null) throw new IllegalArgumentException("\"approvalNotifierUserIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateChainRequestBuilder(name, isPreview, approvalNotifierUserIds, orgId);
    }
    private okhttp3.Call createChainStageCall(String orgId, String approvalChainId, CreateApprovalChainStage createApprovalChainStage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApprovalChainStage;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/stage"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChainStageValidateBeforeCall(String orgId, String approvalChainId, CreateApprovalChainStage createApprovalChainStage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createChainStage(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling createChainStage(Async)");
        }

        return createChainStageCall(orgId, approvalChainId, createApprovalChainStage, _callback);

    }


    private ApiResponse<ApprovalChainStage> createChainStageWithHttpInfo(String orgId, String approvalChainId, CreateApprovalChainStage createApprovalChainStage) throws ApiException {
        okhttp3.Call localVarCall = createChainStageValidateBeforeCall(orgId, approvalChainId, createApprovalChainStage, null);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChainStageAsync(String orgId, String approvalChainId, CreateApprovalChainStage createApprovalChainStage, final ApiCallback<ApprovalChainStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChainStageValidateBeforeCall(orgId, approvalChainId, createApprovalChainStage, _callback);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChainStageRequestBuilder {
        private final String rejectBehavior;
        private final String status;
        private final Boolean approvalCommentRequired;
        private final Boolean rejectionCommentRequired;
        private final Integer order;
        private final List<ApprovalGroup> groups;
        private final String orgId;
        private final String approvalChainId;
        private String inclusionExpression;
        private String inclusionBehavior;
        private String expandExpression;

        private CreateChainStageRequestBuilder(String rejectBehavior, String status, Boolean approvalCommentRequired, Boolean rejectionCommentRequired, Integer order, List<ApprovalGroup> groups, String orgId, String approvalChainId) {
            this.rejectBehavior = rejectBehavior;
            this.status = status;
            this.approvalCommentRequired = approvalCommentRequired;
            this.rejectionCommentRequired = rejectionCommentRequired;
            this.order = order;
            this.groups = groups;
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set inclusionExpression
         * @param inclusionExpression optional custom expression to determine stage inclusion behavior (optional)
         * @return CreateChainStageRequestBuilder
         */
        public CreateChainStageRequestBuilder inclusionExpression(String inclusionExpression) {
            this.inclusionExpression = inclusionExpression;
            return this;
        }
        
        /**
         * Set inclusionBehavior
         * @param inclusionBehavior determines whether stage is conditional based on an expression (optional)
         * @return CreateChainStageRequestBuilder
         */
        public CreateChainStageRequestBuilder inclusionBehavior(String inclusionBehavior) {
            this.inclusionBehavior = inclusionBehavior;
            return this;
        }
        
        /**
         * Set expandExpression
         * @param expandExpression optional custom expression to determine approval request tree (optional)
         * @return CreateChainStageRequestBuilder
         */
        public CreateChainStageRequestBuilder expandExpression(String expandExpression) {
            this.expandExpression = expandExpression;
            return this;
        }
        
        /**
         * Build call for createChainStage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateApprovalChainStage createApprovalChainStage = buildBodyParams();
            return createChainStageCall(orgId, approvalChainId, createApprovalChainStage, _callback);
        }

        private CreateApprovalChainStage buildBodyParams() {
            CreateApprovalChainStage createApprovalChainStage = new CreateApprovalChainStage();
            createApprovalChainStage.inclusionExpression(this.inclusionExpression);
            if (this.inclusionBehavior != null)
            createApprovalChainStage.inclusionBehavior(CreateApprovalChainStage.InclusionBehaviorEnum.fromValue(this.inclusionBehavior));
            createApprovalChainStage.expandExpression(this.expandExpression);
            if (this.rejectBehavior != null)
            createApprovalChainStage.rejectBehavior(CreateApprovalChainStage.RejectBehaviorEnum.fromValue(this.rejectBehavior));
            if (this.status != null)
            createApprovalChainStage.status(CreateApprovalChainStage.StatusEnum.fromValue(this.status));
            createApprovalChainStage.approvalCommentRequired(this.approvalCommentRequired);
            createApprovalChainStage.rejectionCommentRequired(this.rejectionCommentRequired);
            createApprovalChainStage.order(this.order);
            createApprovalChainStage.groups(this.groups);
            return createApprovalChainStage;
        }

        /**
         * Execute createChainStage request
         * @return ApprovalChainStage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalChainStage execute() throws ApiException {
            CreateApprovalChainStage createApprovalChainStage = buildBodyParams();
            ApiResponse<ApprovalChainStage> localVarResp = createChainStageWithHttpInfo(orgId, approvalChainId, createApprovalChainStage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChainStage request with HTTP info returned
         * @return ApiResponse&lt;ApprovalChainStage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalChainStage> executeWithHttpInfo() throws ApiException {
            CreateApprovalChainStage createApprovalChainStage = buildBodyParams();
            return createChainStageWithHttpInfo(orgId, approvalChainId, createApprovalChainStage);
        }

        /**
         * Execute createChainStage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalChainStage> _callback) throws ApiException {
            CreateApprovalChainStage createApprovalChainStage = buildBodyParams();
            return createChainStageAsync(orgId, approvalChainId, createApprovalChainStage, _callback);
        }
    }

    /**
     * Create an approval chain stage
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return CreateChainStageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateChainStageRequestBuilder createChainStage(String rejectBehavior, String status, Boolean approvalCommentRequired, Boolean rejectionCommentRequired, Integer order, List<ApprovalGroup> groups, String orgId, String approvalChainId) throws IllegalArgumentException {
        if (rejectBehavior == null) throw new IllegalArgumentException("\"rejectBehavior\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (approvalCommentRequired == null) throw new IllegalArgumentException("\"approvalCommentRequired\" is required but got null");
        if (rejectionCommentRequired == null) throw new IllegalArgumentException("\"rejectionCommentRequired\" is required but got null");
        if (order == null) throw new IllegalArgumentException("\"order\" is required but got null");
        if (groups == null) throw new IllegalArgumentException("\"groups\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new CreateChainStageRequestBuilder(rejectBehavior, status, approvalCommentRequired, rejectionCommentRequired, order, groups, orgId, approvalChainId);
    }
    private okhttp3.Call createRequestCall(String orgId, String approvalChainId, Boolean dryRun, ApprovalRequestCreateBody approvalRequestCreateBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalRequestCreateBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dryRun != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dryRun", dryRun));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRequestValidateBeforeCall(String orgId, String approvalChainId, Boolean dryRun, ApprovalRequestCreateBody approvalRequestCreateBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createRequest(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling createRequest(Async)");
        }

        return createRequestCall(orgId, approvalChainId, dryRun, approvalRequestCreateBody, _callback);

    }


    private ApiResponse<ApprovalRequest> createRequestWithHttpInfo(String orgId, String approvalChainId, Boolean dryRun, ApprovalRequestCreateBody approvalRequestCreateBody) throws ApiException {
        okhttp3.Call localVarCall = createRequestValidateBeforeCall(orgId, approvalChainId, dryRun, approvalRequestCreateBody, null);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRequestAsync(String orgId, String approvalChainId, Boolean dryRun, ApprovalRequestCreateBody approvalRequestCreateBody, final ApiCallback<ApprovalRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRequestValidateBeforeCall(orgId, approvalChainId, dryRun, approvalRequestCreateBody, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestRequestBuilder {
        private final String entityId;
        private final String orgId;
        private final String approvalChainId;
        private Boolean dryRun;

        private CreateRequestRequestBuilder(String entityId, String orgId, String approvalChainId) {
            this.entityId = entityId;
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set dryRun
         * @param dryRun Dry run without creating real request (optional)
         * @return CreateRequestRequestBuilder
         */
        public CreateRequestRequestBuilder dryRun(Boolean dryRun) {
            this.dryRun = dryRun;
            return this;
        }
        
        /**
         * Build call for createRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApprovalRequestCreateBody approvalRequestCreateBody = buildBodyParams();
            return createRequestCall(orgId, approvalChainId, dryRun, approvalRequestCreateBody, _callback);
        }

        private ApprovalRequestCreateBody buildBodyParams() {
            ApprovalRequestCreateBody approvalRequestCreateBody = new ApprovalRequestCreateBody();
            approvalRequestCreateBody.entityId(this.entityId);
            return approvalRequestCreateBody;
        }

        /**
         * Execute createRequest request
         * @return ApprovalRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalRequest execute() throws ApiException {
            ApprovalRequestCreateBody approvalRequestCreateBody = buildBodyParams();
            ApiResponse<ApprovalRequest> localVarResp = createRequestWithHttpInfo(orgId, approvalChainId, dryRun, approvalRequestCreateBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRequest request with HTTP info returned
         * @return ApiResponse&lt;ApprovalRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalRequest> executeWithHttpInfo() throws ApiException {
            ApprovalRequestCreateBody approvalRequestCreateBody = buildBodyParams();
            return createRequestWithHttpInfo(orgId, approvalChainId, dryRun, approvalRequestCreateBody);
        }

        /**
         * Execute createRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalRequest> _callback) throws ApiException {
            ApprovalRequestCreateBody approvalRequestCreateBody = buildBodyParams();
            return createRequestAsync(orgId, approvalChainId, dryRun, approvalRequestCreateBody, _callback);
        }
    }

    /**
     * Create an approval request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return CreateRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestRequestBuilder createRequest(String entityId, String orgId, String approvalChainId) throws IllegalArgumentException {
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new CreateRequestRequestBuilder(entityId, orgId, approvalChainId);
    }
    private okhttp3.Call deleteApprovalChainStageCall(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/stage/{approvalChainStageId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalChainStageId" + "}", localVarApiClient.escapeString(approvalChainStageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApprovalChainStageValidateBeforeCall(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteApprovalChainStage(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling deleteApprovalChainStage(Async)");
        }

        // verify the required parameter 'approvalChainStageId' is set
        if (approvalChainStageId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainStageId' when calling deleteApprovalChainStage(Async)");
        }

        return deleteApprovalChainStageCall(orgId, approvalChainId, approvalChainStageId, _callback);

    }


    private ApiResponse<Void> deleteApprovalChainStageWithHttpInfo(String orgId, String approvalChainId, String approvalChainStageId) throws ApiException {
        okhttp3.Call localVarCall = deleteApprovalChainStageValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteApprovalChainStageAsync(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApprovalChainStageValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteApprovalChainStageRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private final String approvalChainStageId;

        private DeleteApprovalChainStageRequestBuilder(String orgId, String approvalChainId, String approvalChainStageId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalChainStageId = approvalChainStageId;
        }

        /**
         * Build call for deleteApprovalChainStage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteApprovalChainStageCall(orgId, approvalChainId, approvalChainStageId, _callback);
        }


        /**
         * Execute deleteApprovalChainStage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteApprovalChainStageWithHttpInfo(orgId, approvalChainId, approvalChainStageId);
        }

        /**
         * Execute deleteApprovalChainStage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteApprovalChainStageWithHttpInfo(orgId, approvalChainId, approvalChainStageId);
        }

        /**
         * Execute deleteApprovalChainStage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteApprovalChainStageAsync(orgId, approvalChainId, approvalChainStageId, _callback);
        }
    }

    /**
     * Delete an approval chain stage
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalChainStageId Approval chain stage id (required)
     * @return DeleteApprovalChainStageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteApprovalChainStageRequestBuilder deleteApprovalChainStage(String orgId, String approvalChainId, String approvalChainStageId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalChainStageId == null) throw new IllegalArgumentException("\"approvalChainStageId\" is required but got null");
            

        return new DeleteApprovalChainStageRequestBuilder(orgId, approvalChainId, approvalChainStageId);
    }
    private okhttp3.Call deleteChainByIdCall(String orgId, String approvalChainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChainByIdValidateBeforeCall(String orgId, String approvalChainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteChainById(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling deleteChainById(Async)");
        }

        return deleteChainByIdCall(orgId, approvalChainId, _callback);

    }


    private ApiResponse<Void> deleteChainByIdWithHttpInfo(String orgId, String approvalChainId) throws ApiException {
        okhttp3.Call localVarCall = deleteChainByIdValidateBeforeCall(orgId, approvalChainId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteChainByIdAsync(String orgId, String approvalChainId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChainByIdValidateBeforeCall(orgId, approvalChainId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteChainByIdRequestBuilder {
        private final String orgId;
        private final String approvalChainId;

        private DeleteChainByIdRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Build call for deleteChainById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteChainByIdCall(orgId, approvalChainId, _callback);
        }


        /**
         * Execute deleteChainById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteChainByIdWithHttpInfo(orgId, approvalChainId);
        }

        /**
         * Execute deleteChainById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteChainByIdWithHttpInfo(orgId, approvalChainId);
        }

        /**
         * Execute deleteChainById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteChainByIdAsync(orgId, approvalChainId, _callback);
        }
    }

    /**
     * Delete a approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return DeleteChainByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteChainByIdRequestBuilder deleteChainById(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new DeleteChainByIdRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call deleteRequestApprovalCall(String orgId, String approvalChainId, String approvalRequestId, ApprovalRequestDeleteBody approvalRequestDeleteBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalRequestDeleteBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRequestApprovalValidateBeforeCall(String orgId, String approvalChainId, String approvalRequestId, ApprovalRequestDeleteBody approvalRequestDeleteBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteRequestApproval(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling deleteRequestApproval(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling deleteRequestApproval(Async)");
        }

        return deleteRequestApprovalCall(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody, _callback);

    }


    private ApiResponse<Void> deleteRequestApprovalWithHttpInfo(String orgId, String approvalChainId, String approvalRequestId, ApprovalRequestDeleteBody approvalRequestDeleteBody) throws ApiException {
        okhttp3.Call localVarCall = deleteRequestApprovalValidateBeforeCall(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRequestApprovalAsync(String orgId, String approvalChainId, String approvalRequestId, ApprovalRequestDeleteBody approvalRequestDeleteBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRequestApprovalValidateBeforeCall(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteRequestApprovalRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private final String approvalRequestId;
        private String message;

        private DeleteRequestApprovalRequestBuilder(String orgId, String approvalChainId, String approvalRequestId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return DeleteRequestApprovalRequestBuilder
         */
        public DeleteRequestApprovalRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for deleteRequestApproval
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApprovalRequestDeleteBody approvalRequestDeleteBody = buildBodyParams();
            return deleteRequestApprovalCall(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody, _callback);
        }

        private ApprovalRequestDeleteBody buildBodyParams() {
            ApprovalRequestDeleteBody approvalRequestDeleteBody = new ApprovalRequestDeleteBody();
            approvalRequestDeleteBody.message(this.message);
            return approvalRequestDeleteBody;
        }

        /**
         * Execute deleteRequestApproval request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApprovalRequestDeleteBody approvalRequestDeleteBody = buildBodyParams();
            deleteRequestApprovalWithHttpInfo(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody);
        }

        /**
         * Execute deleteRequestApproval request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApprovalRequestDeleteBody approvalRequestDeleteBody = buildBodyParams();
            return deleteRequestApprovalWithHttpInfo(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody);
        }

        /**
         * Execute deleteRequestApproval request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApprovalRequestDeleteBody approvalRequestDeleteBody = buildBodyParams();
            return deleteRequestApprovalAsync(orgId, approvalChainId, approvalRequestId, approvalRequestDeleteBody, _callback);
        }
    }

    /**
     * Delete an approval request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalRequestId Approval request id (required)
     * @return DeleteRequestApprovalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRequestApprovalRequestBuilder deleteRequestApproval(String orgId, String approvalChainId, String approvalRequestId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new DeleteRequestApprovalRequestBuilder(orgId, approvalChainId, approvalRequestId);
    }
    private okhttp3.Call generateDefaultChainStagesCall(String orgId, DefaultChainCreateBody defaultChainCreateBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = defaultChainCreateBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/create-default-chain"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateDefaultChainStagesValidateBeforeCall(String orgId, DefaultChainCreateBody defaultChainCreateBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generateDefaultChainStages(Async)");
        }

        return generateDefaultChainStagesCall(orgId, defaultChainCreateBody, _callback);

    }


    private ApiResponse<ApprovalChainStage> generateDefaultChainStagesWithHttpInfo(String orgId, DefaultChainCreateBody defaultChainCreateBody) throws ApiException {
        okhttp3.Call localVarCall = generateDefaultChainStagesValidateBeforeCall(orgId, defaultChainCreateBody, null);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateDefaultChainStagesAsync(String orgId, DefaultChainCreateBody defaultChainCreateBody, final ApiCallback<ApprovalChainStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateDefaultChainStagesValidateBeforeCall(orgId, defaultChainCreateBody, _callback);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateDefaultChainStagesRequestBuilder {
        private final String entityType;
        private final String orgId;

        private GenerateDefaultChainStagesRequestBuilder(String entityType, String orgId) {
            this.entityType = entityType;
            this.orgId = orgId;
        }

        /**
         * Build call for generateDefaultChainStages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DefaultChainCreateBody defaultChainCreateBody = buildBodyParams();
            return generateDefaultChainStagesCall(orgId, defaultChainCreateBody, _callback);
        }

        private DefaultChainCreateBody buildBodyParams() {
            DefaultChainCreateBody defaultChainCreateBody = new DefaultChainCreateBody();
            if (this.entityType != null)
            defaultChainCreateBody.entityType(DefaultChainCreateBody.EntityTypeEnum.fromValue(this.entityType));
            return defaultChainCreateBody;
        }

        /**
         * Execute generateDefaultChainStages request
         * @return ApprovalChainStage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalChainStage execute() throws ApiException {
            DefaultChainCreateBody defaultChainCreateBody = buildBodyParams();
            ApiResponse<ApprovalChainStage> localVarResp = generateDefaultChainStagesWithHttpInfo(orgId, defaultChainCreateBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateDefaultChainStages request with HTTP info returned
         * @return ApiResponse&lt;ApprovalChainStage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalChainStage> executeWithHttpInfo() throws ApiException {
            DefaultChainCreateBody defaultChainCreateBody = buildBodyParams();
            return generateDefaultChainStagesWithHttpInfo(orgId, defaultChainCreateBody);
        }

        /**
         * Execute generateDefaultChainStages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalChainStage> _callback) throws ApiException {
            DefaultChainCreateBody defaultChainCreateBody = buildBodyParams();
            return generateDefaultChainStagesAsync(orgId, defaultChainCreateBody, _callback);
        }
    }

    /**
     * Build a default approval chain based on entity type
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GenerateDefaultChainStagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public GenerateDefaultChainStagesRequestBuilder generateDefaultChainStages(String entityType, String orgId) throws IllegalArgumentException {
        if (entityType == null) throw new IllegalArgumentException("\"entityType\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GenerateDefaultChainStagesRequestBuilder(entityType, orgId);
    }
    private okhttp3.Call getAllApprovalRequestsForApprovalChainCall(String orgId, String approvalChainId, Integer limit, String entityType, String entityIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (entityIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityIds", entityIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllApprovalRequestsForApprovalChainValidateBeforeCall(String orgId, String approvalChainId, Integer limit, String entityType, String entityIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllApprovalRequestsForApprovalChain(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getAllApprovalRequestsForApprovalChain(Async)");
        }

        return getAllApprovalRequestsForApprovalChainCall(orgId, approvalChainId, limit, entityType, entityIds, _callback);

    }


    private ApiResponse<ResultsApprovalRequest> getAllApprovalRequestsForApprovalChainWithHttpInfo(String orgId, String approvalChainId, Integer limit, String entityType, String entityIds) throws ApiException {
        okhttp3.Call localVarCall = getAllApprovalRequestsForApprovalChainValidateBeforeCall(orgId, approvalChainId, limit, entityType, entityIds, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllApprovalRequestsForApprovalChainAsync(String orgId, String approvalChainId, Integer limit, String entityType, String entityIds, final ApiCallback<ResultsApprovalRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllApprovalRequestsForApprovalChainValidateBeforeCall(orgId, approvalChainId, limit, entityType, entityIds, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllApprovalRequestsForApprovalChainRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private Integer limit;
        private String entityType;
        private String entityIds;

        private GetAllApprovalRequestsForApprovalChainRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllApprovalRequestsForApprovalChainRequestBuilder
         */
        public GetAllApprovalRequestsForApprovalChainRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType entity type to filter on (optional)
         * @return GetAllApprovalRequestsForApprovalChainRequestBuilder
         */
        public GetAllApprovalRequestsForApprovalChainRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set entityIds
         * @param entityIds entity ids to filter on (optional)
         * @return GetAllApprovalRequestsForApprovalChainRequestBuilder
         */
        public GetAllApprovalRequestsForApprovalChainRequestBuilder entityIds(String entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        
        /**
         * Build call for getAllApprovalRequestsForApprovalChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllApprovalRequestsForApprovalChainCall(orgId, approvalChainId, limit, entityType, entityIds, _callback);
        }


        /**
         * Execute getAllApprovalRequestsForApprovalChain request
         * @return ResultsApprovalRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalRequest execute() throws ApiException {
            ApiResponse<ResultsApprovalRequest> localVarResp = getAllApprovalRequestsForApprovalChainWithHttpInfo(orgId, approvalChainId, limit, entityType, entityIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllApprovalRequestsForApprovalChain request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalRequest> executeWithHttpInfo() throws ApiException {
            return getAllApprovalRequestsForApprovalChainWithHttpInfo(orgId, approvalChainId, limit, entityType, entityIds);
        }

        /**
         * Execute getAllApprovalRequestsForApprovalChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalRequest> _callback) throws ApiException {
            return getAllApprovalRequestsForApprovalChainAsync(orgId, approvalChainId, limit, entityType, entityIds, _callback);
        }
    }

    /**
     * Return all approval requests for an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return GetAllApprovalRequestsForApprovalChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllApprovalRequestsForApprovalChainRequestBuilder getAllApprovalRequestsForApprovalChain(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new GetAllApprovalRequestsForApprovalChainRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call getAllStagesForChainCall(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/stage/{approvalChainStageId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalChainStageId" + "}", localVarApiClient.escapeString(approvalChainStageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllStagesForChainValidateBeforeCall(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllStagesForChain(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getAllStagesForChain(Async)");
        }

        // verify the required parameter 'approvalChainStageId' is set
        if (approvalChainStageId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainStageId' when calling getAllStagesForChain(Async)");
        }

        return getAllStagesForChainCall(orgId, approvalChainId, approvalChainStageId, _callback);

    }


    private ApiResponse<ApprovalChainStage> getAllStagesForChainWithHttpInfo(String orgId, String approvalChainId, String approvalChainStageId) throws ApiException {
        okhttp3.Call localVarCall = getAllStagesForChainValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, null);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllStagesForChainAsync(String orgId, String approvalChainId, String approvalChainStageId, final ApiCallback<ApprovalChainStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllStagesForChainValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalChainStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllStagesForChainRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private final String approvalChainStageId;

        private GetAllStagesForChainRequestBuilder(String orgId, String approvalChainId, String approvalChainStageId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalChainStageId = approvalChainStageId;
        }

        /**
         * Build call for getAllStagesForChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllStagesForChainCall(orgId, approvalChainId, approvalChainStageId, _callback);
        }


        /**
         * Execute getAllStagesForChain request
         * @return ApprovalChainStage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalChainStage execute() throws ApiException {
            ApiResponse<ApprovalChainStage> localVarResp = getAllStagesForChainWithHttpInfo(orgId, approvalChainId, approvalChainStageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllStagesForChain request with HTTP info returned
         * @return ApiResponse&lt;ApprovalChainStage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalChainStage> executeWithHttpInfo() throws ApiException {
            return getAllStagesForChainWithHttpInfo(orgId, approvalChainId, approvalChainStageId);
        }

        /**
         * Execute getAllStagesForChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalChainStage> _callback) throws ApiException {
            return getAllStagesForChainAsync(orgId, approvalChainId, approvalChainStageId, _callback);
        }
    }

    /**
     * Return all approval chain stages for an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalChainStageId Approval chain stage id (required)
     * @return GetAllStagesForChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllStagesForChainRequestBuilder getAllStagesForChain(String orgId, String approvalChainId, String approvalChainStageId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalChainStageId == null) throw new IllegalArgumentException("\"approvalChainStageId\" is required but got null");
            

        return new GetAllStagesForChainRequestBuilder(orgId, approvalChainId, approvalChainStageId);
    }
    private okhttp3.Call getApprovalChainByIdCall(String orgId, String approvalChainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalChainByIdValidateBeforeCall(String orgId, String approvalChainId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getApprovalChainById(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getApprovalChainById(Async)");
        }

        return getApprovalChainByIdCall(orgId, approvalChainId, _callback);

    }


    private ApiResponse<ApprovalChain> getApprovalChainByIdWithHttpInfo(String orgId, String approvalChainId) throws ApiException {
        okhttp3.Call localVarCall = getApprovalChainByIdValidateBeforeCall(orgId, approvalChainId, null);
        Type localVarReturnType = new TypeToken<ApprovalChain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovalChainByIdAsync(String orgId, String approvalChainId, final ApiCallback<ApprovalChain> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalChainByIdValidateBeforeCall(orgId, approvalChainId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalChain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovalChainByIdRequestBuilder {
        private final String orgId;
        private final String approvalChainId;

        private GetApprovalChainByIdRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Build call for getApprovalChainById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovalChainByIdCall(orgId, approvalChainId, _callback);
        }


        /**
         * Execute getApprovalChainById request
         * @return ApprovalChain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalChain execute() throws ApiException {
            ApiResponse<ApprovalChain> localVarResp = getApprovalChainByIdWithHttpInfo(orgId, approvalChainId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovalChainById request with HTTP info returned
         * @return ApiResponse&lt;ApprovalChain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalChain> executeWithHttpInfo() throws ApiException {
            return getApprovalChainByIdWithHttpInfo(orgId, approvalChainId);
        }

        /**
         * Execute getApprovalChainById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalChain> _callback) throws ApiException {
            return getApprovalChainByIdAsync(orgId, approvalChainId, _callback);
        }
    }

    /**
     * Return a particular approval chain by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return GetApprovalChainByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalChainByIdRequestBuilder getApprovalChainById(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new GetApprovalChainByIdRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call getApprovalChainStagesCall(String orgId, String approvalChainId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/stage"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalChainStagesValidateBeforeCall(String orgId, String approvalChainId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getApprovalChainStages(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getApprovalChainStages(Async)");
        }

        return getApprovalChainStagesCall(orgId, approvalChainId, limit, _callback);

    }


    private ApiResponse<ResultsApprovalChainStage> getApprovalChainStagesWithHttpInfo(String orgId, String approvalChainId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getApprovalChainStagesValidateBeforeCall(orgId, approvalChainId, limit, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalChainStage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovalChainStagesAsync(String orgId, String approvalChainId, Integer limit, final ApiCallback<ResultsApprovalChainStage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalChainStagesValidateBeforeCall(orgId, approvalChainId, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalChainStage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovalChainStagesRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private Integer limit;

        private GetApprovalChainStagesRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetApprovalChainStagesRequestBuilder
         */
        public GetApprovalChainStagesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getApprovalChainStages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovalChainStagesCall(orgId, approvalChainId, limit, _callback);
        }


        /**
         * Execute getApprovalChainStages request
         * @return ResultsApprovalChainStage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalChainStage execute() throws ApiException {
            ApiResponse<ResultsApprovalChainStage> localVarResp = getApprovalChainStagesWithHttpInfo(orgId, approvalChainId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovalChainStages request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalChainStage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalChainStage> executeWithHttpInfo() throws ApiException {
            return getApprovalChainStagesWithHttpInfo(orgId, approvalChainId, limit);
        }

        /**
         * Execute getApprovalChainStages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalChainStage> _callback) throws ApiException {
            return getApprovalChainStagesAsync(orgId, approvalChainId, limit, _callback);
        }
    }

    /**
     * Return all approval chain stages for an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return GetApprovalChainStagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalChainStagesRequestBuilder getApprovalChainStages(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new GetApprovalChainStagesRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call getApprovalChainsCall(String orgId, String entityType, String entityId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalChainsValidateBeforeCall(String orgId, String entityType, String entityId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getApprovalChains(Async)");
        }

        return getApprovalChainsCall(orgId, entityType, entityId, limit, _callback);

    }


    private ApiResponse<ResultsApprovalChain> getApprovalChainsWithHttpInfo(String orgId, String entityType, String entityId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getApprovalChainsValidateBeforeCall(orgId, entityType, entityId, limit, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalChain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovalChainsAsync(String orgId, String entityType, String entityId, Integer limit, final ApiCallback<ResultsApprovalChain> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalChainsValidateBeforeCall(orgId, entityType, entityId, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalChain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovalChainsRequestBuilder {
        private final String orgId;
        private String entityType;
        private String entityId;
        private Integer limit;

        private GetApprovalChainsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set entityType
         * @param entityType The type of entity (optional)
         * @return GetApprovalChainsRequestBuilder
         */
        public GetApprovalChainsRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId the id of the entity (optional)
         * @return GetApprovalChainsRequestBuilder
         */
        public GetApprovalChainsRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetApprovalChainsRequestBuilder
         */
        public GetApprovalChainsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getApprovalChains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovalChainsCall(orgId, entityType, entityId, limit, _callback);
        }


        /**
         * Execute getApprovalChains request
         * @return ResultsApprovalChain
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalChain execute() throws ApiException {
            ApiResponse<ResultsApprovalChain> localVarResp = getApprovalChainsWithHttpInfo(orgId, entityType, entityId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovalChains request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalChain&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalChain> executeWithHttpInfo() throws ApiException {
            return getApprovalChainsWithHttpInfo(orgId, entityType, entityId, limit);
        }

        /**
         * Execute getApprovalChains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalChain> _callback) throws ApiException {
            return getApprovalChainsAsync(orgId, entityType, entityId, limit, _callback);
        }
    }

    /**
     * Return approval chains
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetApprovalChainsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalChainsRequestBuilder getApprovalChains(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetApprovalChainsRequestBuilder(orgId);
    }
    private okhttp3.Call getCompReviewResponsesForChainCall(String orgId, String approvalChainId, Integer limit, List<String> entityIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/entity/comp-review"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "entityIds", entityIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompReviewResponsesForChainValidateBeforeCall(String orgId, String approvalChainId, Integer limit, List<String> entityIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCompReviewResponsesForChain(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getCompReviewResponsesForChain(Async)");
        }

        return getCompReviewResponsesForChainCall(orgId, approvalChainId, limit, entityIds, _callback);

    }


    private ApiResponse<ResultsApprovalRequestCompReviewResponse> getCompReviewResponsesForChainWithHttpInfo(String orgId, String approvalChainId, Integer limit, List<String> entityIds) throws ApiException {
        okhttp3.Call localVarCall = getCompReviewResponsesForChainValidateBeforeCall(orgId, approvalChainId, limit, entityIds, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestCompReviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompReviewResponsesForChainAsync(String orgId, String approvalChainId, Integer limit, List<String> entityIds, final ApiCallback<ResultsApprovalRequestCompReviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompReviewResponsesForChainValidateBeforeCall(orgId, approvalChainId, limit, entityIds, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestCompReviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompReviewResponsesForChainRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private Integer limit;
        private List<String> entityIds;

        private GetCompReviewResponsesForChainRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetCompReviewResponsesForChainRequestBuilder
         */
        public GetCompReviewResponsesForChainRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set entityIds
         * @param entityIds entity ids to filter on (optional)
         * @return GetCompReviewResponsesForChainRequestBuilder
         */
        public GetCompReviewResponsesForChainRequestBuilder entityIds(List<String> entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        
        /**
         * Build call for getCompReviewResponsesForChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompReviewResponsesForChainCall(orgId, approvalChainId, limit, entityIds, _callback);
        }


        /**
         * Execute getCompReviewResponsesForChain request
         * @return ResultsApprovalRequestCompReviewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalRequestCompReviewResponse execute() throws ApiException {
            ApiResponse<ResultsApprovalRequestCompReviewResponse> localVarResp = getCompReviewResponsesForChainWithHttpInfo(orgId, approvalChainId, limit, entityIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompReviewResponsesForChain request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalRequestCompReviewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalRequestCompReviewResponse> executeWithHttpInfo() throws ApiException {
            return getCompReviewResponsesForChainWithHttpInfo(orgId, approvalChainId, limit, entityIds);
        }

        /**
         * Execute getCompReviewResponsesForChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalRequestCompReviewResponse> _callback) throws ApiException {
            return getCompReviewResponsesForChainAsync(orgId, approvalChainId, limit, entityIds, _callback);
        }
    }

    /**
     * Return all approval request comp review responses for an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return GetCompReviewResponsesForChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCompReviewResponsesForChainRequestBuilder getCompReviewResponsesForChain(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new GetCompReviewResponsesForChainRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call getScenarioResponsesCall(String orgId, String approvalChainId, Integer limit, String entityIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/entity/scenario"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityIds", entityIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioResponsesValidateBeforeCall(String orgId, String approvalChainId, Integer limit, String entityIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getScenarioResponses(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling getScenarioResponses(Async)");
        }

        return getScenarioResponsesCall(orgId, approvalChainId, limit, entityIds, _callback);

    }


    private ApiResponse<ResultsApprovalRequestScenarioResponse> getScenarioResponsesWithHttpInfo(String orgId, String approvalChainId, Integer limit, String entityIds) throws ApiException {
        okhttp3.Call localVarCall = getScenarioResponsesValidateBeforeCall(orgId, approvalChainId, limit, entityIds, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestScenarioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScenarioResponsesAsync(String orgId, String approvalChainId, Integer limit, String entityIds, final ApiCallback<ResultsApprovalRequestScenarioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioResponsesValidateBeforeCall(orgId, approvalChainId, limit, entityIds, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestScenarioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScenarioResponsesRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private Integer limit;
        private String entityIds;

        private GetScenarioResponsesRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetScenarioResponsesRequestBuilder
         */
        public GetScenarioResponsesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set entityIds
         * @param entityIds entity ids to filter on (optional)
         * @return GetScenarioResponsesRequestBuilder
         */
        public GetScenarioResponsesRequestBuilder entityIds(String entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        
        /**
         * Build call for getScenarioResponses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScenarioResponsesCall(orgId, approvalChainId, limit, entityIds, _callback);
        }


        /**
         * Execute getScenarioResponses request
         * @return ResultsApprovalRequestScenarioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalRequestScenarioResponse execute() throws ApiException {
            ApiResponse<ResultsApprovalRequestScenarioResponse> localVarResp = getScenarioResponsesWithHttpInfo(orgId, approvalChainId, limit, entityIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScenarioResponses request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalRequestScenarioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalRequestScenarioResponse> executeWithHttpInfo() throws ApiException {
            return getScenarioResponsesWithHttpInfo(orgId, approvalChainId, limit, entityIds);
        }

        /**
         * Execute getScenarioResponses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalRequestScenarioResponse> _callback) throws ApiException {
            return getScenarioResponsesAsync(orgId, approvalChainId, limit, entityIds, _callback);
        }
    }

    /**
     * Return all approval request scenario responses for an approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @return GetScenarioResponsesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetScenarioResponsesRequestBuilder getScenarioResponses(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new GetScenarioResponsesRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call reassignApproverAtStageCall(String orgId, String approvalChainId, String approvalRequestId, ReassignApproverPatchBody reassignApproverPatchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reassignApproverPatchBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}/reassign-approver"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reassignApproverAtStageValidateBeforeCall(String orgId, String approvalChainId, String approvalRequestId, ReassignApproverPatchBody reassignApproverPatchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling reassignApproverAtStage(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling reassignApproverAtStage(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling reassignApproverAtStage(Async)");
        }

        return reassignApproverAtStageCall(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody, _callback);

    }


    private ApiResponse<Void> reassignApproverAtStageWithHttpInfo(String orgId, String approvalChainId, String approvalRequestId, ReassignApproverPatchBody reassignApproverPatchBody) throws ApiException {
        okhttp3.Call localVarCall = reassignApproverAtStageValidateBeforeCall(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call reassignApproverAtStageAsync(String orgId, String approvalChainId, String approvalRequestId, ReassignApproverPatchBody reassignApproverPatchBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reassignApproverAtStageValidateBeforeCall(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ReassignApproverAtStageRequestBuilder {
        private final Integer stageOrder;
        private final String initialJobId;
        private final String reassignJobId;
        private final String message;
        private final String orgId;
        private final String approvalChainId;
        private final String approvalRequestId;

        private ReassignApproverAtStageRequestBuilder(Integer stageOrder, String initialJobId, String reassignJobId, String message, String orgId, String approvalChainId, String approvalRequestId) {
            this.stageOrder = stageOrder;
            this.initialJobId = initialJobId;
            this.reassignJobId = reassignJobId;
            this.message = message;
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Build call for reassignApproverAtStage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReassignApproverPatchBody reassignApproverPatchBody = buildBodyParams();
            return reassignApproverAtStageCall(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody, _callback);
        }

        private ReassignApproverPatchBody buildBodyParams() {
            ReassignApproverPatchBody reassignApproverPatchBody = new ReassignApproverPatchBody();
            reassignApproverPatchBody.stageOrder(this.stageOrder);
            reassignApproverPatchBody.initialJobId(this.initialJobId);
            reassignApproverPatchBody.reassignJobId(this.reassignJobId);
            reassignApproverPatchBody.message(this.message);
            return reassignApproverPatchBody;
        }

        /**
         * Execute reassignApproverAtStage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ReassignApproverPatchBody reassignApproverPatchBody = buildBodyParams();
            reassignApproverAtStageWithHttpInfo(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody);
        }

        /**
         * Execute reassignApproverAtStage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ReassignApproverPatchBody reassignApproverPatchBody = buildBodyParams();
            return reassignApproverAtStageWithHttpInfo(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody);
        }

        /**
         * Execute reassignApproverAtStage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ReassignApproverPatchBody reassignApproverPatchBody = buildBodyParams();
            return reassignApproverAtStageAsync(orgId, approvalChainId, approvalRequestId, reassignApproverPatchBody, _callback);
        }
    }

    /**
     * Reassigning an approver at a stage
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalRequestId approval request id (required)
     * @return ReassignApproverAtStageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ReassignApproverAtStageRequestBuilder reassignApproverAtStage(Integer stageOrder, String initialJobId, String reassignJobId, String message, String orgId, String approvalChainId, String approvalRequestId) throws IllegalArgumentException {
        if (stageOrder == null) throw new IllegalArgumentException("\"stageOrder\" is required but got null");
        if (initialJobId == null) throw new IllegalArgumentException("\"initialJobId\" is required but got null");
            

        if (reassignJobId == null) throw new IllegalArgumentException("\"reassignJobId\" is required but got null");
            

        if (message == null) throw new IllegalArgumentException("\"message\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new ReassignApproverAtStageRequestBuilder(stageOrder, initialJobId, reassignJobId, message, orgId, approvalChainId, approvalRequestId);
    }
    private okhttp3.Call requestApprovalRequestCall(String orgId, String approvalChainId, String approvalRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestApprovalRequestValidateBeforeCall(String orgId, String approvalChainId, String approvalRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling requestApprovalRequest(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling requestApprovalRequest(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling requestApprovalRequest(Async)");
        }

        return requestApprovalRequestCall(orgId, approvalChainId, approvalRequestId, _callback);

    }


    private ApiResponse<ApprovalRequest> requestApprovalRequestWithHttpInfo(String orgId, String approvalChainId, String approvalRequestId) throws ApiException {
        okhttp3.Call localVarCall = requestApprovalRequestValidateBeforeCall(orgId, approvalChainId, approvalRequestId, null);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestApprovalRequestAsync(String orgId, String approvalChainId, String approvalRequestId, final ApiCallback<ApprovalRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestApprovalRequestValidateBeforeCall(orgId, approvalChainId, approvalRequestId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestApprovalRequestRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private final String approvalRequestId;

        private RequestApprovalRequestRequestBuilder(String orgId, String approvalChainId, String approvalRequestId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Build call for requestApprovalRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestApprovalRequestCall(orgId, approvalChainId, approvalRequestId, _callback);
        }


        /**
         * Execute requestApprovalRequest request
         * @return ApprovalRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalRequest execute() throws ApiException {
            ApiResponse<ApprovalRequest> localVarResp = requestApprovalRequestWithHttpInfo(orgId, approvalChainId, approvalRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestApprovalRequest request with HTTP info returned
         * @return ApiResponse&lt;ApprovalRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalRequest> executeWithHttpInfo() throws ApiException {
            return requestApprovalRequestWithHttpInfo(orgId, approvalChainId, approvalRequestId);
        }

        /**
         * Execute requestApprovalRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalRequest> _callback) throws ApiException {
            return requestApprovalRequestAsync(orgId, approvalChainId, approvalRequestId, _callback);
        }
    }

    /**
     * Return an approval request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalRequestId Approval request id (required)
     * @return RequestApprovalRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RequestApprovalRequestRequestBuilder requestApprovalRequest(String orgId, String approvalChainId, String approvalRequestId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new RequestApprovalRequestRequestBuilder(orgId, approvalChainId, approvalRequestId);
    }
    private okhttp3.Call sendStageReviewerReminderCall(String orgId, String approvalChainId, String approvalRequestId, SendReminderBody sendReminderBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendReminderBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}/send-reminder"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendStageReviewerReminderValidateBeforeCall(String orgId, String approvalChainId, String approvalRequestId, SendReminderBody sendReminderBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendStageReviewerReminder(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling sendStageReviewerReminder(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling sendStageReviewerReminder(Async)");
        }

        return sendStageReviewerReminderCall(orgId, approvalChainId, approvalRequestId, sendReminderBody, _callback);

    }


    private ApiResponse<Void> sendStageReviewerReminderWithHttpInfo(String orgId, String approvalChainId, String approvalRequestId, SendReminderBody sendReminderBody) throws ApiException {
        okhttp3.Call localVarCall = sendStageReviewerReminderValidateBeforeCall(orgId, approvalChainId, approvalRequestId, sendReminderBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendStageReviewerReminderAsync(String orgId, String approvalChainId, String approvalRequestId, SendReminderBody sendReminderBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendStageReviewerReminderValidateBeforeCall(orgId, approvalChainId, approvalRequestId, sendReminderBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendStageReviewerReminderRequestBuilder {
        private final String jobId;
        private final String orgId;
        private final String approvalChainId;
        private final String approvalRequestId;

        private SendStageReviewerReminderRequestBuilder(String jobId, String orgId, String approvalChainId, String approvalRequestId) {
            this.jobId = jobId;
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Build call for sendStageReviewerReminder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendReminderBody sendReminderBody = buildBodyParams();
            return sendStageReviewerReminderCall(orgId, approvalChainId, approvalRequestId, sendReminderBody, _callback);
        }

        private SendReminderBody buildBodyParams() {
            SendReminderBody sendReminderBody = new SendReminderBody();
            sendReminderBody.jobId(this.jobId);
            return sendReminderBody;
        }

        /**
         * Execute sendStageReviewerReminder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SendReminderBody sendReminderBody = buildBodyParams();
            sendStageReviewerReminderWithHttpInfo(orgId, approvalChainId, approvalRequestId, sendReminderBody);
        }

        /**
         * Execute sendStageReviewerReminder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SendReminderBody sendReminderBody = buildBodyParams();
            return sendStageReviewerReminderWithHttpInfo(orgId, approvalChainId, approvalRequestId, sendReminderBody);
        }

        /**
         * Execute sendStageReviewerReminder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SendReminderBody sendReminderBody = buildBodyParams();
            return sendStageReviewerReminderAsync(orgId, approvalChainId, approvalRequestId, sendReminderBody, _callback);
        }
    }

    /**
     * Send a reminder for a stage reviewer in an existing approval request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalRequestId approval request id (required)
     * @return SendStageReviewerReminderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SendStageReviewerReminderRequestBuilder sendStageReviewerReminder(String jobId, String orgId, String approvalChainId, String approvalRequestId) throws IllegalArgumentException {
        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new SendStageReviewerReminderRequestBuilder(jobId, orgId, approvalChainId, approvalRequestId);
    }
    private okhttp3.Call updateChainCall(String orgId, String approvalChainId, UpdateApprovalChain updateApprovalChain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovalChain;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChainValidateBeforeCall(String orgId, String approvalChainId, UpdateApprovalChain updateApprovalChain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateChain(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling updateChain(Async)");
        }

        return updateChainCall(orgId, approvalChainId, updateApprovalChain, _callback);

    }


    private ApiResponse<Void> updateChainWithHttpInfo(String orgId, String approvalChainId, UpdateApprovalChain updateApprovalChain) throws ApiException {
        okhttp3.Call localVarCall = updateChainValidateBeforeCall(orgId, approvalChainId, updateApprovalChain, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChainAsync(String orgId, String approvalChainId, UpdateApprovalChain updateApprovalChain, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChainValidateBeforeCall(orgId, approvalChainId, updateApprovalChain, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChainRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private String name;
        private Boolean isPreview;
        private String fallbackApproverJobId;
        private String fallbackApproverJobError;
        private Set<String> approvalNotifierUserIds;

        private UpdateChainRequestBuilder(String orgId, String approvalChainId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
        }

        /**
         * Set name
         * @param name human-readable name of approval chain (optional)
         * @return UpdateChainRequestBuilder
         */
        public UpdateChainRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isPreview
         * @param isPreview isPreview specifies that this is a preview for implementations that use it (e.g. Compensation Reviews) (optional)
         * @return UpdateChainRequestBuilder
         */
        public UpdateChainRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Set fallbackApproverJobId
         * @param fallbackApproverJobId the jobId of the fallback approver (optional)
         * @return UpdateChainRequestBuilder
         */
        public UpdateChainRequestBuilder fallbackApproverJobId(String fallbackApproverJobId) {
            this.fallbackApproverJobId = fallbackApproverJobId;
            return this;
        }
        
        /**
         * Set fallbackApproverJobError
         * @param fallbackApproverJobError most recent error for fallback approver (optional)
         * @return UpdateChainRequestBuilder
         */
        public UpdateChainRequestBuilder fallbackApproverJobError(String fallbackApproverJobError) {
            this.fallbackApproverJobError = fallbackApproverJobError;
            return this;
        }
        
        /**
         * Set approvalNotifierUserIds
         * @param approvalNotifierUserIds ids of any users who should be notified when approval is complete (optional)
         * @return UpdateChainRequestBuilder
         */
        public UpdateChainRequestBuilder approvalNotifierUserIds(Set<String> approvalNotifierUserIds) {
            this.approvalNotifierUserIds = approvalNotifierUserIds;
            return this;
        }
        
        /**
         * Build call for updateChain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateApprovalChain updateApprovalChain = buildBodyParams();
            return updateChainCall(orgId, approvalChainId, updateApprovalChain, _callback);
        }

        private UpdateApprovalChain buildBodyParams() {
            UpdateApprovalChain updateApprovalChain = new UpdateApprovalChain();
            updateApprovalChain.name(this.name);
            updateApprovalChain.isPreview(this.isPreview);
            updateApprovalChain.fallbackApproverJobId(this.fallbackApproverJobId);
            updateApprovalChain.fallbackApproverJobError(this.fallbackApproverJobError);
            updateApprovalChain.approvalNotifierUserIds(this.approvalNotifierUserIds);
            return updateApprovalChain;
        }

        /**
         * Execute updateChain request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateApprovalChain updateApprovalChain = buildBodyParams();
            updateChainWithHttpInfo(orgId, approvalChainId, updateApprovalChain);
        }

        /**
         * Execute updateChain request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateApprovalChain updateApprovalChain = buildBodyParams();
            return updateChainWithHttpInfo(orgId, approvalChainId, updateApprovalChain);
        }

        /**
         * Execute updateChain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateApprovalChain updateApprovalChain = buildBodyParams();
            return updateChainAsync(orgId, approvalChainId, updateApprovalChain, _callback);
        }
    }

    /**
     * Update a approval chain
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId approval chain id (required)
     * @return UpdateChainRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChainRequestBuilder updateChain(String orgId, String approvalChainId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        return new UpdateChainRequestBuilder(orgId, approvalChainId);
    }
    private okhttp3.Call updateExistingRequestCall(String orgId, String approvalChainId, String approvalRequestId, String previewJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalRequestPatchBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/request/{approvalRequestId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (previewJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previewJobId", previewJobId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingRequestValidateBeforeCall(String orgId, String approvalChainId, String approvalRequestId, String previewJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingRequest(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling updateExistingRequest(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling updateExistingRequest(Async)");
        }

        return updateExistingRequestCall(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody, _callback);

    }


    private ApiResponse<Void> updateExistingRequestWithHttpInfo(String orgId, String approvalChainId, String approvalRequestId, String previewJobId, ApprovalRequestPatchBody approvalRequestPatchBody) throws ApiException {
        okhttp3.Call localVarCall = updateExistingRequestValidateBeforeCall(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingRequestAsync(String orgId, String approvalChainId, String approvalRequestId, String previewJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingRequestValidateBeforeCall(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingRequestRequestBuilder {
        private final String status;
        private final String orgId;
        private final String approvalChainId;
        private final String approvalRequestId;
        private String message;
        private String previewJobId;

        private UpdateExistingRequestRequestBuilder(String status, String orgId, String approvalChainId, String approvalRequestId) {
            this.status = status;
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return UpdateExistingRequestRequestBuilder
         */
        public UpdateExistingRequestRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set previewJobId
         * @param previewJobId preview-as job id (optional)
         * @return UpdateExistingRequestRequestBuilder
         */
        public UpdateExistingRequestRequestBuilder previewJobId(String previewJobId) {
            this.previewJobId = previewJobId;
            return this;
        }
        
        /**
         * Build call for updateExistingRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateExistingRequestCall(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody, _callback);
        }

        private ApprovalRequestPatchBody buildBodyParams() {
            ApprovalRequestPatchBody approvalRequestPatchBody = new ApprovalRequestPatchBody();
            if (this.status != null)
            approvalRequestPatchBody.status(ApprovalRequestPatchBody.StatusEnum.fromValue(this.status));
            approvalRequestPatchBody.message(this.message);
            return approvalRequestPatchBody;
        }

        /**
         * Execute updateExistingRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            updateExistingRequestWithHttpInfo(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody);
        }

        /**
         * Execute updateExistingRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateExistingRequestWithHttpInfo(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody);
        }

        /**
         * Execute updateExistingRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateExistingRequestAsync(orgId, approvalChainId, approvalRequestId, previewJobId, approvalRequestPatchBody, _callback);
        }
    }

    /**
     * Update an existing approval request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalRequestId approval request id (required)
     * @return UpdateExistingRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingRequestRequestBuilder updateExistingRequest(String status, String orgId, String approvalChainId, String approvalRequestId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new UpdateExistingRequestRequestBuilder(status, orgId, approvalChainId, approvalRequestId);
    }
    private okhttp3.Call updateStageByIdCall(String orgId, String approvalChainId, String approvalChainStageId, UpdateApprovalChainStage updateApprovalChainStage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateApprovalChainStage;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-chain/{approvalChainId}/stage/{approvalChainStageId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalChainId" + "}", localVarApiClient.escapeString(approvalChainId.toString()))
            .replace("{" + "approvalChainStageId" + "}", localVarApiClient.escapeString(approvalChainStageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStageByIdValidateBeforeCall(String orgId, String approvalChainId, String approvalChainStageId, UpdateApprovalChainStage updateApprovalChainStage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateStageById(Async)");
        }

        // verify the required parameter 'approvalChainId' is set
        if (approvalChainId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainId' when calling updateStageById(Async)");
        }

        // verify the required parameter 'approvalChainStageId' is set
        if (approvalChainStageId == null) {
            throw new ApiException("Missing the required parameter 'approvalChainStageId' when calling updateStageById(Async)");
        }

        return updateStageByIdCall(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage, _callback);

    }


    private ApiResponse<Void> updateStageByIdWithHttpInfo(String orgId, String approvalChainId, String approvalChainStageId, UpdateApprovalChainStage updateApprovalChainStage) throws ApiException {
        okhttp3.Call localVarCall = updateStageByIdValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStageByIdAsync(String orgId, String approvalChainId, String approvalChainStageId, UpdateApprovalChainStage updateApprovalChainStage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStageByIdValidateBeforeCall(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStageByIdRequestBuilder {
        private final String orgId;
        private final String approvalChainId;
        private final String approvalChainStageId;
        private String inclusionExpression;
        private String inclusionBehavior;
        private String expandExpression;
        private String rejectBehavior;
        private String status;
        private Boolean approvalCommentRequired;
        private Boolean rejectionCommentRequired;
        private Integer order;
        private List<ApprovalGroup> groups;

        private UpdateStageByIdRequestBuilder(String orgId, String approvalChainId, String approvalChainStageId) {
            this.orgId = orgId;
            this.approvalChainId = approvalChainId;
            this.approvalChainStageId = approvalChainStageId;
        }

        /**
         * Set inclusionExpression
         * @param inclusionExpression optional custom expression to determine stage inclusion behavior (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder inclusionExpression(String inclusionExpression) {
            this.inclusionExpression = inclusionExpression;
            return this;
        }
        
        /**
         * Set inclusionBehavior
         * @param inclusionBehavior determines whether stage is conditional based on an expression (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder inclusionBehavior(String inclusionBehavior) {
            this.inclusionBehavior = inclusionBehavior;
            return this;
        }
        
        /**
         * Set expandExpression
         * @param expandExpression optional custom expression to determine approval request tree (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder expandExpression(String expandExpression) {
            this.expandExpression = expandExpression;
            return this;
        }
        
        /**
         * Set rejectBehavior
         * @param rejectBehavior determines which stage becomes active when a rejection event happens (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder rejectBehavior(String rejectBehavior) {
            this.rejectBehavior = rejectBehavior;
            return this;
        }
        
        /**
         * Set status
         * @param status status of the stage (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set approvalCommentRequired
         * @param approvalCommentRequired requires a comment on an approval event (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder approvalCommentRequired(Boolean approvalCommentRequired) {
            this.approvalCommentRequired = approvalCommentRequired;
            return this;
        }
        
        /**
         * Set rejectionCommentRequired
         * @param rejectionCommentRequired requires a comment on an rejection event (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder rejectionCommentRequired(Boolean rejectionCommentRequired) {
            this.rejectionCommentRequired = rejectionCommentRequired;
            return this;
        }
        
        /**
         * Set order
         * @param order order of stage in approval chain (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder order(Integer order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set groups
         * @param groups list of groups that are involved in this approval stage (optional)
         * @return UpdateStageByIdRequestBuilder
         */
        public UpdateStageByIdRequestBuilder groups(List<ApprovalGroup> groups) {
            this.groups = groups;
            return this;
        }
        
        /**
         * Build call for updateStageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateApprovalChainStage updateApprovalChainStage = buildBodyParams();
            return updateStageByIdCall(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage, _callback);
        }

        private UpdateApprovalChainStage buildBodyParams() {
            UpdateApprovalChainStage updateApprovalChainStage = new UpdateApprovalChainStage();
            updateApprovalChainStage.inclusionExpression(this.inclusionExpression);
            if (this.inclusionBehavior != null)
            updateApprovalChainStage.inclusionBehavior(UpdateApprovalChainStage.InclusionBehaviorEnum.fromValue(this.inclusionBehavior));
            updateApprovalChainStage.expandExpression(this.expandExpression);
            if (this.rejectBehavior != null)
            updateApprovalChainStage.rejectBehavior(UpdateApprovalChainStage.RejectBehaviorEnum.fromValue(this.rejectBehavior));
            if (this.status != null)
            updateApprovalChainStage.status(UpdateApprovalChainStage.StatusEnum.fromValue(this.status));
            updateApprovalChainStage.approvalCommentRequired(this.approvalCommentRequired);
            updateApprovalChainStage.rejectionCommentRequired(this.rejectionCommentRequired);
            updateApprovalChainStage.order(this.order);
            updateApprovalChainStage.groups(this.groups);
            return updateApprovalChainStage;
        }

        /**
         * Execute updateStageById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateApprovalChainStage updateApprovalChainStage = buildBodyParams();
            updateStageByIdWithHttpInfo(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage);
        }

        /**
         * Execute updateStageById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateApprovalChainStage updateApprovalChainStage = buildBodyParams();
            return updateStageByIdWithHttpInfo(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage);
        }

        /**
         * Execute updateStageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateApprovalChainStage updateApprovalChainStage = buildBodyParams();
            return updateStageByIdAsync(orgId, approvalChainId, approvalChainStageId, updateApprovalChainStage, _callback);
        }
    }

    /**
     * Update an existing approval chain stage
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalChainId Approval chain id (required)
     * @param approvalChainStageId approval chain stage id (required)
     * @return UpdateStageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStageByIdRequestBuilder updateStageById(String orgId, String approvalChainId, String approvalChainStageId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalChainId == null) throw new IllegalArgumentException("\"approvalChainId\" is required but got null");
            

        if (approvalChainStageId == null) throw new IllegalArgumentException("\"approvalChainStageId\" is required but got null");
            

        return new UpdateStageByIdRequestBuilder(orgId, approvalChainId, approvalChainStageId);
    }
}
