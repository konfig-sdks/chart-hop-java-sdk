/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateJobLevel;
import com.konfigthis.client.model.EnumValue;
import java.time.LocalDate;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.UpdateJobLevel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JobLevelApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobLevelApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JobLevelApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewJobLevelCall(String orgId, LocalDate date, CreateJobLevel createJobLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createJobLevel;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/job-level"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewJobLevelValidateBeforeCall(String orgId, LocalDate date, CreateJobLevel createJobLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewJobLevel(Async)");
        }

        return createNewJobLevelCall(orgId, date, createJobLevel, _callback);

    }


    private ApiResponse<Void> createNewJobLevelWithHttpInfo(String orgId, LocalDate date, CreateJobLevel createJobLevel) throws ApiException {
        okhttp3.Call localVarCall = createNewJobLevelValidateBeforeCall(orgId, date, createJobLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewJobLevelAsync(String orgId, LocalDate date, CreateJobLevel createJobLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewJobLevelValidateBeforeCall(orgId, date, createJobLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewJobLevelRequestBuilder {
        private final String label;
        private final String orgId;
        private String code;
        private EnumValue benchmarkType;
        private EnumValue benchmarkLevel;
        private LocalDate date;

        private CreateNewJobLevelRequestBuilder(String label, String orgId) {
            this.label = label;
            this.orgId = orgId;
        }

        /**
         * Set code
         * @param code job level code (optional)
         * @return CreateNewJobLevelRequestBuilder
         */
        public CreateNewJobLevelRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set benchmarkType
         * @param benchmarkType  (optional)
         * @return CreateNewJobLevelRequestBuilder
         */
        public CreateNewJobLevelRequestBuilder benchmarkType(EnumValue benchmarkType) {
            this.benchmarkType = benchmarkType;
            return this;
        }
        
        /**
         * Set benchmarkLevel
         * @param benchmarkLevel  (optional)
         * @return CreateNewJobLevelRequestBuilder
         */
        public CreateNewJobLevelRequestBuilder benchmarkLevel(EnumValue benchmarkLevel) {
            this.benchmarkLevel = benchmarkLevel;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of job level creation (optional)
         * @return CreateNewJobLevelRequestBuilder
         */
        public CreateNewJobLevelRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createNewJobLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateJobLevel createJobLevel = buildBodyParams();
            return createNewJobLevelCall(orgId, date, createJobLevel, _callback);
        }

        private CreateJobLevel buildBodyParams() {
            CreateJobLevel createJobLevel = new CreateJobLevel();
            createJobLevel.label(this.label);
            createJobLevel.code(this.code);
            createJobLevel.benchmarkType(this.benchmarkType);
            createJobLevel.benchmarkLevel(this.benchmarkLevel);
            return createJobLevel;
        }

        /**
         * Execute createNewJobLevel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateJobLevel createJobLevel = buildBodyParams();
            createNewJobLevelWithHttpInfo(orgId, date, createJobLevel);
        }

        /**
         * Execute createNewJobLevel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateJobLevel createJobLevel = buildBodyParams();
            return createNewJobLevelWithHttpInfo(orgId, date, createJobLevel);
        }

        /**
         * Execute createNewJobLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateJobLevel createJobLevel = buildBodyParams();
            return createNewJobLevelAsync(orgId, date, createJobLevel, _callback);
        }
    }

    /**
     * Create a job level
     * 
     * @param orgId org identifier (either id or slug) (required)
     * @return CreateNewJobLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewJobLevelRequestBuilder createNewJobLevel(String label, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewJobLevelRequestBuilder(label, orgId);
    }
    private okhttp3.Call deleteJobLevelCall(String orgId, String jobLevelId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/job-level/{jobLevelId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobLevelId" + "}", localVarApiClient.escapeString(jobLevelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJobLevelValidateBeforeCall(String orgId, String jobLevelId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteJobLevel(Async)");
        }

        // verify the required parameter 'jobLevelId' is set
        if (jobLevelId == null) {
            throw new ApiException("Missing the required parameter 'jobLevelId' when calling deleteJobLevel(Async)");
        }

        return deleteJobLevelCall(orgId, jobLevelId, date, _callback);

    }


    private ApiResponse<Void> deleteJobLevelWithHttpInfo(String orgId, String jobLevelId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = deleteJobLevelValidateBeforeCall(orgId, jobLevelId, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteJobLevelAsync(String orgId, String jobLevelId, LocalDate date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJobLevelValidateBeforeCall(orgId, jobLevelId, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteJobLevelRequestBuilder {
        private final String orgId;
        private final String jobLevelId;
        private LocalDate date;

        private DeleteJobLevelRequestBuilder(String orgId, String jobLevelId) {
            this.orgId = orgId;
            this.jobLevelId = jobLevelId;
        }

        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return DeleteJobLevelRequestBuilder
         */
        public DeleteJobLevelRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for deleteJobLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteJobLevelCall(orgId, jobLevelId, date, _callback);
        }


        /**
         * Execute deleteJobLevel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteJobLevelWithHttpInfo(orgId, jobLevelId, date);
        }

        /**
         * Execute deleteJobLevel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteJobLevelWithHttpInfo(orgId, jobLevelId, date);
        }

        /**
         * Execute deleteJobLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteJobLevelAsync(orgId, jobLevelId, date, _callback);
        }
    }

    /**
     * Delete a job level
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobLevelId Job level id (required)
     * @return DeleteJobLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteJobLevelRequestBuilder deleteJobLevel(String orgId, String jobLevelId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobLevelId == null) throw new IllegalArgumentException("\"jobLevelId\" is required but got null");
            

        return new DeleteJobLevelRequestBuilder(orgId, jobLevelId);
    }
    private okhttp3.Call findInOrganizationCall(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/job-level"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInOrganizationValidateBeforeCall(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInOrganization(Async)");
        }

        return findInOrganizationCall(orgId, date, from, limit, includeDeleted, _callback);

    }


    private ApiResponse<ResultsData> findInOrganizationWithHttpInfo(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, date, from, limit, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInOrganizationAsync(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInOrganizationValidateBeforeCall(orgId, date, from, limit, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInOrganizationRequestBuilder {
        private final String orgId;
        private LocalDate date;
        private String from;
        private Integer limit;
        private Boolean includeDeleted;

        private FindInOrganizationRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set from
         * @param from Job level id to start paginating from (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted Include deleted job levels (optional)
         * @return FindInOrganizationRequestBuilder
         */
        public FindInOrganizationRequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for findInOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInOrganizationCall(orgId, date, from, limit, includeDeleted, _callback);
        }


        /**
         * Execute findInOrganization request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findInOrganizationWithHttpInfo(orgId, date, from, limit, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInOrganization request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findInOrganizationWithHttpInfo(orgId, date, from, limit, includeDeleted);
        }

        /**
         * Execute findInOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findInOrganizationAsync(orgId, date, from, limit, includeDeleted, _callback);
        }
    }

    /**
     * Find job levels in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindInOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindInOrganizationRequestBuilder findInOrganization(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindInOrganizationRequestBuilder(orgId);
    }
    private okhttp3.Call getByEffectiveDateCall(String orgId, String jobLevelId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/job-level/{jobLevelId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobLevelId" + "}", localVarApiClient.escapeString(jobLevelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEffectiveDateValidateBeforeCall(String orgId, String jobLevelId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByEffectiveDate(Async)");
        }

        // verify the required parameter 'jobLevelId' is set
        if (jobLevelId == null) {
            throw new ApiException("Missing the required parameter 'jobLevelId' when calling getByEffectiveDate(Async)");
        }

        return getByEffectiveDateCall(orgId, jobLevelId, date, _callback);

    }


    private ApiResponse<ResultsData> getByEffectiveDateWithHttpInfo(String orgId, String jobLevelId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getByEffectiveDateValidateBeforeCall(orgId, jobLevelId, date, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEffectiveDateAsync(String orgId, String jobLevelId, LocalDate date, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEffectiveDateValidateBeforeCall(orgId, jobLevelId, date, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEffectiveDateRequestBuilder {
        private final String orgId;
        private final String jobLevelId;
        private LocalDate date;

        private GetByEffectiveDateRequestBuilder(String orgId, String jobLevelId) {
            this.orgId = orgId;
            this.jobLevelId = jobLevelId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetByEffectiveDateRequestBuilder
         */
        public GetByEffectiveDateRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for getByEffectiveDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEffectiveDateCall(orgId, jobLevelId, date, _callback);
        }


        /**
         * Execute getByEffectiveDate request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getByEffectiveDateWithHttpInfo(orgId, jobLevelId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEffectiveDate request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getByEffectiveDateWithHttpInfo(orgId, jobLevelId, date);
        }

        /**
         * Execute getByEffectiveDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getByEffectiveDateAsync(orgId, jobLevelId, date, _callback);
        }
    }

    /**
     * Return a particular job level by id on an effective date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobLevelId Job level id (required)
     * @return GetByEffectiveDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByEffectiveDateRequestBuilder getByEffectiveDate(String orgId, String jobLevelId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobLevelId == null) throw new IllegalArgumentException("\"jobLevelId\" is required but got null");
            

        return new GetByEffectiveDateRequestBuilder(orgId, jobLevelId);
    }
    private okhttp3.Call updateJobLevelCall(String orgId, String jobLevelId, LocalDate date, UpdateJobLevel updateJobLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateJobLevel;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/job-level/{jobLevelId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobLevelId" + "}", localVarApiClient.escapeString(jobLevelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateJobLevelValidateBeforeCall(String orgId, String jobLevelId, LocalDate date, UpdateJobLevel updateJobLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateJobLevel(Async)");
        }

        // verify the required parameter 'jobLevelId' is set
        if (jobLevelId == null) {
            throw new ApiException("Missing the required parameter 'jobLevelId' when calling updateJobLevel(Async)");
        }

        return updateJobLevelCall(orgId, jobLevelId, date, updateJobLevel, _callback);

    }


    private ApiResponse<Void> updateJobLevelWithHttpInfo(String orgId, String jobLevelId, LocalDate date, UpdateJobLevel updateJobLevel) throws ApiException {
        okhttp3.Call localVarCall = updateJobLevelValidateBeforeCall(orgId, jobLevelId, date, updateJobLevel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateJobLevelAsync(String orgId, String jobLevelId, LocalDate date, UpdateJobLevel updateJobLevel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateJobLevelValidateBeforeCall(orgId, jobLevelId, date, updateJobLevel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateJobLevelRequestBuilder {
        private final String orgId;
        private final String jobLevelId;
        private String label;
        private String code;
        private EnumValue benchmarkType;
        private EnumValue benchmarkLevel;
        private LocalDate date;

        private UpdateJobLevelRequestBuilder(String orgId, String jobLevelId) {
            this.orgId = orgId;
            this.jobLevelId = jobLevelId;
        }

        /**
         * Set label
         * @param label human-readable name of job level (optional)
         * @return UpdateJobLevelRequestBuilder
         */
        public UpdateJobLevelRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set code
         * @param code job level code (optional)
         * @return UpdateJobLevelRequestBuilder
         */
        public UpdateJobLevelRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set benchmarkType
         * @param benchmarkType  (optional)
         * @return UpdateJobLevelRequestBuilder
         */
        public UpdateJobLevelRequestBuilder benchmarkType(EnumValue benchmarkType) {
            this.benchmarkType = benchmarkType;
            return this;
        }
        
        /**
         * Set benchmarkLevel
         * @param benchmarkLevel  (optional)
         * @return UpdateJobLevelRequestBuilder
         */
        public UpdateJobLevelRequestBuilder benchmarkLevel(EnumValue benchmarkLevel) {
            this.benchmarkLevel = benchmarkLevel;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of jobLevel update (optional)
         * @return UpdateJobLevelRequestBuilder
         */
        public UpdateJobLevelRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateJobLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateJobLevel updateJobLevel = buildBodyParams();
            return updateJobLevelCall(orgId, jobLevelId, date, updateJobLevel, _callback);
        }

        private UpdateJobLevel buildBodyParams() {
            UpdateJobLevel updateJobLevel = new UpdateJobLevel();
            updateJobLevel.label(this.label);
            updateJobLevel.code(this.code);
            updateJobLevel.benchmarkType(this.benchmarkType);
            updateJobLevel.benchmarkLevel(this.benchmarkLevel);
            return updateJobLevel;
        }

        /**
         * Execute updateJobLevel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateJobLevel updateJobLevel = buildBodyParams();
            updateJobLevelWithHttpInfo(orgId, jobLevelId, date, updateJobLevel);
        }

        /**
         * Execute updateJobLevel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateJobLevel updateJobLevel = buildBodyParams();
            return updateJobLevelWithHttpInfo(orgId, jobLevelId, date, updateJobLevel);
        }

        /**
         * Execute updateJobLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateJobLevel updateJobLevel = buildBodyParams();
            return updateJobLevelAsync(orgId, jobLevelId, date, updateJobLevel, _callback);
        }
    }

    /**
     * Update a job level
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobLevelId Job level id (required)
     * @return UpdateJobLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateJobLevelRequestBuilder updateJobLevel(String orgId, String jobLevelId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobLevelId == null) throw new IllegalArgumentException("\"jobLevelId\" is required but got null");
            

        return new UpdateJobLevelRequestBuilder(orgId, jobLevelId);
    }
}
