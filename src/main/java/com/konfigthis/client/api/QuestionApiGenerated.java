/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateQuestion;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.Question;
import com.konfigthis.client.model.ResultsQuestion;
import com.konfigthis.client.model.UpdateQuestion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QuestionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuestionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QuestionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(String orgId, CreateQuestion createQuestion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createQuestion;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/question"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String orgId, CreateQuestion createQuestion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling create(Async)");
        }

        return createCall(orgId, createQuestion, _callback);

    }


    private ApiResponse<Question> createWithHttpInfo(String orgId, CreateQuestion createQuestion) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(orgId, createQuestion, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String orgId, CreateQuestion createQuestion, final ApiCallback<Question> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(orgId, createQuestion, _callback);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String question;
        private final String orgId;
        private String orgId;
        private String fieldId;
        private String type;
        private String plural;
        private List<EnumValue> values;
        private Object options;

        private CreateRequestBuilder(String question, String orgId) {
            this.question = question;
            this.orgId = orgId;
        }

        /**
         * Set orgId
         * @param orgId parent organization id (empty if global) (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set fieldId
         * @param fieldId if the question is linked to a field, the id of that field. Any question responses will be automatically saved to the field (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder fieldId(String fieldId) {
            this.fieldId = fieldId;
            return this;
        }
        
        /**
         * Set type
         * @param type datatype of the question (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set plural
         * @param plural plural type of the question datatype (either SINGLE, LIST, or SET) (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder plural(String plural) {
            this.plural = plural;
            return this;
        }
        
        /**
         * Set values
         * @param values possible values (enum type only) (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder values(List<EnumValue> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Set options
         * @param options validation options (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateQuestion createQuestion = buildBodyParams();
            return createCall(orgId, createQuestion, _callback);
        }

        private CreateQuestion buildBodyParams() {
            CreateQuestion createQuestion = new CreateQuestion();
            createQuestion.orgId(this.orgId);
            createQuestion.question(this.question);
            createQuestion.fieldId(this.fieldId);
            if (this.type != null)
            createQuestion.type(CreateQuestion.TypeEnum.fromValue(this.type));
            if (this.plural != null)
            createQuestion.plural(CreateQuestion.PluralEnum.fromValue(this.plural));
            createQuestion.values(this.values);
            createQuestion.options(this.options);
            return createQuestion;
        }

        /**
         * Execute create request
         * @return Question
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Question execute() throws ApiException {
            CreateQuestion createQuestion = buildBodyParams();
            ApiResponse<Question> localVarResp = createWithHttpInfo(orgId, createQuestion);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;Question&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Question> executeWithHttpInfo() throws ApiException {
            CreateQuestion createQuestion = buildBodyParams();
            return createWithHttpInfo(orgId, createQuestion);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Question> _callback) throws ApiException {
            CreateQuestion createQuestion = buildBodyParams();
            return createAsync(orgId, createQuestion, _callback);
        }
    }

    /**
     * Create a question
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateRequestBuilder create(String question, String orgId) throws IllegalArgumentException {
        if (question == null) throw new IllegalArgumentException("\"question\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateRequestBuilder(question, orgId);
    }
    private okhttp3.Call getAllInOrgCall(String orgId, String from, Integer limit, String ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/question"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInOrgValidateBeforeCall(String orgId, String from, Integer limit, String ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllInOrg(Async)");
        }

        return getAllInOrgCall(orgId, from, limit, ids, _callback);

    }


    private ApiResponse<ResultsQuestion> getAllInOrgWithHttpInfo(String orgId, String from, Integer limit, String ids) throws ApiException {
        okhttp3.Call localVarCall = getAllInOrgValidateBeforeCall(orgId, from, limit, ids, null);
        Type localVarReturnType = new TypeToken<ResultsQuestion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInOrgAsync(String orgId, String from, Integer limit, String ids, final ApiCallback<ResultsQuestion> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInOrgValidateBeforeCall(orgId, from, limit, ids, _callback);
        Type localVarReturnType = new TypeToken<ResultsQuestion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllInOrgRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;
        private String ids;

        private GetAllInOrgRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Question id to start paginating from (optional)
         * @return GetAllInOrgRequestBuilder
         */
        public GetAllInOrgRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllInOrgRequestBuilder
         */
        public GetAllInOrgRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Comma separated Question Ids to find (optional)
         * @return GetAllInOrgRequestBuilder
         */
        public GetAllInOrgRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Build call for getAllInOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInOrgCall(orgId, from, limit, ids, _callback);
        }


        /**
         * Execute getAllInOrg request
         * @return ResultsQuestion
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsQuestion execute() throws ApiException {
            ApiResponse<ResultsQuestion> localVarResp = getAllInOrgWithHttpInfo(orgId, from, limit, ids);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllInOrg request with HTTP info returned
         * @return ApiResponse&lt;ResultsQuestion&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsQuestion> executeWithHttpInfo() throws ApiException {
            return getAllInOrgWithHttpInfo(orgId, from, limit, ids);
        }

        /**
         * Execute getAllInOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsQuestion> _callback) throws ApiException {
            return getAllInOrgAsync(orgId, from, limit, ids, _callback);
        }
    }

    /**
     * Return all questions in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllInOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllInOrgRequestBuilder getAllInOrg(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllInOrgRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String questionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/question/{questionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "questionId" + "}", localVarApiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String questionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling getById(Async)");
        }

        return getByIdCall(orgId, questionId, _callback);

    }


    private ApiResponse<Question> getByIdWithHttpInfo(String orgId, String questionId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, questionId, null);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String questionId, final ApiCallback<Question> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, questionId, _callback);
        Type localVarReturnType = new TypeToken<Question>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String questionId;

        private GetByIdRequestBuilder(String orgId, String questionId) {
            this.orgId = orgId;
            this.questionId = questionId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, questionId, _callback);
        }


        /**
         * Execute getById request
         * @return Question
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Question execute() throws ApiException {
            ApiResponse<Question> localVarResp = getByIdWithHttpInfo(orgId, questionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Question&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Question> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, questionId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Question> _callback) throws ApiException {
            return getByIdAsync(orgId, questionId, _callback);
        }
    }

    /**
     * Return a particular question by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param questionId Question id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String questionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (questionId == null) throw new IllegalArgumentException("\"questionId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, questionId);
    }
    private okhttp3.Call removeCall(String orgId, String questionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/question/{questionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "questionId" + "}", localVarApiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String orgId, String questionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling remove(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling remove(Async)");
        }

        return removeCall(orgId, questionId, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(String orgId, String questionId) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(orgId, questionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(String orgId, String questionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(orgId, questionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String orgId;
        private final String questionId;

        private RemoveRequestBuilder(String orgId, String questionId) {
            this.orgId = orgId;
            this.questionId = questionId;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(orgId, questionId, _callback);
        }


        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWithHttpInfo(orgId, questionId);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(orgId, questionId);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAsync(orgId, questionId, _callback);
        }
    }

    /**
     * Delete a question
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param questionId Question id (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(String orgId, String questionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (questionId == null) throw new IllegalArgumentException("\"questionId\" is required but got null");
            

        return new RemoveRequestBuilder(orgId, questionId);
    }
    private okhttp3.Call updateByOrgAndIdCall(String orgId, String questionId, UpdateQuestion updateQuestion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateQuestion;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/question/{questionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "questionId" + "}", localVarApiClient.escapeString(questionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByOrgAndIdValidateBeforeCall(String orgId, String questionId, UpdateQuestion updateQuestion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateByOrgAndId(Async)");
        }

        // verify the required parameter 'questionId' is set
        if (questionId == null) {
            throw new ApiException("Missing the required parameter 'questionId' when calling updateByOrgAndId(Async)");
        }

        return updateByOrgAndIdCall(orgId, questionId, updateQuestion, _callback);

    }


    private ApiResponse<Void> updateByOrgAndIdWithHttpInfo(String orgId, String questionId, UpdateQuestion updateQuestion) throws ApiException {
        okhttp3.Call localVarCall = updateByOrgAndIdValidateBeforeCall(orgId, questionId, updateQuestion, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByOrgAndIdAsync(String orgId, String questionId, UpdateQuestion updateQuestion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByOrgAndIdValidateBeforeCall(orgId, questionId, updateQuestion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByOrgAndIdRequestBuilder {
        private final String orgId;
        private final String questionId;
        private String question;
        private String fieldId;
        private String type;
        private String plural;
        private List<EnumValue> values;
        private Object options;

        private UpdateByOrgAndIdRequestBuilder(String orgId, String questionId) {
            this.orgId = orgId;
            this.questionId = questionId;
        }

        /**
         * Set question
         * @param question text of the question (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder question(String question) {
            this.question = question;
            return this;
        }
        
        /**
         * Set fieldId
         * @param fieldId if the question is linked to a field, the id of that field. Any question responses will be automatically saved to the field (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder fieldId(String fieldId) {
            this.fieldId = fieldId;
            return this;
        }
        
        /**
         * Set type
         * @param type datatype of the question (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set plural
         * @param plural plural type of the question datatype (either SINGLE, LIST, or SET) (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder plural(String plural) {
            this.plural = plural;
            return this;
        }
        
        /**
         * Set values
         * @param values possible values (enum type only) (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder values(List<EnumValue> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Set options
         * @param options validation options (optional)
         * @return UpdateByOrgAndIdRequestBuilder
         */
        public UpdateByOrgAndIdRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateByOrgAndId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateQuestion updateQuestion = buildBodyParams();
            return updateByOrgAndIdCall(orgId, questionId, updateQuestion, _callback);
        }

        private UpdateQuestion buildBodyParams() {
            UpdateQuestion updateQuestion = new UpdateQuestion();
            updateQuestion.question(this.question);
            updateQuestion.fieldId(this.fieldId);
            if (this.type != null)
            updateQuestion.type(UpdateQuestion.TypeEnum.fromValue(this.type));
            if (this.plural != null)
            updateQuestion.plural(UpdateQuestion.PluralEnum.fromValue(this.plural));
            updateQuestion.values(this.values);
            updateQuestion.options(this.options);
            return updateQuestion;
        }

        /**
         * Execute updateByOrgAndId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateQuestion updateQuestion = buildBodyParams();
            updateByOrgAndIdWithHttpInfo(orgId, questionId, updateQuestion);
        }

        /**
         * Execute updateByOrgAndId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateQuestion updateQuestion = buildBodyParams();
            return updateByOrgAndIdWithHttpInfo(orgId, questionId, updateQuestion);
        }

        /**
         * Execute updateByOrgAndId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateQuestion updateQuestion = buildBodyParams();
            return updateByOrgAndIdAsync(orgId, questionId, updateQuestion, _callback);
        }
    }

    /**
     * Update an existing question
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param questionId Question id (required)
     * @return UpdateByOrgAndIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByOrgAndIdRequestBuilder updateByOrgAndId(String orgId, String questionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (questionId == null) throw new IllegalArgumentException("\"questionId\" is required but got null");
            

        return new UpdateByOrgAndIdRequestBuilder(orgId, questionId);
    }
}
