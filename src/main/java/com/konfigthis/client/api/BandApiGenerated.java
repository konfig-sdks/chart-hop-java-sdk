/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateCompBand;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.JobTierField;
import java.time.LocalDate;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.UpdateCompBand;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BandApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BandApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BandApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCompBandCall(String orgId, LocalDate date, CreateCompBand createCompBand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCompBand;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompBandValidateBeforeCall(String orgId, LocalDate date, CreateCompBand createCompBand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createCompBand(Async)");
        }

        return createCompBandCall(orgId, date, createCompBand, _callback);

    }


    private ApiResponse<Void> createCompBandWithHttpInfo(String orgId, LocalDate date, CreateCompBand createCompBand) throws ApiException {
        okhttp3.Call localVarCall = createCompBandValidateBeforeCall(orgId, date, createCompBand, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCompBandAsync(String orgId, LocalDate date, CreateCompBand createCompBand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompBandValidateBeforeCall(orgId, date, createCompBand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCompBandRequestBuilder {
        private final String label;
        private final String color;
        private final EnumValue baseInterval;
        private final String jobLevel;
        private final String orgId;
        private Money baseCompMax;
        private Money baseCompMid;
        private Money baseCompMin;
        private Double baseSpread;
        private Money baseTargetPay;
        private Double baseTargetPayPercentile;
        private Double equityTargetShares;
        private Double equityTargetPercentOfBase;
        private Double equityTargetValue;
        private Money variableValue;
        private Double variablePercentOfBase;
        private String jobTierOneField;
        private String jobTierTwoField;
        private String jobTierThreeField;
        private LocalDate date;

        private CreateCompBandRequestBuilder(String label, String color, EnumValue baseInterval, String jobLevel, String orgId) {
            this.label = label;
            this.color = color;
            this.baseInterval = baseInterval;
            this.jobLevel = jobLevel;
            this.orgId = orgId;
        }

        /**
         * Set baseCompMax
         * @param baseCompMax  (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseCompMax(Money baseCompMax) {
            this.baseCompMax = baseCompMax;
            return this;
        }
        
        /**
         * Set baseCompMid
         * @param baseCompMid  (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseCompMid(Money baseCompMid) {
            this.baseCompMid = baseCompMid;
            return this;
        }
        
        /**
         * Set baseCompMin
         * @param baseCompMin  (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseCompMin(Money baseCompMin) {
            this.baseCompMin = baseCompMin;
            return this;
        }
        
        /**
         * Set baseSpread
         * @param baseSpread spread percent used to calculate base comp from the midpoint (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseSpread(Double baseSpread) {
            this.baseSpread = baseSpread;
            return this;
        }
        
        /**
         * Set baseTargetPay
         * @param baseTargetPay  (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseTargetPay(Money baseTargetPay) {
            this.baseTargetPay = baseTargetPay;
            return this;
        }
        
        /**
         * Set baseTargetPayPercentile
         * @param baseTargetPayPercentile base target pay associated with open jobs at this band level, as a percentile (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder baseTargetPayPercentile(Double baseTargetPayPercentile) {
            this.baseTargetPayPercentile = baseTargetPayPercentile;
            return this;
        }
        
        /**
         * Set equityTargetShares
         * @param equityTargetShares target equity for the band, in shares (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder equityTargetShares(Double equityTargetShares) {
            this.equityTargetShares = equityTargetShares;
            return this;
        }
        
        /**
         * Set equityTargetPercentOfBase
         * @param equityTargetPercentOfBase target equity for the band, as a percentage of base (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder equityTargetPercentOfBase(Double equityTargetPercentOfBase) {
            this.equityTargetPercentOfBase = equityTargetPercentOfBase;
            return this;
        }
        
        /**
         * Set equityTargetValue
         * @param equityTargetValue target equity for the band, as a monetary value, in the same currency as the base (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder equityTargetValue(Double equityTargetValue) {
            this.equityTargetValue = equityTargetValue;
            return this;
        }
        
        /**
         * Set variableValue
         * @param variableValue  (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder variableValue(Money variableValue) {
            this.variableValue = variableValue;
            return this;
        }
        
        /**
         * Set variablePercentOfBase
         * @param variablePercentOfBase variable compensation for the band, specified as a percentage of base (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder variablePercentOfBase(Double variablePercentOfBase) {
            this.variablePercentOfBase = variablePercentOfBase;
            return this;
        }
        
        /**
         * Set jobTierOneField
         * @param jobTierOneField first job tier associated with the comp band (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder jobTierOneField(String jobTierOneField) {
            this.jobTierOneField = jobTierOneField;
            return this;
        }
        
        /**
         * Set jobTierTwoField
         * @param jobTierTwoField second job tier associated with the comp band (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder jobTierTwoField(String jobTierTwoField) {
            this.jobTierTwoField = jobTierTwoField;
            return this;
        }
        
        /**
         * Set jobTierThreeField
         * @param jobTierThreeField third job tier associated with the comp band (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder jobTierThreeField(String jobTierThreeField) {
            this.jobTierThreeField = jobTierThreeField;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of band creation (optional)
         * @return CreateCompBandRequestBuilder
         */
        public CreateCompBandRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createCompBand
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCompBand createCompBand = buildBodyParams();
            return createCompBandCall(orgId, date, createCompBand, _callback);
        }

        private CreateCompBand buildBodyParams() {
            CreateCompBand createCompBand = new CreateCompBand();
            createCompBand.label(this.label);
            createCompBand.color(this.color);
            createCompBand.baseCompMax(this.baseCompMax);
            createCompBand.baseCompMid(this.baseCompMid);
            createCompBand.baseCompMin(this.baseCompMin);
            createCompBand.baseSpread(this.baseSpread);
            createCompBand.baseInterval(this.baseInterval);
            createCompBand.baseTargetPay(this.baseTargetPay);
            createCompBand.baseTargetPayPercentile(this.baseTargetPayPercentile);
            createCompBand.equityTargetShares(this.equityTargetShares);
            createCompBand.equityTargetPercentOfBase(this.equityTargetPercentOfBase);
            createCompBand.equityTargetValue(this.equityTargetValue);
            createCompBand.variableValue(this.variableValue);
            createCompBand.variablePercentOfBase(this.variablePercentOfBase);
            createCompBand.jobTierOneField(this.jobTierOneField);
            createCompBand.jobTierTwoField(this.jobTierTwoField);
            createCompBand.jobTierThreeField(this.jobTierThreeField);
            createCompBand.jobLevel(this.jobLevel);
            return createCompBand;
        }

        /**
         * Execute createCompBand request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateCompBand createCompBand = buildBodyParams();
            createCompBandWithHttpInfo(orgId, date, createCompBand);
        }

        /**
         * Execute createCompBand request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateCompBand createCompBand = buildBodyParams();
            return createCompBandWithHttpInfo(orgId, date, createCompBand);
        }

        /**
         * Execute createCompBand request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateCompBand createCompBand = buildBodyParams();
            return createCompBandAsync(orgId, date, createCompBand, _callback);
        }
    }

    /**
     * Create a comp band
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateCompBandRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompBandRequestBuilder createCompBand(String label, String color, EnumValue baseInterval, String jobLevel, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (baseInterval == null) throw new IllegalArgumentException("\"baseInterval\" is required but got null");
        if (jobLevel == null) throw new IllegalArgumentException("\"jobLevel\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateCompBandRequestBuilder(label, color, baseInterval, jobLevel, orgId);
    }
    private okhttp3.Call deleteCompBandsOnDateCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompBandsOnDateValidateBeforeCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteCompBandsOnDate(Async)");
        }

        return deleteCompBandsOnDateCall(orgId, date, _callback);

    }


    private ApiResponse<Process> deleteCompBandsOnDateWithHttpInfo(String orgId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = deleteCompBandsOnDateValidateBeforeCall(orgId, date, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCompBandsOnDateAsync(String orgId, LocalDate date, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompBandsOnDateValidateBeforeCall(orgId, date, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCompBandsOnDateRequestBuilder {
        private final String orgId;
        private LocalDate date;

        private DeleteCompBandsOnDateRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return DeleteCompBandsOnDateRequestBuilder
         */
        public DeleteCompBandsOnDateRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for deleteCompBandsOnDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCompBandsOnDateCall(orgId, date, _callback);
        }


        /**
         * Execute deleteCompBandsOnDate request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = deleteCompBandsOnDateWithHttpInfo(orgId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCompBandsOnDate request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return deleteCompBandsOnDateWithHttpInfo(orgId, date);
        }

        /**
         * Execute deleteCompBandsOnDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return deleteCompBandsOnDateAsync(orgId, date, _callback);
        }
    }

    /**
     * Delete all comp bands on a date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteCompBandsOnDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCompBandsOnDateRequestBuilder deleteCompBandsOnDate(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteCompBandsOnDateRequestBuilder(orgId);
    }
    private okhttp3.Call deleteCompBandsOnDate_0Call(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band/reset"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompBandsOnDate_0ValidateBeforeCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteCompBandsOnDate_0(Async)");
        }

        return deleteCompBandsOnDate_0Call(orgId, date, _callback);

    }


    private ApiResponse<Process> deleteCompBandsOnDate_0WithHttpInfo(String orgId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = deleteCompBandsOnDate_0ValidateBeforeCall(orgId, date, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCompBandsOnDate_0Async(String orgId, LocalDate date, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompBandsOnDate_0ValidateBeforeCall(orgId, date, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCompBandsOnDate0RequestBuilder {
        private final String orgId;
        private LocalDate date;

        private DeleteCompBandsOnDate0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return DeleteCompBandsOnDate0RequestBuilder
         */
        public DeleteCompBandsOnDate0RequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for deleteCompBandsOnDate_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCompBandsOnDate_0Call(orgId, date, _callback);
        }


        /**
         * Execute deleteCompBandsOnDate_0 request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = deleteCompBandsOnDate_0WithHttpInfo(orgId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCompBandsOnDate_0 request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return deleteCompBandsOnDate_0WithHttpInfo(orgId, date);
        }

        /**
         * Execute deleteCompBandsOnDate_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return deleteCompBandsOnDate_0Async(orgId, date, _callback);
        }
    }

    /**
     * Delete all comp band data on a date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteCompBandsOnDate0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCompBandsOnDate0RequestBuilder deleteCompBandsOnDate_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteCompBandsOnDate0RequestBuilder(orgId);
    }
    private okhttp3.Call findCompBandsInOrgCall(String orgId, String bandId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band/{bandId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bandId" + "}", localVarApiClient.escapeString(bandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompBandsInOrgValidateBeforeCall(String orgId, String bandId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompBandsInOrg(Async)");
        }

        // verify the required parameter 'bandId' is set
        if (bandId == null) {
            throw new ApiException("Missing the required parameter 'bandId' when calling findCompBandsInOrg(Async)");
        }

        return findCompBandsInOrgCall(orgId, bandId, date, _callback);

    }


    private ApiResponse<ResultsData> findCompBandsInOrgWithHttpInfo(String orgId, String bandId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = findCompBandsInOrgValidateBeforeCall(orgId, bandId, date, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompBandsInOrgAsync(String orgId, String bandId, LocalDate date, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompBandsInOrgValidateBeforeCall(orgId, bandId, date, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompBandsInOrgRequestBuilder {
        private final String orgId;
        private final String bandId;
        private LocalDate date;

        private FindCompBandsInOrgRequestBuilder(String orgId, String bandId) {
            this.orgId = orgId;
            this.bandId = bandId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindCompBandsInOrgRequestBuilder
         */
        public FindCompBandsInOrgRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for findCompBandsInOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompBandsInOrgCall(orgId, bandId, date, _callback);
        }


        /**
         * Execute findCompBandsInOrg request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findCompBandsInOrgWithHttpInfo(orgId, bandId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompBandsInOrg request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findCompBandsInOrgWithHttpInfo(orgId, bandId, date);
        }

        /**
         * Execute findCompBandsInOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findCompBandsInOrgAsync(orgId, bandId, date, _callback);
        }
    }

    /**
     * Return a particular comp band by id on an effective date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param bandId Comp band id (required)
     * @return FindCompBandsInOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompBandsInOrgRequestBuilder findCompBandsInOrg(String orgId, String bandId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (bandId == null) throw new IllegalArgumentException("\"bandId\" is required but got null");
            

        return new FindCompBandsInOrgRequestBuilder(orgId, bandId);
    }
    private okhttp3.Call findCompBandsInOrg_0Call(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompBandsInOrg_0ValidateBeforeCall(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompBandsInOrg_0(Async)");
        }

        return findCompBandsInOrg_0Call(orgId, date, from, limit, includeDeleted, returnAccess, _callback);

    }


    private ApiResponse<ResultsData> findCompBandsInOrg_0WithHttpInfo(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = findCompBandsInOrg_0ValidateBeforeCall(orgId, date, from, limit, includeDeleted, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompBandsInOrg_0Async(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, String returnAccess, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompBandsInOrg_0ValidateBeforeCall(orgId, date, from, limit, includeDeleted, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompBandsInOrg0RequestBuilder {
        private final String orgId;
        private LocalDate date;
        private String from;
        private Integer limit;
        private Boolean includeDeleted;
        private String returnAccess;

        private FindCompBandsInOrg0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindCompBandsInOrg0RequestBuilder
         */
        public FindCompBandsInOrg0RequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set from
         * @param from Table id to start paginating from (optional)
         * @return FindCompBandsInOrg0RequestBuilder
         */
        public FindCompBandsInOrg0RequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindCompBandsInOrg0RequestBuilder
         */
        public FindCompBandsInOrg0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted Include deleted bands (optional)
         * @return FindCompBandsInOrg0RequestBuilder
         */
        public FindCompBandsInOrg0RequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return FindCompBandsInOrg0RequestBuilder
         */
        public FindCompBandsInOrg0RequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for findCompBandsInOrg_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompBandsInOrg_0Call(orgId, date, from, limit, includeDeleted, returnAccess, _callback);
        }


        /**
         * Execute findCompBandsInOrg_0 request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findCompBandsInOrg_0WithHttpInfo(orgId, date, from, limit, includeDeleted, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompBandsInOrg_0 request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findCompBandsInOrg_0WithHttpInfo(orgId, date, from, limit, includeDeleted, returnAccess);
        }

        /**
         * Execute findCompBandsInOrg_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findCompBandsInOrg_0Async(orgId, date, from, limit, includeDeleted, returnAccess, _callback);
        }
    }

    /**
     * Find comp bands in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindCompBandsInOrg0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompBandsInOrg0RequestBuilder findCompBandsInOrg_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindCompBandsInOrg0RequestBuilder(orgId);
    }
    private okhttp3.Call removeCompBandCall(String orgId, String bandId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band/{bandId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bandId" + "}", localVarApiClient.escapeString(bandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCompBandValidateBeforeCall(String orgId, String bandId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeCompBand(Async)");
        }

        // verify the required parameter 'bandId' is set
        if (bandId == null) {
            throw new ApiException("Missing the required parameter 'bandId' when calling removeCompBand(Async)");
        }

        return removeCompBandCall(orgId, bandId, date, _callback);

    }


    private ApiResponse<Void> removeCompBandWithHttpInfo(String orgId, String bandId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = removeCompBandValidateBeforeCall(orgId, bandId, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeCompBandAsync(String orgId, String bandId, LocalDate date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCompBandValidateBeforeCall(orgId, bandId, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveCompBandRequestBuilder {
        private final String orgId;
        private final String bandId;
        private LocalDate date;

        private RemoveCompBandRequestBuilder(String orgId, String bandId) {
            this.orgId = orgId;
            this.bandId = bandId;
        }

        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return RemoveCompBandRequestBuilder
         */
        public RemoveCompBandRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for removeCompBand
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCompBandCall(orgId, bandId, date, _callback);
        }


        /**
         * Execute removeCompBand request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeCompBandWithHttpInfo(orgId, bandId, date);
        }

        /**
         * Execute removeCompBand request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeCompBandWithHttpInfo(orgId, bandId, date);
        }

        /**
         * Execute removeCompBand request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeCompBandAsync(orgId, bandId, date, _callback);
        }
    }

    /**
     * Delete a comp band
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param bandId Comp band id (required)
     * @return RemoveCompBandRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCompBandRequestBuilder removeCompBand(String orgId, String bandId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (bandId == null) throw new IllegalArgumentException("\"bandId\" is required but got null");
            

        return new RemoveCompBandRequestBuilder(orgId, bandId);
    }
    private okhttp3.Call updateCompBandByIdCall(String orgId, String bandId, LocalDate date, UpdateCompBand updateCompBand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompBand;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/band/{bandId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "bandId" + "}", localVarApiClient.escapeString(bandId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompBandByIdValidateBeforeCall(String orgId, String bandId, LocalDate date, UpdateCompBand updateCompBand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateCompBandById(Async)");
        }

        // verify the required parameter 'bandId' is set
        if (bandId == null) {
            throw new ApiException("Missing the required parameter 'bandId' when calling updateCompBandById(Async)");
        }

        return updateCompBandByIdCall(orgId, bandId, date, updateCompBand, _callback);

    }


    private ApiResponse<Void> updateCompBandByIdWithHttpInfo(String orgId, String bandId, LocalDate date, UpdateCompBand updateCompBand) throws ApiException {
        okhttp3.Call localVarCall = updateCompBandByIdValidateBeforeCall(orgId, bandId, date, updateCompBand, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateCompBandByIdAsync(String orgId, String bandId, LocalDate date, UpdateCompBand updateCompBand, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompBandByIdValidateBeforeCall(orgId, bandId, date, updateCompBand, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateCompBandByIdRequestBuilder {
        private final String orgId;
        private final String bandId;
        private String label;
        private String color;
        private Money baseCompMax;
        private Money baseCompMid;
        private Money baseCompMin;
        private Double baseSpread;
        private EnumValue baseInterval;
        private Money baseTargetPay;
        private Double baseTargetPayPercentile;
        private Double equityTargetShares;
        private Double equityTargetPercentOfBase;
        private Double equityTargetValue;
        private Money variableValue;
        private Double variablePercentOfBase;
        private JobTierField jobTierOneField;
        private JobTierField jobTierTwoField;
        private JobTierField jobTierThreeField;
        private String jobLevel;
        private LocalDate date;

        private UpdateCompBandByIdRequestBuilder(String orgId, String bandId) {
            this.orgId = orgId;
            this.bandId = bandId;
        }

        /**
         * Set label
         * @param label human-readable name of content (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set color
         * @param color hex color associated with the band level (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set baseCompMax
         * @param baseCompMax  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseCompMax(Money baseCompMax) {
            this.baseCompMax = baseCompMax;
            return this;
        }
        
        /**
         * Set baseCompMid
         * @param baseCompMid  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseCompMid(Money baseCompMid) {
            this.baseCompMid = baseCompMid;
            return this;
        }
        
        /**
         * Set baseCompMin
         * @param baseCompMin  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseCompMin(Money baseCompMin) {
            this.baseCompMin = baseCompMin;
            return this;
        }
        
        /**
         * Set baseSpread
         * @param baseSpread spread percent used to calculate base comp from the midpoint (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseSpread(Double baseSpread) {
            this.baseSpread = baseSpread;
            return this;
        }
        
        /**
         * Set baseInterval
         * @param baseInterval  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseInterval(EnumValue baseInterval) {
            this.baseInterval = baseInterval;
            return this;
        }
        
        /**
         * Set baseTargetPay
         * @param baseTargetPay  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseTargetPay(Money baseTargetPay) {
            this.baseTargetPay = baseTargetPay;
            return this;
        }
        
        /**
         * Set baseTargetPayPercentile
         * @param baseTargetPayPercentile base target pay associated with open jobs at this band level, as a percentile (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder baseTargetPayPercentile(Double baseTargetPayPercentile) {
            this.baseTargetPayPercentile = baseTargetPayPercentile;
            return this;
        }
        
        /**
         * Set equityTargetShares
         * @param equityTargetShares target equity for the band, in shares (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder equityTargetShares(Double equityTargetShares) {
            this.equityTargetShares = equityTargetShares;
            return this;
        }
        
        /**
         * Set equityTargetPercentOfBase
         * @param equityTargetPercentOfBase target equity for the band, as a percentage of base (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder equityTargetPercentOfBase(Double equityTargetPercentOfBase) {
            this.equityTargetPercentOfBase = equityTargetPercentOfBase;
            return this;
        }
        
        /**
         * Set equityTargetValue
         * @param equityTargetValue target equity for the band, as a monetary value, in the same currency as the base (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder equityTargetValue(Double equityTargetValue) {
            this.equityTargetValue = equityTargetValue;
            return this;
        }
        
        /**
         * Set variableValue
         * @param variableValue  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder variableValue(Money variableValue) {
            this.variableValue = variableValue;
            return this;
        }
        
        /**
         * Set variablePercentOfBase
         * @param variablePercentOfBase variable compensation for the band, specified as a percentage of base (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder variablePercentOfBase(Double variablePercentOfBase) {
            this.variablePercentOfBase = variablePercentOfBase;
            return this;
        }
        
        /**
         * Set jobTierOneField
         * @param jobTierOneField  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder jobTierOneField(JobTierField jobTierOneField) {
            this.jobTierOneField = jobTierOneField;
            return this;
        }
        
        /**
         * Set jobTierTwoField
         * @param jobTierTwoField  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder jobTierTwoField(JobTierField jobTierTwoField) {
            this.jobTierTwoField = jobTierTwoField;
            return this;
        }
        
        /**
         * Set jobTierThreeField
         * @param jobTierThreeField  (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder jobTierThreeField(JobTierField jobTierThreeField) {
            this.jobTierThreeField = jobTierThreeField;
            return this;
        }
        
        /**
         * Set jobLevel
         * @param jobLevel job level associated with the comp band (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder jobLevel(String jobLevel) {
            this.jobLevel = jobLevel;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of band update (optional)
         * @return UpdateCompBandByIdRequestBuilder
         */
        public UpdateCompBandByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateCompBandById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCompBand updateCompBand = buildBodyParams();
            return updateCompBandByIdCall(orgId, bandId, date, updateCompBand, _callback);
        }

        private UpdateCompBand buildBodyParams() {
            UpdateCompBand updateCompBand = new UpdateCompBand();
            updateCompBand.label(this.label);
            updateCompBand.color(this.color);
            updateCompBand.baseCompMax(this.baseCompMax);
            updateCompBand.baseCompMid(this.baseCompMid);
            updateCompBand.baseCompMin(this.baseCompMin);
            updateCompBand.baseSpread(this.baseSpread);
            updateCompBand.baseInterval(this.baseInterval);
            updateCompBand.baseTargetPay(this.baseTargetPay);
            updateCompBand.baseTargetPayPercentile(this.baseTargetPayPercentile);
            updateCompBand.equityTargetShares(this.equityTargetShares);
            updateCompBand.equityTargetPercentOfBase(this.equityTargetPercentOfBase);
            updateCompBand.equityTargetValue(this.equityTargetValue);
            updateCompBand.variableValue(this.variableValue);
            updateCompBand.variablePercentOfBase(this.variablePercentOfBase);
            updateCompBand.jobTierOneField(this.jobTierOneField);
            updateCompBand.jobTierTwoField(this.jobTierTwoField);
            updateCompBand.jobTierThreeField(this.jobTierThreeField);
            updateCompBand.jobLevel(this.jobLevel);
            return updateCompBand;
        }

        /**
         * Execute updateCompBandById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateCompBand updateCompBand = buildBodyParams();
            updateCompBandByIdWithHttpInfo(orgId, bandId, date, updateCompBand);
        }

        /**
         * Execute updateCompBandById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateCompBand updateCompBand = buildBodyParams();
            return updateCompBandByIdWithHttpInfo(orgId, bandId, date, updateCompBand);
        }

        /**
         * Execute updateCompBandById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateCompBand updateCompBand = buildBodyParams();
            return updateCompBandByIdAsync(orgId, bandId, date, updateCompBand, _callback);
        }
    }

    /**
     * Update a comp band
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param bandId Band id (required)
     * @return UpdateCompBandByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompBandByIdRequestBuilder updateCompBandById(String orgId, String bandId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (bandId == null) throw new IllegalArgumentException("\"bandId\" is required but got null");
            

        return new UpdateCompBandByIdRequestBuilder(orgId, bandId);
    }
}
