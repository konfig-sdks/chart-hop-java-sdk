/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Assessment;
import com.konfigthis.client.model.BulkChangeAssessmentTypesBody;
import com.konfigthis.client.model.CreateAssessment;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsAssessment;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateAssessment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AssessmentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssessmentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AssessmentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkDeleteCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/bulk/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkDelete(Async)");
        }

        return bulkDeleteCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> bulkDeleteWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkDeleteAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkDeleteRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private BulkDeleteRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of assessment ids to delete (optional)
         * @return BulkDeleteRequestBuilder
         */
        public BulkDeleteRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for bulkDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute bulkDelete request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkDeleteWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkDelete request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute bulkDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete a set of assessments
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkDeleteRequestBuilder bulkDelete(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkDeleteRequestBuilder(orgId);
    }
    private okhttp3.Call bulkDuplicateAssessmentsCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/bulk/duplicate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDuplicateAssessmentsValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkDuplicateAssessments(Async)");
        }

        return bulkDuplicateAssessmentsCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> bulkDuplicateAssessmentsWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkDuplicateAssessmentsValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkDuplicateAssessmentsAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDuplicateAssessmentsValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkDuplicateAssessmentsRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private BulkDuplicateAssessmentsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of assessment ids to duplicate (optional)
         * @return BulkDuplicateAssessmentsRequestBuilder
         */
        public BulkDuplicateAssessmentsRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for bulkDuplicateAssessments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDuplicateAssessmentsCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute bulkDuplicateAssessments request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkDuplicateAssessmentsWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkDuplicateAssessments request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDuplicateAssessmentsWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute bulkDuplicateAssessments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDuplicateAssessmentsAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Duplicate a set of assessments
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkDuplicateAssessmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkDuplicateAssessmentsRequestBuilder bulkDuplicateAssessments(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkDuplicateAssessmentsRequestBuilder(orgId);
    }
    private okhttp3.Call completeAssessmentCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}/complete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeAssessmentValidateBeforeCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling completeAssessment(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling completeAssessment(Async)");
        }

        return completeAssessmentCall(orgId, assessmentId, _callback);

    }


    private ApiResponse<Assessment> completeAssessmentWithHttpInfo(String orgId, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = completeAssessmentValidateBeforeCall(orgId, assessmentId, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeAssessmentAsync(String orgId, String assessmentId, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeAssessmentValidateBeforeCall(orgId, assessmentId, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteAssessmentRequestBuilder {
        private final String orgId;
        private final String assessmentId;

        private CompleteAssessmentRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Build call for completeAssessment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return completeAssessmentCall(orgId, assessmentId, _callback);
        }


        /**
         * Execute completeAssessment request
         * @return Assessment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Assessment execute() throws ApiException {
            ApiResponse<Assessment> localVarResp = completeAssessmentWithHttpInfo(orgId, assessmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeAssessment request with HTTP info returned
         * @return ApiResponse&lt;Assessment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Assessment> executeWithHttpInfo() throws ApiException {
            return completeAssessmentWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute completeAssessment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Assessment> _callback) throws ApiException {
            return completeAssessmentAsync(orgId, assessmentId, _callback);
        }
    }

    /**
     * Complete a assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return CompleteAssessmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CompleteAssessmentRequestBuilder completeAssessment(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new CompleteAssessmentRequestBuilder(orgId, assessmentId);
    }
    private okhttp3.Call createNewAssessmentCall(String orgId, CreateAssessment createAssessment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssessment;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAssessmentValidateBeforeCall(String orgId, CreateAssessment createAssessment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewAssessment(Async)");
        }

        return createNewAssessmentCall(orgId, createAssessment, _callback);

    }


    private ApiResponse<Assessment> createNewAssessmentWithHttpInfo(String orgId, CreateAssessment createAssessment) throws ApiException {
        okhttp3.Call localVarCall = createNewAssessmentValidateBeforeCall(orgId, createAssessment, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAssessmentAsync(String orgId, CreateAssessment createAssessment, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAssessmentValidateBeforeCall(orgId, createAssessment, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAssessmentRequestBuilder {
        private final String label;
        private final String type;
        private final String orgId;
        private String slug;
        private Object fields;
        private List<ShareAccess> shareAccess;
        private String sensitive;
        private String color;
        private LocalDate startDate;
        private LocalDate endDate;
        private String status;
        private String doneAt;
        private Integer taskCount;
        private Integer taskDoneCount;
        private Integer peopleIncludedCount;
        private String query;

        private CreateNewAssessmentRequestBuilder(String label, String type, String orgId) {
            this.label = label;
            this.type = type;
            this.orgId = orgId;
        }

        /**
         * Set slug
         * @param slug unique slug of assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set fields
         * @param fields assessment fields (description) (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder fields(Object fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who have been granted access to this assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive view sensitivity of this assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set color
         * @param color color of assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date this assessment begins. In the context of REVIEW goals, the date the review cycle begins. (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date this assessment ends, or is completed. In the context of REVIEW assessment, the date the review cycle ends. (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set status
         * @param status status of this assessment - DRAFT, ACTIVE, DONE (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set doneAt
         * @param doneAt timestamp when the status of this assessment was set to done (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder doneAt(String doneAt) {
            this.doneAt = doneAt;
            return this;
        }
        
        /**
         * Set taskCount
         * @param taskCount number of tasks associated with this assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder taskCount(Integer taskCount) {
            this.taskCount = taskCount;
            return this;
        }
        
        /**
         * Set taskDoneCount
         * @param taskDoneCount number of tasks associated with this assessment that are done (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder taskDoneCount(Integer taskDoneCount) {
            this.taskDoneCount = taskDoneCount;
            return this;
        }
        
        /**
         * Set peopleIncludedCount
         * @param peopleIncludedCount number of people included in this assessment (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder peopleIncludedCount(Integer peopleIncludedCount) {
            this.peopleIncludedCount = peopleIncludedCount;
            return this;
        }
        
        /**
         * Set query
         * @param query Query for which people/jobs can be included in the review. (optional)
         * @return CreateNewAssessmentRequestBuilder
         */
        public CreateNewAssessmentRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Build call for createNewAssessment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateAssessment createAssessment = buildBodyParams();
            return createNewAssessmentCall(orgId, createAssessment, _callback);
        }

        private CreateAssessment buildBodyParams() {
            CreateAssessment createAssessment = new CreateAssessment();
            createAssessment.label(this.label);
            createAssessment.slug(this.slug);
            if (this.type != null)
            createAssessment.type(CreateAssessment.TypeEnum.fromValue(this.type));
            createAssessment.fields(this.fields);
            createAssessment.shareAccess(this.shareAccess);
            if (this.sensitive != null)
            createAssessment.sensitive(CreateAssessment.SensitiveEnum.fromValue(this.sensitive));
            createAssessment.color(this.color);
            createAssessment.startDate(this.startDate);
            createAssessment.endDate(this.endDate);
            if (this.status != null)
            createAssessment.status(CreateAssessment.StatusEnum.fromValue(this.status));
            createAssessment.doneAt(this.doneAt);
            createAssessment.taskCount(this.taskCount);
            createAssessment.taskDoneCount(this.taskDoneCount);
            createAssessment.peopleIncludedCount(this.peopleIncludedCount);
            createAssessment.query(this.query);
            return createAssessment;
        }

        /**
         * Execute createNewAssessment request
         * @return Assessment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Assessment execute() throws ApiException {
            CreateAssessment createAssessment = buildBodyParams();
            ApiResponse<Assessment> localVarResp = createNewAssessmentWithHttpInfo(orgId, createAssessment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAssessment request with HTTP info returned
         * @return ApiResponse&lt;Assessment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Assessment> executeWithHttpInfo() throws ApiException {
            CreateAssessment createAssessment = buildBodyParams();
            return createNewAssessmentWithHttpInfo(orgId, createAssessment);
        }

        /**
         * Execute createNewAssessment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Assessment> _callback) throws ApiException {
            CreateAssessment createAssessment = buildBodyParams();
            return createNewAssessmentAsync(orgId, createAssessment, _callback);
        }
    }

    /**
     * Create a assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewAssessmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAssessmentRequestBuilder createNewAssessment(String label, String type, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewAssessmentRequestBuilder(label, type, orgId);
    }
    private okhttp3.Call expireFormTasksCall(String orgId, String assessmentId, String formId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}/form/{formId}/expire"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expireFormTasksValidateBeforeCall(String orgId, String assessmentId, String formId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling expireFormTasks(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling expireFormTasks(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling expireFormTasks(Async)");
        }

        return expireFormTasksCall(orgId, assessmentId, formId, _callback);

    }


    private ApiResponse<Process> expireFormTasksWithHttpInfo(String orgId, String assessmentId, String formId) throws ApiException {
        okhttp3.Call localVarCall = expireFormTasksValidateBeforeCall(orgId, assessmentId, formId, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call expireFormTasksAsync(String orgId, String assessmentId, String formId, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = expireFormTasksValidateBeforeCall(orgId, assessmentId, formId, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExpireFormTasksRequestBuilder {
        private final String orgId;
        private final String assessmentId;
        private final String formId;

        private ExpireFormTasksRequestBuilder(String orgId, String assessmentId, String formId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
            this.formId = formId;
        }

        /**
         * Build call for expireFormTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return expireFormTasksCall(orgId, assessmentId, formId, _callback);
        }


        /**
         * Execute expireFormTasks request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = expireFormTasksWithHttpInfo(orgId, assessmentId, formId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute expireFormTasks request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return expireFormTasksWithHttpInfo(orgId, assessmentId, formId);
        }

        /**
         * Execute expireFormTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return expireFormTasksAsync(orgId, assessmentId, formId, _callback);
        }
    }

    /**
     * Expire all pending tasks for a form of an assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @param formId Form id (required)
     * @return ExpireFormTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public ExpireFormTasksRequestBuilder expireFormTasks(String orgId, String assessmentId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new ExpireFormTasksRequestBuilder(orgId, assessmentId, formId);
    }
    private okhttp3.Call getAllPaginatedCall(String orgId, String type, String from, Integer limit, String ids, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaginatedValidateBeforeCall(String orgId, String type, String from, Integer limit, String ids, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPaginated(Async)");
        }

        return getAllPaginatedCall(orgId, type, from, limit, ids, returnAccess, _callback);

    }


    private ApiResponse<ResultsAssessment> getAllPaginatedWithHttpInfo(String orgId, String type, String from, Integer limit, String ids, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, type, from, limit, ids, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsAssessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaginatedAsync(String orgId, String type, String from, Integer limit, String ids, String returnAccess, final ApiCallback<ResultsAssessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, type, from, limit, ids, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsAssessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaginatedRequestBuilder {
        private final String orgId;
        private String type;
        private String from;
        private Integer limit;
        private String ids;
        private String returnAccess;

        private GetAllPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type Type of assessment to filter by (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set from
         * @param from Assessment id to start paginating from (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set ids
         * @param ids List of ids to filter by (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getAllPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaginatedCall(orgId, type, from, limit, ids, returnAccess, _callback);
        }


        /**
         * Execute getAllPaginated request
         * @return ResultsAssessment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsAssessment execute() throws ApiException {
            ApiResponse<ResultsAssessment> localVarResp = getAllPaginatedWithHttpInfo(orgId, type, from, limit, ids, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsAssessment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsAssessment> executeWithHttpInfo() throws ApiException {
            return getAllPaginatedWithHttpInfo(orgId, type, from, limit, ids, returnAccess);
        }

        /**
         * Execute getAllPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsAssessment> _callback) throws ApiException {
            return getAllPaginatedAsync(orgId, type, from, limit, ids, returnAccess, _callback);
        }
    }

    /**
     * Return all assessments in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaginatedRequestBuilder getAllPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling getById(Async)");
        }

        return getByIdCall(orgId, assessmentId, _callback);

    }


    private ApiResponse<Assessment> getByIdWithHttpInfo(String orgId, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, assessmentId, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String assessmentId, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, assessmentId, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String assessmentId;

        private GetByIdRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, assessmentId, _callback);
        }


        /**
         * Execute getById request
         * @return Assessment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Assessment execute() throws ApiException {
            ApiResponse<Assessment> localVarResp = getByIdWithHttpInfo(orgId, assessmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Assessment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Assessment> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Assessment> _callback) throws ApiException {
            return getByIdAsync(orgId, assessmentId, _callback);
        }
    }

    /**
     * Return a particular assessment by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, assessmentId);
    }
    private okhttp3.Call reactivateAssessmentCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}/reactivate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reactivateAssessmentValidateBeforeCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling reactivateAssessment(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling reactivateAssessment(Async)");
        }

        return reactivateAssessmentCall(orgId, assessmentId, _callback);

    }


    private ApiResponse<Assessment> reactivateAssessmentWithHttpInfo(String orgId, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = reactivateAssessmentValidateBeforeCall(orgId, assessmentId, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call reactivateAssessmentAsync(String orgId, String assessmentId, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = reactivateAssessmentValidateBeforeCall(orgId, assessmentId, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReactivateAssessmentRequestBuilder {
        private final String orgId;
        private final String assessmentId;

        private ReactivateAssessmentRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Build call for reactivateAssessment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return reactivateAssessmentCall(orgId, assessmentId, _callback);
        }


        /**
         * Execute reactivateAssessment request
         * @return Assessment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Assessment execute() throws ApiException {
            ApiResponse<Assessment> localVarResp = reactivateAssessmentWithHttpInfo(orgId, assessmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute reactivateAssessment request with HTTP info returned
         * @return ApiResponse&lt;Assessment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Assessment> executeWithHttpInfo() throws ApiException {
            return reactivateAssessmentWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute reactivateAssessment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Assessment> _callback) throws ApiException {
            return reactivateAssessmentAsync(orgId, assessmentId, _callback);
        }
    }

    /**
     * Reactivate a assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return ReactivateAssessmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public ReactivateAssessmentRequestBuilder reactivateAssessment(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new ReactivateAssessmentRequestBuilder(orgId, assessmentId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, assessmentId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, assessmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String assessmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, assessmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String assessmentId;

        private RemoveByIdRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, assessmentId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, assessmentId, _callback);
        }
    }

    /**
     * Delete a assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, assessmentId);
    }
    private okhttp3.Call updateAssessmentTypesCall(String orgId, BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkChangeAssessmentTypesBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/bulk/move"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssessmentTypesValidateBeforeCall(String orgId, BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateAssessmentTypes(Async)");
        }

        return updateAssessmentTypesCall(orgId, bulkChangeAssessmentTypesBody, _callback);

    }


    private ApiResponse<Process> updateAssessmentTypesWithHttpInfo(String orgId, BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody) throws ApiException {
        okhttp3.Call localVarCall = updateAssessmentTypesValidateBeforeCall(orgId, bulkChangeAssessmentTypesBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAssessmentTypesAsync(String orgId, BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssessmentTypesValidateBeforeCall(orgId, bulkChangeAssessmentTypesBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAssessmentTypesRequestBuilder {
        private final List<String> ids;
        private final String type;
        private final String orgId;

        private UpdateAssessmentTypesRequestBuilder(List<String> ids, String type, String orgId) {
            this.ids = ids;
            this.type = type;
            this.orgId = orgId;
        }

        /**
         * Build call for updateAssessmentTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody = buildBodyParams();
            return updateAssessmentTypesCall(orgId, bulkChangeAssessmentTypesBody, _callback);
        }

        private BulkChangeAssessmentTypesBody buildBodyParams() {
            BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody = new BulkChangeAssessmentTypesBody();
            bulkChangeAssessmentTypesBody.ids(this.ids);
            if (this.type != null)
            bulkChangeAssessmentTypesBody.type(BulkChangeAssessmentTypesBody.TypeEnum.fromValue(this.type));
            return bulkChangeAssessmentTypesBody;
        }

        /**
         * Execute updateAssessmentTypes request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody = buildBodyParams();
            ApiResponse<Process> localVarResp = updateAssessmentTypesWithHttpInfo(orgId, bulkChangeAssessmentTypesBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAssessmentTypes request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody = buildBodyParams();
            return updateAssessmentTypesWithHttpInfo(orgId, bulkChangeAssessmentTypesBody);
        }

        /**
         * Execute updateAssessmentTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            BulkChangeAssessmentTypesBody bulkChangeAssessmentTypesBody = buildBodyParams();
            return updateAssessmentTypesAsync(orgId, bulkChangeAssessmentTypesBody, _callback);
        }
    }

    /**
     * Update the types of a set of assessments
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateAssessmentTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAssessmentTypesRequestBuilder updateAssessmentTypes(List<String> ids, String type, String orgId) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateAssessmentTypesRequestBuilder(ids, type, orgId);
    }
    private okhttp3.Call updateExistingAssessmentCall(String orgId, String assessmentId, Boolean silent, UpdateAssessment updateAssessment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAssessment;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/assessment/{assessmentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (silent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("silent", silent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingAssessmentValidateBeforeCall(String orgId, String assessmentId, Boolean silent, UpdateAssessment updateAssessment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingAssessment(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling updateExistingAssessment(Async)");
        }

        return updateExistingAssessmentCall(orgId, assessmentId, silent, updateAssessment, _callback);

    }


    private ApiResponse<Void> updateExistingAssessmentWithHttpInfo(String orgId, String assessmentId, Boolean silent, UpdateAssessment updateAssessment) throws ApiException {
        okhttp3.Call localVarCall = updateExistingAssessmentValidateBeforeCall(orgId, assessmentId, silent, updateAssessment, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingAssessmentAsync(String orgId, String assessmentId, Boolean silent, UpdateAssessment updateAssessment, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingAssessmentValidateBeforeCall(orgId, assessmentId, silent, updateAssessment, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingAssessmentRequestBuilder {
        private final String orgId;
        private final String assessmentId;
        private String label;
        private String slug;
        private String type;
        private Object fields;
        private List<ShareAccess> shareAccess;
        private String sensitive;
        private String color;
        private LocalDate startDate;
        private LocalDate endDate;
        private String status;
        private String doneAt;
        private Integer taskCount;
        private Integer taskDoneCount;
        private Integer peopleIncludedCount;
        private String query;
        private Boolean silent;

        private UpdateExistingAssessmentRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Set label
         * @param label human-readable label of assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set slug
         * @param slug unique slug of assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set type
         * @param type type of assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set fields
         * @param fields assessment fields (description) (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder fields(Object fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who have been granted access to this assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive view sensitivity of this assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set color
         * @param color color of assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date this assessment begins. In the context of REVIEW goals, the date the review cycle begins. (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date this assessment ends, or is completed. In the context of REVIEW assessment, the date the review cycle ends. (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set status
         * @param status status of this assessment - DRAFT, ACTIVE, DONE (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set doneAt
         * @param doneAt timestamp when the status of this assessment was set to done (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder doneAt(String doneAt) {
            this.doneAt = doneAt;
            return this;
        }
        
        /**
         * Set taskCount
         * @param taskCount number of tasks associated with this assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder taskCount(Integer taskCount) {
            this.taskCount = taskCount;
            return this;
        }
        
        /**
         * Set taskDoneCount
         * @param taskDoneCount number of tasks associated with this assessment that are done (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder taskDoneCount(Integer taskDoneCount) {
            this.taskDoneCount = taskDoneCount;
            return this;
        }
        
        /**
         * Set peopleIncludedCount
         * @param peopleIncludedCount number of people included in this assessment (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder peopleIncludedCount(Integer peopleIncludedCount) {
            this.peopleIncludedCount = peopleIncludedCount;
            return this;
        }
        
        /**
         * Set query
         * @param query Query for which people/jobs can be included in the review. (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set silent
         * @param silent Suppress notification emails (optional)
         * @return UpdateExistingAssessmentRequestBuilder
         */
        public UpdateExistingAssessmentRequestBuilder silent(Boolean silent) {
            this.silent = silent;
            return this;
        }
        
        /**
         * Build call for updateExistingAssessment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateAssessment updateAssessment = buildBodyParams();
            return updateExistingAssessmentCall(orgId, assessmentId, silent, updateAssessment, _callback);
        }

        private UpdateAssessment buildBodyParams() {
            UpdateAssessment updateAssessment = new UpdateAssessment();
            updateAssessment.label(this.label);
            updateAssessment.slug(this.slug);
            if (this.type != null)
            updateAssessment.type(UpdateAssessment.TypeEnum.fromValue(this.type));
            updateAssessment.fields(this.fields);
            updateAssessment.shareAccess(this.shareAccess);
            if (this.sensitive != null)
            updateAssessment.sensitive(UpdateAssessment.SensitiveEnum.fromValue(this.sensitive));
            updateAssessment.color(this.color);
            updateAssessment.startDate(this.startDate);
            updateAssessment.endDate(this.endDate);
            if (this.status != null)
            updateAssessment.status(UpdateAssessment.StatusEnum.fromValue(this.status));
            updateAssessment.doneAt(this.doneAt);
            updateAssessment.taskCount(this.taskCount);
            updateAssessment.taskDoneCount(this.taskDoneCount);
            updateAssessment.peopleIncludedCount(this.peopleIncludedCount);
            updateAssessment.query(this.query);
            return updateAssessment;
        }

        /**
         * Execute updateExistingAssessment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateAssessment updateAssessment = buildBodyParams();
            updateExistingAssessmentWithHttpInfo(orgId, assessmentId, silent, updateAssessment);
        }

        /**
         * Execute updateExistingAssessment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateAssessment updateAssessment = buildBodyParams();
            return updateExistingAssessmentWithHttpInfo(orgId, assessmentId, silent, updateAssessment);
        }

        /**
         * Execute updateExistingAssessment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateAssessment updateAssessment = buildBodyParams();
            return updateExistingAssessmentAsync(orgId, assessmentId, silent, updateAssessment, _callback);
        }
    }

    /**
     * Update an existing assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return UpdateExistingAssessmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingAssessmentRequestBuilder updateExistingAssessment(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new UpdateExistingAssessmentRequestBuilder(orgId, assessmentId);
    }
}
