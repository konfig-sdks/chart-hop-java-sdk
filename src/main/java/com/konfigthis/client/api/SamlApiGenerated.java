/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.SamlPerformSsoAssertionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SamlApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SamlApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SamlApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call performSsoAssertionCall(String org, String idp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saml/{org}/login"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idp", idp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performSsoAssertionValidateBeforeCall(String org, String idp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling performSsoAssertion(Async)");
        }

        return performSsoAssertionCall(org, idp, _callback);

    }


    private ApiResponse<Void> performSsoAssertionWithHttpInfo(String org, String idp) throws ApiException {
        okhttp3.Call localVarCall = performSsoAssertionValidateBeforeCall(org, idp, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call performSsoAssertionAsync(String org, String idp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = performSsoAssertionValidateBeforeCall(org, idp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PerformSsoAssertionRequestBuilder {
        private final String org;
        private String idp;

        private PerformSsoAssertionRequestBuilder(String org) {
            this.org = org;
        }

        /**
         * Set idp
         * @param idp Identifier Provider (optional)
         * @return PerformSsoAssertionRequestBuilder
         */
        public PerformSsoAssertionRequestBuilder idp(String idp) {
            this.idp = idp;
            return this;
        }
        
        /**
         * Build call for performSsoAssertion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return performSsoAssertionCall(org, idp, _callback);
        }


        /**
         * Execute performSsoAssertion request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            performSsoAssertionWithHttpInfo(org, idp);
        }

        /**
         * Execute performSsoAssertion request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return performSsoAssertionWithHttpInfo(org, idp);
        }

        /**
         * Execute performSsoAssertion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return performSsoAssertionAsync(org, idp, _callback);
        }
    }

    /**
     * Return an redirect to the designated Idp, given an identity provider
     * 
     * @param org Org slug (required)
     * @return PerformSsoAssertionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
     </table>
     */
    public PerformSsoAssertionRequestBuilder performSsoAssertion(String org) throws IllegalArgumentException {
        if (org == null) throw new IllegalArgumentException("\"org\" is required but got null");
            

        return new PerformSsoAssertionRequestBuilder(org);
    }
    private okhttp3.Call performSsoAssertion_0Call(String org, String token, String saMLResponse, String relayState, SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = samlPerformSsoAssertionRequest;

        // create path and map variables
        String localVarPath = "/saml/sso/{org}"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (saMLResponse != null) {
            localVarFormParams.put("SAMLResponse", saMLResponse);
        }

        if (relayState != null) {
            localVarFormParams.put("RelayState", relayState);
        }

        if (token != null) {
            localVarCookieParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performSsoAssertion_0ValidateBeforeCall(String org, String token, String saMLResponse, String relayState, SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling performSsoAssertion_0(Async)");
        }

        return performSsoAssertion_0Call(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest, _callback);

    }


    private ApiResponse<Void> performSsoAssertion_0WithHttpInfo(String org, String token, String saMLResponse, String relayState, SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest) throws ApiException {
        okhttp3.Call localVarCall = performSsoAssertion_0ValidateBeforeCall(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call performSsoAssertion_0Async(String org, String token, String saMLResponse, String relayState, SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = performSsoAssertion_0ValidateBeforeCall(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PerformSsoAssertion0RequestBuilder {
        private final String org;
        private String token;
        private String saMLResponse;
        private String relayState;

        private PerformSsoAssertion0RequestBuilder(String org) {
            this.org = org;
        }

        /**
         * Set token
         * @param token  (optional)
         * @return PerformSsoAssertion0RequestBuilder
         */
        public PerformSsoAssertion0RequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set saMLResponse
         * @param saMLResponse SAML Response (optional)
         * @return PerformSsoAssertion0RequestBuilder
         */
        public PerformSsoAssertion0RequestBuilder saMLResponse(String saMLResponse) {
            this.saMLResponse = saMLResponse;
            return this;
        }
        
        /**
         * Set relayState
         * @param relayState Relay State (optional)
         * @return PerformSsoAssertion0RequestBuilder
         */
        public PerformSsoAssertion0RequestBuilder relayState(String relayState) {
            this.relayState = relayState;
            return this;
        }
        
        /**
         * Build call for performSsoAssertion_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest = buildBodyParams();
            return performSsoAssertion_0Call(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest, _callback);
        }

        private SamlPerformSsoAssertionRequest buildBodyParams() {
            SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest = new SamlPerformSsoAssertionRequest();
            samlPerformSsoAssertionRequest.saMLResponse(this.saMLResponse);
            samlPerformSsoAssertionRequest.relayState(this.relayState);
            return samlPerformSsoAssertionRequest;
        }

        /**
         * Execute performSsoAssertion_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest = buildBodyParams();
            performSsoAssertion_0WithHttpInfo(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest);
        }

        /**
         * Execute performSsoAssertion_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest = buildBodyParams();
            return performSsoAssertion_0WithHttpInfo(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest);
        }

        /**
         * Execute performSsoAssertion_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SamlPerformSsoAssertionRequest samlPerformSsoAssertionRequest = buildBodyParams();
            return performSsoAssertion_0Async(org, token, saMLResponse, relayState, samlPerformSsoAssertionRequest, _callback);
        }
    }

    /**
     * Single sign on URL, where SAML assertion is perform
     * 
     * @param org Org slug (required)
     * @return PerformSsoAssertion0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
     </table>
     */
    public PerformSsoAssertion0RequestBuilder performSsoAssertion_0(String org) throws IllegalArgumentException {
        if (org == null) throw new IllegalArgumentException("\"org\" is required but got null");
            

        return new PerformSsoAssertion0RequestBuilder(org);
    }
    private okhttp3.Call savePerOrgXmlCertFromIdpCall(String orgId, String idp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/saml/org/{orgId}/xml-cert"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idp", idp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savePerOrgXmlCertFromIdpValidateBeforeCall(String orgId, String idp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling savePerOrgXmlCertFromIdp(Async)");
        }

        return savePerOrgXmlCertFromIdpCall(orgId, idp, _callback);

    }


    private ApiResponse<Void> savePerOrgXmlCertFromIdpWithHttpInfo(String orgId, String idp) throws ApiException {
        okhttp3.Call localVarCall = savePerOrgXmlCertFromIdpValidateBeforeCall(orgId, idp, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call savePerOrgXmlCertFromIdpAsync(String orgId, String idp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savePerOrgXmlCertFromIdpValidateBeforeCall(orgId, idp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SavePerOrgXmlCertFromIdpRequestBuilder {
        private final String orgId;
        private String idp;

        private SavePerOrgXmlCertFromIdpRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set idp
         * @param idp Identifier Provider (optional)
         * @return SavePerOrgXmlCertFromIdpRequestBuilder
         */
        public SavePerOrgXmlCertFromIdpRequestBuilder idp(String idp) {
            this.idp = idp;
            return this;
        }
        
        /**
         * Build call for savePerOrgXmlCertFromIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return savePerOrgXmlCertFromIdpCall(orgId, idp, _callback);
        }


        /**
         * Execute savePerOrgXmlCertFromIdp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            savePerOrgXmlCertFromIdpWithHttpInfo(orgId, idp);
        }

        /**
         * Execute savePerOrgXmlCertFromIdp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return savePerOrgXmlCertFromIdpWithHttpInfo(orgId, idp);
        }

        /**
         * Execute savePerOrgXmlCertFromIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return savePerOrgXmlCertFromIdpAsync(orgId, idp, _callback);
        }
    }

    /**
     * Save per org Xml Cert from IDP
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SavePerOrgXmlCertFromIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
     </table>
     */
    public SavePerOrgXmlCertFromIdpRequestBuilder savePerOrgXmlCertFromIdp(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SavePerOrgXmlCertFromIdpRequestBuilder(orgId);
    }
    private okhttp3.Call savePerOrgXmlCertFromIdp_0Call(String orgId, String idp, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/saml/org/{orgId}/xml-cert"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idp", idp));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call savePerOrgXmlCertFromIdp_0ValidateBeforeCall(String orgId, String idp, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling savePerOrgXmlCertFromIdp_0(Async)");
        }

        return savePerOrgXmlCertFromIdp_0Call(orgId, idp, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Void> savePerOrgXmlCertFromIdp_0WithHttpInfo(String orgId, String idp, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = savePerOrgXmlCertFromIdp_0ValidateBeforeCall(orgId, idp, fileUploadNewFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call savePerOrgXmlCertFromIdp_0Async(String orgId, String idp, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = savePerOrgXmlCertFromIdp_0ValidateBeforeCall(orgId, idp, fileUploadNewFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SavePerOrgXmlCertFromIdp0RequestBuilder {
        private final String orgId;
        private File _file;
        private String idp;

        private SavePerOrgXmlCertFromIdp0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return SavePerOrgXmlCertFromIdp0RequestBuilder
         */
        public SavePerOrgXmlCertFromIdp0RequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set idp
         * @param idp Identifier Provider (optional)
         * @return SavePerOrgXmlCertFromIdp0RequestBuilder
         */
        public SavePerOrgXmlCertFromIdp0RequestBuilder idp(String idp) {
            this.idp = idp;
            return this;
        }
        
        /**
         * Build call for savePerOrgXmlCertFromIdp_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return savePerOrgXmlCertFromIdp_0Call(orgId, idp, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute savePerOrgXmlCertFromIdp_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            savePerOrgXmlCertFromIdp_0WithHttpInfo(orgId, idp, fileUploadNewFileRequest);
        }

        /**
         * Execute savePerOrgXmlCertFromIdp_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return savePerOrgXmlCertFromIdp_0WithHttpInfo(orgId, idp, fileUploadNewFileRequest);
        }

        /**
         * Execute savePerOrgXmlCertFromIdp_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return savePerOrgXmlCertFromIdp_0Async(orgId, idp, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Save per org Xml Cert from IDP
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SavePerOrgXmlCertFromIdp0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> invalid data </td><td>  -  </td></tr>
     </table>
     */
    public SavePerOrgXmlCertFromIdp0RequestBuilder savePerOrgXmlCertFromIdp_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SavePerOrgXmlCertFromIdp0RequestBuilder(orgId);
    }
}
