/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.GroupCount;
import com.konfigthis.client.model.GroupGraphResults;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewGroupCall(String orgId, String type, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroupValidateBeforeCall(String orgId, String type, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewGroup(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createNewGroup(Async)");
        }

        return createNewGroupCall(orgId, type, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Void> createNewGroupWithHttpInfo(String orgId, String type, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(orgId, type, scenarioId, date, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewGroupAsync(String orgId, String type, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(orgId, type, scenarioId, date, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewGroupRequestBuilder {
        private final String orgId;
        private final String type;
        private String scenarioId;
        private LocalDate date;

        private CreateNewGroupRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to create the group in (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of group creation (optional)
         * @return CreateNewGroupRequestBuilder
         */
        public CreateNewGroupRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createNewGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewGroupCall(orgId, type, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute createNewGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            createNewGroupWithHttpInfo(orgId, type, scenarioId, date, requestBody);
        }

        /**
         * Execute createNewGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewGroupWithHttpInfo(orgId, type, scenarioId, date, requestBody);
        }

        /**
         * Execute createNewGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createNewGroupAsync(orgId, type, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Create a group
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @return CreateNewGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroupRequestBuilder createNewGroup(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateNewGroupRequestBuilder(orgId, type);
    }
    private okhttp3.Call findInOrgOfTypeCall(String orgId, String start, Integer depth, Integer groupApproxLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/graph"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        if (groupApproxLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupApproxLimit", groupApproxLimit));
        }

        if (jobLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobLimit", jobLimit));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (jobFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFilter", jobFilter));
        }

        if (groupFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFilter", groupFilter));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (groupFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFields", groupFields));
        }

        if (jobFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFields", jobFields));
        }

        if (positionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionFields", positionFields));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findInOrgOfTypeValidateBeforeCall(String orgId, String start, Integer depth, Integer groupApproxLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findInOrgOfType(Async)");
        }

        return findInOrgOfTypeCall(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);

    }


    private ApiResponse<GroupGraphResults> findInOrgOfTypeWithHttpInfo(String orgId, String start, Integer depth, Integer groupApproxLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format) throws ApiException {
        okhttp3.Call localVarCall = findInOrgOfTypeValidateBeforeCall(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, null);
        Type localVarReturnType = new TypeToken<GroupGraphResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findInOrgOfTypeAsync(String orgId, String start, Integer depth, Integer groupApproxLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback<GroupGraphResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = findInOrgOfTypeValidateBeforeCall(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        Type localVarReturnType = new TypeToken<GroupGraphResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindInOrgOfTypeRequestBuilder {
        private final String orgId;
        private String start;
        private Integer depth;
        private Integer groupApproxLimit;
        private Integer jobLimit;
        private String scenarioId;
        private String jobFilter;
        private String groupFilter;
        private LocalDate date;
        private String groupFields;
        private String jobFields;
        private String positionFields;
        private String kind;
        private String format;

        private FindInOrgOfTypeRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set start
         * @param start group id to use as the starting point (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set depth
         * @param depth number of levels down (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder depth(Integer depth) {
            this.depth = depth;
            return this;
        }
        
        /**
         * Set groupApproxLimit
         * @param groupApproxLimit limit number of groups (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder groupApproxLimit(Integer groupApproxLimit) {
            this.groupApproxLimit = groupApproxLimit;
            return this;
        }
        
        /**
         * Set jobLimit
         * @param jobLimit limit number of jobs (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder jobLimit(Integer jobLimit) {
            this.jobLimit = jobLimit;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario id to query (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set jobFilter
         * @param jobFilter query string to filter jobs by (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder jobFilter(String jobFilter) {
            this.jobFilter = jobFilter;
            return this;
        }
        
        /**
         * Set groupFilter
         * @param groupFilter query string to filter group by (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder groupFilter(String groupFilter) {
            this.groupFilter = groupFilter;
            return this;
        }
        
        /**
         * Set date
         * @param date date to search as of (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set groupFields
         * @param groupFields group fields to return (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder groupFields(String groupFields) {
            this.groupFields = groupFields;
            return this;
        }
        
        /**
         * Set jobFields
         * @param jobFields job/person fields to return (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder jobFields(String jobFields) {
            this.jobFields = jobFields;
            return this;
        }
        
        /**
         * Set positionFields
         * @param positionFields position fields to return (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder positionFields(String positionFields) {
            this.positionFields = positionFields;
            return this;
        }
        
        /**
         * Set kind
         * @param kind kind of group to query (legacy/tracked) (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder kind(String kind) {
            this.kind = kind;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindInOrgOfTypeRequestBuilder
         */
        public FindInOrgOfTypeRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for findInOrgOfType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findInOrgOfTypeCall(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        }


        /**
         * Execute findInOrgOfType request
         * @return GroupGraphResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public GroupGraphResults execute() throws ApiException {
            ApiResponse<GroupGraphResults> localVarResp = findInOrgOfTypeWithHttpInfo(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findInOrgOfType request with HTTP info returned
         * @return ApiResponse&lt;GroupGraphResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupGraphResults> executeWithHttpInfo() throws ApiException {
            return findInOrgOfTypeWithHttpInfo(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format);
        }

        /**
         * Execute findInOrgOfType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupGraphResults> _callback) throws ApiException {
            return findInOrgOfTypeAsync(orgId, start, depth, groupApproxLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        }
    }

    /**
     * Find groups in the organization of a certain type
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindInOrgOfTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public FindInOrgOfTypeRequestBuilder findInOrgOfType(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindInOrgOfTypeRequestBuilder(orgId);
    }
    private okhttp3.Call findOfTypeCall(String orgId, String type, String scenarioId, LocalDate date, String from, Integer limit, String fields, String jobFields, String positionFields, Boolean includeAll, String search, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (jobFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFields", jobFields));
        }

        if (positionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionFields", positionFields));
        }

        if (includeAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAll", includeAll));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOfTypeValidateBeforeCall(String orgId, String type, String scenarioId, LocalDate date, String from, Integer limit, String fields, String jobFields, String positionFields, Boolean includeAll, String search, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findOfType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling findOfType(Async)");
        }

        return findOfTypeCall(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format, _callback);

    }


    private ApiResponse<ResultsData> findOfTypeWithHttpInfo(String orgId, String type, String scenarioId, LocalDate date, String from, Integer limit, String fields, String jobFields, String positionFields, Boolean includeAll, String search, String format) throws ApiException {
        okhttp3.Call localVarCall = findOfTypeValidateBeforeCall(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findOfTypeAsync(String orgId, String type, String scenarioId, LocalDate date, String from, Integer limit, String fields, String jobFields, String positionFields, Boolean includeAll, String search, String format, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOfTypeValidateBeforeCall(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindOfTypeRequestBuilder {
        private final String orgId;
        private final String type;
        private String scenarioId;
        private LocalDate date;
        private String from;
        private Integer limit;
        private String fields;
        private String jobFields;
        private String positionFields;
        private Boolean includeAll;
        private String search;
        private String format;

        private FindOfTypeRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set from
         * @param from Group id to start paginating from (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set jobFields
         * @param jobFields job fields to return, comma-separated (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder jobFields(String jobFields) {
            this.jobFields = jobFields;
            return this;
        }
        
        /**
         * Set positionFields
         * @param positionFields position fields to return, comma-separated (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder positionFields(String positionFields) {
            this.positionFields = positionFields;
            return this;
        }
        
        /**
         * Set includeAll
         * @param includeAll Include all groups, including deleted groups (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder includeAll(Boolean includeAll) {
            this.includeAll = includeAll;
            return this;
        }
        
        /**
         * Set search
         * @param search Search string to filter on code &amp; name (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder search(String search) {
            this.search = search;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindOfTypeRequestBuilder
         */
        public FindOfTypeRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for findOfType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findOfTypeCall(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format, _callback);
        }


        /**
         * Execute findOfType request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findOfTypeWithHttpInfo(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findOfType request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findOfTypeWithHttpInfo(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format);
        }

        /**
         * Execute findOfType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findOfTypeAsync(orgId, type, scenarioId, date, from, limit, fields, jobFields, positionFields, includeAll, search, format, _callback);
        }
    }

    /**
     * Find groups in the organization of a certain type
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @return FindOfTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindOfTypeRequestBuilder findOfType(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new FindOfTypeRequestBuilder(orgId, type);
    }
    private okhttp3.Call findOrphanedGroupsCall(String orgId, String start, Integer groupLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/orphaned"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (groupLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupLimit", groupLimit));
        }

        if (jobLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobLimit", jobLimit));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (jobFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFilter", jobFilter));
        }

        if (groupFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFilter", groupFilter));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (groupFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFields", groupFields));
        }

        if (jobFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFields", jobFields));
        }

        if (positionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionFields", positionFields));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findOrphanedGroupsValidateBeforeCall(String orgId, String start, Integer groupLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findOrphanedGroups(Async)");
        }

        return findOrphanedGroupsCall(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);

    }


    private ApiResponse<GroupGraphResults> findOrphanedGroupsWithHttpInfo(String orgId, String start, Integer groupLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format) throws ApiException {
        okhttp3.Call localVarCall = findOrphanedGroupsValidateBeforeCall(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, null);
        Type localVarReturnType = new TypeToken<GroupGraphResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findOrphanedGroupsAsync(String orgId, String start, Integer groupLimit, Integer jobLimit, String scenarioId, String jobFilter, String groupFilter, LocalDate date, String groupFields, String jobFields, String positionFields, String kind, String format, final ApiCallback<GroupGraphResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = findOrphanedGroupsValidateBeforeCall(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        Type localVarReturnType = new TypeToken<GroupGraphResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindOrphanedGroupsRequestBuilder {
        private final String orgId;
        private String start;
        private Integer groupLimit;
        private Integer jobLimit;
        private String scenarioId;
        private String jobFilter;
        private String groupFilter;
        private LocalDate date;
        private String groupFields;
        private String jobFields;
        private String positionFields;
        private String kind;
        private String format;

        private FindOrphanedGroupsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set start
         * @param start group id to use as the starting point (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder start(String start) {
            this.start = start;
            return this;
        }
        
        /**
         * Set groupLimit
         * @param groupLimit limit number of groups (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder groupLimit(Integer groupLimit) {
            this.groupLimit = groupLimit;
            return this;
        }
        
        /**
         * Set jobLimit
         * @param jobLimit limit number of jobs (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder jobLimit(Integer jobLimit) {
            this.jobLimit = jobLimit;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario id to query (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set jobFilter
         * @param jobFilter query string to filter jobs by (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder jobFilter(String jobFilter) {
            this.jobFilter = jobFilter;
            return this;
        }
        
        /**
         * Set groupFilter
         * @param groupFilter query string to filter group by (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder groupFilter(String groupFilter) {
            this.groupFilter = groupFilter;
            return this;
        }
        
        /**
         * Set date
         * @param date date to search as of (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set groupFields
         * @param groupFields group fields to return (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder groupFields(String groupFields) {
            this.groupFields = groupFields;
            return this;
        }
        
        /**
         * Set jobFields
         * @param jobFields job/person fields to return (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder jobFields(String jobFields) {
            this.jobFields = jobFields;
            return this;
        }
        
        /**
         * Set positionFields
         * @param positionFields position fields to return (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder positionFields(String positionFields) {
            this.positionFields = positionFields;
            return this;
        }
        
        /**
         * Set kind
         * @param kind kind of group to query (legacy/tracked) (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder kind(String kind) {
            this.kind = kind;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindOrphanedGroupsRequestBuilder
         */
        public FindOrphanedGroupsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for findOrphanedGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findOrphanedGroupsCall(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        }


        /**
         * Execute findOrphanedGroups request
         * @return GroupGraphResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public GroupGraphResults execute() throws ApiException {
            ApiResponse<GroupGraphResults> localVarResp = findOrphanedGroupsWithHttpInfo(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findOrphanedGroups request with HTTP info returned
         * @return ApiResponse&lt;GroupGraphResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupGraphResults> executeWithHttpInfo() throws ApiException {
            return findOrphanedGroupsWithHttpInfo(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format);
        }

        /**
         * Execute findOrphanedGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupGraphResults> _callback) throws ApiException {
            return findOrphanedGroupsAsync(orgId, start, groupLimit, jobLimit, scenarioId, jobFilter, groupFilter, date, groupFields, jobFields, positionFields, kind, format, _callback);
        }
    }

    /**
     * Find groups in the organization that have no child groups
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindOrphanedGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public FindOrphanedGroupsRequestBuilder findOrphanedGroups(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindOrphanedGroupsRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, String fields, String jobFields, String positionFields, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}/{groupId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (jobFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobFields", jobFields));
        }

        if (positionFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionFields", positionFields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, String fields, String jobFields, String positionFields, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getById(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getById(Async)");
        }

        return getByIdCall(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format, _callback);

    }


    private ApiResponse<Map<String, Object>> getByIdWithHttpInfo(String orgId, String type, String groupId, String scenarioId, LocalDate date, String fields, String jobFields, String positionFields, String format) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format, null);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String type, String groupId, String scenarioId, LocalDate date, String fields, String jobFields, String positionFields, String format, final ApiCallback<Map<String, Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String type;
        private final String groupId;
        private String scenarioId;
        private LocalDate date;
        private String fields;
        private String jobFields;
        private String positionFields;
        private String format;

        private GetByIdRequestBuilder(String orgId, String type, String groupId) {
            this.orgId = orgId;
            this.type = type;
            this.groupId = groupId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set jobFields
         * @param jobFields job fields to return, comma-separated (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder jobFields(String jobFields) {
            this.jobFields = jobFields;
            return this;
        }
        
        /**
         * Set positionFields
         * @param positionFields position fields to return, comma-separated (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder positionFields(String positionFields) {
            this.positionFields = positionFields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format, _callback);
        }


        /**
         * Execute getById request
         * @return Map&lt;String, Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, Object> execute() throws ApiException {
            ApiResponse<Map<String, Object>> localVarResp = getByIdWithHttpInfo(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, Object>> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, Object>> _callback) throws ApiException {
            return getByIdAsync(orgId, type, groupId, scenarioId, date, fields, jobFields, positionFields, format, _callback);
        }
    }

    /**
     * Return a particular group by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @param groupId Group identifier (either id or slug) (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String type, String groupId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, type, groupId);
    }
    private okhttp3.Call getOrganizedGroupCountsCall(String orgId, String scenarioId, String groupFilter, LocalDate date, String kind, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/count"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (groupFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupFilter", groupFilter));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (kind != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("kind", kind));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizedGroupCountsValidateBeforeCall(String orgId, String scenarioId, String groupFilter, LocalDate date, String kind, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getOrganizedGroupCounts(Async)");
        }

        return getOrganizedGroupCountsCall(orgId, scenarioId, groupFilter, date, kind, _callback);

    }


    private ApiResponse<GroupCount> getOrganizedGroupCountsWithHttpInfo(String orgId, String scenarioId, String groupFilter, LocalDate date, String kind) throws ApiException {
        okhttp3.Call localVarCall = getOrganizedGroupCountsValidateBeforeCall(orgId, scenarioId, groupFilter, date, kind, null);
        Type localVarReturnType = new TypeToken<GroupCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizedGroupCountsAsync(String orgId, String scenarioId, String groupFilter, LocalDate date, String kind, final ApiCallback<GroupCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizedGroupCountsValidateBeforeCall(orgId, scenarioId, groupFilter, date, kind, _callback);
        Type localVarReturnType = new TypeToken<GroupCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizedGroupCountsRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private String groupFilter;
        private LocalDate date;
        private String kind;

        private GetOrganizedGroupCountsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId scenario id to query (optional)
         * @return GetOrganizedGroupCountsRequestBuilder
         */
        public GetOrganizedGroupCountsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set groupFilter
         * @param groupFilter query string to filter group by (optional)
         * @return GetOrganizedGroupCountsRequestBuilder
         */
        public GetOrganizedGroupCountsRequestBuilder groupFilter(String groupFilter) {
            this.groupFilter = groupFilter;
            return this;
        }
        
        /**
         * Set date
         * @param date date to search as of (optional)
         * @return GetOrganizedGroupCountsRequestBuilder
         */
        public GetOrganizedGroupCountsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set kind
         * @param kind kind of group to query (legacy/tracked) (optional)
         * @return GetOrganizedGroupCountsRequestBuilder
         */
        public GetOrganizedGroupCountsRequestBuilder kind(String kind) {
            this.kind = kind;
            return this;
        }
        
        /**
         * Build call for getOrganizedGroupCounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizedGroupCountsCall(orgId, scenarioId, groupFilter, date, kind, _callback);
        }


        /**
         * Execute getOrganizedGroupCounts request
         * @return GroupCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public GroupCount execute() throws ApiException {
            ApiResponse<GroupCount> localVarResp = getOrganizedGroupCountsWithHttpInfo(orgId, scenarioId, groupFilter, date, kind);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganizedGroupCounts request with HTTP info returned
         * @return ApiResponse&lt;GroupCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupCount> executeWithHttpInfo() throws ApiException {
            return getOrganizedGroupCountsWithHttpInfo(orgId, scenarioId, groupFilter, date, kind);
        }

        /**
         * Execute getOrganizedGroupCounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupCount> _callback) throws ApiException {
            return getOrganizedGroupCountsAsync(orgId, scenarioId, groupFilter, date, kind, _callback);
        }
    }

    /**
     * Get organized group counts
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetOrganizedGroupCountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizedGroupCountsRequestBuilder getOrganizedGroupCounts(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetOrganizedGroupCountsRequestBuilder(orgId);
    }
    private okhttp3.Call importCsvDataCall(String orgId, String type, LocalDate date, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}/import"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importCsvDataValidateBeforeCall(String orgId, String type, LocalDate date, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling importCsvData(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling importCsvData(Async)");
        }

        return importCsvDataCall(orgId, type, date, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Process> importCsvDataWithHttpInfo(String orgId, String type, LocalDate date, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = importCsvDataValidateBeforeCall(orgId, type, date, fileUploadNewFileRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importCsvDataAsync(String orgId, String type, LocalDate date, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = importCsvDataValidateBeforeCall(orgId, type, date, fileUploadNewFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportCsvDataRequestBuilder {
        private final String orgId;
        private final String type;
        private File _file;
        private LocalDate date;

        private ImportCsvDataRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return ImportCsvDataRequestBuilder
         */
        public ImportCsvDataRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to update as of (optional)
         * @return ImportCsvDataRequestBuilder
         */
        public ImportCsvDataRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for importCsvData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importCsvDataCall(orgId, type, date, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute importCsvData request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = importCsvDataWithHttpInfo(orgId, type, date, fileUploadNewFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importCsvData request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importCsvDataWithHttpInfo(orgId, type, date, fileUploadNewFileRequest);
        }

        /**
         * Execute importCsvData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importCsvDataAsync(orgId, type, date, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Import data from CSV file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @return ImportCsvDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ImportCsvDataRequestBuilder importCsvData(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new ImportCsvDataRequestBuilder(orgId, type);
    }
    private okhttp3.Call markMultipleAsDeletedCall(String orgId, String type, String scenarioId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}/bulk-delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markMultipleAsDeletedValidateBeforeCall(String orgId, String type, String scenarioId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling markMultipleAsDeleted(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling markMultipleAsDeleted(Async)");
        }

        return markMultipleAsDeletedCall(orgId, type, scenarioId, requestBody, _callback);

    }


    private ApiResponse<Process> markMultipleAsDeletedWithHttpInfo(String orgId, String type, String scenarioId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = markMultipleAsDeletedValidateBeforeCall(orgId, type, scenarioId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markMultipleAsDeletedAsync(String orgId, String type, String scenarioId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = markMultipleAsDeletedValidateBeforeCall(orgId, type, scenarioId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkMultipleAsDeletedRequestBuilder {
        private final String orgId;
        private final String type;
        private String scenarioId;
        private List<String> requestBody;

        private MarkMultipleAsDeletedRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set requestBody
         * @param requestBody Group ids of groups to bulk delete (optional)
         * @return MarkMultipleAsDeletedRequestBuilder
         */
        public MarkMultipleAsDeletedRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the group in (optional)
         * @return MarkMultipleAsDeletedRequestBuilder
         */
        public MarkMultipleAsDeletedRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for markMultipleAsDeleted
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return markMultipleAsDeletedCall(orgId, type, scenarioId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute markMultipleAsDeleted request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = markMultipleAsDeletedWithHttpInfo(orgId, type, scenarioId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markMultipleAsDeleted request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return markMultipleAsDeletedWithHttpInfo(orgId, type, scenarioId, requestBody);
        }

        /**
         * Execute markMultipleAsDeleted request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return markMultipleAsDeletedAsync(orgId, type, scenarioId, requestBody, _callback);
        }
    }

    /**
     * Mark multiple groups as deleted
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @return MarkMultipleAsDeletedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MarkMultipleAsDeletedRequestBuilder markMultipleAsDeleted(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new MarkMultipleAsDeletedRequestBuilder(orgId, type);
    }
    private okhttp3.Call removeByGroupIdCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}/{groupId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByGroupIdValidateBeforeCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeByGroupId(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling removeByGroupId(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeByGroupId(Async)");
        }

        return removeByGroupIdCall(orgId, type, groupId, scenarioId, date, _callback);

    }


    private ApiResponse<Void> removeByGroupIdWithHttpInfo(String orgId, String type, String groupId, String scenarioId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = removeByGroupIdValidateBeforeCall(orgId, type, groupId, scenarioId, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByGroupIdAsync(String orgId, String type, String groupId, String scenarioId, LocalDate date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByGroupIdValidateBeforeCall(orgId, type, groupId, scenarioId, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByGroupIdRequestBuilder {
        private final String orgId;
        private final String type;
        private final String groupId;
        private String scenarioId;
        private LocalDate date;

        private RemoveByGroupIdRequestBuilder(String orgId, String type, String groupId) {
            this.orgId = orgId;
            this.type = type;
            this.groupId = groupId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the group in (optional)
         * @return RemoveByGroupIdRequestBuilder
         */
        public RemoveByGroupIdRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to update as of (optional)
         * @return RemoveByGroupIdRequestBuilder
         */
        public RemoveByGroupIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for removeByGroupId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByGroupIdCall(orgId, type, groupId, scenarioId, date, _callback);
        }


        /**
         * Execute removeByGroupId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByGroupIdWithHttpInfo(orgId, type, groupId, scenarioId, date);
        }

        /**
         * Execute removeByGroupId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByGroupIdWithHttpInfo(orgId, type, groupId, scenarioId, date);
        }

        /**
         * Execute removeByGroupId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByGroupIdAsync(orgId, type, groupId, scenarioId, date, _callback);
        }
    }

    /**
     * Delete a group
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @param groupId Group id (required)
     * @return RemoveByGroupIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByGroupIdRequestBuilder removeByGroupId(String orgId, String type, String groupId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new RemoveByGroupIdRequestBuilder(orgId, type, groupId);
    }
    private okhttp3.Call updateGroupDetailsCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/group/{type}/{groupId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "groupId" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupDetailsValidateBeforeCall(String orgId, String type, String groupId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateGroupDetails(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateGroupDetails(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupDetails(Async)");
        }

        return updateGroupDetailsCall(orgId, type, groupId, scenarioId, date, requestBody, _callback);

    }


    private ApiResponse<Void> updateGroupDetailsWithHttpInfo(String orgId, String type, String groupId, String scenarioId, LocalDate date, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateGroupDetailsValidateBeforeCall(orgId, type, groupId, scenarioId, date, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateGroupDetailsAsync(String orgId, String type, String groupId, String scenarioId, LocalDate date, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupDetailsValidateBeforeCall(orgId, type, groupId, scenarioId, date, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateGroupDetailsRequestBuilder {
        private final String orgId;
        private final String type;
        private final String groupId;
        private String scenarioId;
        private LocalDate date;

        private UpdateGroupDetailsRequestBuilder(String orgId, String type, String groupId) {
            this.orgId = orgId;
            this.type = type;
            this.groupId = groupId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update the group in (optional)
         * @return UpdateGroupDetailsRequestBuilder
         */
        public UpdateGroupDetailsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return UpdateGroupDetailsRequestBuilder
         */
        public UpdateGroupDetailsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateGroupDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateGroupDetailsCall(orgId, type, groupId, scenarioId, date, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateGroupDetails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateGroupDetailsWithHttpInfo(orgId, type, groupId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateGroupDetails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateGroupDetailsWithHttpInfo(orgId, type, groupId, scenarioId, date, requestBody);
        }

        /**
         * Execute updateGroupDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateGroupDetailsAsync(orgId, type, groupId, scenarioId, date, requestBody, _callback);
        }
    }

    /**
     * Update a group
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Group type (required)
     * @param groupId Group id (required)
     * @return UpdateGroupDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 501 </td><td> not implemented </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupDetailsRequestBuilder updateGroupDetails(String orgId, String type, String groupId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        return new UpdateGroupDetailsRequestBuilder(orgId, type, groupId);
    }
}
