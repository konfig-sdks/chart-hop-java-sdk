/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateForm;
import com.konfigthis.client.model.Form;
import com.konfigthis.client.model.FormBlock;
import com.konfigthis.client.model.FormCollectRequest;
import com.konfigthis.client.model.FormDraft;
import com.konfigthis.client.model.FormField;
import com.konfigthis.client.model.FormRender;
import com.konfigthis.client.model.FormRerender;
import com.konfigthis.client.model.FormStatusUpdateRequest;
import com.konfigthis.client.model.FormSubmitRequest;
import com.konfigthis.client.model.ResultsForm;
import com.konfigthis.client.model.ResultsFormSummary;
import com.konfigthis.client.model.UpdateForm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FormApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FormApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FormApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewFormCall(String orgId, CreateForm createForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createForm;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFormValidateBeforeCall(String orgId, CreateForm createForm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewForm(Async)");
        }

        return createNewFormCall(orgId, createForm, _callback);

    }


    private ApiResponse<Form> createNewFormWithHttpInfo(String orgId, CreateForm createForm) throws ApiException {
        okhttp3.Call localVarCall = createNewFormValidateBeforeCall(orgId, createForm, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFormAsync(String orgId, CreateForm createForm, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFormValidateBeforeCall(orgId, createForm, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFormRequestBuilder {
        private final String label;
        private final List<FormField> fields;
        private final List<FormBlock> blocks;
        private final String status;
        private final String orgId;
        private String description;
        private String type;
        private String targetType;
        private String targetFilter;
        private String submitFilter;
        private String responseReadFilter;
        private Boolean useFieldAccess;
        private String approval;
        private String authorSensitive;
        private Object options;

        private CreateNewFormRequestBuilder(String label, List<FormField> fields, List<FormBlock> blocks, String status, String orgId) {
            this.label = label;
            this.fields = fields;
            this.blocks = blocks;
            this.status = status;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description description of form (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set type
         * @param type type of the form (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType target type that the form can be filled out about (null defaults to PERSON for backwards compatibility) (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Set targetFilter
         * @param targetFilter filter that controls on which profiles this tab will appear (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set submitFilter
         * @param submitFilter filter that controls which respondents can submit this form. The form:submit permission, if present, overrides this filter (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder submitFilter(String submitFilter) {
            this.submitFilter = submitFilter;
            return this;
        }
        
        /**
         * Set responseReadFilter
         * @param responseReadFilter filter that controls who can read the form responses. The formResponse:read permission, if present, overrides this filter (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder responseReadFilter(String responseReadFilter) {
            this.responseReadFilter = responseReadFilter;
            return this;
        }
        
        /**
         * Set useFieldAccess
         * @param useFieldAccess if this option is on, then form response answers will use field permissions to determine access to those responses (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder useFieldAccess(Boolean useFieldAccess) {
            this.useFieldAccess = useFieldAccess;
            return this;
        }
        
        /**
         * Set approval
         * @param approval approval needed, if any approval is required (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder approval(String approval) {
            this.approval = approval;
            return this;
        }
        
        /**
         * Set authorSensitive
         * @param authorSensitive view sensitivity for the author of this form - the level of view access required to view the createId and updateId fields. If null, the author&#39;s identity is always visible as long as the viewer can read the form response. If set to PRIVATE, the author&#39;s identity is stored in ChartHop, but protected such that even users with sensitive access cannot access the data. If set to ANONYMOUS, the author&#39;s identity is not stored in ChartHop at all. (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder authorSensitive(String authorSensitive) {
            this.authorSensitive = authorSensitive;
            return this;
        }
        
        /**
         * Set options
         * @param options options, such as notification settings (optional)
         * @return CreateNewFormRequestBuilder
         */
        public CreateNewFormRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for createNewForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateForm createForm = buildBodyParams();
            return createNewFormCall(orgId, createForm, _callback);
        }

        private CreateForm buildBodyParams() {
            CreateForm createForm = new CreateForm();
            createForm.description(this.description);
            createForm.label(this.label);
            createForm.fields(this.fields);
            createForm.blocks(this.blocks);
            if (this.status != null)
            createForm.status(CreateForm.StatusEnum.fromValue(this.status));
            if (this.type != null)
            createForm.type(CreateForm.TypeEnum.fromValue(this.type));
            if (this.targetType != null)
            createForm.targetType(CreateForm.TargetTypeEnum.fromValue(this.targetType));
            createForm.targetFilter(this.targetFilter);
            createForm.submitFilter(this.submitFilter);
            createForm.responseReadFilter(this.responseReadFilter);
            createForm.useFieldAccess(this.useFieldAccess);
            if (this.approval != null)
            createForm.approval(CreateForm.ApprovalEnum.fromValue(this.approval));
            if (this.authorSensitive != null)
            createForm.authorSensitive(CreateForm.AuthorSensitiveEnum.fromValue(this.authorSensitive));
            createForm.options(this.options);
            return createForm;
        }

        /**
         * Execute createNewForm request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            CreateForm createForm = buildBodyParams();
            ApiResponse<Form> localVarResp = createNewFormWithHttpInfo(orgId, createForm);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewForm request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            CreateForm createForm = buildBodyParams();
            return createNewFormWithHttpInfo(orgId, createForm);
        }

        /**
         * Execute createNewForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            CreateForm createForm = buildBodyParams();
            return createNewFormAsync(orgId, createForm, _callback);
        }
    }

    /**
     * Create a form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFormRequestBuilder createNewForm(String label, List<FormField> fields, List<FormBlock> blocks, String status, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
        if (blocks == null) throw new IllegalArgumentException("\"blocks\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewFormRequestBuilder(label, fields, blocks, status, orgId);
    }
    private okhttp3.Call deleteFormByIdCall(String orgId, String formId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFormByIdValidateBeforeCall(String orgId, String formId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteFormById(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling deleteFormById(Async)");
        }

        return deleteFormByIdCall(orgId, formId, _callback);

    }


    private ApiResponse<Void> deleteFormByIdWithHttpInfo(String orgId, String formId) throws ApiException {
        okhttp3.Call localVarCall = deleteFormByIdValidateBeforeCall(orgId, formId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFormByIdAsync(String orgId, String formId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFormByIdValidateBeforeCall(orgId, formId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFormByIdRequestBuilder {
        private final String orgId;
        private final String formId;

        private DeleteFormByIdRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Build call for deleteFormById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFormByIdCall(orgId, formId, _callback);
        }


        /**
         * Execute deleteFormById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFormByIdWithHttpInfo(orgId, formId);
        }

        /**
         * Execute deleteFormById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFormByIdWithHttpInfo(orgId, formId);
        }

        /**
         * Execute deleteFormById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFormByIdAsync(orgId, formId, _callback);
        }
    }

    /**
     * Delete a form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return DeleteFormByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFormByIdRequestBuilder deleteFormById(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new DeleteFormByIdRequestBuilder(orgId, formId);
    }
    private okhttp3.Call deleteFormById_0Call(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFormById_0ValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteFormById_0(Async)");
        }

        return deleteFormById_0Call(orgId, requestBody, _callback);

    }


    private ApiResponse<Void> deleteFormById_0WithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteFormById_0ValidateBeforeCall(orgId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFormById_0Async(String orgId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFormById_0ValidateBeforeCall(orgId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFormById0RequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private DeleteFormById0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody Form ids (optional)
         * @return DeleteFormById0RequestBuilder
         */
        public DeleteFormById0RequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for deleteFormById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteFormById_0Call(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute deleteFormById_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            deleteFormById_0WithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute deleteFormById_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteFormById_0WithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute deleteFormById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteFormById_0Async(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete forms
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteFormById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFormById0RequestBuilder deleteFormById_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteFormById0RequestBuilder(orgId);
    }
    private okhttp3.Call deleteFormDraftCall(String orgId, String draftId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/draft/{draftId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "draftId" + "}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFormDraftValidateBeforeCall(String orgId, String draftId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteFormDraft(Async)");
        }

        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling deleteFormDraft(Async)");
        }

        return deleteFormDraftCall(orgId, draftId, _callback);

    }


    private ApiResponse<FormDraft> deleteFormDraftWithHttpInfo(String orgId, String draftId) throws ApiException {
        okhttp3.Call localVarCall = deleteFormDraftValidateBeforeCall(orgId, draftId, null);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFormDraftAsync(String orgId, String draftId, final ApiCallback<FormDraft> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFormDraftValidateBeforeCall(orgId, draftId, _callback);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFormDraftRequestBuilder {
        private final String orgId;
        private final String draftId;

        private DeleteFormDraftRequestBuilder(String orgId, String draftId) {
            this.orgId = orgId;
            this.draftId = draftId;
        }

        /**
         * Build call for deleteFormDraft
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFormDraftCall(orgId, draftId, _callback);
        }


        /**
         * Execute deleteFormDraft request
         * @return FormDraft
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public FormDraft execute() throws ApiException {
            ApiResponse<FormDraft> localVarResp = deleteFormDraftWithHttpInfo(orgId, draftId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFormDraft request with HTTP info returned
         * @return ApiResponse&lt;FormDraft&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormDraft> executeWithHttpInfo() throws ApiException {
            return deleteFormDraftWithHttpInfo(orgId, draftId);
        }

        /**
         * Execute deleteFormDraft request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormDraft> _callback) throws ApiException {
            return deleteFormDraftAsync(orgId, draftId, _callback);
        }
    }

    /**
     * Delete the given form draft
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param draftId Form Draft id (required)
     * @return DeleteFormDraftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFormDraftRequestBuilder deleteFormDraft(String orgId, String draftId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (draftId == null) throw new IllegalArgumentException("\"draftId\" is required but got null");
            

        return new DeleteFormDraftRequestBuilder(orgId, draftId);
    }
    private okhttp3.Call getApplicableFormsForPersonCall(String orgId, String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/person/{personId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicableFormsForPersonValidateBeforeCall(String orgId, String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getApplicableFormsForPerson(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getApplicableFormsForPerson(Async)");
        }

        return getApplicableFormsForPersonCall(orgId, personId, _callback);

    }


    private ApiResponse<ResultsForm> getApplicableFormsForPersonWithHttpInfo(String orgId, String personId) throws ApiException {
        okhttp3.Call localVarCall = getApplicableFormsForPersonValidateBeforeCall(orgId, personId, null);
        Type localVarReturnType = new TypeToken<ResultsForm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApplicableFormsForPersonAsync(String orgId, String personId, final ApiCallback<ResultsForm> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicableFormsForPersonValidateBeforeCall(orgId, personId, _callback);
        Type localVarReturnType = new TypeToken<ResultsForm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApplicableFormsForPersonRequestBuilder {
        private final String orgId;
        private final String personId;

        private GetApplicableFormsForPersonRequestBuilder(String orgId, String personId) {
            this.orgId = orgId;
            this.personId = personId;
        }

        /**
         * Build call for getApplicableFormsForPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApplicableFormsForPersonCall(orgId, personId, _callback);
        }


        /**
         * Execute getApplicableFormsForPerson request
         * @return ResultsForm
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsForm execute() throws ApiException {
            ApiResponse<ResultsForm> localVarResp = getApplicableFormsForPersonWithHttpInfo(orgId, personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApplicableFormsForPerson request with HTTP info returned
         * @return ApiResponse&lt;ResultsForm&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsForm> executeWithHttpInfo() throws ApiException {
            return getApplicableFormsForPersonWithHttpInfo(orgId, personId);
        }

        /**
         * Execute getApplicableFormsForPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsForm> _callback) throws ApiException {
            return getApplicableFormsForPersonAsync(orgId, personId, _callback);
        }
    }

    /**
     * Return all active forms applicable to a particular person
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param personId Person id (required)
     * @return GetApplicableFormsForPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetApplicableFormsForPersonRequestBuilder getApplicableFormsForPerson(String orgId, String personId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetApplicableFormsForPersonRequestBuilder(orgId, personId);
    }
    private okhttp3.Call getByIdCall(String orgId, String formId, String evalJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (evalJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("evalJobId", evalJobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String formId, String evalJobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getById(Async)");
        }

        return getByIdCall(orgId, formId, evalJobId, _callback);

    }


    private ApiResponse<Form> getByIdWithHttpInfo(String orgId, String formId, String evalJobId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, formId, evalJobId, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String formId, String evalJobId, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, formId, evalJobId, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String formId;
        private String evalJobId;

        private GetByIdRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set evalJobId
         * @param evalJobId Evaluate any expressions inside the form relative to a particular job (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder evalJobId(String evalJobId) {
            this.evalJobId = evalJobId;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, formId, evalJobId, _callback);
        }


        /**
         * Execute getById request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            ApiResponse<Form> localVarResp = getByIdWithHttpInfo(orgId, formId, evalJobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, formId, evalJobId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            return getByIdAsync(orgId, formId, evalJobId, _callback);
        }
    }

    /**
     * Return a particular form by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, formId);
    }
    private okhttp3.Call getCurrentStateOfDraftDataCall(String orgId, String formId, String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/draft"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personId", personId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentStateOfDraftDataValidateBeforeCall(String orgId, String formId, String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCurrentStateOfDraftData(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling getCurrentStateOfDraftData(Async)");
        }

        return getCurrentStateOfDraftDataCall(orgId, formId, personId, _callback);

    }


    private ApiResponse<FormDraft> getCurrentStateOfDraftDataWithHttpInfo(String orgId, String formId, String personId) throws ApiException {
        okhttp3.Call localVarCall = getCurrentStateOfDraftDataValidateBeforeCall(orgId, formId, personId, null);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentStateOfDraftDataAsync(String orgId, String formId, String personId, final ApiCallback<FormDraft> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentStateOfDraftDataValidateBeforeCall(orgId, formId, personId, _callback);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentStateOfDraftDataRequestBuilder {
        private final String orgId;
        private final String formId;
        private String personId;

        private GetCurrentStateOfDraftDataRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set personId
         * @param personId Person id (optional)
         * @return GetCurrentStateOfDraftDataRequestBuilder
         */
        public GetCurrentStateOfDraftDataRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Build call for getCurrentStateOfDraftData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentStateOfDraftDataCall(orgId, formId, personId, _callback);
        }


        /**
         * Execute getCurrentStateOfDraftData request
         * @return FormDraft
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public FormDraft execute() throws ApiException {
            ApiResponse<FormDraft> localVarResp = getCurrentStateOfDraftDataWithHttpInfo(orgId, formId, personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentStateOfDraftData request with HTTP info returned
         * @return ApiResponse&lt;FormDraft&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormDraft> executeWithHttpInfo() throws ApiException {
            return getCurrentStateOfDraftDataWithHttpInfo(orgId, formId, personId);
        }

        /**
         * Execute getCurrentStateOfDraftData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormDraft> _callback) throws ApiException {
            return getCurrentStateOfDraftDataAsync(orgId, formId, personId, _callback);
        }
    }

    /**
     * Get the current state of form draft data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return GetCurrentStateOfDraftDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentStateOfDraftDataRequestBuilder getCurrentStateOfDraftData(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new GetCurrentStateOfDraftDataRequestBuilder(orgId, formId);
    }
    private okhttp3.Call listAvailableFormsCall(String orgId, String targetId, String targetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/available"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetType", targetType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAvailableFormsValidateBeforeCall(String orgId, String targetId, String targetType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listAvailableForms(Async)");
        }

        return listAvailableFormsCall(orgId, targetId, targetType, _callback);

    }


    private ApiResponse<ResultsFormSummary> listAvailableFormsWithHttpInfo(String orgId, String targetId, String targetType) throws ApiException {
        okhttp3.Call localVarCall = listAvailableFormsValidateBeforeCall(orgId, targetId, targetType, null);
        Type localVarReturnType = new TypeToken<ResultsFormSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAvailableFormsAsync(String orgId, String targetId, String targetType, final ApiCallback<ResultsFormSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAvailableFormsValidateBeforeCall(orgId, targetId, targetType, _callback);
        Type localVarReturnType = new TypeToken<ResultsFormSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAvailableFormsRequestBuilder {
        private final String orgId;
        private String targetId;
        private String targetType;

        private ListAvailableFormsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set targetId
         * @param targetId Target id (optional)
         * @return ListAvailableFormsRequestBuilder
         */
        public ListAvailableFormsRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType Target type (optional)
         * @return ListAvailableFormsRequestBuilder
         */
        public ListAvailableFormsRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Build call for listAvailableForms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAvailableFormsCall(orgId, targetId, targetType, _callback);
        }


        /**
         * Execute listAvailableForms request
         * @return ResultsFormSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsFormSummary execute() throws ApiException {
            ApiResponse<ResultsFormSummary> localVarResp = listAvailableFormsWithHttpInfo(orgId, targetId, targetType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAvailableForms request with HTTP info returned
         * @return ApiResponse&lt;ResultsFormSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsFormSummary> executeWithHttpInfo() throws ApiException {
            return listAvailableFormsWithHttpInfo(orgId, targetId, targetType);
        }

        /**
         * Execute listAvailableForms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsFormSummary> _callback) throws ApiException {
            return listAvailableFormsAsync(orgId, targetId, targetType, _callback);
        }
    }

    /**
     * Return all active forms applicable to a particular entity
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ListAvailableFormsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListAvailableFormsRequestBuilder listAvailableForms(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListAvailableFormsRequestBuilder(orgId);
    }
    private okhttp3.Call listOrgFormsCall(String orgId, String status, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrgFormsValidateBeforeCall(String orgId, String status, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listOrgForms(Async)");
        }

        return listOrgFormsCall(orgId, status, from, limit, _callback);

    }


    private ApiResponse<ResultsForm> listOrgFormsWithHttpInfo(String orgId, String status, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listOrgFormsValidateBeforeCall(orgId, status, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsForm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOrgFormsAsync(String orgId, String status, String from, Integer limit, final ApiCallback<ResultsForm> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrgFormsValidateBeforeCall(orgId, status, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsForm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOrgFormsRequestBuilder {
        private final String orgId;
        private String status;
        private String from;
        private Integer limit;

        private ListOrgFormsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set status
         * @param status Status to filter by (optional)
         * @return ListOrgFormsRequestBuilder
         */
        public ListOrgFormsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set from
         * @param from Form id to start paginating from (optional)
         * @return ListOrgFormsRequestBuilder
         */
        public ListOrgFormsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListOrgFormsRequestBuilder
         */
        public ListOrgFormsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listOrgForms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOrgFormsCall(orgId, status, from, limit, _callback);
        }


        /**
         * Execute listOrgForms request
         * @return ResultsForm
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsForm execute() throws ApiException {
            ApiResponse<ResultsForm> localVarResp = listOrgFormsWithHttpInfo(orgId, status, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOrgForms request with HTTP info returned
         * @return ApiResponse&lt;ResultsForm&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsForm> executeWithHttpInfo() throws ApiException {
            return listOrgFormsWithHttpInfo(orgId, status, from, limit);
        }

        /**
         * Execute listOrgForms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsForm> _callback) throws ApiException {
            return listOrgFormsAsync(orgId, status, from, limit, _callback);
        }
    }

    /**
     * Return all forms in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ListOrgFormsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListOrgFormsRequestBuilder listOrgForms(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListOrgFormsRequestBuilder(orgId);
    }
    private okhttp3.Call renderForDisplayCall(String orgId, String formId, String targetId, String targetType, String formResponseId, String formResponseChangeId, String formVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/render"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetType", targetType));
        }

        if (formResponseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formResponseId", formResponseId));
        }

        if (formResponseChangeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formResponseChangeId", formResponseChangeId));
        }

        if (formVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formVersionId", formVersionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderForDisplayValidateBeforeCall(String orgId, String formId, String targetId, String targetType, String formResponseId, String formResponseChangeId, String formVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling renderForDisplay(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling renderForDisplay(Async)");
        }

        return renderForDisplayCall(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId, _callback);

    }


    private ApiResponse<FormRender> renderForDisplayWithHttpInfo(String orgId, String formId, String targetId, String targetType, String formResponseId, String formResponseChangeId, String formVersionId) throws ApiException {
        okhttp3.Call localVarCall = renderForDisplayValidateBeforeCall(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId, null);
        Type localVarReturnType = new TypeToken<FormRender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renderForDisplayAsync(String orgId, String formId, String targetId, String targetType, String formResponseId, String formResponseChangeId, String formVersionId, final ApiCallback<FormRender> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderForDisplayValidateBeforeCall(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId, _callback);
        Type localVarReturnType = new TypeToken<FormRender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenderForDisplayRequestBuilder {
        private final String orgId;
        private final String formId;
        private String targetId;
        private String targetType;
        private String formResponseId;
        private String formResponseChangeId;
        private String formVersionId;

        private RenderForDisplayRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set targetId
         * @param targetId Target id (optional)
         * @return RenderForDisplayRequestBuilder
         */
        public RenderForDisplayRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType Target type (optional)
         * @return RenderForDisplayRequestBuilder
         */
        public RenderForDisplayRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Set formResponseId
         * @param formResponseId Form response id, if editing a prior form response (unsupported) (optional)
         * @return RenderForDisplayRequestBuilder
         */
        public RenderForDisplayRequestBuilder formResponseId(String formResponseId) {
            this.formResponseId = formResponseId;
            return this;
        }
        
        /**
         * Set formResponseChangeId
         * @param formResponseChangeId Form response change id, if editing a prior form response (deprecated) (optional)
         * @return RenderForDisplayRequestBuilder
         */
        public RenderForDisplayRequestBuilder formResponseChangeId(String formResponseChangeId) {
            this.formResponseChangeId = formResponseChangeId;
            return this;
        }
        
        /**
         * Set formVersionId
         * @param formVersionId Form version id, if rendering a previous version of the form (optional)
         * @return RenderForDisplayRequestBuilder
         */
        public RenderForDisplayRequestBuilder formVersionId(String formVersionId) {
            this.formVersionId = formVersionId;
            return this;
        }
        
        /**
         * Build call for renderForDisplay
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return renderForDisplayCall(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId, _callback);
        }


        /**
         * Execute renderForDisplay request
         * @return FormRender
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public FormRender execute() throws ApiException {
            ApiResponse<FormRender> localVarResp = renderForDisplayWithHttpInfo(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renderForDisplay request with HTTP info returned
         * @return ApiResponse&lt;FormRender&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormRender> executeWithHttpInfo() throws ApiException {
            return renderForDisplayWithHttpInfo(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId);
        }

        /**
         * Execute renderForDisplay request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormRender> _callback) throws ApiException {
            return renderForDisplayAsync(orgId, formId, targetId, targetType, formResponseId, formResponseChangeId, formVersionId, _callback);
        }
    }

    /**
     * Render a form for display
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return RenderForDisplayRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RenderForDisplayRequestBuilder renderForDisplay(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new RenderForDisplayRequestBuilder(orgId, formId);
    }
    private okhttp3.Call rerenderQuestionUpdateCall(String orgId, String formId, String updateQuestionId, String targetId, String targetType, String formVersionId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/rerender/question/{updateQuestionId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()))
            .replace("{" + "updateQuestionId" + "}", localVarApiClient.escapeString(updateQuestionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetType", targetType));
        }

        if (formVersionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formVersionId", formVersionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rerenderQuestionUpdateValidateBeforeCall(String orgId, String formId, String updateQuestionId, String targetId, String targetType, String formVersionId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling rerenderQuestionUpdate(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling rerenderQuestionUpdate(Async)");
        }

        // verify the required parameter 'updateQuestionId' is set
        if (updateQuestionId == null) {
            throw new ApiException("Missing the required parameter 'updateQuestionId' when calling rerenderQuestionUpdate(Async)");
        }

        return rerenderQuestionUpdateCall(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody, _callback);

    }


    private ApiResponse<FormRerender> rerenderQuestionUpdateWithHttpInfo(String orgId, String formId, String updateQuestionId, String targetId, String targetType, String formVersionId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = rerenderQuestionUpdateValidateBeforeCall(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody, null);
        Type localVarReturnType = new TypeToken<FormRerender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rerenderQuestionUpdateAsync(String orgId, String formId, String updateQuestionId, String targetId, String targetType, String formVersionId, Map<String, Object> requestBody, final ApiCallback<FormRerender> _callback) throws ApiException {

        okhttp3.Call localVarCall = rerenderQuestionUpdateValidateBeforeCall(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<FormRerender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RerenderQuestionUpdateRequestBuilder {
        private final String orgId;
        private final String formId;
        private final String updateQuestionId;
        private String targetId;
        private String targetType;
        private String formVersionId;

        private RerenderQuestionUpdateRequestBuilder(String orgId, String formId, String updateQuestionId) {
            this.orgId = orgId;
            this.formId = formId;
            this.updateQuestionId = updateQuestionId;
        }

        /**
         * Set targetId
         * @param targetId Target id (optional)
         * @return RerenderQuestionUpdateRequestBuilder
         */
        public RerenderQuestionUpdateRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType Target type (optional)
         * @return RerenderQuestionUpdateRequestBuilder
         */
        public RerenderQuestionUpdateRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Set formVersionId
         * @param formVersionId Form version id, if rendering a previous version of the form (optional)
         * @return RerenderQuestionUpdateRequestBuilder
         */
        public RerenderQuestionUpdateRequestBuilder formVersionId(String formVersionId) {
            this.formVersionId = formVersionId;
            return this;
        }
        
        /**
         * Build call for rerenderQuestionUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return rerenderQuestionUpdateCall(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute rerenderQuestionUpdate request
         * @return FormRerender
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public FormRerender execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<FormRerender> localVarResp = rerenderQuestionUpdateWithHttpInfo(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rerenderQuestionUpdate request with HTTP info returned
         * @return ApiResponse&lt;FormRerender&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormRerender> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return rerenderQuestionUpdateWithHttpInfo(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody);
        }

        /**
         * Execute rerenderQuestionUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormRerender> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return rerenderQuestionUpdateAsync(orgId, formId, updateQuestionId, targetId, targetType, formVersionId, requestBody, _callback);
        }
    }

    /**
     * Re-render form blocks based on changes to the form values
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @param updateQuestionId The question id that is being updated to trigger the re-render (required)
     * @return RerenderQuestionUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RerenderQuestionUpdateRequestBuilder rerenderQuestionUpdate(String orgId, String formId, String updateQuestionId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        if (updateQuestionId == null) throw new IllegalArgumentException("\"updateQuestionId\" is required but got null");
            

        return new RerenderQuestionUpdateRequestBuilder(orgId, formId, updateQuestionId);
    }
    private okhttp3.Call sendEmailsAndChatNotificationsCall(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formCollectRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/collect"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailsAndChatNotificationsValidateBeforeCall(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendEmailsAndChatNotifications(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling sendEmailsAndChatNotifications(Async)");
        }

        return sendEmailsAndChatNotificationsCall(orgId, formId, formCollectRequest, _callback);

    }


    private ApiResponse<Form> sendEmailsAndChatNotificationsWithHttpInfo(String orgId, String formId, FormCollectRequest formCollectRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailsAndChatNotificationsValidateBeforeCall(orgId, formId, formCollectRequest, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailsAndChatNotificationsAsync(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailsAndChatNotificationsValidateBeforeCall(orgId, formId, formCollectRequest, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendEmailsAndChatNotificationsRequestBuilder {
        private final Boolean preview;
        private final String orgId;
        private final String formId;
        private String assessmentId;
        private String targetFilter;
        private String submitFilter;
        private String message;

        private SendEmailsAndChatNotificationsRequestBuilder(Boolean preview, String orgId, String formId) {
            this.preview = preview;
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set assessmentId
         * @param assessmentId the assessment id that this form collection request aligns to (for example a performance review cycle) (optional)
         * @return SendEmailsAndChatNotificationsRequestBuilder
         */
        public SendEmailsAndChatNotificationsRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set targetFilter
         * @param targetFilter filter query to apply on who should receive the form collection request (optional)
         * @return SendEmailsAndChatNotificationsRequestBuilder
         */
        public SendEmailsAndChatNotificationsRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set submitFilter
         * @param submitFilter Filter to for jobs/person that match via relationship (optional)
         * @return SendEmailsAndChatNotificationsRequestBuilder
         */
        public SendEmailsAndChatNotificationsRequestBuilder submitFilter(String submitFilter) {
            this.submitFilter = submitFilter;
            return this;
        }
        
        /**
         * Set message
         * @param message message to include in notification (optional)
         * @return SendEmailsAndChatNotificationsRequestBuilder
         */
        public SendEmailsAndChatNotificationsRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for sendEmailsAndChatNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendEmailsAndChatNotificationsCall(orgId, formId, formCollectRequest, _callback);
        }

        private FormCollectRequest buildBodyParams() {
            FormCollectRequest formCollectRequest = new FormCollectRequest();
            formCollectRequest.assessmentId(this.assessmentId);
            formCollectRequest.targetFilter(this.targetFilter);
            formCollectRequest.submitFilter(this.submitFilter);
            formCollectRequest.message(this.message);
            formCollectRequest.preview(this.preview);
            return formCollectRequest;
        }

        /**
         * Execute sendEmailsAndChatNotifications request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            ApiResponse<Form> localVarResp = sendEmailsAndChatNotificationsWithHttpInfo(orgId, formId, formCollectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendEmailsAndChatNotifications request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendEmailsAndChatNotificationsWithHttpInfo(orgId, formId, formCollectRequest);
        }

        /**
         * Execute sendEmailsAndChatNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendEmailsAndChatNotificationsAsync(orgId, formId, formCollectRequest, _callback);
        }
    }

    /**
     * Collect data for an existing form, sending emails and chat notifications to people being requested
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return SendEmailsAndChatNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailsAndChatNotificationsRequestBuilder sendEmailsAndChatNotifications(Boolean preview, String orgId, String formId) throws IllegalArgumentException {
        if (preview == null) throw new IllegalArgumentException("\"preview\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SendEmailsAndChatNotificationsRequestBuilder(preview, orgId, formId);
    }
    private okhttp3.Call sendReminderNotificationCall(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formCollectRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/remind"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderNotificationValidateBeforeCall(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendReminderNotification(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling sendReminderNotification(Async)");
        }

        return sendReminderNotificationCall(orgId, formId, formCollectRequest, _callback);

    }


    private ApiResponse<Form> sendReminderNotificationWithHttpInfo(String orgId, String formId, FormCollectRequest formCollectRequest) throws ApiException {
        okhttp3.Call localVarCall = sendReminderNotificationValidateBeforeCall(orgId, formId, formCollectRequest, null);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendReminderNotificationAsync(String orgId, String formId, FormCollectRequest formCollectRequest, final ApiCallback<Form> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderNotificationValidateBeforeCall(orgId, formId, formCollectRequest, _callback);
        Type localVarReturnType = new TypeToken<Form>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendReminderNotificationRequestBuilder {
        private final Boolean preview;
        private final String orgId;
        private final String formId;
        private String assessmentId;
        private String targetFilter;
        private String submitFilter;
        private String message;

        private SendReminderNotificationRequestBuilder(Boolean preview, String orgId, String formId) {
            this.preview = preview;
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set assessmentId
         * @param assessmentId the assessment id that this form collection request aligns to (for example a performance review cycle) (optional)
         * @return SendReminderNotificationRequestBuilder
         */
        public SendReminderNotificationRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set targetFilter
         * @param targetFilter filter query to apply on who should receive the form collection request (optional)
         * @return SendReminderNotificationRequestBuilder
         */
        public SendReminderNotificationRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set submitFilter
         * @param submitFilter Filter to for jobs/person that match via relationship (optional)
         * @return SendReminderNotificationRequestBuilder
         */
        public SendReminderNotificationRequestBuilder submitFilter(String submitFilter) {
            this.submitFilter = submitFilter;
            return this;
        }
        
        /**
         * Set message
         * @param message message to include in notification (optional)
         * @return SendReminderNotificationRequestBuilder
         */
        public SendReminderNotificationRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for sendReminderNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendReminderNotificationCall(orgId, formId, formCollectRequest, _callback);
        }

        private FormCollectRequest buildBodyParams() {
            FormCollectRequest formCollectRequest = new FormCollectRequest();
            formCollectRequest.assessmentId(this.assessmentId);
            formCollectRequest.targetFilter(this.targetFilter);
            formCollectRequest.submitFilter(this.submitFilter);
            formCollectRequest.message(this.message);
            formCollectRequest.preview(this.preview);
            return formCollectRequest;
        }

        /**
         * Execute sendReminderNotification request
         * @return Form
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Form execute() throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            ApiResponse<Form> localVarResp = sendReminderNotificationWithHttpInfo(orgId, formId, formCollectRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendReminderNotification request with HTTP info returned
         * @return ApiResponse&lt;Form&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Form> executeWithHttpInfo() throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendReminderNotificationWithHttpInfo(orgId, formId, formCollectRequest);
        }

        /**
         * Execute sendReminderNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Form> _callback) throws ApiException {
            FormCollectRequest formCollectRequest = buildBodyParams();
            return sendReminderNotificationAsync(orgId, formId, formCollectRequest, _callback);
        }
    }

    /**
     * Sends reminder for a form with existing tasks, sending emails/chat notifications to people being requested
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return SendReminderNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SendReminderNotificationRequestBuilder sendReminderNotification(Boolean preview, String orgId, String formId) throws IllegalArgumentException {
        if (preview == null) throw new IllegalArgumentException("\"preview\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SendReminderNotificationRequestBuilder(preview, orgId, formId);
    }
    private okhttp3.Call submitDraftDataCall(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formSubmitRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/draft"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitDraftDataValidateBeforeCall(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling submitDraftData(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling submitDraftData(Async)");
        }

        return submitDraftDataCall(orgId, formId, formSubmitRequest, _callback);

    }


    private ApiResponse<FormDraft> submitDraftDataWithHttpInfo(String orgId, String formId, FormSubmitRequest formSubmitRequest) throws ApiException {
        okhttp3.Call localVarCall = submitDraftDataValidateBeforeCall(orgId, formId, formSubmitRequest, null);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitDraftDataAsync(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback<FormDraft> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitDraftDataValidateBeforeCall(orgId, formId, formSubmitRequest, _callback);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitDraftDataRequestBuilder {
        private final String personId;
        private final Map<String, Object> data;
        private final String orgId;
        private final String formId;
        private Map<String, Object> blocksData;

        private SubmitDraftDataRequestBuilder(String personId, Map<String, Object> data, String orgId, String formId) {
            this.personId = personId;
            this.data = data;
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set blocksData
         * @param blocksData data being submitted (optional)
         * @return SubmitDraftDataRequestBuilder
         */
        public SubmitDraftDataRequestBuilder blocksData(Map<String, Object> blocksData) {
            this.blocksData = blocksData;
            return this;
        }
        
        /**
         * Build call for submitDraftData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitDraftDataCall(orgId, formId, formSubmitRequest, _callback);
        }

        private FormSubmitRequest buildBodyParams() {
            FormSubmitRequest formSubmitRequest = new FormSubmitRequest();
            formSubmitRequest.personId(this.personId);
            formSubmitRequest.data(this.data);
            formSubmitRequest.blocksData(this.blocksData);
            return formSubmitRequest;
        }

        /**
         * Execute submitDraftData request
         * @return FormDraft
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public FormDraft execute() throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            ApiResponse<FormDraft> localVarResp = submitDraftDataWithHttpInfo(orgId, formId, formSubmitRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitDraftData request with HTTP info returned
         * @return ApiResponse&lt;FormDraft&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormDraft> executeWithHttpInfo() throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitDraftDataWithHttpInfo(orgId, formId, formSubmitRequest);
        }

        /**
         * Execute submitDraftData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormDraft> _callback) throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitDraftDataAsync(orgId, formId, formSubmitRequest, _callback);
        }
    }

    /**
     * Submit draft data from a form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Org id (required)
     * @return SubmitDraftDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SubmitDraftDataRequestBuilder submitDraftData(String personId, Map<String, Object> data, String orgId, String formId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SubmitDraftDataRequestBuilder(personId, data, orgId, formId);
    }
    private okhttp3.Call submitFormDataCall(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/submit"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetType", targetType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFormDataValidateBeforeCall(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling submitFormData(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling submitFormData(Async)");
        }

        return submitFormDataCall(orgId, formId, targetId, targetType, requestBody, _callback);

    }


    private ApiResponse<Void> submitFormDataWithHttpInfo(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = submitFormDataValidateBeforeCall(orgId, formId, targetId, targetType, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitFormDataAsync(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFormDataValidateBeforeCall(orgId, formId, targetId, targetType, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitFormDataRequestBuilder {
        private final String orgId;
        private final String formId;
        private String targetId;
        private String targetType;

        private SubmitFormDataRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set targetId
         * @param targetId Target id (optional)
         * @return SubmitFormDataRequestBuilder
         */
        public SubmitFormDataRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType Target type (optional)
         * @return SubmitFormDataRequestBuilder
         */
        public SubmitFormDataRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Build call for submitFormData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDataCall(orgId, formId, targetId, targetType, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute submitFormData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            submitFormDataWithHttpInfo(orgId, formId, targetId, targetType, requestBody);
        }

        /**
         * Execute submitFormData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDataWithHttpInfo(orgId, formId, targetId, targetType, requestBody);
        }

        /**
         * Execute submitFormData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDataAsync(orgId, formId, targetId, targetType, requestBody, _callback);
        }
    }

    /**
     * Submit data from a form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return SubmitFormDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SubmitFormDataRequestBuilder submitFormData(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SubmitFormDataRequestBuilder(orgId, formId);
    }
    private okhttp3.Call submitFormDraftCall(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}/submit/draft"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (targetType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetType", targetType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFormDraftValidateBeforeCall(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling submitFormDraft(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling submitFormDraft(Async)");
        }

        return submitFormDraftCall(orgId, formId, targetId, targetType, requestBody, _callback);

    }


    private ApiResponse<FormDraft> submitFormDraftWithHttpInfo(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = submitFormDraftValidateBeforeCall(orgId, formId, targetId, targetType, requestBody, null);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitFormDraftAsync(String orgId, String formId, String targetId, String targetType, Map<String, Object> requestBody, final ApiCallback<FormDraft> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFormDraftValidateBeforeCall(orgId, formId, targetId, targetType, requestBody, _callback);
        Type localVarReturnType = new TypeToken<FormDraft>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitFormDraftRequestBuilder {
        private final String orgId;
        private final String formId;
        private String targetId;
        private String targetType;

        private SubmitFormDraftRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set targetId
         * @param targetId Target id (optional)
         * @return SubmitFormDraftRequestBuilder
         */
        public SubmitFormDraftRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType Target type (optional)
         * @return SubmitFormDraftRequestBuilder
         */
        public SubmitFormDraftRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Build call for submitFormDraft
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDraftCall(orgId, formId, targetId, targetType, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute submitFormDraft request
         * @return FormDraft
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public FormDraft execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<FormDraft> localVarResp = submitFormDraftWithHttpInfo(orgId, formId, targetId, targetType, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitFormDraft request with HTTP info returned
         * @return ApiResponse&lt;FormDraft&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormDraft> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDraftWithHttpInfo(orgId, formId, targetId, targetType, requestBody);
        }

        /**
         * Execute submitFormDraft request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormDraft> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return submitFormDraftAsync(orgId, formId, targetId, targetType, requestBody, _callback);
        }
    }

    /**
     * Submit data from a form draft
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return SubmitFormDraftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SubmitFormDraftRequestBuilder submitFormDraft(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SubmitFormDraftRequestBuilder(orgId, formId);
    }
    private okhttp3.Call submitFormResponseCall(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formSubmitRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFormResponseValidateBeforeCall(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling submitFormResponse(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling submitFormResponse(Async)");
        }

        return submitFormResponseCall(orgId, formId, formSubmitRequest, _callback);

    }


    private ApiResponse<Void> submitFormResponseWithHttpInfo(String orgId, String formId, FormSubmitRequest formSubmitRequest) throws ApiException {
        okhttp3.Call localVarCall = submitFormResponseValidateBeforeCall(orgId, formId, formSubmitRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitFormResponseAsync(String orgId, String formId, FormSubmitRequest formSubmitRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFormResponseValidateBeforeCall(orgId, formId, formSubmitRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitFormResponseRequestBuilder {
        private final String personId;
        private final Map<String, Object> data;
        private final String orgId;
        private final String formId;
        private Map<String, Object> blocksData;

        private SubmitFormResponseRequestBuilder(String personId, Map<String, Object> data, String orgId, String formId) {
            this.personId = personId;
            this.data = data;
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set blocksData
         * @param blocksData data being submitted (optional)
         * @return SubmitFormResponseRequestBuilder
         */
        public SubmitFormResponseRequestBuilder blocksData(Map<String, Object> blocksData) {
            this.blocksData = blocksData;
            return this;
        }
        
        /**
         * Build call for submitFormResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitFormResponseCall(orgId, formId, formSubmitRequest, _callback);
        }

        private FormSubmitRequest buildBodyParams() {
            FormSubmitRequest formSubmitRequest = new FormSubmitRequest();
            formSubmitRequest.personId(this.personId);
            formSubmitRequest.data(this.data);
            formSubmitRequest.blocksData(this.blocksData);
            return formSubmitRequest;
        }

        /**
         * Execute submitFormResponse request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            submitFormResponseWithHttpInfo(orgId, formId, formSubmitRequest);
        }

        /**
         * Execute submitFormResponse request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitFormResponseWithHttpInfo(orgId, formId, formSubmitRequest);
        }

        /**
         * Execute submitFormResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FormSubmitRequest formSubmitRequest = buildBodyParams();
            return submitFormResponseAsync(orgId, formId, formSubmitRequest, _callback);
        }
    }

    /**
     * Submit data from a form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Org id (required)
     * @return SubmitFormResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public SubmitFormResponseRequestBuilder submitFormResponse(String personId, Map<String, Object> data, String orgId, String formId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        if (data == null) throw new IllegalArgumentException("\"data\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new SubmitFormResponseRequestBuilder(personId, data, orgId, formId);
    }
    private okhttp3.Call updateExistingFormCall(String orgId, String formId, UpdateForm updateForm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateForm;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/{formId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingFormValidateBeforeCall(String orgId, String formId, UpdateForm updateForm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingForm(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling updateExistingForm(Async)");
        }

        return updateExistingFormCall(orgId, formId, updateForm, _callback);

    }


    private ApiResponse<Void> updateExistingFormWithHttpInfo(String orgId, String formId, UpdateForm updateForm) throws ApiException {
        okhttp3.Call localVarCall = updateExistingFormValidateBeforeCall(orgId, formId, updateForm, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingFormAsync(String orgId, String formId, UpdateForm updateForm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingFormValidateBeforeCall(orgId, formId, updateForm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingFormRequestBuilder {
        private final String orgId;
        private final String formId;
        private String description;
        private String label;
        private List<FormField> fields;
        private List<FormBlock> blocks;
        private String status;
        private String type;
        private String targetType;
        private String targetFilter;
        private String submitFilter;
        private String responseReadFilter;
        private Boolean useFieldAccess;
        private String approval;
        private String authorSensitive;
        private Object options;

        private UpdateExistingFormRequestBuilder(String orgId, String formId) {
            this.orgId = orgId;
            this.formId = formId;
        }

        /**
         * Set description
         * @param description description of form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable full name of form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set fields
         * @param fields ordered list of fields being collected in this form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder fields(List<FormField> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set blocks
         * @param blocks ordered list of blocks being collected in this form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder blocks(List<FormBlock> blocks) {
            this.blocks = blocks;
            return this;
        }
        
        /**
         * Set status
         * @param status status of the form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type type of the form (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set targetType
         * @param targetType target type that the form can be filled out about (null defaults to PERSON for backwards compatibility) (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder targetType(String targetType) {
            this.targetType = targetType;
            return this;
        }
        
        /**
         * Set targetFilter
         * @param targetFilter filter that controls on which profiles this tab will appear (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set submitFilter
         * @param submitFilter filter that controls which respondents can submit this form. The form:submit permission, if present, overrides this filter (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder submitFilter(String submitFilter) {
            this.submitFilter = submitFilter;
            return this;
        }
        
        /**
         * Set responseReadFilter
         * @param responseReadFilter filter that controls who can read the form responses. The formResponse:read permission, if present, overrides this filter (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder responseReadFilter(String responseReadFilter) {
            this.responseReadFilter = responseReadFilter;
            return this;
        }
        
        /**
         * Set useFieldAccess
         * @param useFieldAccess if this option is on, then form response answers will use field permissions to determine access to those responses (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder useFieldAccess(Boolean useFieldAccess) {
            this.useFieldAccess = useFieldAccess;
            return this;
        }
        
        /**
         * Set approval
         * @param approval approval needed, if any approval is required (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder approval(String approval) {
            this.approval = approval;
            return this;
        }
        
        /**
         * Set authorSensitive
         * @param authorSensitive view sensitivity for the author of this form - the level of view access required to view the createId and updateId fields. If null, the author&#39;s identity is always visible as long as the viewer can read the form response. If set to PRIVATE, the author&#39;s identity is stored in ChartHop, but protected such that even users with sensitive access cannot access the data. If set to ANONYMOUS, the author&#39;s identity is not stored in ChartHop at all. (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder authorSensitive(String authorSensitive) {
            this.authorSensitive = authorSensitive;
            return this;
        }
        
        /**
         * Set options
         * @param options options, such as notification settings (optional)
         * @return UpdateExistingFormRequestBuilder
         */
        public UpdateExistingFormRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateExistingForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateForm updateForm = buildBodyParams();
            return updateExistingFormCall(orgId, formId, updateForm, _callback);
        }

        private UpdateForm buildBodyParams() {
            UpdateForm updateForm = new UpdateForm();
            updateForm.description(this.description);
            updateForm.label(this.label);
            updateForm.fields(this.fields);
            updateForm.blocks(this.blocks);
            if (this.status != null)
            updateForm.status(UpdateForm.StatusEnum.fromValue(this.status));
            if (this.type != null)
            updateForm.type(UpdateForm.TypeEnum.fromValue(this.type));
            if (this.targetType != null)
            updateForm.targetType(UpdateForm.TargetTypeEnum.fromValue(this.targetType));
            updateForm.targetFilter(this.targetFilter);
            updateForm.submitFilter(this.submitFilter);
            updateForm.responseReadFilter(this.responseReadFilter);
            updateForm.useFieldAccess(this.useFieldAccess);
            if (this.approval != null)
            updateForm.approval(UpdateForm.ApprovalEnum.fromValue(this.approval));
            if (this.authorSensitive != null)
            updateForm.authorSensitive(UpdateForm.AuthorSensitiveEnum.fromValue(this.authorSensitive));
            updateForm.options(this.options);
            return updateForm;
        }

        /**
         * Execute updateExistingForm request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateForm updateForm = buildBodyParams();
            updateExistingFormWithHttpInfo(orgId, formId, updateForm);
        }

        /**
         * Execute updateExistingForm request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateForm updateForm = buildBodyParams();
            return updateExistingFormWithHttpInfo(orgId, formId, updateForm);
        }

        /**
         * Execute updateExistingForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateForm updateForm = buildBodyParams();
            return updateExistingFormAsync(orgId, formId, updateForm, _callback);
        }
    }

    /**
     * Update an existing form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formId Form id (required)
     * @return UpdateExistingFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingFormRequestBuilder updateExistingForm(String orgId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new UpdateExistingFormRequestBuilder(orgId, formId);
    }
    private okhttp3.Call updateFormStatusCall(String orgId, FormStatusUpdateRequest formStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = formStatusUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form/status"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFormStatusValidateBeforeCall(String orgId, FormStatusUpdateRequest formStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateFormStatus(Async)");
        }

        return updateFormStatusCall(orgId, formStatusUpdateRequest, _callback);

    }


    private ApiResponse<Void> updateFormStatusWithHttpInfo(String orgId, FormStatusUpdateRequest formStatusUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFormStatusValidateBeforeCall(orgId, formStatusUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateFormStatusAsync(String orgId, FormStatusUpdateRequest formStatusUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFormStatusValidateBeforeCall(orgId, formStatusUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateFormStatusRequestBuilder {
        private final String updateStatus;
        private final List<String> formIds;
        private final String orgId;

        private UpdateFormStatusRequestBuilder(String updateStatus, List<String> formIds, String orgId) {
            this.updateStatus = updateStatus;
            this.formIds = formIds;
            this.orgId = orgId;
        }

        /**
         * Build call for updateFormStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FormStatusUpdateRequest formStatusUpdateRequest = buildBodyParams();
            return updateFormStatusCall(orgId, formStatusUpdateRequest, _callback);
        }

        private FormStatusUpdateRequest buildBodyParams() {
            FormStatusUpdateRequest formStatusUpdateRequest = new FormStatusUpdateRequest();
            if (this.updateStatus != null)
            formStatusUpdateRequest.updateStatus(FormStatusUpdateRequest.UpdateStatusEnum.fromValue(this.updateStatus));
            formStatusUpdateRequest.formIds(this.formIds);
            return formStatusUpdateRequest;
        }

        /**
         * Execute updateFormStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FormStatusUpdateRequest formStatusUpdateRequest = buildBodyParams();
            updateFormStatusWithHttpInfo(orgId, formStatusUpdateRequest);
        }

        /**
         * Execute updateFormStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FormStatusUpdateRequest formStatusUpdateRequest = buildBodyParams();
            return updateFormStatusWithHttpInfo(orgId, formStatusUpdateRequest);
        }

        /**
         * Execute updateFormStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FormStatusUpdateRequest formStatusUpdateRequest = buildBodyParams();
            return updateFormStatusAsync(orgId, formStatusUpdateRequest, _callback);
        }
    }

    /**
     * Update status for existing forms
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateFormStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFormStatusRequestBuilder updateFormStatus(String updateStatus, List<String> formIds, String orgId) throws IllegalArgumentException {
        if (updateStatus == null) throw new IllegalArgumentException("\"updateStatus\" is required but got null");
            

        if (formIds == null) throw new IllegalArgumentException("\"formIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateFormStatusRequestBuilder(updateStatus, formIds, orgId);
    }
}
