/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTaskConfig;
import com.konfigthis.client.model.DueDate;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.TaskConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskConfigApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskConfigApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskConfigApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewConfigCall(String orgId, CreateTaskConfig createTaskConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTaskConfig;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task-config"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewConfigValidateBeforeCall(String orgId, CreateTaskConfig createTaskConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewConfig(Async)");
        }

        return createNewConfigCall(orgId, createTaskConfig, _callback);

    }


    private ApiResponse<TaskConfig> createNewConfigWithHttpInfo(String orgId, CreateTaskConfig createTaskConfig) throws ApiException {
        okhttp3.Call localVarCall = createNewConfigValidateBeforeCall(orgId, createTaskConfig, null);
        Type localVarReturnType = new TypeToken<TaskConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewConfigAsync(String orgId, CreateTaskConfig createTaskConfig, final ApiCallback<TaskConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewConfigValidateBeforeCall(orgId, createTaskConfig, _callback);
        Type localVarReturnType = new TypeToken<TaskConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewConfigRequestBuilder {
        private final String entityId;
        private final String type;
        private final String pastDueAction;
        private final String orgId;
        private String description;
        private String assessmentId;
        private String parentEntityId;
        private DueDate dueDate;
        private Boolean isSkippable;
        private String label;
        private String deleteId;
        private String deleteAt;

        private CreateNewConfigRequestBuilder(String entityId, String type, String pastDueAction, String orgId) {
            this.entityId = entityId;
            this.type = type;
            this.pastDueAction = pastDueAction;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description description for all tasks associated with the config that should be used in notifications (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId parent assessment id that this task config belongs to (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set parentEntityId
         * @param parentEntityId parent entity id that this task config belongs to, should be used with entityId (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder parentEntityId(String parentEntityId) {
            this.parentEntityId = parentEntityId;
            return this;
        }
        
        /**
         * Set dueDate
         * @param dueDate  (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder dueDate(DueDate dueDate) {
            this.dueDate = dueDate;
            return this;
        }
        
        /**
         * Set isSkippable
         * @param isSkippable sets isSkippable on the task (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder isSkippable(Boolean isSkippable) {
            this.isSkippable = isSkippable;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable label that should be used for all tasks associated with the config as the task name (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set deleteId
         * @param deleteId deleted by user id (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder deleteId(String deleteId) {
            this.deleteId = deleteId;
            return this;
        }
        
        /**
         * Set deleteAt
         * @param deleteAt deleted timestamp (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder deleteAt(String deleteAt) {
            this.deleteAt = deleteAt;
            return this;
        }
        
        /**
         * Build call for createNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTaskConfig createTaskConfig = buildBodyParams();
            return createNewConfigCall(orgId, createTaskConfig, _callback);
        }

        private CreateTaskConfig buildBodyParams() {
            CreateTaskConfig createTaskConfig = new CreateTaskConfig();
            createTaskConfig.description(this.description);
            createTaskConfig.assessmentId(this.assessmentId);
            createTaskConfig.parentEntityId(this.parentEntityId);
            createTaskConfig.entityId(this.entityId);
            if (this.type != null)
            createTaskConfig.type(CreateTaskConfig.TypeEnum.fromValue(this.type));
            createTaskConfig.dueDate(this.dueDate);
            if (this.pastDueAction != null)
            createTaskConfig.pastDueAction(CreateTaskConfig.PastDueActionEnum.fromValue(this.pastDueAction));
            createTaskConfig.isSkippable(this.isSkippable);
            createTaskConfig.label(this.label);
            createTaskConfig.deleteId(this.deleteId);
            createTaskConfig.deleteAt(this.deleteAt);
            return createTaskConfig;
        }

        /**
         * Execute createNewConfig request
         * @return TaskConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public TaskConfig execute() throws ApiException {
            CreateTaskConfig createTaskConfig = buildBodyParams();
            ApiResponse<TaskConfig> localVarResp = createNewConfigWithHttpInfo(orgId, createTaskConfig);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewConfig request with HTTP info returned
         * @return ApiResponse&lt;TaskConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskConfig> executeWithHttpInfo() throws ApiException {
            CreateTaskConfig createTaskConfig = buildBodyParams();
            return createNewConfigWithHttpInfo(orgId, createTaskConfig);
        }

        /**
         * Execute createNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskConfig> _callback) throws ApiException {
            CreateTaskConfig createTaskConfig = buildBodyParams();
            return createNewConfigAsync(orgId, createTaskConfig, _callback);
        }
    }

    /**
     * Create a new task config
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @return CreateNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewConfigRequestBuilder createNewConfig(String entityId, String type, String pastDueAction, String orgId) throws IllegalArgumentException {
        if (entityId == null) throw new IllegalArgumentException("\"entityId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (pastDueAction == null) throw new IllegalArgumentException("\"pastDueAction\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewConfigRequestBuilder(entityId, type, pastDueAction, orgId);
    }
    private okhttp3.Call getAllConfigsCall(String orgId, String from, String parentEntityId, String assessmentId, String entityId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task-config"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (parentEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentEntityId", parentEntityId));
        }

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConfigsValidateBeforeCall(String orgId, String from, String parentEntityId, String assessmentId, String entityId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllConfigs(Async)");
        }

        return getAllConfigsCall(orgId, from, parentEntityId, assessmentId, entityId, limit, _callback);

    }


    private ApiResponse<ResultsData> getAllConfigsWithHttpInfo(String orgId, String from, String parentEntityId, String assessmentId, String entityId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllConfigsValidateBeforeCall(orgId, from, parentEntityId, assessmentId, entityId, limit, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllConfigsAsync(String orgId, String from, String parentEntityId, String assessmentId, String entityId, Integer limit, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConfigsValidateBeforeCall(orgId, from, parentEntityId, assessmentId, entityId, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllConfigsRequestBuilder {
        private final String orgId;
        private String from;
        private String parentEntityId;
        private String assessmentId;
        private String entityId;
        private Integer limit;

        private GetAllConfigsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from TaskConfig id to start paginating from (optional)
         * @return GetAllConfigsRequestBuilder
         */
        public GetAllConfigsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set parentEntityId
         * @param parentEntityId ParentEntityId to query for (optional)
         * @return GetAllConfigsRequestBuilder
         */
        public GetAllConfigsRequestBuilder parentEntityId(String parentEntityId) {
            this.parentEntityId = parentEntityId;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId AssessmentId to query for (optional)
         * @return GetAllConfigsRequestBuilder
         */
        public GetAllConfigsRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId EntityId to query for (optional)
         * @return GetAllConfigsRequestBuilder
         */
        public GetAllConfigsRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllConfigsRequestBuilder
         */
        public GetAllConfigsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllConfigs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllConfigsCall(orgId, from, parentEntityId, assessmentId, entityId, limit, _callback);
        }


        /**
         * Execute getAllConfigs request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getAllConfigsWithHttpInfo(orgId, from, parentEntityId, assessmentId, entityId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllConfigs request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getAllConfigsWithHttpInfo(orgId, from, parentEntityId, assessmentId, entityId, limit);
        }

        /**
         * Execute getAllConfigs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getAllConfigsAsync(orgId, from, parentEntityId, assessmentId, entityId, limit, _callback);
        }
    }

    /**
     * Get all task configs for an org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllConfigsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllConfigsRequestBuilder getAllConfigs(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllConfigsRequestBuilder(orgId);
    }
    private okhttp3.Call getSpecificConfigCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task-config/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificConfigValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getSpecificConfig(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificConfig(Async)");
        }

        return getSpecificConfigCall(orgId, id, _callback);

    }


    private ApiResponse<TaskConfig> getSpecificConfigWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = getSpecificConfigValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<TaskConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificConfigAsync(String orgId, String id, final ApiCallback<TaskConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificConfigValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<TaskConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificConfigRequestBuilder {
        private final String orgId;
        private final String id;

        private GetSpecificConfigRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for getSpecificConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificConfigCall(orgId, id, _callback);
        }


        /**
         * Execute getSpecificConfig request
         * @return TaskConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public TaskConfig execute() throws ApiException {
            ApiResponse<TaskConfig> localVarResp = getSpecificConfigWithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificConfig request with HTTP info returned
         * @return ApiResponse&lt;TaskConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TaskConfig> executeWithHttpInfo() throws ApiException {
            return getSpecificConfigWithHttpInfo(orgId, id);
        }

        /**
         * Execute getSpecificConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TaskConfig> _callback) throws ApiException {
            return getSpecificConfigAsync(orgId, id, _callback);
        }
    }

    /**
     * Get a specific task config
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param id ID of the desired task config (required)
     * @return GetSpecificConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificConfigRequestBuilder getSpecificConfig(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSpecificConfigRequestBuilder(orgId, id);
    }
}
