/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccessApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccessApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccessApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call entityActionsCall(String orgId, String type, String id, String action, String fields, LocalDate date, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/access/entity/{type}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entityActionsValidateBeforeCall(String orgId, String type, String id, String action, String fields, LocalDate date, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling entityActions(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling entityActions(Async)");
        }

        return entityActionsCall(orgId, type, id, action, fields, date, scenarioId, _callback);

    }


    private ApiResponse<AccessResponse> entityActionsWithHttpInfo(String orgId, String type, String id, String action, String fields, LocalDate date, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = entityActionsValidateBeforeCall(orgId, type, id, action, fields, date, scenarioId, null);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call entityActionsAsync(String orgId, String type, String id, String action, String fields, LocalDate date, String scenarioId, final ApiCallback<AccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entityActionsValidateBeforeCall(orgId, type, id, action, fields, date, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<AccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EntityActionsRequestBuilder {
        private final String orgId;
        private final String type;
        private String id;
        private String action;
        private String fields;
        private LocalDate date;
        private String scenarioId;

        private EntityActionsRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set id
         * @param id Entity ids (optional)
         * @return EntityActionsRequestBuilder
         */
        public EntityActionsRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set action
         * @param action Actions, defaults to update,delete (optional)
         * @return EntityActionsRequestBuilder
         */
        public EntityActionsRequestBuilder action(String action) {
            this.action = action;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to check, defaults to all fields (optional)
         * @return EntityActionsRequestBuilder
         */
        public EntityActionsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set date
         * @param date Date, defaults to today (optional)
         * @return EntityActionsRequestBuilder
         */
        public EntityActionsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id, defaults to primary (optional)
         * @return EntityActionsRequestBuilder
         */
        public EntityActionsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for entityActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return entityActionsCall(orgId, type, id, action, fields, date, scenarioId, _callback);
        }


        /**
         * Execute entityActions request
         * @return AccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AccessResponse execute() throws ApiException {
            ApiResponse<AccessResponse> localVarResp = entityActionsWithHttpInfo(orgId, type, id, action, fields, date, scenarioId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute entityActions request with HTTP info returned
         * @return ApiResponse&lt;AccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessResponse> executeWithHttpInfo() throws ApiException {
            return entityActionsWithHttpInfo(orgId, type, id, action, fields, date, scenarioId);
        }

        /**
         * Execute entityActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessResponse> _callback) throws ApiException {
            return entityActionsAsync(orgId, type, id, action, fields, date, scenarioId, _callback);
        }
    }

    /**
     * Return the appropriate actions that can be performed on an entity or set of entities
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Entity type (required)
     * @return EntityActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public EntityActionsRequestBuilder entityActions(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new EntityActionsRequestBuilder(orgId, type);
    }
}
