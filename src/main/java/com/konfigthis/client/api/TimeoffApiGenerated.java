/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTimeOffEntity;
import java.time.LocalDate;
import com.konfigthis.client.model.ResultsTimeOffEntity;
import com.konfigthis.client.model.TimeOff;
import com.konfigthis.client.model.TimeOffApproval;
import com.konfigthis.client.model.TimeOffEntity;
import com.konfigthis.client.model.TimeOffRequest;
import com.konfigthis.client.model.UpdateTimeOffEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeoffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeoffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeoffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approvePendingRequestCall(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffApproval;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/{timeOffId}/approve"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "timeOffId" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approvePendingRequestValidateBeforeCall(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling approvePendingRequest(Async)");
        }

        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling approvePendingRequest(Async)");
        }

        return approvePendingRequestCall(orgId, timeOffId, timeOffApproval, _callback);

    }


    private ApiResponse<Void> approvePendingRequestWithHttpInfo(String orgId, String timeOffId, TimeOffApproval timeOffApproval) throws ApiException {
        okhttp3.Call localVarCall = approvePendingRequestValidateBeforeCall(orgId, timeOffId, timeOffApproval, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approvePendingRequestAsync(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approvePendingRequestValidateBeforeCall(orgId, timeOffId, timeOffApproval, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApprovePendingRequestRequestBuilder {
        private final String orgId;
        private final String timeOffId;
        private String message;

        private ApprovePendingRequestRequestBuilder(String orgId, String timeOffId) {
            this.orgId = orgId;
            this.timeOffId = timeOffId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return ApprovePendingRequestRequestBuilder
         */
        public ApprovePendingRequestRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for approvePendingRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return approvePendingRequestCall(orgId, timeOffId, timeOffApproval, _callback);
        }

        private TimeOffApproval buildBodyParams() {
            TimeOffApproval timeOffApproval = new TimeOffApproval();
            timeOffApproval.message(this.message);
            return timeOffApproval;
        }

        /**
         * Execute approvePendingRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            approvePendingRequestWithHttpInfo(orgId, timeOffId, timeOffApproval);
        }

        /**
         * Execute approvePendingRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return approvePendingRequestWithHttpInfo(orgId, timeOffId, timeOffApproval);
        }

        /**
         * Execute approvePendingRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return approvePendingRequestAsync(orgId, timeOffId, timeOffApproval, _callback);
        }
    }

    /**
     * Approve a pending time off request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param timeOffId TimeOff id (required)
     * @return ApprovePendingRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public ApprovePendingRequestRequestBuilder approvePendingRequest(String orgId, String timeOffId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
            

        return new ApprovePendingRequestRequestBuilder(orgId, timeOffId);
    }
    private okhttp3.Call createEntryCall(String orgId, CreateTimeOffEntity createTimeOffEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTimeOffEntity;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEntryValidateBeforeCall(String orgId, CreateTimeOffEntity createTimeOffEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createEntry(Async)");
        }

        return createEntryCall(orgId, createTimeOffEntity, _callback);

    }


    private ApiResponse<TimeOff> createEntryWithHttpInfo(String orgId, CreateTimeOffEntity createTimeOffEntity) throws ApiException {
        okhttp3.Call localVarCall = createEntryValidateBeforeCall(orgId, createTimeOffEntity, null);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEntryAsync(String orgId, CreateTimeOffEntity createTimeOffEntity, final ApiCallback<TimeOff> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEntryValidateBeforeCall(orgId, createTimeOffEntity, _callback);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEntryRequestBuilder {
        private final String personId;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final String orgId;
        private String externalId;
        private Double days;
        private Double hours;
        private String typeDescription;
        private String note;
        private String approval;

        private CreateEntryRequestBuilder(String personId, LocalDate startDate, LocalDate endDate, String orgId) {
            this.personId = personId;
            this.startDate = startDate;
            this.endDate = endDate;
            this.orgId = orgId;
        }

        /**
         * Set externalId
         * @param externalId external identifier, if time off synced from external system (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set days
         * @param days number of days used (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder days(Double days) {
            this.days = days;
            return this;
        }
        
        /**
         * Set hours
         * @param hours number of hours used (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set typeDescription
         * @param typeDescription type of time off (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder typeDescription(String typeDescription) {
            this.typeDescription = typeDescription;
            return this;
        }
        
        /**
         * Set note
         * @param note notes on the time off (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set approval
         * @param approval approval status of the time off (optional)
         * @return CreateEntryRequestBuilder
         */
        public CreateEntryRequestBuilder approval(String approval) {
            this.approval = approval;
            return this;
        }
        
        /**
         * Build call for createEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTimeOffEntity createTimeOffEntity = buildBodyParams();
            return createEntryCall(orgId, createTimeOffEntity, _callback);
        }

        private CreateTimeOffEntity buildBodyParams() {
            CreateTimeOffEntity createTimeOffEntity = new CreateTimeOffEntity();
            createTimeOffEntity.personId(this.personId);
            createTimeOffEntity.externalId(this.externalId);
            createTimeOffEntity.startDate(this.startDate);
            createTimeOffEntity.endDate(this.endDate);
            createTimeOffEntity.days(this.days);
            createTimeOffEntity.hours(this.hours);
            createTimeOffEntity.typeDescription(this.typeDescription);
            createTimeOffEntity.note(this.note);
            if (this.approval != null)
            createTimeOffEntity.approval(CreateTimeOffEntity.ApprovalEnum.fromValue(this.approval));
            return createTimeOffEntity;
        }

        /**
         * Execute createEntry request
         * @return TimeOff
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public TimeOff execute() throws ApiException {
            CreateTimeOffEntity createTimeOffEntity = buildBodyParams();
            ApiResponse<TimeOff> localVarResp = createEntryWithHttpInfo(orgId, createTimeOffEntity);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEntry request with HTTP info returned
         * @return ApiResponse&lt;TimeOff&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOff> executeWithHttpInfo() throws ApiException {
            CreateTimeOffEntity createTimeOffEntity = buildBodyParams();
            return createEntryWithHttpInfo(orgId, createTimeOffEntity);
        }

        /**
         * Execute createEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOff> _callback) throws ApiException {
            CreateTimeOffEntity createTimeOffEntity = buildBodyParams();
            return createEntryAsync(orgId, createTimeOffEntity, _callback);
        }
    }

    /**
     * Create a timeOff
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public CreateEntryRequestBuilder createEntry(String personId, LocalDate startDate, LocalDate endDate, String orgId) throws IllegalArgumentException {
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateEntryRequestBuilder(personId, startDate, endDate, orgId);
    }
    private okhttp3.Call findTimeOffByIdCall(String orgId, String timeOffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/{timeOffId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "timeOffId" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTimeOffByIdValidateBeforeCall(String orgId, String timeOffId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findTimeOffById(Async)");
        }

        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling findTimeOffById(Async)");
        }

        return findTimeOffByIdCall(orgId, timeOffId, _callback);

    }


    private ApiResponse<TimeOffEntity> findTimeOffByIdWithHttpInfo(String orgId, String timeOffId) throws ApiException {
        okhttp3.Call localVarCall = findTimeOffByIdValidateBeforeCall(orgId, timeOffId, null);
        Type localVarReturnType = new TypeToken<TimeOffEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findTimeOffByIdAsync(String orgId, String timeOffId, final ApiCallback<TimeOffEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTimeOffByIdValidateBeforeCall(orgId, timeOffId, _callback);
        Type localVarReturnType = new TypeToken<TimeOffEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindTimeOffByIdRequestBuilder {
        private final String orgId;
        private final String timeOffId;

        private FindTimeOffByIdRequestBuilder(String orgId, String timeOffId) {
            this.orgId = orgId;
            this.timeOffId = timeOffId;
        }

        /**
         * Build call for findTimeOffById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findTimeOffByIdCall(orgId, timeOffId, _callback);
        }


        /**
         * Execute findTimeOffById request
         * @return TimeOffEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffEntity execute() throws ApiException {
            ApiResponse<TimeOffEntity> localVarResp = findTimeOffByIdWithHttpInfo(orgId, timeOffId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findTimeOffById request with HTTP info returned
         * @return ApiResponse&lt;TimeOffEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffEntity> executeWithHttpInfo() throws ApiException {
            return findTimeOffByIdWithHttpInfo(orgId, timeOffId);
        }

        /**
         * Execute findTimeOffById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffEntity> _callback) throws ApiException {
            return findTimeOffByIdAsync(orgId, timeOffId, _callback);
        }
    }

    /**
     * Return a particular timeOff by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param timeOffId TimeOff id (required)
     * @return FindTimeOffByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public FindTimeOffByIdRequestBuilder findTimeOffById(String orgId, String timeOffId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
            

        return new FindTimeOffByIdRequestBuilder(orgId, timeOffId);
    }
    private okhttp3.Call getTimeOffCall(String orgId, String personId, LocalDate fromDate, LocalDate untilDate, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personId", personId));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (untilDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("untilDate", untilDate));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimeOffValidateBeforeCall(String orgId, String personId, LocalDate fromDate, LocalDate untilDate, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getTimeOff(Async)");
        }

        return getTimeOffCall(orgId, personId, fromDate, untilDate, from, limit, returnAccess, _callback);

    }


    private ApiResponse<ResultsTimeOffEntity> getTimeOffWithHttpInfo(String orgId, String personId, LocalDate fromDate, LocalDate untilDate, String from, Integer limit, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getTimeOffValidateBeforeCall(orgId, personId, fromDate, untilDate, from, limit, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsTimeOffEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimeOffAsync(String orgId, String personId, LocalDate fromDate, LocalDate untilDate, String from, Integer limit, String returnAccess, final ApiCallback<ResultsTimeOffEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimeOffValidateBeforeCall(orgId, personId, fromDate, untilDate, from, limit, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsTimeOffEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimeOffRequestBuilder {
        private final String orgId;
        private String personId;
        private LocalDate fromDate;
        private LocalDate untilDate;
        private String from;
        private Integer limit;
        private String returnAccess;

        private GetTimeOffRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set personId
         * @param personId Person id to filter by (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate From date, inclusive (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder fromDate(LocalDate fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set untilDate
         * @param untilDate Until date, exclusive (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder untilDate(LocalDate untilDate) {
            this.untilDate = untilDate;
            return this;
        }
        
        /**
         * Set from
         * @param from Time off id to start paginating from (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetTimeOffRequestBuilder
         */
        public GetTimeOffRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getTimeOff
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimeOffCall(orgId, personId, fromDate, untilDate, from, limit, returnAccess, _callback);
        }


        /**
         * Execute getTimeOff request
         * @return ResultsTimeOffEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ResultsTimeOffEntity execute() throws ApiException {
            ApiResponse<ResultsTimeOffEntity> localVarResp = getTimeOffWithHttpInfo(orgId, personId, fromDate, untilDate, from, limit, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimeOff request with HTTP info returned
         * @return ApiResponse&lt;ResultsTimeOffEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsTimeOffEntity> executeWithHttpInfo() throws ApiException {
            return getTimeOffWithHttpInfo(orgId, personId, fromDate, untilDate, from, limit, returnAccess);
        }

        /**
         * Execute getTimeOff request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsTimeOffEntity> _callback) throws ApiException {
            return getTimeOffAsync(orgId, personId, fromDate, untilDate, from, limit, returnAccess, _callback);
        }
    }

    /**
     * Retrieve time off
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetTimeOffRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public GetTimeOffRequestBuilder getTimeOff(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetTimeOffRequestBuilder(orgId);
    }
    private okhttp3.Call rejectTimeOffRequestCall(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffApproval;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/{timeOffId}/reject"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "timeOffId" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectTimeOffRequestValidateBeforeCall(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling rejectTimeOffRequest(Async)");
        }

        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling rejectTimeOffRequest(Async)");
        }

        return rejectTimeOffRequestCall(orgId, timeOffId, timeOffApproval, _callback);

    }


    private ApiResponse<Void> rejectTimeOffRequestWithHttpInfo(String orgId, String timeOffId, TimeOffApproval timeOffApproval) throws ApiException {
        okhttp3.Call localVarCall = rejectTimeOffRequestValidateBeforeCall(orgId, timeOffId, timeOffApproval, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call rejectTimeOffRequestAsync(String orgId, String timeOffId, TimeOffApproval timeOffApproval, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectTimeOffRequestValidateBeforeCall(orgId, timeOffId, timeOffApproval, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RejectTimeOffRequestRequestBuilder {
        private final String orgId;
        private final String timeOffId;
        private String message;

        private RejectTimeOffRequestRequestBuilder(String orgId, String timeOffId) {
            this.orgId = orgId;
            this.timeOffId = timeOffId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return RejectTimeOffRequestRequestBuilder
         */
        public RejectTimeOffRequestRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for rejectTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return rejectTimeOffRequestCall(orgId, timeOffId, timeOffApproval, _callback);
        }

        private TimeOffApproval buildBodyParams() {
            TimeOffApproval timeOffApproval = new TimeOffApproval();
            timeOffApproval.message(this.message);
            return timeOffApproval;
        }

        /**
         * Execute rejectTimeOffRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            rejectTimeOffRequestWithHttpInfo(orgId, timeOffId, timeOffApproval);
        }

        /**
         * Execute rejectTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return rejectTimeOffRequestWithHttpInfo(orgId, timeOffId, timeOffApproval);
        }

        /**
         * Execute rejectTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeOffApproval timeOffApproval = buildBodyParams();
            return rejectTimeOffRequestAsync(orgId, timeOffId, timeOffApproval, _callback);
        }
    }

    /**
     * Reject a pending time off request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param timeOffId TimeOff id (required)
     * @return RejectTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public RejectTimeOffRequestRequestBuilder rejectTimeOffRequest(String orgId, String timeOffId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
            

        return new RejectTimeOffRequestRequestBuilder(orgId, timeOffId);
    }
    private okhttp3.Call removeEntryCall(String orgId, String timeOffId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/{timeOffId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "timeOffId" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEntryValidateBeforeCall(String orgId, String timeOffId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeEntry(Async)");
        }

        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling removeEntry(Async)");
        }

        return removeEntryCall(orgId, timeOffId, _callback);

    }


    private ApiResponse<Void> removeEntryWithHttpInfo(String orgId, String timeOffId) throws ApiException {
        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(orgId, timeOffId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeEntryAsync(String orgId, String timeOffId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEntryValidateBeforeCall(orgId, timeOffId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveEntryRequestBuilder {
        private final String orgId;
        private final String timeOffId;

        private RemoveEntryRequestBuilder(String orgId, String timeOffId) {
            this.orgId = orgId;
            this.timeOffId = timeOffId;
        }

        /**
         * Build call for removeEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEntryCall(orgId, timeOffId, _callback);
        }


        /**
         * Execute removeEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeEntryWithHttpInfo(orgId, timeOffId);
        }

        /**
         * Execute removeEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeEntryWithHttpInfo(orgId, timeOffId);
        }

        /**
         * Execute removeEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeEntryAsync(orgId, timeOffId, _callback);
        }
    }

    /**
     * Delete a timeOff
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param timeOffId TimeOff id (required)
     * @return RemoveEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEntryRequestBuilder removeEntry(String orgId, String timeOffId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
            

        return new RemoveEntryRequestBuilder(orgId, timeOffId);
    }
    private okhttp3.Call submitTimeOffRequestCall(String orgId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/request"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitTimeOffRequestValidateBeforeCall(String orgId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling submitTimeOffRequest(Async)");
        }

        return submitTimeOffRequestCall(orgId, timeOffRequest, _callback);

    }


    private ApiResponse<TimeOff> submitTimeOffRequestWithHttpInfo(String orgId, TimeOffRequest timeOffRequest) throws ApiException {
        okhttp3.Call localVarCall = submitTimeOffRequestValidateBeforeCall(orgId, timeOffRequest, null);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitTimeOffRequestAsync(String orgId, TimeOffRequest timeOffRequest, final ApiCallback<TimeOff> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitTimeOffRequestValidateBeforeCall(orgId, timeOffRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitTimeOffRequestRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final String orgId;
        private String personId;
        private String typeDescription;
        private String note;

        private SubmitTimeOffRequestRequestBuilder(LocalDate startDate, LocalDate endDate, String orgId) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.orgId = orgId;
        }

        /**
         * Set personId
         * @param personId  (optional)
         * @return SubmitTimeOffRequestRequestBuilder
         */
        public SubmitTimeOffRequestRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set typeDescription
         * @param typeDescription  (optional)
         * @return SubmitTimeOffRequestRequestBuilder
         */
        public SubmitTimeOffRequestRequestBuilder typeDescription(String typeDescription) {
            this.typeDescription = typeDescription;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return SubmitTimeOffRequestRequestBuilder
         */
        public SubmitTimeOffRequestRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for submitTimeOffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return submitTimeOffRequestCall(orgId, timeOffRequest, _callback);
        }

        private TimeOffRequest buildBodyParams() {
            TimeOffRequest timeOffRequest = new TimeOffRequest();
            timeOffRequest.startDate(this.startDate);
            timeOffRequest.endDate(this.endDate);
            timeOffRequest.personId(this.personId);
            timeOffRequest.typeDescription(this.typeDescription);
            timeOffRequest.note(this.note);
            return timeOffRequest;
        }

        /**
         * Execute submitTimeOffRequest request
         * @return TimeOff
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public TimeOff execute() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            ApiResponse<TimeOff> localVarResp = submitTimeOffRequestWithHttpInfo(orgId, timeOffRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitTimeOffRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOff&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOff> executeWithHttpInfo() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return submitTimeOffRequestWithHttpInfo(orgId, timeOffRequest);
        }

        /**
         * Execute submitTimeOffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOff> _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return submitTimeOffRequestAsync(orgId, timeOffRequest, _callback);
        }
    }

    /**
     * Request time off
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SubmitTimeOffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public SubmitTimeOffRequestRequestBuilder submitTimeOffRequest(LocalDate startDate, LocalDate endDate, String orgId) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SubmitTimeOffRequestRequestBuilder(startDate, endDate, orgId);
    }
    private okhttp3.Call updateTimeOffEntryCall(String orgId, String timeOffId, UpdateTimeOffEntity updateTimeOffEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTimeOffEntity;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/{timeOffId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "timeOffId" + "}", localVarApiClient.escapeString(timeOffId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimeOffEntryValidateBeforeCall(String orgId, String timeOffId, UpdateTimeOffEntity updateTimeOffEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateTimeOffEntry(Async)");
        }

        // verify the required parameter 'timeOffId' is set
        if (timeOffId == null) {
            throw new ApiException("Missing the required parameter 'timeOffId' when calling updateTimeOffEntry(Async)");
        }

        return updateTimeOffEntryCall(orgId, timeOffId, updateTimeOffEntity, _callback);

    }


    private ApiResponse<Void> updateTimeOffEntryWithHttpInfo(String orgId, String timeOffId, UpdateTimeOffEntity updateTimeOffEntity) throws ApiException {
        okhttp3.Call localVarCall = updateTimeOffEntryValidateBeforeCall(orgId, timeOffId, updateTimeOffEntity, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTimeOffEntryAsync(String orgId, String timeOffId, UpdateTimeOffEntity updateTimeOffEntity, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimeOffEntryValidateBeforeCall(orgId, timeOffId, updateTimeOffEntity, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTimeOffEntryRequestBuilder {
        private final String orgId;
        private final String timeOffId;
        private String externalId;
        private LocalDate startDate;
        private LocalDate endDate;
        private Double days;
        private Double hours;
        private String typeDescription;
        private String note;
        private String approval;

        private UpdateTimeOffEntryRequestBuilder(String orgId, String timeOffId) {
            this.orgId = orgId;
            this.timeOffId = timeOffId;
        }

        /**
         * Set externalId
         * @param externalId external identifier, if time off synced from external system (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date of time off, inclusive (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end date of time off, inclusive (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set days
         * @param days number of days used (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder days(Double days) {
            this.days = days;
            return this;
        }
        
        /**
         * Set hours
         * @param hours number of hours used (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder hours(Double hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set typeDescription
         * @param typeDescription type of time off (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder typeDescription(String typeDescription) {
            this.typeDescription = typeDescription;
            return this;
        }
        
        /**
         * Set note
         * @param note notes on the time off (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set approval
         * @param approval approval status of the time off (optional)
         * @return UpdateTimeOffEntryRequestBuilder
         */
        public UpdateTimeOffEntryRequestBuilder approval(String approval) {
            this.approval = approval;
            return this;
        }
        
        /**
         * Build call for updateTimeOffEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTimeOffEntity updateTimeOffEntity = buildBodyParams();
            return updateTimeOffEntryCall(orgId, timeOffId, updateTimeOffEntity, _callback);
        }

        private UpdateTimeOffEntity buildBodyParams() {
            UpdateTimeOffEntity updateTimeOffEntity = new UpdateTimeOffEntity();
            updateTimeOffEntity.externalId(this.externalId);
            updateTimeOffEntity.startDate(this.startDate);
            updateTimeOffEntity.endDate(this.endDate);
            updateTimeOffEntity.days(this.days);
            updateTimeOffEntity.hours(this.hours);
            updateTimeOffEntity.typeDescription(this.typeDescription);
            updateTimeOffEntity.note(this.note);
            if (this.approval != null)
            updateTimeOffEntity.approval(UpdateTimeOffEntity.ApprovalEnum.fromValue(this.approval));
            return updateTimeOffEntity;
        }

        /**
         * Execute updateTimeOffEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTimeOffEntity updateTimeOffEntity = buildBodyParams();
            updateTimeOffEntryWithHttpInfo(orgId, timeOffId, updateTimeOffEntity);
        }

        /**
         * Execute updateTimeOffEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTimeOffEntity updateTimeOffEntity = buildBodyParams();
            return updateTimeOffEntryWithHttpInfo(orgId, timeOffId, updateTimeOffEntity);
        }

        /**
         * Execute updateTimeOffEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTimeOffEntity updateTimeOffEntity = buildBodyParams();
            return updateTimeOffEntryAsync(orgId, timeOffId, updateTimeOffEntity, _callback);
        }
    }

    /**
     * Update an existing timeOff
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param timeOffId TimeOff id (required)
     * @return UpdateTimeOffEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimeOffEntryRequestBuilder updateTimeOffEntry(String orgId, String timeOffId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (timeOffId == null) throw new IllegalArgumentException("\"timeOffId\" is required but got null");
            

        return new UpdateTimeOffEntryRequestBuilder(orgId, timeOffId);
    }
    private okhttp3.Call validateTimeoffRequestCall(String orgId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/timeoff/request/validate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTimeoffRequestValidateBeforeCall(String orgId, TimeOffRequest timeOffRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling validateTimeoffRequest(Async)");
        }

        return validateTimeoffRequestCall(orgId, timeOffRequest, _callback);

    }


    private ApiResponse<TimeOff> validateTimeoffRequestWithHttpInfo(String orgId, TimeOffRequest timeOffRequest) throws ApiException {
        okhttp3.Call localVarCall = validateTimeoffRequestValidateBeforeCall(orgId, timeOffRequest, null);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateTimeoffRequestAsync(String orgId, TimeOffRequest timeOffRequest, final ApiCallback<TimeOff> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTimeoffRequestValidateBeforeCall(orgId, timeOffRequest, _callback);
        Type localVarReturnType = new TypeToken<TimeOff>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateTimeoffRequestRequestBuilder {
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final String orgId;
        private String personId;
        private String typeDescription;
        private String note;

        private ValidateTimeoffRequestRequestBuilder(LocalDate startDate, LocalDate endDate, String orgId) {
            this.startDate = startDate;
            this.endDate = endDate;
            this.orgId = orgId;
        }

        /**
         * Set personId
         * @param personId  (optional)
         * @return ValidateTimeoffRequestRequestBuilder
         */
        public ValidateTimeoffRequestRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set typeDescription
         * @param typeDescription  (optional)
         * @return ValidateTimeoffRequestRequestBuilder
         */
        public ValidateTimeoffRequestRequestBuilder typeDescription(String typeDescription) {
            this.typeDescription = typeDescription;
            return this;
        }
        
        /**
         * Set note
         * @param note  (optional)
         * @return ValidateTimeoffRequestRequestBuilder
         */
        public ValidateTimeoffRequestRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for validateTimeoffRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return validateTimeoffRequestCall(orgId, timeOffRequest, _callback);
        }

        private TimeOffRequest buildBodyParams() {
            TimeOffRequest timeOffRequest = new TimeOffRequest();
            timeOffRequest.startDate(this.startDate);
            timeOffRequest.endDate(this.endDate);
            timeOffRequest.personId(this.personId);
            timeOffRequest.typeDescription(this.typeDescription);
            timeOffRequest.note(this.note);
            return timeOffRequest;
        }

        /**
         * Execute validateTimeoffRequest request
         * @return TimeOff
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public TimeOff execute() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            ApiResponse<TimeOff> localVarResp = validateTimeoffRequestWithHttpInfo(orgId, timeOffRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateTimeoffRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOff&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOff> executeWithHttpInfo() throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return validateTimeoffRequestWithHttpInfo(orgId, timeOffRequest);
        }

        /**
         * Execute validateTimeoffRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOff> _callback) throws ApiException {
            TimeOffRequest timeOffRequest = buildBodyParams();
            return validateTimeoffRequestAsync(orgId, timeOffRequest, _callback);
        }
    }

    /**
     * Validate a time off request
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ValidateTimeoffRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTimeoffRequestRequestBuilder validateTimeoffRequest(LocalDate startDate, LocalDate endDate, String orgId) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ValidateTimeoffRequestRequestBuilder(startDate, endDate, orgId);
    }
}
