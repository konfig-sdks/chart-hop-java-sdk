/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdjustScenarioDateRequest;
import com.konfigthis.client.model.CombineScenarioRequest;
import com.konfigthis.client.model.CreateScenario;
import java.time.LocalDate;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsScenario;
import com.konfigthis.client.model.Scenario;
import com.konfigthis.client.model.ScenarioMetadata;
import com.konfigthis.client.model.ScenarioSharedViewConfig;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateScenario;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ScenarioApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScenarioApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ScenarioApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call adjustDatesCall(String orgId, String scenarioId, AdjustScenarioDateRequest adjustScenarioDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adjustScenarioDateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/dates"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adjustDatesValidateBeforeCall(String orgId, String scenarioId, AdjustScenarioDateRequest adjustScenarioDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling adjustDates(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling adjustDates(Async)");
        }

        return adjustDatesCall(orgId, scenarioId, adjustScenarioDateRequest, _callback);

    }


    private ApiResponse<Process> adjustDatesWithHttpInfo(String orgId, String scenarioId, AdjustScenarioDateRequest adjustScenarioDateRequest) throws ApiException {
        okhttp3.Call localVarCall = adjustDatesValidateBeforeCall(orgId, scenarioId, adjustScenarioDateRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call adjustDatesAsync(String orgId, String scenarioId, AdjustScenarioDateRequest adjustScenarioDateRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = adjustDatesValidateBeforeCall(orgId, scenarioId, adjustScenarioDateRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AdjustDatesRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private LocalDate date;
        private Integer days;

        private AdjustDatesRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set date
         * @param date date to use as new start date (optional)
         * @return AdjustDatesRequestBuilder
         */
        public AdjustDatesRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set days
         * @param days number of days to adjust forward (optional)
         * @return AdjustDatesRequestBuilder
         */
        public AdjustDatesRequestBuilder days(Integer days) {
            this.days = days;
            return this;
        }
        
        /**
         * Build call for adjustDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdjustScenarioDateRequest adjustScenarioDateRequest = buildBodyParams();
            return adjustDatesCall(orgId, scenarioId, adjustScenarioDateRequest, _callback);
        }

        private AdjustScenarioDateRequest buildBodyParams() {
            AdjustScenarioDateRequest adjustScenarioDateRequest = new AdjustScenarioDateRequest();
            adjustScenarioDateRequest.date(this.date);
            adjustScenarioDateRequest.days(this.days);
            return adjustScenarioDateRequest;
        }

        /**
         * Execute adjustDates request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            AdjustScenarioDateRequest adjustScenarioDateRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = adjustDatesWithHttpInfo(orgId, scenarioId, adjustScenarioDateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute adjustDates request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            AdjustScenarioDateRequest adjustScenarioDateRequest = buildBodyParams();
            return adjustDatesWithHttpInfo(orgId, scenarioId, adjustScenarioDateRequest);
        }

        /**
         * Execute adjustDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            AdjustScenarioDateRequest adjustScenarioDateRequest = buildBodyParams();
            return adjustDatesAsync(orgId, scenarioId, adjustScenarioDateRequest, _callback);
        }
    }

    /**
     * Adjust the dates of the changes in a scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return AdjustDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public AdjustDatesRequestBuilder adjustDates(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new AdjustDatesRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call bulkArchiveScenariosCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/bulk/archive"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkArchiveScenariosValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkArchiveScenarios(Async)");
        }

        return bulkArchiveScenariosCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> bulkArchiveScenariosWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkArchiveScenariosValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkArchiveScenariosAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkArchiveScenariosValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkArchiveScenariosRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private BulkArchiveScenariosRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of scenario ids to archive (optional)
         * @return BulkArchiveScenariosRequestBuilder
         */
        public BulkArchiveScenariosRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for bulkArchiveScenarios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkArchiveScenariosCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute bulkArchiveScenarios request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkArchiveScenariosWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkArchiveScenarios request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkArchiveScenariosWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute bulkArchiveScenarios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkArchiveScenariosAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Archive a set of scenarios
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkArchiveScenariosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkArchiveScenariosRequestBuilder bulkArchiveScenarios(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkArchiveScenariosRequestBuilder(orgId);
    }
    private okhttp3.Call combineScenariosCall(String orgId, String scenarioId, CombineScenarioRequest combineScenarioRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = combineScenarioRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/combine"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call combineScenariosValidateBeforeCall(String orgId, String scenarioId, CombineScenarioRequest combineScenarioRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling combineScenarios(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling combineScenarios(Async)");
        }

        return combineScenariosCall(orgId, scenarioId, combineScenarioRequest, _callback);

    }


    private ApiResponse<Process> combineScenariosWithHttpInfo(String orgId, String scenarioId, CombineScenarioRequest combineScenarioRequest) throws ApiException {
        okhttp3.Call localVarCall = combineScenariosValidateBeforeCall(orgId, scenarioId, combineScenarioRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call combineScenariosAsync(String orgId, String scenarioId, CombineScenarioRequest combineScenarioRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = combineScenariosValidateBeforeCall(orgId, scenarioId, combineScenarioRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CombineScenariosRequestBuilder {
        private final Set<String> scenarioIds;
        private final String orgId;
        private final String scenarioId;
        private Boolean copyOnly;
        private Boolean useScenarioDateForChanges;

        private CombineScenariosRequestBuilder(Set<String> scenarioIds, String orgId, String scenarioId) {
            this.scenarioIds = scenarioIds;
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set copyOnly
         * @param copyOnly  (optional)
         * @return CombineScenariosRequestBuilder
         */
        public CombineScenariosRequestBuilder copyOnly(Boolean copyOnly) {
            this.copyOnly = copyOnly;
            return this;
        }
        
        /**
         * Set useScenarioDateForChanges
         * @param useScenarioDateForChanges  (optional)
         * @return CombineScenariosRequestBuilder
         */
        public CombineScenariosRequestBuilder useScenarioDateForChanges(Boolean useScenarioDateForChanges) {
            this.useScenarioDateForChanges = useScenarioDateForChanges;
            return this;
        }
        
        /**
         * Build call for combineScenarios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CombineScenarioRequest combineScenarioRequest = buildBodyParams();
            return combineScenariosCall(orgId, scenarioId, combineScenarioRequest, _callback);
        }

        private CombineScenarioRequest buildBodyParams() {
            CombineScenarioRequest combineScenarioRequest = new CombineScenarioRequest();
            combineScenarioRequest.scenarioIds(this.scenarioIds);
            combineScenarioRequest.copyOnly(this.copyOnly);
            combineScenarioRequest.useScenarioDateForChanges(this.useScenarioDateForChanges);
            return combineScenarioRequest;
        }

        /**
         * Execute combineScenarios request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            CombineScenarioRequest combineScenarioRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = combineScenariosWithHttpInfo(orgId, scenarioId, combineScenarioRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute combineScenarios request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            CombineScenarioRequest combineScenarioRequest = buildBodyParams();
            return combineScenariosWithHttpInfo(orgId, scenarioId, combineScenarioRequest);
        }

        /**
         * Execute combineScenarios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            CombineScenarioRequest combineScenarioRequest = buildBodyParams();
            return combineScenariosAsync(orgId, scenarioId, combineScenarioRequest, _callback);
        }
    }

    /**
     * Combine multiple scenarios into another scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id to combine the other scenarios into (required)
     * @return CombineScenariosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CombineScenariosRequestBuilder combineScenarios(Set<String> scenarioIds, String orgId, String scenarioId) throws IllegalArgumentException {
        if (scenarioIds == null) throw new IllegalArgumentException("\"scenarioIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new CombineScenariosRequestBuilder(scenarioIds, orgId, scenarioId);
    }
    private okhttp3.Call createNewCall(String orgId, Boolean silent, Boolean skipChangeCreation, CreateScenario createScenario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createScenario;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (silent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("silent", silent));
        }

        if (skipChangeCreation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipChangeCreation", skipChangeCreation));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewValidateBeforeCall(String orgId, Boolean silent, Boolean skipChangeCreation, CreateScenario createScenario, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNew(Async)");
        }

        return createNewCall(orgId, silent, skipChangeCreation, createScenario, _callback);

    }


    private ApiResponse<Scenario> createNewWithHttpInfo(String orgId, Boolean silent, Boolean skipChangeCreation, CreateScenario createScenario) throws ApiException {
        okhttp3.Call localVarCall = createNewValidateBeforeCall(orgId, silent, skipChangeCreation, createScenario, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAsync(String orgId, Boolean silent, Boolean skipChangeCreation, CreateScenario createScenario, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewValidateBeforeCall(orgId, silent, skipChangeCreation, createScenario, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewRequestBuilder {
        private final String name;
        private final String orgId;
        private String description;
        private String startDate;
        private String status;
        private List<ShareAccess> shareAccess;
        private String type;
        private String startDateFixed;
        private String query;
        private Set<String> validJobIdSet;
        private String entityId;
        private String entityType;
        private Set<ScenarioSharedViewConfig> sharedViewConfig;
        private Money budget;
        private String costCalc;
        private Boolean silent;
        private Boolean skipChangeCreation;

        private CreateNewRequestBuilder(String name, String orgId) {
            this.name = name;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description scenario description (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate date that this scenario diverges from primary (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set status
         * @param status status of scenario (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to this scenario (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set type
         * @param type Type of scenario to be created (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set startDateFixed
         * @param startDateFixed whether or not the start date should stay fixed in time, or update to today&#39;s date as time passes (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder startDateFixed(String startDateFixed) {
            this.startDateFixed = startDateFixed;
            return this;
        }
        
        /**
         * Set query
         * @param query Query for selecting which people/jobs are initially included in the scenario (only applies to promotion scenarios) (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set validJobIdSet
         * @param validJobIdSet This scenario changes are restricted to the following jobIds (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder validJobIdSet(Set<String> validJobIdSet) {
            this.validJobIdSet = validJobIdSet;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId The entity this scenario is associated with (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType The type of entity associated with this scenario (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set sharedViewConfig
         * @param sharedViewConfig View configurations associated with this scenario (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder sharedViewConfig(Set<ScenarioSharedViewConfig> sharedViewConfig) {
            this.sharedViewConfig = sharedViewConfig;
            return this;
        }
        
        /**
         * Set budget
         * @param budget  (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder budget(Money budget) {
            this.budget = budget;
            return this;
        }
        
        /**
         * Set costCalc
         * @param costCalc CQL used to calculate the budget allocation in the scenario (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder costCalc(String costCalc) {
            this.costCalc = costCalc;
            return this;
        }
        
        /**
         * Set silent
         * @param silent Suppress notification emails (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder silent(Boolean silent) {
            this.silent = silent;
            return this;
        }
        
        /**
         * Set skipChangeCreation
         * @param skipChangeCreation Skip over change creation for PROMOTION scenarios (optional)
         * @return CreateNewRequestBuilder
         */
        public CreateNewRequestBuilder skipChangeCreation(Boolean skipChangeCreation) {
            this.skipChangeCreation = skipChangeCreation;
            return this;
        }
        
        /**
         * Build call for createNew
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateScenario createScenario = buildBodyParams();
            return createNewCall(orgId, silent, skipChangeCreation, createScenario, _callback);
        }

        private CreateScenario buildBodyParams() {
            CreateScenario createScenario = new CreateScenario();
            createScenario.description(this.description);
            createScenario.name(this.name);
            createScenario.startDate(this.startDate);
            if (this.status != null)
            createScenario.status(CreateScenario.StatusEnum.fromValue(this.status));
            createScenario.shareAccess(this.shareAccess);
            if (this.type != null)
            createScenario.type(CreateScenario.TypeEnum.fromValue(this.type));
            if (this.startDateFixed != null)
            createScenario.startDateFixed(CreateScenario.StartDateFixedEnum.fromValue(this.startDateFixed));
            createScenario.query(this.query);
            createScenario.validJobIdSet(this.validJobIdSet);
            createScenario.entityId(this.entityId);
            if (this.entityType != null)
            createScenario.entityType(CreateScenario.EntityTypeEnum.fromValue(this.entityType));
            createScenario.sharedViewConfig(this.sharedViewConfig);
            createScenario.budget(this.budget);
            createScenario.costCalc(this.costCalc);
            return createScenario;
        }

        /**
         * Execute createNew request
         * @return Scenario
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Scenario execute() throws ApiException {
            CreateScenario createScenario = buildBodyParams();
            ApiResponse<Scenario> localVarResp = createNewWithHttpInfo(orgId, silent, skipChangeCreation, createScenario);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNew request with HTTP info returned
         * @return ApiResponse&lt;Scenario&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Scenario> executeWithHttpInfo() throws ApiException {
            CreateScenario createScenario = buildBodyParams();
            return createNewWithHttpInfo(orgId, silent, skipChangeCreation, createScenario);
        }

        /**
         * Execute createNew request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Scenario> _callback) throws ApiException {
            CreateScenario createScenario = buildBodyParams();
            return createNewAsync(orgId, silent, skipChangeCreation, createScenario, _callback);
        }
    }

    /**
     * Create a scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewRequestBuilder createNew(String name, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewRequestBuilder(name, orgId);
    }
    private okhttp3.Call deleteBulkScenariosCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/bulk/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBulkScenariosValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteBulkScenarios(Async)");
        }

        return deleteBulkScenariosCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> deleteBulkScenariosWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteBulkScenariosValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBulkScenariosAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBulkScenariosValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBulkScenariosRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private DeleteBulkScenariosRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of scenario ids to delete (optional)
         * @return DeleteBulkScenariosRequestBuilder
         */
        public DeleteBulkScenariosRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for deleteBulkScenarios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkScenariosCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute deleteBulkScenarios request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = deleteBulkScenariosWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBulkScenarios request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkScenariosWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute deleteBulkScenarios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkScenariosAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete a set of scenarios
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteBulkScenariosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBulkScenariosRequestBuilder deleteBulkScenarios(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteBulkScenariosRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getById(Async)");
        }

        return getByIdCall(orgId, scenarioId, _callback);

    }


    private ApiResponse<Scenario> getByIdWithHttpInfo(String orgId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, scenarioId, null);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String scenarioId, final ApiCallback<Scenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<Scenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String scenarioId;

        private GetByIdRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, scenarioId, _callback);
        }


        /**
         * Execute getById request
         * @return Scenario
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Scenario execute() throws ApiException {
            ApiResponse<Scenario> localVarResp = getByIdWithHttpInfo(orgId, scenarioId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Scenario&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Scenario> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, scenarioId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Scenario> _callback) throws ApiException {
            return getByIdAsync(orgId, scenarioId, _callback);
        }
    }

    /**
     * Return a particular scenario by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call listPaginatedScenariosCall(String orgId, String from, String status, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPaginatedScenariosValidateBeforeCall(String orgId, String from, String status, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listPaginatedScenarios(Async)");
        }

        return listPaginatedScenariosCall(orgId, from, status, limit, returnAccess, _callback);

    }


    private ApiResponse<ResultsScenario> listPaginatedScenariosWithHttpInfo(String orgId, String from, String status, Integer limit, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = listPaginatedScenariosValidateBeforeCall(orgId, from, status, limit, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsScenario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPaginatedScenariosAsync(String orgId, String from, String status, Integer limit, String returnAccess, final ApiCallback<ResultsScenario> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPaginatedScenariosValidateBeforeCall(orgId, from, status, limit, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsScenario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPaginatedScenariosRequestBuilder {
        private final String orgId;
        private String from;
        private String status;
        private Integer limit;
        private String returnAccess;

        private ListPaginatedScenariosRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Scenario id to start paginating from (optional)
         * @return ListPaginatedScenariosRequestBuilder
         */
        public ListPaginatedScenariosRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set status
         * @param status Scenario status to filter by (optional)
         * @return ListPaginatedScenariosRequestBuilder
         */
        public ListPaginatedScenariosRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListPaginatedScenariosRequestBuilder
         */
        public ListPaginatedScenariosRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return ListPaginatedScenariosRequestBuilder
         */
        public ListPaginatedScenariosRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for listPaginatedScenarios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPaginatedScenariosCall(orgId, from, status, limit, returnAccess, _callback);
        }


        /**
         * Execute listPaginatedScenarios request
         * @return ResultsScenario
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsScenario execute() throws ApiException {
            ApiResponse<ResultsScenario> localVarResp = listPaginatedScenariosWithHttpInfo(orgId, from, status, limit, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPaginatedScenarios request with HTTP info returned
         * @return ApiResponse&lt;ResultsScenario&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsScenario> executeWithHttpInfo() throws ApiException {
            return listPaginatedScenariosWithHttpInfo(orgId, from, status, limit, returnAccess);
        }

        /**
         * Execute listPaginatedScenarios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsScenario> _callback) throws ApiException {
            return listPaginatedScenariosAsync(orgId, from, status, limit, returnAccess, _callback);
        }
    }

    /**
     * Return all scenarios in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ListPaginatedScenariosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListPaginatedScenariosRequestBuilder listPaginatedScenarios(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListPaginatedScenariosRequestBuilder(orgId);
    }
    private okhttp3.Call manuallyRecalculateMetadataCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/recalculate-metadata"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manuallyRecalculateMetadataValidateBeforeCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling manuallyRecalculateMetadata(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling manuallyRecalculateMetadata(Async)");
        }

        return manuallyRecalculateMetadataCall(orgId, scenarioId, _callback);

    }


    private ApiResponse<ScenarioMetadata> manuallyRecalculateMetadataWithHttpInfo(String orgId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = manuallyRecalculateMetadataValidateBeforeCall(orgId, scenarioId, null);
        Type localVarReturnType = new TypeToken<ScenarioMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manuallyRecalculateMetadataAsync(String orgId, String scenarioId, final ApiCallback<ScenarioMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = manuallyRecalculateMetadataValidateBeforeCall(orgId, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ScenarioMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManuallyRecalculateMetadataRequestBuilder {
        private final String orgId;
        private final String scenarioId;

        private ManuallyRecalculateMetadataRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Build call for manuallyRecalculateMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return manuallyRecalculateMetadataCall(orgId, scenarioId, _callback);
        }


        /**
         * Execute manuallyRecalculateMetadata request
         * @return ScenarioMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ScenarioMetadata execute() throws ApiException {
            ApiResponse<ScenarioMetadata> localVarResp = manuallyRecalculateMetadataWithHttpInfo(orgId, scenarioId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manuallyRecalculateMetadata request with HTTP info returned
         * @return ApiResponse&lt;ScenarioMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScenarioMetadata> executeWithHttpInfo() throws ApiException {
            return manuallyRecalculateMetadataWithHttpInfo(orgId, scenarioId);
        }

        /**
         * Execute manuallyRecalculateMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScenarioMetadata> _callback) throws ApiException {
            return manuallyRecalculateMetadataAsync(orgId, scenarioId, _callback);
        }
    }

    /**
     * Manually recalculate a scenario&#39;s metadata
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return ManuallyRecalculateMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ManuallyRecalculateMetadataRequestBuilder manuallyRecalculateMetadata(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new ManuallyRecalculateMetadataRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call mergeIntoPrimaryTimelineCall(String orgId, String scenarioId, Boolean skipErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/merge"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipErrors", skipErrors));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeIntoPrimaryTimelineValidateBeforeCall(String orgId, String scenarioId, Boolean skipErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling mergeIntoPrimaryTimeline(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling mergeIntoPrimaryTimeline(Async)");
        }

        return mergeIntoPrimaryTimelineCall(orgId, scenarioId, skipErrors, _callback);

    }


    private ApiResponse<Process> mergeIntoPrimaryTimelineWithHttpInfo(String orgId, String scenarioId, Boolean skipErrors) throws ApiException {
        okhttp3.Call localVarCall = mergeIntoPrimaryTimelineValidateBeforeCall(orgId, scenarioId, skipErrors, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call mergeIntoPrimaryTimelineAsync(String orgId, String scenarioId, Boolean skipErrors, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeIntoPrimaryTimelineValidateBeforeCall(orgId, scenarioId, skipErrors, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MergeIntoPrimaryTimelineRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private Boolean skipErrors;

        private MergeIntoPrimaryTimelineRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set skipErrors
         * @param skipErrors If passed, will skip any changes that fail validation (optional)
         * @return MergeIntoPrimaryTimelineRequestBuilder
         */
        public MergeIntoPrimaryTimelineRequestBuilder skipErrors(Boolean skipErrors) {
            this.skipErrors = skipErrors;
            return this;
        }
        
        /**
         * Build call for mergeIntoPrimaryTimeline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return mergeIntoPrimaryTimelineCall(orgId, scenarioId, skipErrors, _callback);
        }


        /**
         * Execute mergeIntoPrimaryTimeline request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = mergeIntoPrimaryTimelineWithHttpInfo(orgId, scenarioId, skipErrors);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute mergeIntoPrimaryTimeline request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return mergeIntoPrimaryTimelineWithHttpInfo(orgId, scenarioId, skipErrors);
        }

        /**
         * Execute mergeIntoPrimaryTimeline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return mergeIntoPrimaryTimelineAsync(orgId, scenarioId, skipErrors, _callback);
        }
    }

    /**
     * Merge a scenario into the primary timeline
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id to merge (required)
     * @return MergeIntoPrimaryTimelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public MergeIntoPrimaryTimelineRequestBuilder mergeIntoPrimaryTimeline(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new MergeIntoPrimaryTimelineRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, scenarioId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, scenarioId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String scenarioId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, scenarioId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String scenarioId;

        private RemoveByIdRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, scenarioId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, scenarioId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, scenarioId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, scenarioId, _callback);
        }
    }

    /**
     * Delete a scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call unarchiveSetOfScenariosCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/bulk/unarchive"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchiveSetOfScenariosValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling unarchiveSetOfScenarios(Async)");
        }

        return unarchiveSetOfScenariosCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> unarchiveSetOfScenariosWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = unarchiveSetOfScenariosValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unarchiveSetOfScenariosAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchiveSetOfScenariosValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnarchiveSetOfScenariosRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private UnarchiveSetOfScenariosRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of scenario ids to unarchive (optional)
         * @return UnarchiveSetOfScenariosRequestBuilder
         */
        public UnarchiveSetOfScenariosRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for unarchiveSetOfScenarios
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return unarchiveSetOfScenariosCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute unarchiveSetOfScenarios request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = unarchiveSetOfScenariosWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unarchiveSetOfScenarios request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return unarchiveSetOfScenariosWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute unarchiveSetOfScenarios request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return unarchiveSetOfScenariosAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Unarchive a set of scenarios
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UnarchiveSetOfScenariosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UnarchiveSetOfScenariosRequestBuilder unarchiveSetOfScenarios(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UnarchiveSetOfScenariosRequestBuilder(orgId);
    }
    private okhttp3.Call updateScenarioChangeCall(String orgId, String scenarioId, Boolean silent, UpdateScenario updateScenario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateScenario;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (silent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("silent", silent));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScenarioChangeValidateBeforeCall(String orgId, String scenarioId, Boolean silent, UpdateScenario updateScenario, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateScenarioChange(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling updateScenarioChange(Async)");
        }

        return updateScenarioChangeCall(orgId, scenarioId, silent, updateScenario, _callback);

    }


    private ApiResponse<Void> updateScenarioChangeWithHttpInfo(String orgId, String scenarioId, Boolean silent, UpdateScenario updateScenario) throws ApiException {
        okhttp3.Call localVarCall = updateScenarioChangeValidateBeforeCall(orgId, scenarioId, silent, updateScenario, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateScenarioChangeAsync(String orgId, String scenarioId, Boolean silent, UpdateScenario updateScenario, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScenarioChangeValidateBeforeCall(orgId, scenarioId, silent, updateScenario, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateScenarioChangeRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private String description;
        private String name;
        private String startDate;
        private String status;
        private List<ShareAccess> shareAccess;
        private String startDateFixed;
        private Set<String> validJobIdSet;
        private String entityId;
        private String entityType;
        private Set<ScenarioSharedViewConfig> sharedViewConfig;
        private Money budget;
        private String costCalc;
        private Boolean silent;

        private UpdateScenarioChangeRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set description
         * @param description scenario description (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name scenario name (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate date that this scenario diverges from primary (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set status
         * @param status status of scenario (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to this scenario (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set startDateFixed
         * @param startDateFixed whether or not the start date should stay fixed in time, or update to today&#39;s date as time passes (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder startDateFixed(String startDateFixed) {
            this.startDateFixed = startDateFixed;
            return this;
        }
        
        /**
         * Set validJobIdSet
         * @param validJobIdSet This scenario changes are restricted to the following jobIds (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder validJobIdSet(Set<String> validJobIdSet) {
            this.validJobIdSet = validJobIdSet;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId The entity this scenario is associated with (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType The type of entity associated with this scenario (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set sharedViewConfig
         * @param sharedViewConfig View configurations associated with this scenario (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder sharedViewConfig(Set<ScenarioSharedViewConfig> sharedViewConfig) {
            this.sharedViewConfig = sharedViewConfig;
            return this;
        }
        
        /**
         * Set budget
         * @param budget  (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder budget(Money budget) {
            this.budget = budget;
            return this;
        }
        
        /**
         * Set costCalc
         * @param costCalc CQL used to calculate the budget allocation in the scenario (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder costCalc(String costCalc) {
            this.costCalc = costCalc;
            return this;
        }
        
        /**
         * Set silent
         * @param silent Suppress notification emails (optional)
         * @return UpdateScenarioChangeRequestBuilder
         */
        public UpdateScenarioChangeRequestBuilder silent(Boolean silent) {
            this.silent = silent;
            return this;
        }
        
        /**
         * Build call for updateScenarioChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateScenario updateScenario = buildBodyParams();
            return updateScenarioChangeCall(orgId, scenarioId, silent, updateScenario, _callback);
        }

        private UpdateScenario buildBodyParams() {
            UpdateScenario updateScenario = new UpdateScenario();
            updateScenario.description(this.description);
            updateScenario.name(this.name);
            updateScenario.startDate(this.startDate);
            if (this.status != null)
            updateScenario.status(UpdateScenario.StatusEnum.fromValue(this.status));
            updateScenario.shareAccess(this.shareAccess);
            if (this.startDateFixed != null)
            updateScenario.startDateFixed(UpdateScenario.StartDateFixedEnum.fromValue(this.startDateFixed));
            updateScenario.validJobIdSet(this.validJobIdSet);
            updateScenario.entityId(this.entityId);
            if (this.entityType != null)
            updateScenario.entityType(UpdateScenario.EntityTypeEnum.fromValue(this.entityType));
            updateScenario.sharedViewConfig(this.sharedViewConfig);
            updateScenario.budget(this.budget);
            updateScenario.costCalc(this.costCalc);
            return updateScenario;
        }

        /**
         * Execute updateScenarioChange request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateScenario updateScenario = buildBodyParams();
            updateScenarioChangeWithHttpInfo(orgId, scenarioId, silent, updateScenario);
        }

        /**
         * Execute updateScenarioChange request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateScenario updateScenario = buildBodyParams();
            return updateScenarioChangeWithHttpInfo(orgId, scenarioId, silent, updateScenario);
        }

        /**
         * Execute updateScenarioChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateScenario updateScenario = buildBodyParams();
            return updateScenarioChangeAsync(orgId, scenarioId, silent, updateScenario, _callback);
        }
    }

    /**
     * Update an existing scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return UpdateScenarioChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateScenarioChangeRequestBuilder updateScenarioChange(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new UpdateScenarioChangeRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call updateSharedViewConfigCall(String orgId, String scenarioId, ScenarioSharedViewConfig scenarioSharedViewConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scenarioSharedViewConfig;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/update-shared-view"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSharedViewConfigValidateBeforeCall(String orgId, String scenarioId, ScenarioSharedViewConfig scenarioSharedViewConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateSharedViewConfig(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling updateSharedViewConfig(Async)");
        }

        return updateSharedViewConfigCall(orgId, scenarioId, scenarioSharedViewConfig, _callback);

    }


    private ApiResponse<Void> updateSharedViewConfigWithHttpInfo(String orgId, String scenarioId, ScenarioSharedViewConfig scenarioSharedViewConfig) throws ApiException {
        okhttp3.Call localVarCall = updateSharedViewConfigValidateBeforeCall(orgId, scenarioId, scenarioSharedViewConfig, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSharedViewConfigAsync(String orgId, String scenarioId, ScenarioSharedViewConfig scenarioSharedViewConfig, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSharedViewConfigValidateBeforeCall(orgId, scenarioId, scenarioSharedViewConfig, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSharedViewConfigRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private List<String> customColumnNames;
        private Map<String, Integer> columnWidths;
        private String type;
        private String updateId;
        private Long updateAt;

        private UpdateSharedViewConfigRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set customColumnNames
         * @param customColumnNames list of column names to display (optional)
         * @return UpdateSharedViewConfigRequestBuilder
         */
        public UpdateSharedViewConfigRequestBuilder customColumnNames(List<String> customColumnNames) {
            this.customColumnNames = customColumnNames;
            return this;
        }
        
        /**
         * Set columnWidths
         * @param columnWidths map of column names to widths (optional)
         * @return UpdateSharedViewConfigRequestBuilder
         */
        public UpdateSharedViewConfigRequestBuilder columnWidths(Map<String, Integer> columnWidths) {
            this.columnWidths = columnWidths;
            return this;
        }
        
        /**
         * Set type
         * @param type type of view (optional)
         * @return UpdateSharedViewConfigRequestBuilder
         */
        public UpdateSharedViewConfigRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set updateId
         * @param updateId update id (optional)
         * @return UpdateSharedViewConfigRequestBuilder
         */
        public UpdateSharedViewConfigRequestBuilder updateId(String updateId) {
            this.updateId = updateId;
            return this;
        }
        
        /**
         * Set updateAt
         * @param updateAt update at (optional)
         * @return UpdateSharedViewConfigRequestBuilder
         */
        public UpdateSharedViewConfigRequestBuilder updateAt(Long updateAt) {
            this.updateAt = updateAt;
            return this;
        }
        
        /**
         * Build call for updateSharedViewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ScenarioSharedViewConfig scenarioSharedViewConfig = buildBodyParams();
            return updateSharedViewConfigCall(orgId, scenarioId, scenarioSharedViewConfig, _callback);
        }

        private ScenarioSharedViewConfig buildBodyParams() {
            ScenarioSharedViewConfig scenarioSharedViewConfig = new ScenarioSharedViewConfig();
            scenarioSharedViewConfig.customColumnNames(this.customColumnNames);
            scenarioSharedViewConfig.columnWidths(this.columnWidths);
            if (this.type != null)
            scenarioSharedViewConfig.type(ScenarioSharedViewConfig.TypeEnum.fromValue(this.type));
            scenarioSharedViewConfig.updateId(this.updateId);
            scenarioSharedViewConfig.updateAt(this.updateAt);
            return scenarioSharedViewConfig;
        }

        /**
         * Execute updateSharedViewConfig request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ScenarioSharedViewConfig scenarioSharedViewConfig = buildBodyParams();
            updateSharedViewConfigWithHttpInfo(orgId, scenarioId, scenarioSharedViewConfig);
        }

        /**
         * Execute updateSharedViewConfig request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ScenarioSharedViewConfig scenarioSharedViewConfig = buildBodyParams();
            return updateSharedViewConfigWithHttpInfo(orgId, scenarioId, scenarioSharedViewConfig);
        }

        /**
         * Execute updateSharedViewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ScenarioSharedViewConfig scenarioSharedViewConfig = buildBodyParams();
            return updateSharedViewConfigAsync(orgId, scenarioId, scenarioSharedViewConfig, _callback);
        }
    }

    /**
     * Update a scenario view config
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return UpdateSharedViewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSharedViewConfigRequestBuilder updateSharedViewConfig(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new UpdateSharedViewConfigRequestBuilder(orgId, scenarioId);
    }
}
