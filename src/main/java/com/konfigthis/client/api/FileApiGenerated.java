/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FileEntity;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.ResultsFileEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FileApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FileApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMetadataCall(String orgId, String entityId, String entityType, Integer limit, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/file"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String orgId, String entityId, String entityType, Integer limit, String from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMetadata(Async)");
        }

        return getMetadataCall(orgId, entityId, entityType, limit, from, _callback);

    }


    private ApiResponse<ResultsFileEntity> getMetadataWithHttpInfo(String orgId, String entityId, String entityType, Integer limit, String from) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(orgId, entityId, entityType, limit, from, null);
        Type localVarReturnType = new TypeToken<ResultsFileEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataAsync(String orgId, String entityId, String entityType, Integer limit, String from, final ApiCallback<ResultsFileEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(orgId, entityId, entityType, limit, from, _callback);
        Type localVarReturnType = new TypeToken<ResultsFileEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataRequestBuilder {
        private final String orgId;
        private String entityId;
        private String entityType;
        private Integer limit;
        private String from;

        private GetMetadataRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set entityId
         * @param entityId Entity id (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType Entity type (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set from
         * @param from From result id (optional)
         * @return GetMetadataRequestBuilder
         */
        public GetMetadataRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Build call for getMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataCall(orgId, entityId, entityType, limit, from, _callback);
        }


        /**
         * Execute getMetadata request
         * @return ResultsFileEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsFileEntity execute() throws ApiException {
            ApiResponse<ResultsFileEntity> localVarResp = getMetadataWithHttpInfo(orgId, entityId, entityType, limit, from);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata request with HTTP info returned
         * @return ApiResponse&lt;ResultsFileEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsFileEntity> executeWithHttpInfo() throws ApiException {
            return getMetadataWithHttpInfo(orgId, entityId, entityType, limit, from);
        }

        /**
         * Execute getMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsFileEntity> _callback) throws ApiException {
            return getMetadataAsync(orgId, entityId, entityType, limit, from, _callback);
        }
    }

    /**
     * Returns metadata about a file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataRequestBuilder getMetadata(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetMetadataRequestBuilder(orgId);
    }
    private okhttp3.Call getMetadataByIdCall(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/file/{fileId}/download"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataByIdValidateBeforeCall(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMetadataById(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getMetadataById(Async)");
        }

        return getMetadataByIdCall(orgId, fileId, _callback);

    }


    private ApiResponse<Void> getMetadataByIdWithHttpInfo(String orgId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getMetadataByIdValidateBeforeCall(orgId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getMetadataByIdAsync(String orgId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataByIdValidateBeforeCall(orgId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetMetadataByIdRequestBuilder {
        private final String orgId;
        private final String fileId;

        private GetMetadataByIdRequestBuilder(String orgId, String fileId) {
            this.orgId = orgId;
            this.fileId = fileId;
        }

        /**
         * Build call for getMetadataById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataByIdCall(orgId, fileId, _callback);
        }


        /**
         * Execute getMetadataById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getMetadataByIdWithHttpInfo(orgId, fileId);
        }

        /**
         * Execute getMetadataById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getMetadataByIdWithHttpInfo(orgId, fileId);
        }

        /**
         * Execute getMetadataById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getMetadataByIdAsync(orgId, fileId, _callback);
        }
    }

    /**
     * Download a file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fileId File id (required)
     * @return GetMetadataByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataByIdRequestBuilder getMetadataById(String orgId, String fileId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetMetadataByIdRequestBuilder(orgId, fileId);
    }
    private okhttp3.Call getMetadata_0Call(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/file/{fileId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadata_0ValidateBeforeCall(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMetadata_0(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getMetadata_0(Async)");
        }

        return getMetadata_0Call(orgId, fileId, _callback);

    }


    private ApiResponse<FileEntity> getMetadata_0WithHttpInfo(String orgId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getMetadata_0ValidateBeforeCall(orgId, fileId, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadata_0Async(String orgId, String fileId, final ApiCallback<FileEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadata_0ValidateBeforeCall(orgId, fileId, _callback);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadata0RequestBuilder {
        private final String orgId;
        private final String fileId;

        private GetMetadata0RequestBuilder(String orgId, String fileId) {
            this.orgId = orgId;
            this.fileId = fileId;
        }

        /**
         * Build call for getMetadata_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadata_0Call(orgId, fileId, _callback);
        }


        /**
         * Execute getMetadata_0 request
         * @return FileEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public FileEntity execute() throws ApiException {
            ApiResponse<FileEntity> localVarResp = getMetadata_0WithHttpInfo(orgId, fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata_0 request with HTTP info returned
         * @return ApiResponse&lt;FileEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileEntity> executeWithHttpInfo() throws ApiException {
            return getMetadata_0WithHttpInfo(orgId, fileId);
        }

        /**
         * Execute getMetadata_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileEntity> _callback) throws ApiException {
            return getMetadata_0Async(orgId, fileId, _callback);
        }
    }

    /**
     * Returns metadata about a file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fileId File id (required)
     * @return GetMetadata0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadata0RequestBuilder getMetadata_0(String orgId, String fileId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetMetadata0RequestBuilder(orgId, fileId);
    }
    private okhttp3.Call removeFileByIdCall(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/file/{fileId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFileByIdValidateBeforeCall(String orgId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeFileById(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling removeFileById(Async)");
        }

        return removeFileByIdCall(orgId, fileId, _callback);

    }


    private ApiResponse<Void> removeFileByIdWithHttpInfo(String orgId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = removeFileByIdValidateBeforeCall(orgId, fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFileByIdAsync(String orgId, String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFileByIdValidateBeforeCall(orgId, fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFileByIdRequestBuilder {
        private final String orgId;
        private final String fileId;

        private RemoveFileByIdRequestBuilder(String orgId, String fileId) {
            this.orgId = orgId;
            this.fileId = fileId;
        }

        /**
         * Build call for removeFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFileByIdCall(orgId, fileId, _callback);
        }


        /**
         * Execute removeFileById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFileByIdWithHttpInfo(orgId, fileId);
        }

        /**
         * Execute removeFileById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFileByIdWithHttpInfo(orgId, fileId);
        }

        /**
         * Execute removeFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFileByIdAsync(orgId, fileId, _callback);
        }
    }

    /**
     * Delete a file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fileId File id (required)
     * @return RemoveFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFileByIdRequestBuilder removeFileById(String orgId, String fileId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new RemoveFileByIdRequestBuilder(orgId, fileId);
    }
    private okhttp3.Call uploadNewFileCall(String orgId, String entityId, String entityType, String field, String sensitive, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/file"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (sensitive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensitive", sensitive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadNewFileValidateBeforeCall(String orgId, String entityId, String entityType, String field, String sensitive, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling uploadNewFile(Async)");
        }

        return uploadNewFileCall(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<FileEntity> uploadNewFileWithHttpInfo(String orgId, String entityId, String entityType, String field, String sensitive, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadNewFileValidateBeforeCall(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadNewFileAsync(String orgId, String entityId, String entityType, String field, String sensitive, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<FileEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadNewFileValidateBeforeCall(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadNewFileRequestBuilder {
        private final String orgId;
        private File _file;
        private String entityId;
        private String entityType;
        private String field;
        private String sensitive;

        private UploadNewFileRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return UploadNewFileRequestBuilder
         */
        public UploadNewFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId entity id (if not passed, defaults to user id) (optional)
         * @return UploadNewFileRequestBuilder
         */
        public UploadNewFileRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType entity type (if not passed, defaults to user) (optional)
         * @return UploadNewFileRequestBuilder
         */
        public UploadNewFileRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set field
         * @param field field name - can leave blank for a general upload (optional)
         * @return UploadNewFileRequestBuilder
         */
        public UploadNewFileRequestBuilder field(String field) {
            this.field = field;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive file sensitivity level - defaults to PERSONAL (optional)
         * @return UploadNewFileRequestBuilder
         */
        public UploadNewFileRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Build call for uploadNewFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewFileCall(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute uploadNewFile request
         * @return FileEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public FileEntity execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            ApiResponse<FileEntity> localVarResp = uploadNewFileWithHttpInfo(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadNewFile request with HTTP info returned
         * @return ApiResponse&lt;FileEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileEntity> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewFileWithHttpInfo(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest);
        }

        /**
         * Execute uploadNewFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileEntity> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewFileAsync(orgId, entityId, entityType, field, sensitive, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Upload a new file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UploadNewFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public UploadNewFileRequestBuilder uploadNewFile(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UploadNewFileRequestBuilder(orgId);
    }
}
