/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateDataView;
import com.konfigthis.client.model.DataView;
import com.konfigthis.client.model.ResultsDataView;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateDataView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DataViewApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataViewApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DataViewApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDataViewCall(String orgId, CreateDataView createDataView, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDataView;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-view"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDataViewValidateBeforeCall(String orgId, CreateDataView createDataView, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewDataView(Async)");
        }

        return createNewDataViewCall(orgId, createDataView, _callback);

    }


    private ApiResponse<DataView> createNewDataViewWithHttpInfo(String orgId, CreateDataView createDataView) throws ApiException {
        okhttp3.Call localVarCall = createNewDataViewValidateBeforeCall(orgId, createDataView, null);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDataViewAsync(String orgId, CreateDataView createDataView, final ApiCallback<DataView> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDataViewValidateBeforeCall(orgId, createDataView, _callback);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDataViewRequestBuilder {
        private final String name;
        private final String orgId;
        private String columns;
        private String type;
        private String entityType;
        private Map<String, Double> columnWidths;
        private String date;
        private String startDate;
        private String endDate;
        private String filter;
        private String sort;
        private String groupBy;
        private List<ShareAccess> shareAccess;
        private String sensitive;

        private CreateNewDataViewRequestBuilder(String name, String orgId) {
            this.name = name;
            this.orgId = orgId;
        }

        /**
         * Set columns
         * @param columns comma delimited list of columns (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder columns(String columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Set type
         * @param type type of data view (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType entity type being viewed (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set columnWidths
         * @param columnWidths map of column names to widths in pixels (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder columnWidths(Map<String, Double> columnWidths) {
            this.columnWidths = columnWidths;
            return this;
        }
        
        /**
         * Set date
         * @param date date of view, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date of view, if displaying a date range, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end date of view, if displaying a date range, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set filter
         * @param filter filter query (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set sort
         * @param sort comma delimited list of columns by which to sort (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set groupBy
         * @param groupBy column to group duplicates by (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder groupBy(String groupBy) {
            this.groupBy = groupBy;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to view or edit this data view (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of data view (optional)
         * @return CreateNewDataViewRequestBuilder
         */
        public CreateNewDataViewRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Build call for createNewDataView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDataView createDataView = buildBodyParams();
            return createNewDataViewCall(orgId, createDataView, _callback);
        }

        private CreateDataView buildBodyParams() {
            CreateDataView createDataView = new CreateDataView();
            createDataView.name(this.name);
            createDataView.columns(this.columns);
            if (this.type != null)
            createDataView.type(CreateDataView.TypeEnum.fromValue(this.type));
            createDataView.entityType(this.entityType);
            createDataView.columnWidths(this.columnWidths);
            createDataView.date(this.date);
            createDataView.startDate(this.startDate);
            createDataView.endDate(this.endDate);
            createDataView.filter(this.filter);
            createDataView.sort(this.sort);
            createDataView.groupBy(this.groupBy);
            createDataView.shareAccess(this.shareAccess);
            if (this.sensitive != null)
            createDataView.sensitive(CreateDataView.SensitiveEnum.fromValue(this.sensitive));
            return createDataView;
        }

        /**
         * Execute createNewDataView request
         * @return DataView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public DataView execute() throws ApiException {
            CreateDataView createDataView = buildBodyParams();
            ApiResponse<DataView> localVarResp = createNewDataViewWithHttpInfo(orgId, createDataView);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDataView request with HTTP info returned
         * @return ApiResponse&lt;DataView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataView> executeWithHttpInfo() throws ApiException {
            CreateDataView createDataView = buildBodyParams();
            return createNewDataViewWithHttpInfo(orgId, createDataView);
        }

        /**
         * Execute createNewDataView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataView> _callback) throws ApiException {
            CreateDataView createDataView = buildBodyParams();
            return createNewDataViewAsync(orgId, createDataView, _callback);
        }
    }

    /**
     * Create a data view
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewDataViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDataViewRequestBuilder createNewDataView(String name, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewDataViewRequestBuilder(name, orgId);
    }
    private okhttp3.Call deleteDataViewCall(String orgId, String dataViewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-view/{dataViewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "dataViewId" + "}", localVarApiClient.escapeString(dataViewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDataViewValidateBeforeCall(String orgId, String dataViewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteDataView(Async)");
        }

        // verify the required parameter 'dataViewId' is set
        if (dataViewId == null) {
            throw new ApiException("Missing the required parameter 'dataViewId' when calling deleteDataView(Async)");
        }

        return deleteDataViewCall(orgId, dataViewId, _callback);

    }


    private ApiResponse<Void> deleteDataViewWithHttpInfo(String orgId, String dataViewId) throws ApiException {
        okhttp3.Call localVarCall = deleteDataViewValidateBeforeCall(orgId, dataViewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDataViewAsync(String orgId, String dataViewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDataViewValidateBeforeCall(orgId, dataViewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDataViewRequestBuilder {
        private final String orgId;
        private final String dataViewId;

        private DeleteDataViewRequestBuilder(String orgId, String dataViewId) {
            this.orgId = orgId;
            this.dataViewId = dataViewId;
        }

        /**
         * Build call for deleteDataView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDataViewCall(orgId, dataViewId, _callback);
        }


        /**
         * Execute deleteDataView request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteDataViewWithHttpInfo(orgId, dataViewId);
        }

        /**
         * Execute deleteDataView request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteDataViewWithHttpInfo(orgId, dataViewId);
        }

        /**
         * Execute deleteDataView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteDataViewAsync(orgId, dataViewId, _callback);
        }
    }

    /**
     * Delete a data  view
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param dataViewId Data view id (required)
     * @return DeleteDataViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDataViewRequestBuilder deleteDataView(String orgId, String dataViewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (dataViewId == null) throw new IllegalArgumentException("\"dataViewId\" is required but got null");
            

        return new DeleteDataViewRequestBuilder(orgId, dataViewId);
    }
    private okhttp3.Call getAllPaginatedCall(String orgId, String from, String type, Integer limit, String ids, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-view"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaginatedValidateBeforeCall(String orgId, String from, String type, Integer limit, String ids, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPaginated(Async)");
        }

        return getAllPaginatedCall(orgId, from, type, limit, ids, returnAccess, _callback);

    }


    private ApiResponse<ResultsDataView> getAllPaginatedWithHttpInfo(String orgId, String from, String type, Integer limit, String ids, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, type, limit, ids, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsDataView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaginatedAsync(String orgId, String from, String type, Integer limit, String ids, String returnAccess, final ApiCallback<ResultsDataView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, type, limit, ids, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsDataView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaginatedRequestBuilder {
        private final String orgId;
        private String from;
        private String type;
        private Integer limit;
        private String ids;
        private String returnAccess;

        private GetAllPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Data view id to start paginating from (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set type
         * @param type Data view type to filter by (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Comma delimited of ids to return (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getAllPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaginatedCall(orgId, from, type, limit, ids, returnAccess, _callback);
        }


        /**
         * Execute getAllPaginated request
         * @return ResultsDataView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsDataView execute() throws ApiException {
            ApiResponse<ResultsDataView> localVarResp = getAllPaginatedWithHttpInfo(orgId, from, type, limit, ids, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsDataView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsDataView> executeWithHttpInfo() throws ApiException {
            return getAllPaginatedWithHttpInfo(orgId, from, type, limit, ids, returnAccess);
        }

        /**
         * Execute getAllPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsDataView> _callback) throws ApiException {
            return getAllPaginatedAsync(orgId, from, type, limit, ids, returnAccess, _callback);
        }
    }

    /**
     * Return all data views in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaginatedRequestBuilder getAllPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String dataViewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-view/{dataViewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "dataViewId" + "}", localVarApiClient.escapeString(dataViewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String dataViewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'dataViewId' is set
        if (dataViewId == null) {
            throw new ApiException("Missing the required parameter 'dataViewId' when calling getById(Async)");
        }

        return getByIdCall(orgId, dataViewId, _callback);

    }


    private ApiResponse<DataView> getByIdWithHttpInfo(String orgId, String dataViewId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, dataViewId, null);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String dataViewId, final ApiCallback<DataView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, dataViewId, _callback);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String dataViewId;

        private GetByIdRequestBuilder(String orgId, String dataViewId) {
            this.orgId = orgId;
            this.dataViewId = dataViewId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, dataViewId, _callback);
        }


        /**
         * Execute getById request
         * @return DataView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public DataView execute() throws ApiException {
            ApiResponse<DataView> localVarResp = getByIdWithHttpInfo(orgId, dataViewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;DataView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataView> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, dataViewId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataView> _callback) throws ApiException {
            return getByIdAsync(orgId, dataViewId, _callback);
        }
    }

    /**
     * Return a particular data view by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param dataViewId Data view id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String dataViewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (dataViewId == null) throw new IllegalArgumentException("\"dataViewId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, dataViewId);
    }
    private okhttp3.Call updateExistingViewCall(String orgId, String dataViewId, UpdateDataView updateDataView, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDataView;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-view/{dataViewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "dataViewId" + "}", localVarApiClient.escapeString(dataViewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingViewValidateBeforeCall(String orgId, String dataViewId, UpdateDataView updateDataView, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingView(Async)");
        }

        // verify the required parameter 'dataViewId' is set
        if (dataViewId == null) {
            throw new ApiException("Missing the required parameter 'dataViewId' when calling updateExistingView(Async)");
        }

        return updateExistingViewCall(orgId, dataViewId, updateDataView, _callback);

    }


    private ApiResponse<DataView> updateExistingViewWithHttpInfo(String orgId, String dataViewId, UpdateDataView updateDataView) throws ApiException {
        okhttp3.Call localVarCall = updateExistingViewValidateBeforeCall(orgId, dataViewId, updateDataView, null);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingViewAsync(String orgId, String dataViewId, UpdateDataView updateDataView, final ApiCallback<DataView> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingViewValidateBeforeCall(orgId, dataViewId, updateDataView, _callback);
        Type localVarReturnType = new TypeToken<DataView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingViewRequestBuilder {
        private final String orgId;
        private final String dataViewId;
        private String name;
        private String columns;
        private String type;
        private String entityType;
        private Map<String, Double> columnWidths;
        private String date;
        private String startDate;
        private String endDate;
        private String filter;
        private String sort;
        private String groupBy;
        private List<ShareAccess> shareAccess;
        private String sensitive;

        private UpdateExistingViewRequestBuilder(String orgId, String dataViewId) {
            this.orgId = orgId;
            this.dataViewId = dataViewId;
        }

        /**
         * Set name
         * @param name data view name (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set columns
         * @param columns comma delimited list of columns (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder columns(String columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Set type
         * @param type type of data view (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType entity type being viewed (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set columnWidths
         * @param columnWidths map of column names to widths in pixels (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder columnWidths(Map<String, Double> columnWidths) {
            this.columnWidths = columnWidths;
            return this;
        }
        
        /**
         * Set date
         * @param date date of view, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder date(String date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date of view, if displaying a date range, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end date of view, if displaying a date range, in either relative (-7d) or exact (YYYY-MM-DD) format; if not present, defaults to today (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set filter
         * @param filter filter query (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set sort
         * @param sort comma delimited list of columns by which to sort (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set groupBy
         * @param groupBy column to group duplicates by (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder groupBy(String groupBy) {
            this.groupBy = groupBy;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to view or edit this data view (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of data view (optional)
         * @return UpdateExistingViewRequestBuilder
         */
        public UpdateExistingViewRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Build call for updateExistingView
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateDataView updateDataView = buildBodyParams();
            return updateExistingViewCall(orgId, dataViewId, updateDataView, _callback);
        }

        private UpdateDataView buildBodyParams() {
            UpdateDataView updateDataView = new UpdateDataView();
            updateDataView.name(this.name);
            updateDataView.columns(this.columns);
            if (this.type != null)
            updateDataView.type(UpdateDataView.TypeEnum.fromValue(this.type));
            updateDataView.entityType(this.entityType);
            updateDataView.columnWidths(this.columnWidths);
            updateDataView.date(this.date);
            updateDataView.startDate(this.startDate);
            updateDataView.endDate(this.endDate);
            updateDataView.filter(this.filter);
            updateDataView.sort(this.sort);
            updateDataView.groupBy(this.groupBy);
            updateDataView.shareAccess(this.shareAccess);
            if (this.sensitive != null)
            updateDataView.sensitive(UpdateDataView.SensitiveEnum.fromValue(this.sensitive));
            return updateDataView;
        }

        /**
         * Execute updateExistingView request
         * @return DataView
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public DataView execute() throws ApiException {
            UpdateDataView updateDataView = buildBodyParams();
            ApiResponse<DataView> localVarResp = updateExistingViewWithHttpInfo(orgId, dataViewId, updateDataView);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingView request with HTTP info returned
         * @return ApiResponse&lt;DataView&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DataView> executeWithHttpInfo() throws ApiException {
            UpdateDataView updateDataView = buildBodyParams();
            return updateExistingViewWithHttpInfo(orgId, dataViewId, updateDataView);
        }

        /**
         * Execute updateExistingView request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DataView> _callback) throws ApiException {
            UpdateDataView updateDataView = buildBodyParams();
            return updateExistingViewAsync(orgId, dataViewId, updateDataView, _callback);
        }
    }

    /**
     * Update an existing data view
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param dataViewId Data view id (required)
     * @return UpdateExistingViewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingViewRequestBuilder updateExistingView(String orgId, String dataViewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (dataViewId == null) throw new IllegalArgumentException("\"dataViewId\" is required but got null");
            

        return new UpdateExistingViewRequestBuilder(orgId, dataViewId);
    }
}
