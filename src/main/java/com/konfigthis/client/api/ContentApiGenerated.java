/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Content;
import com.konfigthis.client.model.ContentBlock;
import com.konfigthis.client.model.ContentRender;
import com.konfigthis.client.model.CreateContent;
import com.konfigthis.client.model.HomepageContentRender;
import com.konfigthis.client.model.ResultsContent;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateContent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewPieceCall(String orgId, CreateContent createContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContent;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPieceValidateBeforeCall(String orgId, CreateContent createContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewPiece(Async)");
        }

        return createNewPieceCall(orgId, createContent, _callback);

    }


    private ApiResponse<Content> createNewPieceWithHttpInfo(String orgId, CreateContent createContent) throws ApiException {
        okhttp3.Call localVarCall = createNewPieceValidateBeforeCall(orgId, createContent, null);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPieceAsync(String orgId, CreateContent createContent, final ApiCallback<Content> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPieceValidateBeforeCall(orgId, createContent, _callback);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPieceRequestBuilder {
        private final String title;
        private final String orgId;
        private String parentContentId;
        private String path;
        private List<ContentBlock> blocks;
        private String imagePath;
        private String emoji;
        private String coverImagePath;
        private String sensitive;
        private List<ShareAccess> shareAccess;
        private String status;

        private CreateNewPieceRequestBuilder(String title, String orgId) {
            this.title = title;
            this.orgId = orgId;
        }

        /**
         * Set parentContentId
         * @param parentContentId parent content id in the hierarchy (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder parentContentId(String parentContentId) {
            this.parentContentId = parentContentId;
            return this;
        }
        
        /**
         * Set path
         * @param path full path to the content, if not set, defaults to an id/slug generated URL (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder path(String path) {
            this.path = path;
            return this;
        }
        
        /**
         * Set blocks
         * @param blocks content blocks (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder blocks(List<ContentBlock> blocks) {
            this.blocks = blocks;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to the image for the page (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set emoji
         * @param emoji emoji, if an emoji is used to represent the page (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder emoji(String emoji) {
            this.emoji = emoji;
            return this;
        }
        
        /**
         * Set coverImagePath
         * @param coverImagePath path to the cover image for the content page (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder coverImagePath(String coverImagePath) {
            this.coverImagePath = coverImagePath;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level (ORG public, HIGHly sensitive, or PRIVATE) (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess list of users and groups who have the content shared with them (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of the content page (optional)
         * @return CreateNewPieceRequestBuilder
         */
        public CreateNewPieceRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createNewPiece
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContent createContent = buildBodyParams();
            return createNewPieceCall(orgId, createContent, _callback);
        }

        private CreateContent buildBodyParams() {
            CreateContent createContent = new CreateContent();
            createContent.title(this.title);
            createContent.parentContentId(this.parentContentId);
            createContent.path(this.path);
            createContent.blocks(this.blocks);
            createContent.imagePath(this.imagePath);
            createContent.emoji(this.emoji);
            createContent.coverImagePath(this.coverImagePath);
            if (this.sensitive != null)
            createContent.sensitive(CreateContent.SensitiveEnum.fromValue(this.sensitive));
            createContent.shareAccess(this.shareAccess);
            if (this.status != null)
            createContent.status(CreateContent.StatusEnum.fromValue(this.status));
            return createContent;
        }

        /**
         * Execute createNewPiece request
         * @return Content
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Content execute() throws ApiException {
            CreateContent createContent = buildBodyParams();
            ApiResponse<Content> localVarResp = createNewPieceWithHttpInfo(orgId, createContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPiece request with HTTP info returned
         * @return ApiResponse&lt;Content&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Content> executeWithHttpInfo() throws ApiException {
            CreateContent createContent = buildBodyParams();
            return createNewPieceWithHttpInfo(orgId, createContent);
        }

        /**
         * Execute createNewPiece request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Content> _callback) throws ApiException {
            CreateContent createContent = buildBodyParams();
            return createNewPieceAsync(orgId, createContent, _callback);
        }
    }

    /**
     * Create a new piece of content
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewPieceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPieceRequestBuilder createNewPiece(String title, String orgId) throws IllegalArgumentException {
        if (title == null) throw new IllegalArgumentException("\"title\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewPieceRequestBuilder(title, orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String contentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/{contentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String contentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling getById(Async)");
        }

        return getByIdCall(orgId, contentId, _callback);

    }


    private ApiResponse<Content> getByIdWithHttpInfo(String orgId, String contentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, contentId, null);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String contentId, final ApiCallback<Content> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, contentId, _callback);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String contentId;

        private GetByIdRequestBuilder(String orgId, String contentId) {
            this.orgId = orgId;
            this.contentId = contentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, contentId, _callback);
        }


        /**
         * Execute getById request
         * @return Content
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Content execute() throws ApiException {
            ApiResponse<Content> localVarResp = getByIdWithHttpInfo(orgId, contentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Content&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Content> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, contentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Content> _callback) throws ApiException {
            return getByIdAsync(orgId, contentId, _callback);
        }
    }

    /**
     * Return a particular content by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param contentId Content id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String contentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (contentId == null) throw new IllegalArgumentException("\"contentId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, contentId);
    }
    private okhttp3.Call getByPathCall(String orgId, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/path/{path}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByPathValidateBeforeCall(String orgId, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByPath(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling getByPath(Async)");
        }

        return getByPathCall(orgId, path, _callback);

    }


    private ApiResponse<Content> getByPathWithHttpInfo(String orgId, String path) throws ApiException {
        okhttp3.Call localVarCall = getByPathValidateBeforeCall(orgId, path, null);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByPathAsync(String orgId, String path, final ApiCallback<Content> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByPathValidateBeforeCall(orgId, path, _callback);
        Type localVarReturnType = new TypeToken<Content>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByPathRequestBuilder {
        private final String orgId;
        private final String path;

        private GetByPathRequestBuilder(String orgId, String path) {
            this.orgId = orgId;
            this.path = path;
        }

        /**
         * Build call for getByPath
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByPathCall(orgId, path, _callback);
        }


        /**
         * Execute getByPath request
         * @return Content
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Content execute() throws ApiException {
            ApiResponse<Content> localVarResp = getByPathWithHttpInfo(orgId, path);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByPath request with HTTP info returned
         * @return ApiResponse&lt;Content&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Content> executeWithHttpInfo() throws ApiException {
            return getByPathWithHttpInfo(orgId, path);
        }

        /**
         * Execute getByPath request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Content> _callback) throws ApiException {
            return getByPathAsync(orgId, path, _callback);
        }
    }

    /**
     * Return a particular content by path
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param path Path (required)
     * @return GetByPathRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByPathRequestBuilder getByPath(String orgId, String path) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (path == null) throw new IllegalArgumentException("\"path\" is required but got null");
            

        return new GetByPathRequestBuilder(orgId, path);
    }
    private okhttp3.Call getPaginatedCall(String orgId, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaginatedValidateBeforeCall(String orgId, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getPaginated(Async)");
        }

        return getPaginatedCall(orgId, from, limit, returnAccess, _callback);

    }


    private ApiResponse<ResultsContent> getPaginatedWithHttpInfo(String orgId, String from, Integer limit, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getPaginatedValidateBeforeCall(orgId, from, limit, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPaginatedAsync(String orgId, String from, Integer limit, String returnAccess, final ApiCallback<ResultsContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaginatedValidateBeforeCall(orgId, from, limit, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPaginatedRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;
        private String returnAccess;

        private GetPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Content id to start paginating from (optional)
         * @return GetPaginatedRequestBuilder
         */
        public GetPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetPaginatedRequestBuilder
         */
        public GetPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetPaginatedRequestBuilder
         */
        public GetPaginatedRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPaginatedCall(orgId, from, limit, returnAccess, _callback);
        }


        /**
         * Execute getPaginated request
         * @return ResultsContent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsContent execute() throws ApiException {
            ApiResponse<ResultsContent> localVarResp = getPaginatedWithHttpInfo(orgId, from, limit, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsContent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsContent> executeWithHttpInfo() throws ApiException {
            return getPaginatedWithHttpInfo(orgId, from, limit, returnAccess);
        }

        /**
         * Execute getPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsContent> _callback) throws ApiException {
            return getPaginatedAsync(orgId, from, limit, returnAccess, _callback);
        }
    }

    /**
     * Return all content in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetPaginatedRequestBuilder getPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String contentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/{contentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String contentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, contentId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String contentId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, contentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String contentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, contentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String contentId;

        private RemoveByIdRequestBuilder(String orgId, String contentId) {
            this.orgId = orgId;
            this.contentId = contentId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, contentId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, contentId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, contentId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, contentId, _callback);
        }
    }

    /**
     * Delete a content
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param contentId Content id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String contentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (contentId == null) throw new IllegalArgumentException("\"contentId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, contentId);
    }
    private okhttp3.Call renderByPathCall(String orgId, String path, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/path/{path}/render"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "path" + "}", localVarApiClient.escapeString(path.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderByPathValidateBeforeCall(String orgId, String path, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling renderByPath(Async)");
        }

        // verify the required parameter 'path' is set
        if (path == null) {
            throw new ApiException("Missing the required parameter 'path' when calling renderByPath(Async)");
        }

        return renderByPathCall(orgId, path, _callback);

    }


    private ApiResponse<ContentRender> renderByPathWithHttpInfo(String orgId, String path) throws ApiException {
        okhttp3.Call localVarCall = renderByPathValidateBeforeCall(orgId, path, null);
        Type localVarReturnType = new TypeToken<ContentRender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renderByPathAsync(String orgId, String path, final ApiCallback<ContentRender> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderByPathValidateBeforeCall(orgId, path, _callback);
        Type localVarReturnType = new TypeToken<ContentRender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenderByPathRequestBuilder {
        private final String orgId;
        private final String path;

        private RenderByPathRequestBuilder(String orgId, String path) {
            this.orgId = orgId;
            this.path = path;
        }

        /**
         * Build call for renderByPath
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return renderByPathCall(orgId, path, _callback);
        }


        /**
         * Execute renderByPath request
         * @return ContentRender
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ContentRender execute() throws ApiException {
            ApiResponse<ContentRender> localVarResp = renderByPathWithHttpInfo(orgId, path);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renderByPath request with HTTP info returned
         * @return ApiResponse&lt;ContentRender&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContentRender> executeWithHttpInfo() throws ApiException {
            return renderByPathWithHttpInfo(orgId, path);
        }

        /**
         * Execute renderByPath request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContentRender> _callback) throws ApiException {
            return renderByPathAsync(orgId, path, _callback);
        }
    }

    /**
     * Return a particular content by path, and render its contents
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param path Path (required)
     * @return RenderByPathRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RenderByPathRequestBuilder renderByPath(String orgId, String path) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (path == null) throw new IllegalArgumentException("\"path\" is required but got null");
            

        return new RenderByPathRequestBuilder(orgId, path);
    }
    private okhttp3.Call renderHomepageContentsCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/homepage/render"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renderHomepageContentsValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling renderHomepageContents(Async)");
        }

        return renderHomepageContentsCall(orgId, _callback);

    }


    private ApiResponse<HomepageContentRender> renderHomepageContentsWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = renderHomepageContentsValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<HomepageContentRender>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renderHomepageContentsAsync(String orgId, final ApiCallback<HomepageContentRender> _callback) throws ApiException {

        okhttp3.Call localVarCall = renderHomepageContentsValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<HomepageContentRender>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenderHomepageContentsRequestBuilder {
        private final String orgId;

        private RenderHomepageContentsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for renderHomepageContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return renderHomepageContentsCall(orgId, _callback);
        }


        /**
         * Execute renderHomepageContents request
         * @return HomepageContentRender
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public HomepageContentRender execute() throws ApiException {
            ApiResponse<HomepageContentRender> localVarResp = renderHomepageContentsWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renderHomepageContents request with HTTP info returned
         * @return ApiResponse&lt;HomepageContentRender&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<HomepageContentRender> executeWithHttpInfo() throws ApiException {
            return renderHomepageContentsWithHttpInfo(orgId);
        }

        /**
         * Execute renderHomepageContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<HomepageContentRender> _callback) throws ApiException {
            return renderHomepageContentsAsync(orgId, _callback);
        }
    }

    /**
     * Render the contents of the homepage
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return RenderHomepageContentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RenderHomepageContentsRequestBuilder renderHomepageContents(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RenderHomepageContentsRequestBuilder(orgId);
    }
    private okhttp3.Call updateHomepageContentCall(String orgId, UpdateContent updateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContent;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/homepage"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHomepageContentValidateBeforeCall(String orgId, UpdateContent updateContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateHomepageContent(Async)");
        }

        return updateHomepageContentCall(orgId, updateContent, _callback);

    }


    private ApiResponse<Void> updateHomepageContentWithHttpInfo(String orgId, UpdateContent updateContent) throws ApiException {
        okhttp3.Call localVarCall = updateHomepageContentValidateBeforeCall(orgId, updateContent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateHomepageContentAsync(String orgId, UpdateContent updateContent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHomepageContentValidateBeforeCall(orgId, updateContent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateHomepageContentRequestBuilder {
        private final String orgId;
        private String title;
        private String parentContentId;
        private String path;
        private List<ContentBlock> blocks;
        private String imagePath;
        private String emoji;
        private String coverImagePath;
        private String sensitive;
        private List<ShareAccess> shareAccess;
        private String status;

        private UpdateHomepageContentRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set title
         * @param title title of the content page (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set parentContentId
         * @param parentContentId parent content id in the hierarchy (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder parentContentId(String parentContentId) {
            this.parentContentId = parentContentId;
            return this;
        }
        
        /**
         * Set path
         * @param path full path to the content, if not set, defaults to an id/slug generated URL (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder path(String path) {
            this.path = path;
            return this;
        }
        
        /**
         * Set blocks
         * @param blocks content blocks (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder blocks(List<ContentBlock> blocks) {
            this.blocks = blocks;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to the image for the page (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set emoji
         * @param emoji emoji, if an emoji is used to represent the page (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder emoji(String emoji) {
            this.emoji = emoji;
            return this;
        }
        
        /**
         * Set coverImagePath
         * @param coverImagePath path to the cover image for the content page (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder coverImagePath(String coverImagePath) {
            this.coverImagePath = coverImagePath;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level (ORG public, HIGHly sensitive, or PRIVATE) (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess list of users and groups who have the content shared with them (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of the content page (optional)
         * @return UpdateHomepageContentRequestBuilder
         */
        public UpdateHomepageContentRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateHomepageContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updateHomepageContentCall(orgId, updateContent, _callback);
        }

        private UpdateContent buildBodyParams() {
            UpdateContent updateContent = new UpdateContent();
            updateContent.title(this.title);
            updateContent.parentContentId(this.parentContentId);
            updateContent.path(this.path);
            updateContent.blocks(this.blocks);
            updateContent.imagePath(this.imagePath);
            updateContent.emoji(this.emoji);
            updateContent.coverImagePath(this.coverImagePath);
            if (this.sensitive != null)
            updateContent.sensitive(UpdateContent.SensitiveEnum.fromValue(this.sensitive));
            updateContent.shareAccess(this.shareAccess);
            if (this.status != null)
            updateContent.status(UpdateContent.StatusEnum.fromValue(this.status));
            return updateContent;
        }

        /**
         * Execute updateHomepageContent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            updateHomepageContentWithHttpInfo(orgId, updateContent);
        }

        /**
         * Execute updateHomepageContent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updateHomepageContentWithHttpInfo(orgId, updateContent);
        }

        /**
         * Execute updateHomepageContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updateHomepageContentAsync(orgId, updateContent, _callback);
        }
    }

    /**
     * Update the homepage content
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateHomepageContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHomepageContentRequestBuilder updateHomepageContent(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateHomepageContentRequestBuilder(orgId);
    }
    private okhttp3.Call updatePieceByIdCall(String orgId, String contentId, UpdateContent updateContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateContent;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/content/{contentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "contentId" + "}", localVarApiClient.escapeString(contentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePieceByIdValidateBeforeCall(String orgId, String contentId, UpdateContent updateContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updatePieceById(Async)");
        }

        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling updatePieceById(Async)");
        }

        return updatePieceByIdCall(orgId, contentId, updateContent, _callback);

    }


    private ApiResponse<Void> updatePieceByIdWithHttpInfo(String orgId, String contentId, UpdateContent updateContent) throws ApiException {
        okhttp3.Call localVarCall = updatePieceByIdValidateBeforeCall(orgId, contentId, updateContent, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePieceByIdAsync(String orgId, String contentId, UpdateContent updateContent, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePieceByIdValidateBeforeCall(orgId, contentId, updateContent, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePieceByIdRequestBuilder {
        private final String orgId;
        private final String contentId;
        private String title;
        private String parentContentId;
        private String path;
        private List<ContentBlock> blocks;
        private String imagePath;
        private String emoji;
        private String coverImagePath;
        private String sensitive;
        private List<ShareAccess> shareAccess;
        private String status;

        private UpdatePieceByIdRequestBuilder(String orgId, String contentId) {
            this.orgId = orgId;
            this.contentId = contentId;
        }

        /**
         * Set title
         * @param title title of the content page (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set parentContentId
         * @param parentContentId parent content id in the hierarchy (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder parentContentId(String parentContentId) {
            this.parentContentId = parentContentId;
            return this;
        }
        
        /**
         * Set path
         * @param path full path to the content, if not set, defaults to an id/slug generated URL (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder path(String path) {
            this.path = path;
            return this;
        }
        
        /**
         * Set blocks
         * @param blocks content blocks (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder blocks(List<ContentBlock> blocks) {
            this.blocks = blocks;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to the image for the page (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set emoji
         * @param emoji emoji, if an emoji is used to represent the page (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder emoji(String emoji) {
            this.emoji = emoji;
            return this;
        }
        
        /**
         * Set coverImagePath
         * @param coverImagePath path to the cover image for the content page (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder coverImagePath(String coverImagePath) {
            this.coverImagePath = coverImagePath;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level (ORG public, HIGHly sensitive, or PRIVATE) (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess list of users and groups who have the content shared with them (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of the content page (optional)
         * @return UpdatePieceByIdRequestBuilder
         */
        public UpdatePieceByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updatePieceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updatePieceByIdCall(orgId, contentId, updateContent, _callback);
        }

        private UpdateContent buildBodyParams() {
            UpdateContent updateContent = new UpdateContent();
            updateContent.title(this.title);
            updateContent.parentContentId(this.parentContentId);
            updateContent.path(this.path);
            updateContent.blocks(this.blocks);
            updateContent.imagePath(this.imagePath);
            updateContent.emoji(this.emoji);
            updateContent.coverImagePath(this.coverImagePath);
            if (this.sensitive != null)
            updateContent.sensitive(UpdateContent.SensitiveEnum.fromValue(this.sensitive));
            updateContent.shareAccess(this.shareAccess);
            if (this.status != null)
            updateContent.status(UpdateContent.StatusEnum.fromValue(this.status));
            return updateContent;
        }

        /**
         * Execute updatePieceById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            updatePieceByIdWithHttpInfo(orgId, contentId, updateContent);
        }

        /**
         * Execute updatePieceById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updatePieceByIdWithHttpInfo(orgId, contentId, updateContent);
        }

        /**
         * Execute updatePieceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateContent updateContent = buildBodyParams();
            return updatePieceByIdAsync(orgId, contentId, updateContent, _callback);
        }
    }

    /**
     * Update an existing piece of content
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param contentId Content id (required)
     * @return UpdatePieceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePieceByIdRequestBuilder updatePieceById(String orgId, String contentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (contentId == null) throw new IllegalArgumentException("\"contentId\" is required but got null");
            

        return new UpdatePieceByIdRequestBuilder(orgId, contentId);
    }
}
