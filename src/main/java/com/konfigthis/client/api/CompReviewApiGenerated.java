/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApprovalRequestCompReviewResponse;
import com.konfigthis.client.model.ApprovalRequestPatchBody;
import com.konfigthis.client.model.CompReview;
import com.konfigthis.client.model.CompReviewConfig;
import com.konfigthis.client.model.CompReviewMetadata;
import com.konfigthis.client.model.CompReviewVisualizations;
import com.konfigthis.client.model.CreateCompReview;
import com.konfigthis.client.model.GenerateCompReviewOptions;
import com.konfigthis.client.model.GetVisualizationsOptions;
import com.konfigthis.client.model.InCycleChange;
import com.konfigthis.client.model.InCycleViewChanges;
import com.konfigthis.client.model.InCycleViewResponse;
import com.konfigthis.client.model.PartialAppEntities;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsCompReview;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.SendReminderEmailOptions;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.TiersResponse;
import com.konfigthis.client.model.UpdateCompReview;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompReviewApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompReviewApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompReviewApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call closeCompReviewCall(String orgId, String compReviewId, Boolean isFullyApproved, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/conclude"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isFullyApproved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFullyApproved", isFullyApproved));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closeCompReviewValidateBeforeCall(String orgId, String compReviewId, Boolean isFullyApproved, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling closeCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling closeCompReview(Async)");
        }

        return closeCompReviewCall(orgId, compReviewId, isFullyApproved, _callback);

    }


    private ApiResponse<Void> closeCompReviewWithHttpInfo(String orgId, String compReviewId, Boolean isFullyApproved) throws ApiException {
        okhttp3.Call localVarCall = closeCompReviewValidateBeforeCall(orgId, compReviewId, isFullyApproved, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call closeCompReviewAsync(String orgId, String compReviewId, Boolean isFullyApproved, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = closeCompReviewValidateBeforeCall(orgId, compReviewId, isFullyApproved, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CloseCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private Boolean isFullyApproved;

        private CloseCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set isFullyApproved
         * @param isFullyApproved Whether is review fully approved on conclude (default false) (optional)
         * @return CloseCompReviewRequestBuilder
         */
        public CloseCompReviewRequestBuilder isFullyApproved(Boolean isFullyApproved) {
            this.isFullyApproved = isFullyApproved;
            return this;
        }
        
        /**
         * Build call for closeCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return closeCompReviewCall(orgId, compReviewId, isFullyApproved, _callback);
        }


        /**
         * Execute closeCompReview request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            closeCompReviewWithHttpInfo(orgId, compReviewId, isFullyApproved);
        }

        /**
         * Execute closeCompReview request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return closeCompReviewWithHttpInfo(orgId, compReviewId, isFullyApproved);
        }

        /**
         * Execute closeCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return closeCompReviewAsync(orgId, compReviewId, isFullyApproved, _callback);
        }
    }

    /**
     * Concludes (or closes) the compensation review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return CloseCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CloseCompReviewRequestBuilder closeCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new CloseCompReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call createBulkDuplicateCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/bulk/duplicate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkDuplicateValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createBulkDuplicate(Async)");
        }

        return createBulkDuplicateCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> createBulkDuplicateWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createBulkDuplicateValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBulkDuplicateAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkDuplicateValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBulkDuplicateRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private CreateBulkDuplicateRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of comp review ids to duplicate (optional)
         * @return CreateBulkDuplicateRequestBuilder
         */
        public CreateBulkDuplicateRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for createBulkDuplicate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute createBulkDuplicate request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = createBulkDuplicateWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBulkDuplicate request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute createBulkDuplicate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Duplicate a set of comp reviews
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateBulkDuplicateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateBulkDuplicateRequestBuilder createBulkDuplicate(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateBulkDuplicateRequestBuilder(orgId);
    }
    private okhttp3.Call createCompReviewCall(String orgId, CreateCompReview createCompReview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCompReview;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompReviewValidateBeforeCall(String orgId, CreateCompReview createCompReview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createCompReview(Async)");
        }

        return createCompReviewCall(orgId, createCompReview, _callback);

    }


    private ApiResponse<Void> createCompReviewWithHttpInfo(String orgId, CreateCompReview createCompReview) throws ApiException {
        okhttp3.Call localVarCall = createCompReviewValidateBeforeCall(orgId, createCompReview, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createCompReviewAsync(String orgId, CreateCompReview createCompReview, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompReviewValidateBeforeCall(orgId, createCompReview, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateCompReviewRequestBuilder {
        private final String label;
        private final String orgId;
        private CompReviewConfig config;
        private String status;
        private List<ShareAccess> shareAccess;

        private CreateCompReviewRequestBuilder(String label, String orgId) {
            this.label = label;
            this.orgId = orgId;
        }

        /**
         * Set config
         * @param config  (optional)
         * @return CreateCompReviewRequestBuilder
         */
        public CreateCompReviewRequestBuilder config(CompReviewConfig config) {
            this.config = config;
            return this;
        }
        
        /**
         * Set status
         * @param status Whether the compensation review has been approved by the final approvers (optional)
         * @return CreateCompReviewRequestBuilder
         */
        public CreateCompReviewRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who have been granted access to this comp review (optional)
         * @return CreateCompReviewRequestBuilder
         */
        public CreateCompReviewRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Build call for createCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCompReview createCompReview = buildBodyParams();
            return createCompReviewCall(orgId, createCompReview, _callback);
        }

        private CreateCompReview buildBodyParams() {
            CreateCompReview createCompReview = new CreateCompReview();
            createCompReview.label(this.label);
            createCompReview.config(this.config);
            if (this.status != null)
            createCompReview.status(CreateCompReview.StatusEnum.fromValue(this.status));
            createCompReview.shareAccess(this.shareAccess);
            return createCompReview;
        }

        /**
         * Execute createCompReview request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateCompReview createCompReview = buildBodyParams();
            createCompReviewWithHttpInfo(orgId, createCompReview);
        }

        /**
         * Execute createCompReview request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateCompReview createCompReview = buildBodyParams();
            return createCompReviewWithHttpInfo(orgId, createCompReview);
        }

        /**
         * Execute createCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateCompReview createCompReview = buildBodyParams();
            return createCompReviewAsync(orgId, createCompReview, _callback);
        }
    }

    /**
     * Create a comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompReviewRequestBuilder createCompReview(String label, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateCompReviewRequestBuilder(label, orgId);
    }
    private okhttp3.Call createVisualizationDataCall(String orgId, String compReviewId, String viewJobId, Boolean preview, Boolean includeAllRequests, GetVisualizationsOptions getVisualizationsOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getVisualizationsOptions;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/visualizations"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("viewJobId", viewJobId));
        }

        if (preview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preview", preview));
        }

        if (includeAllRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllRequests", includeAllRequests));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVisualizationDataValidateBeforeCall(String orgId, String compReviewId, String viewJobId, Boolean preview, Boolean includeAllRequests, GetVisualizationsOptions getVisualizationsOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createVisualizationData(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling createVisualizationData(Async)");
        }

        return createVisualizationDataCall(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions, _callback);

    }


    private ApiResponse<CompReviewVisualizations> createVisualizationDataWithHttpInfo(String orgId, String compReviewId, String viewJobId, Boolean preview, Boolean includeAllRequests, GetVisualizationsOptions getVisualizationsOptions) throws ApiException {
        okhttp3.Call localVarCall = createVisualizationDataValidateBeforeCall(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions, null);
        Type localVarReturnType = new TypeToken<CompReviewVisualizations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createVisualizationDataAsync(String orgId, String compReviewId, String viewJobId, Boolean preview, Boolean includeAllRequests, GetVisualizationsOptions getVisualizationsOptions, final ApiCallback<CompReviewVisualizations> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVisualizationDataValidateBeforeCall(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions, _callback);
        Type localVarReturnType = new TypeToken<CompReviewVisualizations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateVisualizationDataRequestBuilder {
        private final Boolean isCollabicientView;
        private final String orgId;
        private final String compReviewId;
        private Set<String> changeIds;
        private String viewInCurrency;
        private Boolean includeCollaborators;
        private String viewJobId;
        private Boolean preview;
        private Boolean includeAllRequests;

        private CreateVisualizationDataRequestBuilder(Boolean isCollabicientView, String orgId, String compReviewId) {
            this.isCollabicientView = isCollabicientView;
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set changeIds
         * @param changeIds A set of Change ObjectIds used to filter the results of budget and raise calculations (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder changeIds(Set<String> changeIds) {
            this.changeIds = changeIds;
            return this;
        }
        
        /**
         * Set viewInCurrency
         * @param viewInCurrency Currency to view budget visualizations (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder viewInCurrency(String viewInCurrency) {
            this.viewInCurrency = viewInCurrency;
            return this;
        }
        
        /**
         * Set includeCollaborators
         * @param includeCollaborators Whether or not to include approval requests on which a user is collaborating when calculating budget amounts for that user (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder includeCollaborators(Boolean includeCollaborators) {
            this.includeCollaborators = includeCollaborators;
            return this;
        }
        
        /**
         * Set viewJobId
         * @param viewJobId The job you would like to view as (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder viewJobId(String viewJobId) {
            this.viewJobId = viewJobId;
            return this;
        }
        
        /**
         * Set preview
         * @param preview Are the visualizations for a preview (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder preview(Boolean preview) {
            this.preview = preview;
            return this;
        }
        
        /**
         * Set includeAllRequests
         * @param includeAllRequests Allows users with multiple roles to request full access for owner or final approver roles (optional)
         * @return CreateVisualizationDataRequestBuilder
         */
        public CreateVisualizationDataRequestBuilder includeAllRequests(Boolean includeAllRequests) {
            this.includeAllRequests = includeAllRequests;
            return this;
        }
        
        /**
         * Build call for createVisualizationData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GetVisualizationsOptions getVisualizationsOptions = buildBodyParams();
            return createVisualizationDataCall(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions, _callback);
        }

        private GetVisualizationsOptions buildBodyParams() {
            GetVisualizationsOptions getVisualizationsOptions = new GetVisualizationsOptions();
            getVisualizationsOptions.changeIds(this.changeIds);
            getVisualizationsOptions.viewInCurrency(this.viewInCurrency);
            getVisualizationsOptions.includeCollaborators(this.includeCollaborators);
            getVisualizationsOptions.isCollabicientView(this.isCollabicientView);
            return getVisualizationsOptions;
        }

        /**
         * Execute createVisualizationData request
         * @return CompReviewVisualizations
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public CompReviewVisualizations execute() throws ApiException {
            GetVisualizationsOptions getVisualizationsOptions = buildBodyParams();
            ApiResponse<CompReviewVisualizations> localVarResp = createVisualizationDataWithHttpInfo(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createVisualizationData request with HTTP info returned
         * @return ApiResponse&lt;CompReviewVisualizations&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompReviewVisualizations> executeWithHttpInfo() throws ApiException {
            GetVisualizationsOptions getVisualizationsOptions = buildBodyParams();
            return createVisualizationDataWithHttpInfo(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions);
        }

        /**
         * Execute createVisualizationData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompReviewVisualizations> _callback) throws ApiException {
            GetVisualizationsOptions getVisualizationsOptions = buildBodyParams();
            return createVisualizationDataAsync(orgId, compReviewId, viewJobId, preview, includeAllRequests, getVisualizationsOptions, _callback);
        }
    }

    /**
     * Get data for visualizations for a comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return CreateVisualizationDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateVisualizationDataRequestBuilder createVisualizationData(Boolean isCollabicientView, String orgId, String compReviewId) throws IllegalArgumentException {
        if (isCollabicientView == null) throw new IllegalArgumentException("\"isCollabicientView\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new CreateVisualizationDataRequestBuilder(isCollabicientView, orgId, compReviewId);
    }
    private okhttp3.Call deleteBulkCompReviewsCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/bulk/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBulkCompReviewsValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteBulkCompReviews(Async)");
        }

        return deleteBulkCompReviewsCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> deleteBulkCompReviewsWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteBulkCompReviewsValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBulkCompReviewsAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBulkCompReviewsValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBulkCompReviewsRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private DeleteBulkCompReviewsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of comp review ids to delete (optional)
         * @return DeleteBulkCompReviewsRequestBuilder
         */
        public DeleteBulkCompReviewsRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for deleteBulkCompReviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkCompReviewsCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute deleteBulkCompReviews request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = deleteBulkCompReviewsWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBulkCompReviews request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkCompReviewsWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute deleteBulkCompReviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkCompReviewsAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete a set of comp reviews
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteBulkCompReviewsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBulkCompReviewsRequestBuilder deleteBulkCompReviews(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteBulkCompReviewsRequestBuilder(orgId);
    }
    private okhttp3.Call deleteCompReviewCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompReviewValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling deleteCompReview(Async)");
        }

        return deleteCompReviewCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<Void> deleteCompReviewWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = deleteCompReviewValidateBeforeCall(orgId, compReviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCompReviewAsync(String orgId, String compReviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompReviewValidateBeforeCall(orgId, compReviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private DeleteCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for deleteCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCompReviewCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute deleteCompReview request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCompReviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute deleteCompReview request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCompReviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute deleteCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCompReviewAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Delete a comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return DeleteCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCompReviewRequestBuilder deleteCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new DeleteCompReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call duplicateCompReviewCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/duplicate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateCompReviewValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling duplicateCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling duplicateCompReview(Async)");
        }

        return duplicateCompReviewCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<CompReview> duplicateCompReviewWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = duplicateCompReviewValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call duplicateCompReviewAsync(String orgId, String compReviewId, final ApiCallback<CompReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateCompReviewValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DuplicateCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private DuplicateCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for duplicateCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return duplicateCompReviewCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute duplicateCompReview request
         * @return CompReview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public CompReview execute() throws ApiException {
            ApiResponse<CompReview> localVarResp = duplicateCompReviewWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute duplicateCompReview request with HTTP info returned
         * @return ApiResponse&lt;CompReview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompReview> executeWithHttpInfo() throws ApiException {
            return duplicateCompReviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute duplicateCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompReview> _callback) throws ApiException {
            return duplicateCompReviewAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Duplicate a comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return DuplicateCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DuplicateCompReviewRequestBuilder duplicateCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new DuplicateCompReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call exportAuditLogCall(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/export/audit"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAuditLogValidateBeforeCall(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportAuditLog(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling exportAuditLog(Async)");
        }

        return exportAuditLogCall(orgId, compReviewId, requestBody, _callback);

    }


    private ApiResponse<Process> exportAuditLogWithHttpInfo(String orgId, String compReviewId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = exportAuditLogValidateBeforeCall(orgId, compReviewId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportAuditLogAsync(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAuditLogValidateBeforeCall(orgId, compReviewId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExportAuditLogRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private ExportAuditLogRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for exportAuditLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportAuditLogCall(orgId, compReviewId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute exportAuditLog request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = exportAuditLogWithHttpInfo(orgId, compReviewId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exportAuditLog request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportAuditLogWithHttpInfo(orgId, compReviewId, requestBody);
        }

        /**
         * Execute exportAuditLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportAuditLogAsync(orgId, compReviewId, requestBody, _callback);
        }
    }

    /**
     * Export a comp review&#39;s audit log
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return ExportAuditLogRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportAuditLogRequestBuilder exportAuditLog(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new ExportAuditLogRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call exportChangesCall(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/export"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportChangesValidateBeforeCall(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportChanges(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling exportChanges(Async)");
        }

        return exportChangesCall(orgId, compReviewId, requestBody, _callback);

    }


    private ApiResponse<Process> exportChangesWithHttpInfo(String orgId, String compReviewId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = exportChangesValidateBeforeCall(orgId, compReviewId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportChangesAsync(String orgId, String compReviewId, Map<String, Object> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportChangesValidateBeforeCall(orgId, compReviewId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExportChangesRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private ExportChangesRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for exportChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportChangesCall(orgId, compReviewId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute exportChanges request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = exportChangesWithHttpInfo(orgId, compReviewId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exportChanges request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportChangesWithHttpInfo(orgId, compReviewId, requestBody);
        }

        /**
         * Execute exportChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportChangesAsync(orgId, compReviewId, requestBody, _callback);
        }
    }

    /**
     * Export a comp review&#39;s changes
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return ExportChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportChangesRequestBuilder exportChanges(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new ExportChangesRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call exportCommentsCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/export/comments"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportCommentsValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportComments(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling exportComments(Async)");
        }

        return exportCommentsCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<Process> exportCommentsWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = exportCommentsValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportCommentsAsync(String orgId, String compReviewId, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportCommentsValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExportCommentsRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private ExportCommentsRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for exportComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exportCommentsCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute exportComments request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = exportCommentsWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exportComments request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return exportCommentsWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute exportComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return exportCommentsAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Export a comp review&#39;s comments
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return ExportCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportCommentsRequestBuilder exportComments(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new ExportCommentsRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call findCompReviewByIdCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompReviewByIdValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompReviewById(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling findCompReviewById(Async)");
        }

        return findCompReviewByIdCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<CompReview> findCompReviewByIdWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = findCompReviewByIdValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompReviewByIdAsync(String orgId, String compReviewId, final ApiCallback<CompReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompReviewByIdValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompReviewByIdRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private FindCompReviewByIdRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for findCompReviewById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompReviewByIdCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute findCompReviewById request
         * @return CompReview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public CompReview execute() throws ApiException {
            ApiResponse<CompReview> localVarResp = findCompReviewByIdWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompReviewById request with HTTP info returned
         * @return ApiResponse&lt;CompReview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompReview> executeWithHttpInfo() throws ApiException {
            return findCompReviewByIdWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute findCompReviewById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompReview> _callback) throws ApiException {
            return findCompReviewByIdAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Return a particular comp review by ID
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return FindCompReviewByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompReviewByIdRequestBuilder findCompReviewById(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new FindCompReviewByIdRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call findCompReviewsCall(String orgId, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompReviewsValidateBeforeCall(String orgId, String from, Integer limit, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompReviews(Async)");
        }

        return findCompReviewsCall(orgId, from, limit, returnAccess, _callback);

    }


    private ApiResponse<ResultsCompReview> findCompReviewsWithHttpInfo(String orgId, String from, Integer limit, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = findCompReviewsValidateBeforeCall(orgId, from, limit, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsCompReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompReviewsAsync(String orgId, String from, Integer limit, String returnAccess, final ApiCallback<ResultsCompReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompReviewsValidateBeforeCall(orgId, from, limit, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsCompReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompReviewsRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;
        private String returnAccess;

        private FindCompReviewsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Comp review ID to start paginating from (optional)
         * @return FindCompReviewsRequestBuilder
         */
        public FindCompReviewsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindCompReviewsRequestBuilder
         */
        public FindCompReviewsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return FindCompReviewsRequestBuilder
         */
        public FindCompReviewsRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for findCompReviews
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompReviewsCall(orgId, from, limit, returnAccess, _callback);
        }


        /**
         * Execute findCompReviews request
         * @return ResultsCompReview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsCompReview execute() throws ApiException {
            ApiResponse<ResultsCompReview> localVarResp = findCompReviewsWithHttpInfo(orgId, from, limit, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompReviews request with HTTP info returned
         * @return ApiResponse&lt;ResultsCompReview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsCompReview> executeWithHttpInfo() throws ApiException {
            return findCompReviewsWithHttpInfo(orgId, from, limit, returnAccess);
        }

        /**
         * Execute findCompReviews request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsCompReview> _callback) throws ApiException {
            return findCompReviewsAsync(orgId, from, limit, returnAccess, _callback);
        }
    }

    /**
     * Find comp reviews in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindCompReviewsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompReviewsRequestBuilder findCompReviews(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindCompReviewsRequestBuilder(orgId);
    }
    private okhttp3.Call generateCompReviewCall(String orgId, String compReviewId, GenerateCompReviewOptions generateCompReviewOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateCompReviewOptions;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/generate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateCompReviewValidateBeforeCall(String orgId, String compReviewId, GenerateCompReviewOptions generateCompReviewOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generateCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling generateCompReview(Async)");
        }

        return generateCompReviewCall(orgId, compReviewId, generateCompReviewOptions, _callback);

    }


    private ApiResponse<Process> generateCompReviewWithHttpInfo(String orgId, String compReviewId, GenerateCompReviewOptions generateCompReviewOptions) throws ApiException {
        okhttp3.Call localVarCall = generateCompReviewValidateBeforeCall(orgId, compReviewId, generateCompReviewOptions, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateCompReviewAsync(String orgId, String compReviewId, GenerateCompReviewOptions generateCompReviewOptions, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateCompReviewValidateBeforeCall(orgId, compReviewId, generateCompReviewOptions, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateCompReviewRequestBuilder {
        private final Boolean isPreview;
        private final String orgId;
        private final String compReviewId;

        private GenerateCompReviewRequestBuilder(Boolean isPreview, String orgId, String compReviewId) {
            this.isPreview = isPreview;
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for generateCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GenerateCompReviewOptions generateCompReviewOptions = buildBodyParams();
            return generateCompReviewCall(orgId, compReviewId, generateCompReviewOptions, _callback);
        }

        private GenerateCompReviewOptions buildBodyParams() {
            GenerateCompReviewOptions generateCompReviewOptions = new GenerateCompReviewOptions();
            generateCompReviewOptions.isPreview(this.isPreview);
            return generateCompReviewOptions;
        }

        /**
         * Execute generateCompReview request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            GenerateCompReviewOptions generateCompReviewOptions = buildBodyParams();
            ApiResponse<Process> localVarResp = generateCompReviewWithHttpInfo(orgId, compReviewId, generateCompReviewOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateCompReview request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            GenerateCompReviewOptions generateCompReviewOptions = buildBodyParams();
            return generateCompReviewWithHttpInfo(orgId, compReviewId, generateCompReviewOptions);
        }

        /**
         * Execute generateCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            GenerateCompReviewOptions generateCompReviewOptions = buildBodyParams();
            return generateCompReviewAsync(orgId, compReviewId, generateCompReviewOptions, _callback);
        }
    }

    /**
     * Generate a compensation review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GenerateCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GenerateCompReviewRequestBuilder generateCompReview(Boolean isPreview, String orgId, String compReviewId) throws IllegalArgumentException {
        if (isPreview == null) throw new IllegalArgumentException("\"isPreview\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GenerateCompReviewRequestBuilder(isPreview, orgId, compReviewId);
    }
    private okhttp3.Call generateTieringPreviewCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/preview"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTieringPreviewValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generateTieringPreview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling generateTieringPreview(Async)");
        }

        return generateTieringPreviewCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<TiersResponse> generateTieringPreviewWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = generateTieringPreviewValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<TiersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateTieringPreviewAsync(String orgId, String compReviewId, final ApiCallback<TiersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTieringPreviewValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<TiersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateTieringPreviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private GenerateTieringPreviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for generateTieringPreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateTieringPreviewCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute generateTieringPreview request
         * @return TiersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public TiersResponse execute() throws ApiException {
            ApiResponse<TiersResponse> localVarResp = generateTieringPreviewWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateTieringPreview request with HTTP info returned
         * @return ApiResponse&lt;TiersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TiersResponse> executeWithHttpInfo() throws ApiException {
            return generateTieringPreviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute generateTieringPreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TiersResponse> _callback) throws ApiException {
            return generateTieringPreviewAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Generate tiering &amp; preview for a compensation review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GenerateTieringPreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GenerateTieringPreviewRequestBuilder generateTieringPreview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GenerateTieringPreviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call getChangeAndGuidelineFlagsCall(String orgId, String compReviewId, String changeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/changes/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangeAndGuidelineFlagsValidateBeforeCall(String orgId, String compReviewId, String changeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getChangeAndGuidelineFlags(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getChangeAndGuidelineFlags(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getChangeAndGuidelineFlags(Async)");
        }

        return getChangeAndGuidelineFlagsCall(orgId, compReviewId, changeId, _callback);

    }


    private ApiResponse<InCycleChange> getChangeAndGuidelineFlagsWithHttpInfo(String orgId, String compReviewId, String changeId) throws ApiException {
        okhttp3.Call localVarCall = getChangeAndGuidelineFlagsValidateBeforeCall(orgId, compReviewId, changeId, null);
        Type localVarReturnType = new TypeToken<InCycleChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChangeAndGuidelineFlagsAsync(String orgId, String compReviewId, String changeId, final ApiCallback<InCycleChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangeAndGuidelineFlagsValidateBeforeCall(orgId, compReviewId, changeId, _callback);
        Type localVarReturnType = new TypeToken<InCycleChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChangeAndGuidelineFlagsRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private final String changeId;

        private GetChangeAndGuidelineFlagsRequestBuilder(String orgId, String compReviewId, String changeId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
            this.changeId = changeId;
        }

        /**
         * Build call for getChangeAndGuidelineFlags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChangeAndGuidelineFlagsCall(orgId, compReviewId, changeId, _callback);
        }


        /**
         * Execute getChangeAndGuidelineFlags request
         * @return InCycleChange
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public InCycleChange execute() throws ApiException {
            ApiResponse<InCycleChange> localVarResp = getChangeAndGuidelineFlagsWithHttpInfo(orgId, compReviewId, changeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChangeAndGuidelineFlags request with HTTP info returned
         * @return ApiResponse&lt;InCycleChange&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InCycleChange> executeWithHttpInfo() throws ApiException {
            return getChangeAndGuidelineFlagsWithHttpInfo(orgId, compReviewId, changeId);
        }

        /**
         * Execute getChangeAndGuidelineFlags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InCycleChange> _callback) throws ApiException {
            return getChangeAndGuidelineFlagsAsync(orgId, compReviewId, changeId, _callback);
        }
    }

    /**
     * Get the change data and guideline flags associated with an in-cycle change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @param changeId Change id (required)
     * @return GetChangeAndGuidelineFlagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetChangeAndGuidelineFlagsRequestBuilder getChangeAndGuidelineFlags(String orgId, String compReviewId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new GetChangeAndGuidelineFlagsRequestBuilder(orgId, compReviewId, changeId);
    }
    private okhttp3.Call getChangesInCycleCall(String orgId, String compReviewId, String approvalRequestId, Boolean isPreview, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/changes"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (approvalRequestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approvalRequestId", approvalRequestId));
        }

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChangesInCycleValidateBeforeCall(String orgId, String compReviewId, String approvalRequestId, Boolean isPreview, String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getChangesInCycle(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getChangesInCycle(Async)");
        }

        return getChangesInCycleCall(orgId, compReviewId, approvalRequestId, isPreview, jobId, _callback);

    }


    private ApiResponse<InCycleViewChanges> getChangesInCycleWithHttpInfo(String orgId, String compReviewId, String approvalRequestId, Boolean isPreview, String jobId) throws ApiException {
        okhttp3.Call localVarCall = getChangesInCycleValidateBeforeCall(orgId, compReviewId, approvalRequestId, isPreview, jobId, null);
        Type localVarReturnType = new TypeToken<InCycleViewChanges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChangesInCycleAsync(String orgId, String compReviewId, String approvalRequestId, Boolean isPreview, String jobId, final ApiCallback<InCycleViewChanges> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChangesInCycleValidateBeforeCall(orgId, compReviewId, approvalRequestId, isPreview, jobId, _callback);
        Type localVarReturnType = new TypeToken<InCycleViewChanges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChangesInCycleRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private String approvalRequestId;
        private Boolean isPreview;
        private String jobId;

        private GetChangesInCycleRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set approvalRequestId
         * @param approvalRequestId Approval request id (optional)
         * @return GetChangesInCycleRequestBuilder
         */
        public GetChangesInCycleRequestBuilder approvalRequestId(String approvalRequestId) {
            this.approvalRequestId = approvalRequestId;
            return this;
        }
        
        /**
         * Set isPreview
         * @param isPreview  (optional)
         * @return GetChangesInCycleRequestBuilder
         */
        public GetChangesInCycleRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId  (optional)
         * @return GetChangesInCycleRequestBuilder
         */
        public GetChangesInCycleRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Build call for getChangesInCycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChangesInCycleCall(orgId, compReviewId, approvalRequestId, isPreview, jobId, _callback);
        }


        /**
         * Execute getChangesInCycle request
         * @return InCycleViewChanges
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public InCycleViewChanges execute() throws ApiException {
            ApiResponse<InCycleViewChanges> localVarResp = getChangesInCycleWithHttpInfo(orgId, compReviewId, approvalRequestId, isPreview, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChangesInCycle request with HTTP info returned
         * @return ApiResponse&lt;InCycleViewChanges&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InCycleViewChanges> executeWithHttpInfo() throws ApiException {
            return getChangesInCycleWithHttpInfo(orgId, compReviewId, approvalRequestId, isPreview, jobId);
        }

        /**
         * Execute getChangesInCycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InCycleViewChanges> _callback) throws ApiException {
            return getChangesInCycleAsync(orgId, compReviewId, approvalRequestId, isPreview, jobId, _callback);
        }
    }

    /**
     * Get the changes for a set of scenarios in an in-cycle comp-review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GetChangesInCycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetChangesInCycleRequestBuilder getChangesInCycle(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GetChangesInCycleRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call getCollabicientInCycleCall(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String collabicientJobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/in-cycle/collabicient"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenariosOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenariosOnly", scenariosOnly));
        }

        if (proposalOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proposalOnly", proposalOnly));
        }

        if (reviewsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewsOnly", reviewsOnly));
        }

        if (columnsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("columnsOnly", columnsOnly));
        }

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        if (collabicientJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collabicientJobId", collabicientJobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollabicientInCycleValidateBeforeCall(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String collabicientJobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCollabicientInCycle(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getCollabicientInCycle(Async)");
        }

        return getCollabicientInCycleCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId, _callback);

    }


    private ApiResponse<InCycleViewResponse> getCollabicientInCycleWithHttpInfo(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String collabicientJobId) throws ApiException {
        okhttp3.Call localVarCall = getCollabicientInCycleValidateBeforeCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId, null);
        Type localVarReturnType = new TypeToken<InCycleViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCollabicientInCycleAsync(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String collabicientJobId, final ApiCallback<InCycleViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollabicientInCycleValidateBeforeCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId, _callback);
        Type localVarReturnType = new TypeToken<InCycleViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCollabicientInCycleRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private Boolean scenariosOnly;
        private Boolean proposalOnly;
        private Boolean reviewsOnly;
        private Boolean columnsOnly;
        private Boolean isPreview;
        private String collabicientJobId;

        private GetCollabicientInCycleRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set scenariosOnly
         * @param scenariosOnly  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder scenariosOnly(Boolean scenariosOnly) {
            this.scenariosOnly = scenariosOnly;
            return this;
        }
        
        /**
         * Set proposalOnly
         * @param proposalOnly  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder proposalOnly(Boolean proposalOnly) {
            this.proposalOnly = proposalOnly;
            return this;
        }
        
        /**
         * Set reviewsOnly
         * @param reviewsOnly  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder reviewsOnly(Boolean reviewsOnly) {
            this.reviewsOnly = reviewsOnly;
            return this;
        }
        
        /**
         * Set columnsOnly
         * @param columnsOnly  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder columnsOnly(Boolean columnsOnly) {
            this.columnsOnly = columnsOnly;
            return this;
        }
        
        /**
         * Set isPreview
         * @param isPreview  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Set collabicientJobId
         * @param collabicientJobId  (optional)
         * @return GetCollabicientInCycleRequestBuilder
         */
        public GetCollabicientInCycleRequestBuilder collabicientJobId(String collabicientJobId) {
            this.collabicientJobId = collabicientJobId;
            return this;
        }
        
        /**
         * Build call for getCollabicientInCycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCollabicientInCycleCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId, _callback);
        }


        /**
         * Execute getCollabicientInCycle request
         * @return InCycleViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public InCycleViewResponse execute() throws ApiException {
            ApiResponse<InCycleViewResponse> localVarResp = getCollabicientInCycleWithHttpInfo(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCollabicientInCycle request with HTTP info returned
         * @return ApiResponse&lt;InCycleViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InCycleViewResponse> executeWithHttpInfo() throws ApiException {
            return getCollabicientInCycleWithHttpInfo(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId);
        }

        /**
         * Execute getCollabicientInCycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InCycleViewResponse> _callback) throws ApiException {
            return getCollabicientInCycleAsync(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, collabicientJobId, _callback);
        }
    }

    /**
     * Get a collaborator participant reviewer in-cycle comp-review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GetCollabicientInCycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCollabicientInCycleRequestBuilder getCollabicientInCycle(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GetCollabicientInCycleRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call getDateCachesCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/associated-entities"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDateCachesValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDateCaches(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getDateCaches(Async)");
        }

        return getDateCachesCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<PartialAppEntities> getDateCachesWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = getDateCachesValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<PartialAppEntities>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDateCachesAsync(String orgId, String compReviewId, final ApiCallback<PartialAppEntities> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDateCachesValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<PartialAppEntities>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDateCachesRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private GetDateCachesRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for getDateCaches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDateCachesCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute getDateCaches request
         * @return PartialAppEntities
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public PartialAppEntities execute() throws ApiException {
            ApiResponse<PartialAppEntities> localVarResp = getDateCachesWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDateCaches request with HTTP info returned
         * @return ApiResponse&lt;PartialAppEntities&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartialAppEntities> executeWithHttpInfo() throws ApiException {
            return getDateCachesWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute getDateCaches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartialAppEntities> _callback) throws ApiException {
            return getDateCachesAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Get the necessary caches on a specific date for a compensation review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GetDateCachesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDateCachesRequestBuilder getDateCaches(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GetDateCachesRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call getEligibleEmployeesCall(String orgId, String compReviewId, String filterScenarioIds, Boolean ineligible, String from, Integer limit, String fields, String format, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/eligible-employees"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterScenarioIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterScenarioIds", filterScenarioIds));
        }

        if (ineligible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ineligible", ineligible));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEligibleEmployeesValidateBeforeCall(String orgId, String compReviewId, String filterScenarioIds, Boolean ineligible, String from, Integer limit, String fields, String format, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getEligibleEmployees(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getEligibleEmployees(Async)");
        }

        return getEligibleEmployeesCall(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter, _callback);

    }


    private ApiResponse<ResultsData> getEligibleEmployeesWithHttpInfo(String orgId, String compReviewId, String filterScenarioIds, Boolean ineligible, String from, Integer limit, String fields, String format, String filter) throws ApiException {
        okhttp3.Call localVarCall = getEligibleEmployeesValidateBeforeCall(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEligibleEmployeesAsync(String orgId, String compReviewId, String filterScenarioIds, Boolean ineligible, String from, Integer limit, String fields, String format, String filter, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEligibleEmployeesValidateBeforeCall(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEligibleEmployeesRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private String filterScenarioIds;
        private Boolean ineligible;
        private String from;
        private Integer limit;
        private String fields;
        private String format;
        private String filter;

        private GetEligibleEmployeesRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set filterScenarioIds
         * @param filterScenarioIds Find ineligible employees under specific comp scenario managers (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder filterScenarioIds(String filterScenarioIds) {
            this.filterScenarioIds = filterScenarioIds;
            return this;
        }
        
        /**
         * Set ineligible
         * @param ineligible Whether to get eligible or ineligible employees (defaults to eligible) (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder ineligible(Boolean ineligible) {
            this.ineligible = ineligible;
            return this;
        }
        
        /**
         * Set from
         * @param from Job id to start paginating from (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Table fields (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set filter
         * @param filter Optional CQL filter to apply to employees (optional)
         * @return GetEligibleEmployeesRequestBuilder
         */
        public GetEligibleEmployeesRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Build call for getEligibleEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEligibleEmployeesCall(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter, _callback);
        }


        /**
         * Execute getEligibleEmployees request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getEligibleEmployeesWithHttpInfo(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEligibleEmployees request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getEligibleEmployeesWithHttpInfo(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter);
        }

        /**
         * Execute getEligibleEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getEligibleEmployeesAsync(orgId, compReviewId, filterScenarioIds, ineligible, from, limit, fields, format, filter, _callback);
        }
    }

    /**
     * Get a list of employees eligible for a given comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GetEligibleEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetEligibleEmployeesRequestBuilder getEligibleEmployees(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GetEligibleEmployeesRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call getMetadataByIdCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/metadata"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataByIdValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMetadataById(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling getMetadataById(Async)");
        }

        return getMetadataByIdCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<CompReviewMetadata> getMetadataByIdWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = getMetadataByIdValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<CompReviewMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataByIdAsync(String orgId, String compReviewId, final ApiCallback<CompReviewMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataByIdValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<CompReviewMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataByIdRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private GetMetadataByIdRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for getMetadataById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataByIdCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute getMetadataById request
         * @return CompReviewMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public CompReviewMetadata execute() throws ApiException {
            ApiResponse<CompReviewMetadata> localVarResp = getMetadataByIdWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadataById request with HTTP info returned
         * @return ApiResponse&lt;CompReviewMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompReviewMetadata> executeWithHttpInfo() throws ApiException {
            return getMetadataByIdWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute getMetadataById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompReviewMetadata> _callback) throws ApiException {
            return getMetadataByIdAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Return metadata for a particular comp review by ID
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return GetMetadataByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataByIdRequestBuilder getMetadataById(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new GetMetadataByIdRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call listRequestResponsesCall(String orgId, String compReviewId, Boolean isPreview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/approval-requests"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRequestResponsesValidateBeforeCall(String orgId, String compReviewId, Boolean isPreview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listRequestResponses(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling listRequestResponses(Async)");
        }

        return listRequestResponsesCall(orgId, compReviewId, isPreview, _callback);

    }


    private ApiResponse<List<ApprovalRequestCompReviewResponse>> listRequestResponsesWithHttpInfo(String orgId, String compReviewId, Boolean isPreview) throws ApiException {
        okhttp3.Call localVarCall = listRequestResponsesValidateBeforeCall(orgId, compReviewId, isPreview, null);
        Type localVarReturnType = new TypeToken<List<ApprovalRequestCompReviewResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRequestResponsesAsync(String orgId, String compReviewId, Boolean isPreview, final ApiCallback<List<ApprovalRequestCompReviewResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRequestResponsesValidateBeforeCall(orgId, compReviewId, isPreview, _callback);
        Type localVarReturnType = new TypeToken<List<ApprovalRequestCompReviewResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestResponsesRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private Boolean isPreview;

        private ListRequestResponsesRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set isPreview
         * @param isPreview  (optional)
         * @return ListRequestResponsesRequestBuilder
         */
        public ListRequestResponsesRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Build call for listRequestResponses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRequestResponsesCall(orgId, compReviewId, isPreview, _callback);
        }


        /**
         * Execute listRequestResponses request
         * @return List&lt;ApprovalRequestCompReviewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public List<ApprovalRequestCompReviewResponse> execute() throws ApiException {
            ApiResponse<List<ApprovalRequestCompReviewResponse>> localVarResp = listRequestResponsesWithHttpInfo(orgId, compReviewId, isPreview);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRequestResponses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ApprovalRequestCompReviewResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ApprovalRequestCompReviewResponse>> executeWithHttpInfo() throws ApiException {
            return listRequestResponsesWithHttpInfo(orgId, compReviewId, isPreview);
        }

        /**
         * Execute listRequestResponses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ApprovalRequestCompReviewResponse>> _callback) throws ApiException {
            return listRequestResponsesAsync(orgId, compReviewId, isPreview, _callback);
        }
    }

    /**
     * Get a list of approval request responses for a given comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return ListRequestResponsesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestResponsesRequestBuilder listRequestResponses(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new ListRequestResponsesRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call overviewInCycleCompReviewCall(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String jobId, Boolean includeAllRequests, Boolean includeFeatures, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/in-cycle"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenariosOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenariosOnly", scenariosOnly));
        }

        if (proposalOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proposalOnly", proposalOnly));
        }

        if (reviewsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reviewsOnly", reviewsOnly));
        }

        if (columnsOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("columnsOnly", columnsOnly));
        }

        if (isPreview != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreview", isPreview));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (includeAllRequests != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeAllRequests", includeAllRequests));
        }

        if (includeFeatures != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeFeatures", includeFeatures));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call overviewInCycleCompReviewValidateBeforeCall(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String jobId, Boolean includeAllRequests, Boolean includeFeatures, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling overviewInCycleCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling overviewInCycleCompReview(Async)");
        }

        return overviewInCycleCompReviewCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures, _callback);

    }


    private ApiResponse<InCycleViewResponse> overviewInCycleCompReviewWithHttpInfo(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String jobId, Boolean includeAllRequests, Boolean includeFeatures) throws ApiException {
        okhttp3.Call localVarCall = overviewInCycleCompReviewValidateBeforeCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures, null);
        Type localVarReturnType = new TypeToken<InCycleViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call overviewInCycleCompReviewAsync(String orgId, String compReviewId, Boolean scenariosOnly, Boolean proposalOnly, Boolean reviewsOnly, Boolean columnsOnly, Boolean isPreview, String jobId, Boolean includeAllRequests, Boolean includeFeatures, final ApiCallback<InCycleViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = overviewInCycleCompReviewValidateBeforeCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures, _callback);
        Type localVarReturnType = new TypeToken<InCycleViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OverviewInCycleCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private Boolean scenariosOnly;
        private Boolean proposalOnly;
        private Boolean reviewsOnly;
        private Boolean columnsOnly;
        private Boolean isPreview;
        private String jobId;
        private Boolean includeAllRequests;
        private Boolean includeFeatures;

        private OverviewInCycleCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set scenariosOnly
         * @param scenariosOnly  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder scenariosOnly(Boolean scenariosOnly) {
            this.scenariosOnly = scenariosOnly;
            return this;
        }
        
        /**
         * Set proposalOnly
         * @param proposalOnly  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder proposalOnly(Boolean proposalOnly) {
            this.proposalOnly = proposalOnly;
            return this;
        }
        
        /**
         * Set reviewsOnly
         * @param reviewsOnly  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder reviewsOnly(Boolean reviewsOnly) {
            this.reviewsOnly = reviewsOnly;
            return this;
        }
        
        /**
         * Set columnsOnly
         * @param columnsOnly  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder columnsOnly(Boolean columnsOnly) {
            this.columnsOnly = columnsOnly;
            return this;
        }
        
        /**
         * Set isPreview
         * @param isPreview  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder isPreview(Boolean isPreview) {
            this.isPreview = isPreview;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set includeAllRequests
         * @param includeAllRequests Allows users with multiple roles to request full access for owner or final approver roles (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder includeAllRequests(Boolean includeAllRequests) {
            this.includeAllRequests = includeAllRequests;
            return this;
        }
        
        /**
         * Set includeFeatures
         * @param includeFeatures  (optional)
         * @return OverviewInCycleCompReviewRequestBuilder
         */
        public OverviewInCycleCompReviewRequestBuilder includeFeatures(Boolean includeFeatures) {
            this.includeFeatures = includeFeatures;
            return this;
        }
        
        /**
         * Build call for overviewInCycleCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return overviewInCycleCompReviewCall(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures, _callback);
        }


        /**
         * Execute overviewInCycleCompReview request
         * @return InCycleViewResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public InCycleViewResponse execute() throws ApiException {
            ApiResponse<InCycleViewResponse> localVarResp = overviewInCycleCompReviewWithHttpInfo(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute overviewInCycleCompReview request with HTTP info returned
         * @return ApiResponse&lt;InCycleViewResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InCycleViewResponse> executeWithHttpInfo() throws ApiException {
            return overviewInCycleCompReviewWithHttpInfo(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures);
        }

        /**
         * Execute overviewInCycleCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InCycleViewResponse> _callback) throws ApiException {
            return overviewInCycleCompReviewAsync(orgId, compReviewId, scenariosOnly, proposalOnly, reviewsOnly, columnsOnly, isPreview, jobId, includeAllRequests, includeFeatures, _callback);
        }
    }

    /**
     * Get an overview for a given user in an in-cycle comp-review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return OverviewInCycleCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public OverviewInCycleCompReviewRequestBuilder overviewInCycleCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new OverviewInCycleCompReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call pauseReviewCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/pause"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseReviewValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling pauseReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling pauseReview(Async)");
        }

        return pauseReviewCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<Void> pauseReviewWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = pauseReviewValidateBeforeCall(orgId, compReviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call pauseReviewAsync(String orgId, String compReviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseReviewValidateBeforeCall(orgId, compReviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PauseReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;

        private PauseReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for pauseReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pauseReviewCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute pauseReview request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            pauseReviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute pauseReview request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return pauseReviewWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute pauseReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return pauseReviewAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Pauses the compensation review to allow for editing by an admin
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return PauseReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PauseReviewRequestBuilder pauseReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new PauseReviewRequestBuilder(orgId, compReviewId);
    }
    private okhttp3.Call sendReminderEmailCall(String orgId, String compReviewId, SendReminderEmailOptions sendReminderEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendReminderEmailOptions;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/send-reminder-email"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderEmailValidateBeforeCall(String orgId, String compReviewId, SendReminderEmailOptions sendReminderEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendReminderEmail(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling sendReminderEmail(Async)");
        }

        return sendReminderEmailCall(orgId, compReviewId, sendReminderEmailOptions, _callback);

    }


    private ApiResponse<Void> sendReminderEmailWithHttpInfo(String orgId, String compReviewId, SendReminderEmailOptions sendReminderEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendReminderEmailValidateBeforeCall(orgId, compReviewId, sendReminderEmailOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendReminderEmailAsync(String orgId, String compReviewId, SendReminderEmailOptions sendReminderEmailOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderEmailValidateBeforeCall(orgId, compReviewId, sendReminderEmailOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendReminderEmailRequestBuilder {
        private final String approvalRequestId;
        private final String orgId;
        private final String compReviewId;

        private SendReminderEmailRequestBuilder(String approvalRequestId, String orgId, String compReviewId) {
            this.approvalRequestId = approvalRequestId;
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Build call for sendReminderEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SendReminderEmailOptions sendReminderEmailOptions = buildBodyParams();
            return sendReminderEmailCall(orgId, compReviewId, sendReminderEmailOptions, _callback);
        }

        private SendReminderEmailOptions buildBodyParams() {
            SendReminderEmailOptions sendReminderEmailOptions = new SendReminderEmailOptions();
            sendReminderEmailOptions.approvalRequestId(this.approvalRequestId);
            return sendReminderEmailOptions;
        }

        /**
         * Execute sendReminderEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SendReminderEmailOptions sendReminderEmailOptions = buildBodyParams();
            sendReminderEmailWithHttpInfo(orgId, compReviewId, sendReminderEmailOptions);
        }

        /**
         * Execute sendReminderEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SendReminderEmailOptions sendReminderEmailOptions = buildBodyParams();
            return sendReminderEmailWithHttpInfo(orgId, compReviewId, sendReminderEmailOptions);
        }

        /**
         * Execute sendReminderEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SendReminderEmailOptions sendReminderEmailOptions = buildBodyParams();
            return sendReminderEmailAsync(orgId, compReviewId, sendReminderEmailOptions, _callback);
        }
    }

    /**
     * Send a reminder email to someone participating in a comp review 
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @return SendReminderEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SendReminderEmailRequestBuilder sendReminderEmail(String approvalRequestId, String orgId, String compReviewId) throws IllegalArgumentException {
        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new SendReminderEmailRequestBuilder(approvalRequestId, orgId, compReviewId);
    }
    private okhttp3.Call updateApprovalRequestStatusCall(String orgId, String compReviewId, String approvalRequestId, String previewJobId, Boolean isFinalApproval, String collaboratorSelectedReviewerJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approvalRequestPatchBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}/approval-requests/{approvalRequestId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (previewJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("previewJobId", previewJobId));
        }

        if (isFinalApproval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFinalApproval", isFinalApproval));
        }

        if (collaboratorSelectedReviewerJobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collaboratorSelectedReviewerJobId", collaboratorSelectedReviewerJobId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateApprovalRequestStatusValidateBeforeCall(String orgId, String compReviewId, String approvalRequestId, String previewJobId, Boolean isFinalApproval, String collaboratorSelectedReviewerJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateApprovalRequestStatus(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling updateApprovalRequestStatus(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling updateApprovalRequestStatus(Async)");
        }

        return updateApprovalRequestStatusCall(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody, _callback);

    }


    private ApiResponse<Void> updateApprovalRequestStatusWithHttpInfo(String orgId, String compReviewId, String approvalRequestId, String previewJobId, Boolean isFinalApproval, String collaboratorSelectedReviewerJobId, ApprovalRequestPatchBody approvalRequestPatchBody) throws ApiException {
        okhttp3.Call localVarCall = updateApprovalRequestStatusValidateBeforeCall(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateApprovalRequestStatusAsync(String orgId, String compReviewId, String approvalRequestId, String previewJobId, Boolean isFinalApproval, String collaboratorSelectedReviewerJobId, ApprovalRequestPatchBody approvalRequestPatchBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateApprovalRequestStatusValidateBeforeCall(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateApprovalRequestStatusRequestBuilder {
        private final String status;
        private final String orgId;
        private final String compReviewId;
        private final String approvalRequestId;
        private String message;
        private String previewJobId;
        private Boolean isFinalApproval;
        private String collaboratorSelectedReviewerJobId;

        private UpdateApprovalRequestStatusRequestBuilder(String status, String orgId, String compReviewId, String approvalRequestId) {
            this.status = status;
            this.orgId = orgId;
            this.compReviewId = compReviewId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return UpdateApprovalRequestStatusRequestBuilder
         */
        public UpdateApprovalRequestStatusRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set previewJobId
         * @param previewJobId Preview-as job id (optional)
         * @return UpdateApprovalRequestStatusRequestBuilder
         */
        public UpdateApprovalRequestStatusRequestBuilder previewJobId(String previewJobId) {
            this.previewJobId = previewJobId;
            return this;
        }
        
        /**
         * Set isFinalApproval
         * @param isFinalApproval Updating the final stage status (optional)
         * @return UpdateApprovalRequestStatusRequestBuilder
         */
        public UpdateApprovalRequestStatusRequestBuilder isFinalApproval(Boolean isFinalApproval) {
            this.isFinalApproval = isFinalApproval;
            return this;
        }
        
        /**
         * Set collaboratorSelectedReviewerJobId
         * @param collaboratorSelectedReviewerJobId Reviewer job id a collaborator is working on (optional)
         * @return UpdateApprovalRequestStatusRequestBuilder
         */
        public UpdateApprovalRequestStatusRequestBuilder collaboratorSelectedReviewerJobId(String collaboratorSelectedReviewerJobId) {
            this.collaboratorSelectedReviewerJobId = collaboratorSelectedReviewerJobId;
            return this;
        }
        
        /**
         * Build call for updateApprovalRequestStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateApprovalRequestStatusCall(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody, _callback);
        }

        private ApprovalRequestPatchBody buildBodyParams() {
            ApprovalRequestPatchBody approvalRequestPatchBody = new ApprovalRequestPatchBody();
            if (this.status != null)
            approvalRequestPatchBody.status(ApprovalRequestPatchBody.StatusEnum.fromValue(this.status));
            approvalRequestPatchBody.message(this.message);
            return approvalRequestPatchBody;
        }

        /**
         * Execute updateApprovalRequestStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            updateApprovalRequestStatusWithHttpInfo(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody);
        }

        /**
         * Execute updateApprovalRequestStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateApprovalRequestStatusWithHttpInfo(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody);
        }

        /**
         * Execute updateApprovalRequestStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApprovalRequestPatchBody approvalRequestPatchBody = buildBodyParams();
            return updateApprovalRequestStatusAsync(orgId, compReviewId, approvalRequestId, previewJobId, isFinalApproval, collaboratorSelectedReviewerJobId, approvalRequestPatchBody, _callback);
        }
    }

    /**
     * Update approval request status, including any rollups
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Comp review id (required)
     * @param approvalRequestId Approval request id (required)
     * @return UpdateApprovalRequestStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public UpdateApprovalRequestStatusRequestBuilder updateApprovalRequestStatus(String status, String orgId, String compReviewId, String approvalRequestId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new UpdateApprovalRequestStatusRequestBuilder(status, orgId, compReviewId, approvalRequestId);
    }
    private okhttp3.Call updateCompReviewCall(String orgId, String compReviewId, UpdateCompReview updateCompReview, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompReview;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/comp-review/{compReviewId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "compReviewId" + "}", localVarApiClient.escapeString(compReviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompReviewValidateBeforeCall(String orgId, String compReviewId, UpdateCompReview updateCompReview, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateCompReview(Async)");
        }

        // verify the required parameter 'compReviewId' is set
        if (compReviewId == null) {
            throw new ApiException("Missing the required parameter 'compReviewId' when calling updateCompReview(Async)");
        }

        return updateCompReviewCall(orgId, compReviewId, updateCompReview, _callback);

    }


    private ApiResponse<CompReview> updateCompReviewWithHttpInfo(String orgId, String compReviewId, UpdateCompReview updateCompReview) throws ApiException {
        okhttp3.Call localVarCall = updateCompReviewValidateBeforeCall(orgId, compReviewId, updateCompReview, null);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCompReviewAsync(String orgId, String compReviewId, UpdateCompReview updateCompReview, final ApiCallback<CompReview> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompReviewValidateBeforeCall(orgId, compReviewId, updateCompReview, _callback);
        Type localVarReturnType = new TypeToken<CompReview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCompReviewRequestBuilder {
        private final String orgId;
        private final String compReviewId;
        private String label;
        private CompReviewConfig config;
        private String status;
        private List<ShareAccess> shareAccess;
        private Integer reviewerCount;
        private Integer submittedCount;

        private UpdateCompReviewRequestBuilder(String orgId, String compReviewId) {
            this.orgId = orgId;
            this.compReviewId = compReviewId;
        }

        /**
         * Set label
         * @param label human-readable label of goal (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set config
         * @param config  (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder config(CompReviewConfig config) {
            this.config = config;
            return this;
        }
        
        /**
         * Set status
         * @param status Whether the compensation review has been approved by the final approvers (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who have been granted access to this comp review (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Set reviewerCount
         * @param reviewerCount count of reviewers in the comp review (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder reviewerCount(Integer reviewerCount) {
            this.reviewerCount = reviewerCount;
            return this;
        }
        
        /**
         * Set submittedCount
         * @param submittedCount count of reviews that have been submitted and approved (optional)
         * @return UpdateCompReviewRequestBuilder
         */
        public UpdateCompReviewRequestBuilder submittedCount(Integer submittedCount) {
            this.submittedCount = submittedCount;
            return this;
        }
        
        /**
         * Build call for updateCompReview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCompReview updateCompReview = buildBodyParams();
            return updateCompReviewCall(orgId, compReviewId, updateCompReview, _callback);
        }

        private UpdateCompReview buildBodyParams() {
            UpdateCompReview updateCompReview = new UpdateCompReview();
            updateCompReview.label(this.label);
            updateCompReview.config(this.config);
            if (this.status != null)
            updateCompReview.status(UpdateCompReview.StatusEnum.fromValue(this.status));
            updateCompReview.shareAccess(this.shareAccess);
            updateCompReview.reviewerCount(this.reviewerCount);
            updateCompReview.submittedCount(this.submittedCount);
            return updateCompReview;
        }

        /**
         * Execute updateCompReview request
         * @return CompReview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public CompReview execute() throws ApiException {
            UpdateCompReview updateCompReview = buildBodyParams();
            ApiResponse<CompReview> localVarResp = updateCompReviewWithHttpInfo(orgId, compReviewId, updateCompReview);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCompReview request with HTTP info returned
         * @return ApiResponse&lt;CompReview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CompReview> executeWithHttpInfo() throws ApiException {
            UpdateCompReview updateCompReview = buildBodyParams();
            return updateCompReviewWithHttpInfo(orgId, compReviewId, updateCompReview);
        }

        /**
         * Execute updateCompReview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CompReview> _callback) throws ApiException {
            UpdateCompReview updateCompReview = buildBodyParams();
            return updateCompReviewAsync(orgId, compReviewId, updateCompReview, _callback);
        }
    }

    /**
     * Update a comp review
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param compReviewId Review id (required)
     * @return UpdateCompReviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCompReviewRequestBuilder updateCompReview(String orgId, String compReviewId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        return new UpdateCompReviewRequestBuilder(orgId, compReviewId);
    }
}
