/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.CreateCustomer;
import com.konfigthis.client.model.Customer;
import com.konfigthis.client.model.InvoiceResponse;
import java.time.LocalDate;
import com.konfigthis.client.model.ProductItem;
import com.konfigthis.client.model.ResultsCustomer;
import com.konfigthis.client.model.Subscription;
import com.konfigthis.client.model.UpdateCustomer;
import com.konfigthis.client.model.UpdateSubscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomerApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomerApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCustomerCall(CreateCustomer createCustomer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCustomer;

        // create path and map variables
        String localVarPath = "/v1/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCustomerValidateBeforeCall(CreateCustomer createCustomer, final ApiCallback _callback) throws ApiException {
        return createNewCustomerCall(createCustomer, _callback);

    }


    private ApiResponse<Customer> createNewCustomerWithHttpInfo(CreateCustomer createCustomer) throws ApiException {
        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(createCustomer, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCustomerAsync(CreateCustomer createCustomer, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCustomerValidateBeforeCall(createCustomer, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCustomerRequestBuilder {
        private final String name;
        private final String email;
        private final LocalDate startDate;
        private Address billAddress;
        private String industry;
        private String source;
        private String status;
        private String salesforceAccountId;
        private List<ProductItem> products;
        private LocalDate endDate;
        private LocalDate nextInvoiceDate;
        private String primaryHeadCountFilter;
        private String secondaryHeadCountFilter;
        private Double arr;
        private Double projectedArr;
        private LocalDate trialStartDate;
        private LocalDate trialEndDate;
        private String stripeSubscriptionSync;

        private CreateNewCustomerRequestBuilder(String name, String email, LocalDate startDate) {
            this.name = name;
            this.email = email;
            this.startDate = startDate;
        }

        /**
         * Set billAddress
         * @param billAddress  (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder billAddress(Address billAddress) {
            this.billAddress = billAddress;
            return this;
        }
        
        /**
         * Set industry
         * @param industry industry that customer is in (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set source
         * @param source source of customer signup (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set status
         * @param status current status (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set salesforceAccountId
         * @param salesforceAccountId salesforce account id (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder salesforceAccountId(String salesforceAccountId) {
            this.salesforceAccountId = salesforceAccountId;
            return this;
        }
        
        /**
         * Set products
         * @param products products that this customer has purchased (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder products(List<ProductItem> products) {
            this.products = products;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end of service date for churning customers -- on or after this date, service should be disabled (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set nextInvoiceDate
         * @param nextInvoiceDate date of next invoice (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder nextInvoiceDate(LocalDate nextInvoiceDate) {
            this.nextInvoiceDate = nextInvoiceDate;
            return this;
        }
        
        /**
         * Set primaryHeadCountFilter
         * @param primaryHeadCountFilter primary headcount filter - used for billing purposes (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder primaryHeadCountFilter(String primaryHeadCountFilter) {
            this.primaryHeadCountFilter = primaryHeadCountFilter;
            return this;
        }
        
        /**
         * Set secondaryHeadCountFilter
         * @param secondaryHeadCountFilter secondary headcount filter - used for billing purposes (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder secondaryHeadCountFilter(String secondaryHeadCountFilter) {
            this.secondaryHeadCountFilter = secondaryHeadCountFilter;
            return this;
        }
        
        /**
         * Set arr
         * @param arr current ARR of the customer based on most recent invoice (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder arr(Double arr) {
            this.arr = arr;
            return this;
        }
        
        /**
         * Set projectedArr
         * @param projectedArr projected ARR of the customer for upcoming invoice, based on plan and headcount (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder projectedArr(Double projectedArr) {
            this.projectedArr = projectedArr;
            return this;
        }
        
        /**
         * Set trialStartDate
         * @param trialStartDate date this customer begins their trial period (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder trialStartDate(LocalDate trialStartDate) {
            this.trialStartDate = trialStartDate;
            return this;
        }
        
        /**
         * Set trialEndDate
         * @param trialEndDate date this customer ends their trial period (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder trialEndDate(LocalDate trialEndDate) {
            this.trialEndDate = trialEndDate;
            return this;
        }
        
        /**
         * Set stripeSubscriptionSync
         * @param stripeSubscriptionSync Stripe subscription settings (optional)
         * @return CreateNewCustomerRequestBuilder
         */
        public CreateNewCustomerRequestBuilder stripeSubscriptionSync(String stripeSubscriptionSync) {
            this.stripeSubscriptionSync = stripeSubscriptionSync;
            return this;
        }
        
        /**
         * Build call for createNewCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCustomer createCustomer = buildBodyParams();
            return createNewCustomerCall(createCustomer, _callback);
        }

        private CreateCustomer buildBodyParams() {
            CreateCustomer createCustomer = new CreateCustomer();
            createCustomer.name(this.name);
            createCustomer.email(this.email);
            createCustomer.billAddress(this.billAddress);
            createCustomer.industry(this.industry);
            if (this.source != null)
            createCustomer.source(CreateCustomer.SourceEnum.fromValue(this.source));
            if (this.status != null)
            createCustomer.status(CreateCustomer.StatusEnum.fromValue(this.status));
            createCustomer.salesforceAccountId(this.salesforceAccountId);
            createCustomer.products(this.products);
            createCustomer.startDate(this.startDate);
            createCustomer.endDate(this.endDate);
            createCustomer.nextInvoiceDate(this.nextInvoiceDate);
            createCustomer.primaryHeadCountFilter(this.primaryHeadCountFilter);
            createCustomer.secondaryHeadCountFilter(this.secondaryHeadCountFilter);
            createCustomer.arr(this.arr);
            createCustomer.projectedArr(this.projectedArr);
            createCustomer.trialStartDate(this.trialStartDate);
            createCustomer.trialEndDate(this.trialEndDate);
            if (this.stripeSubscriptionSync != null)
            createCustomer.stripeSubscriptionSync(CreateCustomer.StripeSubscriptionSyncEnum.fromValue(this.stripeSubscriptionSync));
            return createCustomer;
        }

        /**
         * Execute createNewCustomer request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            CreateCustomer createCustomer = buildBodyParams();
            ApiResponse<Customer> localVarResp = createNewCustomerWithHttpInfo(createCustomer);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCustomer request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            CreateCustomer createCustomer = buildBodyParams();
            return createNewCustomerWithHttpInfo(createCustomer);
        }

        /**
         * Execute createNewCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            CreateCustomer createCustomer = buildBodyParams();
            return createNewCustomerAsync(createCustomer, _callback);
        }
    }

    /**
     * Create a new customer
     * 
     * @return CreateNewCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCustomerRequestBuilder createNewCustomer(String name, String email, LocalDate startDate) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        return new CreateNewCustomerRequestBuilder(name, email, startDate);
    }
    private okhttp3.Call getAllInvoicesForCustomerCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customer/{customerId}/invoices"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInvoicesForCustomerValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getAllInvoicesForCustomer(Async)");
        }

        return getAllInvoicesForCustomerCall(customerId, _callback);

    }


    private ApiResponse<InvoiceResponse> getAllInvoicesForCustomerWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getAllInvoicesForCustomerValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<InvoiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInvoicesForCustomerAsync(String customerId, final ApiCallback<InvoiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInvoicesForCustomerValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<InvoiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllInvoicesForCustomerRequestBuilder {
        private final String customerId;

        private GetAllInvoicesForCustomerRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getAllInvoicesForCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInvoicesForCustomerCall(customerId, _callback);
        }


        /**
         * Execute getAllInvoicesForCustomer request
         * @return InvoiceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public InvoiceResponse execute() throws ApiException {
            ApiResponse<InvoiceResponse> localVarResp = getAllInvoicesForCustomerWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllInvoicesForCustomer request with HTTP info returned
         * @return ApiResponse&lt;InvoiceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoiceResponse> executeWithHttpInfo() throws ApiException {
            return getAllInvoicesForCustomerWithHttpInfo(customerId);
        }

        /**
         * Execute getAllInvoicesForCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoiceResponse> _callback) throws ApiException {
            return getAllInvoicesForCustomerAsync(customerId, _callback);
        }
    }

    /**
     * Returns a list of all the invoices for the given customer
     * 
     * @param customerId Customer id (required)
     * @return GetAllInvoicesForCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllInvoicesForCustomerRequestBuilder getAllInvoicesForCustomer(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetAllInvoicesForCustomerRequestBuilder(customerId);
    }
    private okhttp3.Call getByIdCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customer/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getById(Async)");
        }

        return getByIdCall(customerId, _callback);

    }


    private ApiResponse<Customer> getByIdWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String customerId, final ApiCallback<Customer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Customer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String customerId;

        private GetByIdRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(customerId, _callback);
        }


        /**
         * Execute getById request
         * @return Customer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Customer execute() throws ApiException {
            ApiResponse<Customer> localVarResp = getByIdWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Customer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Customer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(customerId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Customer> _callback) throws ApiException {
            return getByIdAsync(customerId, _callback);
        }
    }

    /**
     * Return a particular customer by id
     * 
     * @param customerId Customer id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetByIdRequestBuilder(customerId);
    }
    private okhttp3.Call getCharthopSubscriptionCall(String customerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customer/{customerId}/subscription"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCharthopSubscriptionValidateBeforeCall(String customerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCharthopSubscription(Async)");
        }

        return getCharthopSubscriptionCall(customerId, _callback);

    }


    private ApiResponse<Subscription> getCharthopSubscriptionWithHttpInfo(String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCharthopSubscriptionValidateBeforeCall(customerId, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCharthopSubscriptionAsync(String customerId, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCharthopSubscriptionValidateBeforeCall(customerId, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCharthopSubscriptionRequestBuilder {
        private final String customerId;

        private GetCharthopSubscriptionRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Build call for getCharthopSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCharthopSubscriptionCall(customerId, _callback);
        }


        /**
         * Execute getCharthopSubscription request
         * @return Subscription
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Subscription execute() throws ApiException {
            ApiResponse<Subscription> localVarResp = getCharthopSubscriptionWithHttpInfo(customerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCharthopSubscription request with HTTP info returned
         * @return ApiResponse&lt;Subscription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Subscription> executeWithHttpInfo() throws ApiException {
            return getCharthopSubscriptionWithHttpInfo(customerId);
        }

        /**
         * Execute getCharthopSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Subscription> _callback) throws ApiException {
            return getCharthopSubscriptionAsync(customerId, _callback);
        }
    }

    /**
     * Returns information about the Charthop subscription for the given customer
     * 
     * @param customerId Customer id (required)
     * @return GetCharthopSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCharthopSubscriptionRequestBuilder getCharthopSubscription(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new GetCharthopSubscriptionRequestBuilder(customerId);
    }
    private okhttp3.Call listVisibleCustomersCall(String from, Integer limit, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVisibleCustomersValidateBeforeCall(String from, Integer limit, String status, final ApiCallback _callback) throws ApiException {
        return listVisibleCustomersCall(from, limit, status, _callback);

    }


    private ApiResponse<ResultsCustomer> listVisibleCustomersWithHttpInfo(String from, Integer limit, String status) throws ApiException {
        okhttp3.Call localVarCall = listVisibleCustomersValidateBeforeCall(from, limit, status, null);
        Type localVarReturnType = new TypeToken<ResultsCustomer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVisibleCustomersAsync(String from, Integer limit, String status, final ApiCallback<ResultsCustomer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVisibleCustomersValidateBeforeCall(from, limit, status, _callback);
        Type localVarReturnType = new TypeToken<ResultsCustomer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVisibleCustomersRequestBuilder {
        private String from;
        private Integer limit;
        private String status;

        private ListVisibleCustomersRequestBuilder() {
        }

        /**
         * Set from
         * @param from Customer id to start from (optional)
         * @return ListVisibleCustomersRequestBuilder
         */
        public ListVisibleCustomersRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListVisibleCustomersRequestBuilder
         */
        public ListVisibleCustomersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set status
         * @param status Customer.Status. (ACTIVE/INACTIVE/TRAIL) (optional)
         * @return ListVisibleCustomersRequestBuilder
         */
        public ListVisibleCustomersRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for listVisibleCustomers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVisibleCustomersCall(from, limit, status, _callback);
        }


        /**
         * Execute listVisibleCustomers request
         * @return ResultsCustomer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsCustomer execute() throws ApiException {
            ApiResponse<ResultsCustomer> localVarResp = listVisibleCustomersWithHttpInfo(from, limit, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVisibleCustomers request with HTTP info returned
         * @return ApiResponse&lt;ResultsCustomer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsCustomer> executeWithHttpInfo() throws ApiException {
            return listVisibleCustomersWithHttpInfo(from, limit, status);
        }

        /**
         * Execute listVisibleCustomers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsCustomer> _callback) throws ApiException {
            return listVisibleCustomersAsync(from, limit, status, _callback);
        }
    }

    /**
     * Return all visible customers, paginated by name
     * 
     * @return ListVisibleCustomersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListVisibleCustomersRequestBuilder listVisibleCustomers() throws IllegalArgumentException {
        return new ListVisibleCustomersRequestBuilder();
    }
    private okhttp3.Call updateExistingCustomerCall(String customerId, UpdateCustomer updateCustomer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCustomer;

        // create path and map variables
        String localVarPath = "/v1/customer/{customerId}"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingCustomerValidateBeforeCall(String customerId, UpdateCustomer updateCustomer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateExistingCustomer(Async)");
        }

        return updateExistingCustomerCall(customerId, updateCustomer, _callback);

    }


    private ApiResponse<Void> updateExistingCustomerWithHttpInfo(String customerId, UpdateCustomer updateCustomer) throws ApiException {
        okhttp3.Call localVarCall = updateExistingCustomerValidateBeforeCall(customerId, updateCustomer, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingCustomerAsync(String customerId, UpdateCustomer updateCustomer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingCustomerValidateBeforeCall(customerId, updateCustomer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingCustomerRequestBuilder {
        private final String customerId;
        private String name;
        private String email;
        private Address billAddress;
        private String industry;
        private String source;
        private String status;
        private String salesforceAccountId;
        private List<ProductItem> products;
        private LocalDate startDate;
        private LocalDate endDate;
        private LocalDate nextInvoiceDate;
        private String primaryHeadCountFilter;
        private String secondaryHeadCountFilter;
        private Double arr;
        private Double projectedArr;
        private LocalDate trialStartDate;
        private LocalDate trialEndDate;
        private String stripeSubscriptionSync;

        private UpdateExistingCustomerRequestBuilder(String customerId) {
            this.customerId = customerId;
        }

        /**
         * Set name
         * @param name name of customer (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set email
         * @param email email address for billing purposes (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set billAddress
         * @param billAddress  (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder billAddress(Address billAddress) {
            this.billAddress = billAddress;
            return this;
        }
        
        /**
         * Set industry
         * @param industry industry that customer is in (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set source
         * @param source source of customer signup (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set status
         * @param status current status (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set salesforceAccountId
         * @param salesforceAccountId salesforce account id (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder salesforceAccountId(String salesforceAccountId) {
            this.salesforceAccountId = salesforceAccountId;
            return this;
        }
        
        /**
         * Set products
         * @param products products that this customer has purchased (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder products(List<ProductItem> products) {
            this.products = products;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate initial date of billing (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate end of service date for churning customers -- on or after this date, service should be disabled (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set nextInvoiceDate
         * @param nextInvoiceDate date of next invoice (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder nextInvoiceDate(LocalDate nextInvoiceDate) {
            this.nextInvoiceDate = nextInvoiceDate;
            return this;
        }
        
        /**
         * Set primaryHeadCountFilter
         * @param primaryHeadCountFilter primary headcount filter - used for billing purposes (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder primaryHeadCountFilter(String primaryHeadCountFilter) {
            this.primaryHeadCountFilter = primaryHeadCountFilter;
            return this;
        }
        
        /**
         * Set secondaryHeadCountFilter
         * @param secondaryHeadCountFilter secondary headcount filter - used for billing purposes (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder secondaryHeadCountFilter(String secondaryHeadCountFilter) {
            this.secondaryHeadCountFilter = secondaryHeadCountFilter;
            return this;
        }
        
        /**
         * Set arr
         * @param arr current ARR of the customer based on most recent invoice (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder arr(Double arr) {
            this.arr = arr;
            return this;
        }
        
        /**
         * Set projectedArr
         * @param projectedArr projected ARR of the customer for upcoming invoice, based on plan and headcount (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder projectedArr(Double projectedArr) {
            this.projectedArr = projectedArr;
            return this;
        }
        
        /**
         * Set trialStartDate
         * @param trialStartDate date this customer begins their trial period (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder trialStartDate(LocalDate trialStartDate) {
            this.trialStartDate = trialStartDate;
            return this;
        }
        
        /**
         * Set trialEndDate
         * @param trialEndDate date this customer ends their trial period (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder trialEndDate(LocalDate trialEndDate) {
            this.trialEndDate = trialEndDate;
            return this;
        }
        
        /**
         * Set stripeSubscriptionSync
         * @param stripeSubscriptionSync Stripe subscription settings (optional)
         * @return UpdateExistingCustomerRequestBuilder
         */
        public UpdateExistingCustomerRequestBuilder stripeSubscriptionSync(String stripeSubscriptionSync) {
            this.stripeSubscriptionSync = stripeSubscriptionSync;
            return this;
        }
        
        /**
         * Build call for updateExistingCustomer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCustomer updateCustomer = buildBodyParams();
            return updateExistingCustomerCall(customerId, updateCustomer, _callback);
        }

        private UpdateCustomer buildBodyParams() {
            UpdateCustomer updateCustomer = new UpdateCustomer();
            updateCustomer.name(this.name);
            updateCustomer.email(this.email);
            updateCustomer.billAddress(this.billAddress);
            updateCustomer.industry(this.industry);
            if (this.source != null)
            updateCustomer.source(UpdateCustomer.SourceEnum.fromValue(this.source));
            if (this.status != null)
            updateCustomer.status(UpdateCustomer.StatusEnum.fromValue(this.status));
            updateCustomer.salesforceAccountId(this.salesforceAccountId);
            updateCustomer.products(this.products);
            updateCustomer.startDate(this.startDate);
            updateCustomer.endDate(this.endDate);
            updateCustomer.nextInvoiceDate(this.nextInvoiceDate);
            updateCustomer.primaryHeadCountFilter(this.primaryHeadCountFilter);
            updateCustomer.secondaryHeadCountFilter(this.secondaryHeadCountFilter);
            updateCustomer.arr(this.arr);
            updateCustomer.projectedArr(this.projectedArr);
            updateCustomer.trialStartDate(this.trialStartDate);
            updateCustomer.trialEndDate(this.trialEndDate);
            if (this.stripeSubscriptionSync != null)
            updateCustomer.stripeSubscriptionSync(UpdateCustomer.StripeSubscriptionSyncEnum.fromValue(this.stripeSubscriptionSync));
            return updateCustomer;
        }

        /**
         * Execute updateExistingCustomer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateCustomer updateCustomer = buildBodyParams();
            updateExistingCustomerWithHttpInfo(customerId, updateCustomer);
        }

        /**
         * Execute updateExistingCustomer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateCustomer updateCustomer = buildBodyParams();
            return updateExistingCustomerWithHttpInfo(customerId, updateCustomer);
        }

        /**
         * Execute updateExistingCustomer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateCustomer updateCustomer = buildBodyParams();
            return updateExistingCustomerAsync(customerId, updateCustomer, _callback);
        }
    }

    /**
     * Update an existing customer
     * 
     * @param customerId Customer id (required)
     * @return UpdateExistingCustomerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingCustomerRequestBuilder updateExistingCustomer(String customerId) throws IllegalArgumentException {
        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new UpdateExistingCustomerRequestBuilder(customerId);
    }
    private okhttp3.Call updateSubscriptionCall(String customerId, UpdateSubscription updateSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSubscription;

        // create path and map variables
        String localVarPath = "/v1/customer/{customerId}/subscription"
            .replace("{" + "customerId" + "}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(String customerId, UpdateSubscription updateSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(customerId, updateSubscription, _callback);

    }


    private ApiResponse<Void> updateSubscriptionWithHttpInfo(String customerId, UpdateSubscription updateSubscription) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(customerId, updateSubscription, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSubscriptionAsync(String customerId, UpdateSubscription updateSubscription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(customerId, updateSubscription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final String paymentMethod;
        private final String customerId;

        private UpdateSubscriptionRequestBuilder(String paymentMethod, String customerId) {
            this.paymentMethod = paymentMethod;
            this.customerId = customerId;
        }

        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateSubscription updateSubscription = buildBodyParams();
            return updateSubscriptionCall(customerId, updateSubscription, _callback);
        }

        private UpdateSubscription buildBodyParams() {
            UpdateSubscription updateSubscription = new UpdateSubscription();
            updateSubscription.paymentMethod(this.paymentMethod);
            return updateSubscription;
        }

        /**
         * Execute updateSubscription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateSubscription updateSubscription = buildBodyParams();
            updateSubscriptionWithHttpInfo(customerId, updateSubscription);
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateSubscription updateSubscription = buildBodyParams();
            return updateSubscriptionWithHttpInfo(customerId, updateSubscription);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateSubscription updateSubscription = buildBodyParams();
            return updateSubscriptionAsync(customerId, updateSubscription, _callback);
        }
    }

    /**
     * 
     * 
     * @param customerId Customer id (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(String paymentMethod, String customerId) throws IllegalArgumentException {
        if (paymentMethod == null) throw new IllegalArgumentException("\"paymentMethod\" is required but got null");
            

        if (customerId == null) throw new IllegalArgumentException("\"customerId\" is required but got null");
            

        return new UpdateSubscriptionRequestBuilder(paymentMethod, customerId);
    }
}
