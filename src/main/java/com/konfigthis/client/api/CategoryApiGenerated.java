/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Category;
import com.konfigthis.client.model.CreateCategory;
import com.konfigthis.client.model.ResultsCategory;
import com.konfigthis.client.model.UpdateCategory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewCategoryCall(String orgId, CreateCategory createCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCategory;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCategoryValidateBeforeCall(String orgId, CreateCategory createCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewCategory(Async)");
        }

        return createNewCategoryCall(orgId, createCategory, _callback);

    }


    private ApiResponse<Category> createNewCategoryWithHttpInfo(String orgId, CreateCategory createCategory) throws ApiException {
        okhttp3.Call localVarCall = createNewCategoryValidateBeforeCall(orgId, createCategory, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewCategoryAsync(String orgId, CreateCategory createCategory, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCategoryValidateBeforeCall(orgId, createCategory, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewCategoryRequestBuilder {
        private final String label;
        private final String orgId;
        private String orgId;
        private Set<String> fieldIds;
        private Set<String> nativeFields;

        private CreateNewCategoryRequestBuilder(String label, String orgId) {
            this.label = label;
            this.orgId = orgId;
        }

        /**
         * Set orgId
         * @param orgId parent organization id (empty if built-in) (optional)
         * @return CreateNewCategoryRequestBuilder
         */
        public CreateNewCategoryRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set fieldIds
         * @param fieldIds set of field ids included in this category (optional)
         * @return CreateNewCategoryRequestBuilder
         */
        public CreateNewCategoryRequestBuilder fieldIds(Set<String> fieldIds) {
            this.fieldIds = fieldIds;
            return this;
        }
        
        /**
         * Set nativeFields
         * @param nativeFields set of native field names included in this category (optional)
         * @return CreateNewCategoryRequestBuilder
         */
        public CreateNewCategoryRequestBuilder nativeFields(Set<String> nativeFields) {
            this.nativeFields = nativeFields;
            return this;
        }
        
        /**
         * Build call for createNewCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCategory createCategory = buildBodyParams();
            return createNewCategoryCall(orgId, createCategory, _callback);
        }

        private CreateCategory buildBodyParams() {
            CreateCategory createCategory = new CreateCategory();
            createCategory.orgId(this.orgId);
            createCategory.label(this.label);
            createCategory.fieldIds(this.fieldIds);
            createCategory.nativeFields(this.nativeFields);
            return createCategory;
        }

        /**
         * Execute createNewCategory request
         * @return Category
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public Category execute() throws ApiException {
            CreateCategory createCategory = buildBodyParams();
            ApiResponse<Category> localVarResp = createNewCategoryWithHttpInfo(orgId, createCategory);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewCategory request with HTTP info returned
         * @return ApiResponse&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Category> executeWithHttpInfo() throws ApiException {
            CreateCategory createCategory = buildBodyParams();
            return createNewCategoryWithHttpInfo(orgId, createCategory);
        }

        /**
         * Execute createNewCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Category> _callback) throws ApiException {
            CreateCategory createCategory = buildBodyParams();
            return createNewCategoryAsync(orgId, createCategory, _callback);
        }
    }

    /**
     * Create a category
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewCategoryRequestBuilder createNewCategory(String label, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewCategoryRequestBuilder(label, orgId);
    }
    private okhttp3.Call getAvailableCall(String orgId, String type, Boolean unsorted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (unsorted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unsorted", unsorted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableValidateBeforeCall(String orgId, String type, Boolean unsorted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAvailable(Async)");
        }

        return getAvailableCall(orgId, type, unsorted, _callback);

    }


    private ApiResponse<ResultsCategory> getAvailableWithHttpInfo(String orgId, String type, Boolean unsorted) throws ApiException {
        okhttp3.Call localVarCall = getAvailableValidateBeforeCall(orgId, type, unsorted, null);
        Type localVarReturnType = new TypeToken<ResultsCategory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableAsync(String orgId, String type, Boolean unsorted, final ApiCallback<ResultsCategory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableValidateBeforeCall(orgId, type, unsorted, _callback);
        Type localVarReturnType = new TypeToken<ResultsCategory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAvailableRequestBuilder {
        private final String orgId;
        private String type;
        private Boolean unsorted;

        private GetAvailableRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type (Optional) Return only built-in or custom categories (optional)
         * @return GetAvailableRequestBuilder
         */
        public GetAvailableRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set unsorted
         * @param unsorted (Optional) Return categories array unsorted (optional)
         * @return GetAvailableRequestBuilder
         */
        public GetAvailableRequestBuilder unsorted(Boolean unsorted) {
            this.unsorted = unsorted;
            return this;
        }
        
        /**
         * Build call for getAvailable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableCall(orgId, type, unsorted, _callback);
        }


        /**
         * Execute getAvailable request
         * @return ResultsCategory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ResultsCategory execute() throws ApiException {
            ApiResponse<ResultsCategory> localVarResp = getAvailableWithHttpInfo(orgId, type, unsorted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAvailable request with HTTP info returned
         * @return ApiResponse&lt;ResultsCategory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsCategory> executeWithHttpInfo() throws ApiException {
            return getAvailableWithHttpInfo(orgId, type, unsorted);
        }

        /**
         * Execute getAvailable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsCategory> _callback) throws ApiException {
            return getAvailableAsync(orgId, type, unsorted, _callback);
        }
    }

    /**
     * Return categories that are available to the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAvailableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public GetAvailableRequestBuilder getAvailable(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAvailableRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category/{categoryId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getById(Async)");
        }

        return getByIdCall(orgId, categoryId, _callback);

    }


    private ApiResponse<Category> getByIdWithHttpInfo(String orgId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, categoryId, null);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String categoryId, final ApiCallback<Category> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<Category>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String categoryId;

        private GetByIdRequestBuilder(String orgId, String categoryId) {
            this.orgId = orgId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, categoryId, _callback);
        }


        /**
         * Execute getById request
         * @return Category
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public Category execute() throws ApiException {
            ApiResponse<Category> localVarResp = getByIdWithHttpInfo(orgId, categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Category&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Category> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, categoryId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Category> _callback) throws ApiException {
            return getByIdAsync(orgId, categoryId, _callback);
        }
    }

    /**
     * Return a particular category by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param categoryId Category id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String categoryId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, categoryId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category/{categoryId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, categoryId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String categoryId;

        private RemoveByIdRequestBuilder(String orgId, String categoryId) {
            this.orgId = orgId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, categoryId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, categoryId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, categoryId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, categoryId, _callback);
        }
    }

    /**
     * Delete a category
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param categoryId Category id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String categoryId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, categoryId);
    }
    private okhttp3.Call updateExistingCategoryCall(String orgId, String categoryId, UpdateCategory updateCategory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategory;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category/{categoryId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingCategoryValidateBeforeCall(String orgId, String categoryId, UpdateCategory updateCategory, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateExistingCategory(Async)");
        }

        return updateExistingCategoryCall(orgId, categoryId, updateCategory, _callback);

    }


    private ApiResponse<Void> updateExistingCategoryWithHttpInfo(String orgId, String categoryId, UpdateCategory updateCategory) throws ApiException {
        okhttp3.Call localVarCall = updateExistingCategoryValidateBeforeCall(orgId, categoryId, updateCategory, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingCategoryAsync(String orgId, String categoryId, UpdateCategory updateCategory, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingCategoryValidateBeforeCall(orgId, categoryId, updateCategory, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingCategoryRequestBuilder {
        private final String orgId;
        private final String categoryId;
        private String label;
        private Set<String> fieldIds;
        private Set<String> nativeFields;

        private UpdateExistingCategoryRequestBuilder(String orgId, String categoryId) {
            this.orgId = orgId;
            this.categoryId = categoryId;
        }

        /**
         * Set label
         * @param label human-readable label of category (optional)
         * @return UpdateExistingCategoryRequestBuilder
         */
        public UpdateExistingCategoryRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set fieldIds
         * @param fieldIds set of field ids included in this category (optional)
         * @return UpdateExistingCategoryRequestBuilder
         */
        public UpdateExistingCategoryRequestBuilder fieldIds(Set<String> fieldIds) {
            this.fieldIds = fieldIds;
            return this;
        }
        
        /**
         * Set nativeFields
         * @param nativeFields set of native field names included in this category (optional)
         * @return UpdateExistingCategoryRequestBuilder
         */
        public UpdateExistingCategoryRequestBuilder nativeFields(Set<String> nativeFields) {
            this.nativeFields = nativeFields;
            return this;
        }
        
        /**
         * Build call for updateExistingCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCategory updateCategory = buildBodyParams();
            return updateExistingCategoryCall(orgId, categoryId, updateCategory, _callback);
        }

        private UpdateCategory buildBodyParams() {
            UpdateCategory updateCategory = new UpdateCategory();
            updateCategory.label(this.label);
            updateCategory.fieldIds(this.fieldIds);
            updateCategory.nativeFields(this.nativeFields);
            return updateCategory;
        }

        /**
         * Execute updateExistingCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateCategory updateCategory = buildBodyParams();
            updateExistingCategoryWithHttpInfo(orgId, categoryId, updateCategory);
        }

        /**
         * Execute updateExistingCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateCategory updateCategory = buildBodyParams();
            return updateExistingCategoryWithHttpInfo(orgId, categoryId, updateCategory);
        }

        /**
         * Execute updateExistingCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateCategory updateCategory = buildBodyParams();
            return updateExistingCategoryAsync(orgId, categoryId, updateCategory, _callback);
        }
    }

    /**
     * Update an existing category
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param categoryId Category id (required)
     * @return UpdateExistingCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingCategoryRequestBuilder updateExistingCategory(String orgId, String categoryId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new UpdateExistingCategoryRequestBuilder(orgId, categoryId);
    }
}
