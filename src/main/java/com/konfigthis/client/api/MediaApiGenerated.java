/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.Media;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MediaApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MediaApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getMetadataCall(String mediaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/media/{mediaId}"
            .replace("{" + "mediaId" + "}", localVarApiClient.escapeString(mediaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadataValidateBeforeCall(String mediaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaId' is set
        if (mediaId == null) {
            throw new ApiException("Missing the required parameter 'mediaId' when calling getMetadata(Async)");
        }

        return getMetadataCall(mediaId, _callback);

    }


    private ApiResponse<Media> getMetadataWithHttpInfo(String mediaId) throws ApiException {
        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(mediaId, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadataAsync(String mediaId, final ApiCallback<Media> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadataValidateBeforeCall(mediaId, _callback);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadataRequestBuilder {
        private final String mediaId;

        private GetMetadataRequestBuilder(String mediaId) {
            this.mediaId = mediaId;
        }

        /**
         * Build call for getMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadataCall(mediaId, _callback);
        }


        /**
         * Execute getMetadata request
         * @return Media
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public Media execute() throws ApiException {
            ApiResponse<Media> localVarResp = getMetadataWithHttpInfo(mediaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata request with HTTP info returned
         * @return ApiResponse&lt;Media&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Media> executeWithHttpInfo() throws ApiException {
            return getMetadataWithHttpInfo(mediaId);
        }

        /**
         * Execute getMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Media> _callback) throws ApiException {
            return getMetadataAsync(mediaId, _callback);
        }
    }

    /**
     * Returns metadata about a piece of media
     * 
     * @param mediaId Media id (required)
     * @return GetMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadataRequestBuilder getMetadata(String mediaId) throws IllegalArgumentException {
        if (mediaId == null) throw new IllegalArgumentException("\"mediaId\" is required but got null");
            

        return new GetMetadataRequestBuilder(mediaId);
    }
    private okhttp3.Call getMetadata_0Call(String orgId, String mediaId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/media/{mediaId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "mediaId" + "}", localVarApiClient.escapeString(mediaId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetadata_0ValidateBeforeCall(String orgId, String mediaId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMetadata_0(Async)");
        }

        // verify the required parameter 'mediaId' is set
        if (mediaId == null) {
            throw new ApiException("Missing the required parameter 'mediaId' when calling getMetadata_0(Async)");
        }

        return getMetadata_0Call(orgId, mediaId, _callback);

    }


    private ApiResponse<Media> getMetadata_0WithHttpInfo(String orgId, String mediaId) throws ApiException {
        okhttp3.Call localVarCall = getMetadata_0ValidateBeforeCall(orgId, mediaId, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMetadata_0Async(String orgId, String mediaId, final ApiCallback<Media> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetadata_0ValidateBeforeCall(orgId, mediaId, _callback);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMetadata0RequestBuilder {
        private final String orgId;
        private final String mediaId;

        private GetMetadata0RequestBuilder(String orgId, String mediaId) {
            this.orgId = orgId;
            this.mediaId = mediaId;
        }

        /**
         * Build call for getMetadata_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMetadata_0Call(orgId, mediaId, _callback);
        }


        /**
         * Execute getMetadata_0 request
         * @return Media
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public Media execute() throws ApiException {
            ApiResponse<Media> localVarResp = getMetadata_0WithHttpInfo(orgId, mediaId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMetadata_0 request with HTTP info returned
         * @return ApiResponse&lt;Media&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Media> executeWithHttpInfo() throws ApiException {
            return getMetadata_0WithHttpInfo(orgId, mediaId);
        }

        /**
         * Execute getMetadata_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Media> _callback) throws ApiException {
            return getMetadata_0Async(orgId, mediaId, _callback);
        }
    }

    /**
     * Returns metadata about a piece of media
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param mediaId Media id (required)
     * @return GetMetadata0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Media not found </td><td>  -  </td></tr>
     </table>
     */
    public GetMetadata0RequestBuilder getMetadata_0(String orgId, String mediaId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (mediaId == null) throw new IllegalArgumentException("\"mediaId\" is required but got null");
            

        return new GetMetadata0RequestBuilder(orgId, mediaId);
    }
    private okhttp3.Call uploadNewMediaCall(FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadNewMediaValidateBeforeCall(FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        return uploadNewMediaCall(fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Media> uploadNewMediaWithHttpInfo(FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadNewMediaValidateBeforeCall(fileUploadNewFileRequest, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadNewMediaAsync(FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Media> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadNewMediaValidateBeforeCall(fileUploadNewFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadNewMediaRequestBuilder {
        private File _file;

        private UploadNewMediaRequestBuilder() {
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return UploadNewMediaRequestBuilder
         */
        public UploadNewMediaRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadNewMedia
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewMediaCall(fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute uploadNewMedia request
         * @return Media
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public Media execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            ApiResponse<Media> localVarResp = uploadNewMediaWithHttpInfo(fileUploadNewFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadNewMedia request with HTTP info returned
         * @return ApiResponse&lt;Media&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Media> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewMediaWithHttpInfo(fileUploadNewFileRequest);
        }

        /**
         * Execute uploadNewMedia request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Media> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewMediaAsync(fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Upload a new piece of media
     * 
     * @return UploadNewMediaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public UploadNewMediaRequestBuilder uploadNewMedia() throws IllegalArgumentException {
        return new UploadNewMediaRequestBuilder();
    }
    private okhttp3.Call uploadNewPieceCall(String orgId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/media"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadNewPieceValidateBeforeCall(String orgId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling uploadNewPiece(Async)");
        }

        return uploadNewPieceCall(orgId, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Media> uploadNewPieceWithHttpInfo(String orgId, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadNewPieceValidateBeforeCall(orgId, fileUploadNewFileRequest, null);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadNewPieceAsync(String orgId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Media> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadNewPieceValidateBeforeCall(orgId, fileUploadNewFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Media>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadNewPieceRequestBuilder {
        private final String orgId;
        private File _file;

        private UploadNewPieceRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return UploadNewPieceRequestBuilder
         */
        public UploadNewPieceRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadNewPiece
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewPieceCall(orgId, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute uploadNewPiece request
         * @return Media
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public Media execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            ApiResponse<Media> localVarResp = uploadNewPieceWithHttpInfo(orgId, fileUploadNewFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadNewPiece request with HTTP info returned
         * @return ApiResponse&lt;Media&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Media> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewPieceWithHttpInfo(orgId, fileUploadNewFileRequest);
        }

        /**
         * Execute uploadNewPiece request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Media> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadNewPieceAsync(orgId, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Upload a new piece of media
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UploadNewPieceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid type or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Not authorized </td><td>  -  </td></tr>
     </table>
     */
    public UploadNewPieceRequestBuilder uploadNewPiece(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UploadNewPieceRequestBuilder(orgId);
    }
}
