/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreatePolicy;
import com.konfigthis.client.model.EntityAction;
import com.konfigthis.client.model.PartialPolicy;
import com.konfigthis.client.model.Policy;
import com.konfigthis.client.model.PolicyRule;
import com.konfigthis.client.model.ResultsPolicy;
import com.konfigthis.client.model.UpdatePolicy;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PolicyApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkValidityOfCall(String orgId, PartialPolicy partialPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialPolicy;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/validate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkValidityOfValidateBeforeCall(String orgId, PartialPolicy partialPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling checkValidityOf(Async)");
        }

        return checkValidityOfCall(orgId, partialPolicy, _callback);

    }


    private ApiResponse<Void> checkValidityOfWithHttpInfo(String orgId, PartialPolicy partialPolicy) throws ApiException {
        okhttp3.Call localVarCall = checkValidityOfValidateBeforeCall(orgId, partialPolicy, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkValidityOfAsync(String orgId, PartialPolicy partialPolicy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkValidityOfValidateBeforeCall(orgId, partialPolicy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CheckValidityOfRequestBuilder {
        private final String orgId;
        private String description;
        private String id;
        private String orgId;
        private String label;
        private List<PolicyRule> rules;
        private String copiedFromId;
        private String createId;
        private String createAt;
        private String updateId;
        private String updateAt;
        private String deleteId;
        private String deleteAt;

        private CheckValidityOfRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description description of policy (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set id
         * @param id globally unique id (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (empty if global) (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable full name of policy (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set rules
         * @param rules the rules that define the policy (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder rules(List<PolicyRule> rules) {
            this.rules = rules;
            return this;
        }
        
        /**
         * Set copiedFromId
         * @param copiedFromId policy id that was copied (empty if original) (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder copiedFromId(String copiedFromId) {
            this.copiedFromId = copiedFromId;
            return this;
        }
        
        /**
         * Set createId
         * @param createId created by user id (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder createId(String createId) {
            this.createId = createId;
            return this;
        }
        
        /**
         * Set createAt
         * @param createAt created timestamp (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder createAt(String createAt) {
            this.createAt = createAt;
            return this;
        }
        
        /**
         * Set updateId
         * @param updateId last updated by user id (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder updateId(String updateId) {
            this.updateId = updateId;
            return this;
        }
        
        /**
         * Set updateAt
         * @param updateAt last updated timestamp (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder updateAt(String updateAt) {
            this.updateAt = updateAt;
            return this;
        }
        
        /**
         * Set deleteId
         * @param deleteId deleted by user id (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder deleteId(String deleteId) {
            this.deleteId = deleteId;
            return this;
        }
        
        /**
         * Set deleteAt
         * @param deleteAt deleted timestamp (optional)
         * @return CheckValidityOfRequestBuilder
         */
        public CheckValidityOfRequestBuilder deleteAt(String deleteAt) {
            this.deleteAt = deleteAt;
            return this;
        }
        
        /**
         * Build call for checkValidityOf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PartialPolicy partialPolicy = buildBodyParams();
            return checkValidityOfCall(orgId, partialPolicy, _callback);
        }

        private PartialPolicy buildBodyParams() {
            PartialPolicy partialPolicy = new PartialPolicy();
            partialPolicy.description(this.description);
            partialPolicy.id(this.id);
            partialPolicy.orgId(this.orgId);
            partialPolicy.label(this.label);
            partialPolicy.rules(this.rules);
            partialPolicy.copiedFromId(this.copiedFromId);
            partialPolicy.createId(this.createId);
            partialPolicy.createAt(this.createAt);
            partialPolicy.updateId(this.updateId);
            partialPolicy.updateAt(this.updateAt);
            partialPolicy.deleteId(this.deleteId);
            partialPolicy.deleteAt(this.deleteAt);
            return partialPolicy;
        }

        /**
         * Execute checkValidityOf request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PartialPolicy partialPolicy = buildBodyParams();
            checkValidityOfWithHttpInfo(orgId, partialPolicy);
        }

        /**
         * Execute checkValidityOf request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PartialPolicy partialPolicy = buildBodyParams();
            return checkValidityOfWithHttpInfo(orgId, partialPolicy);
        }

        /**
         * Execute checkValidityOf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PartialPolicy partialPolicy = buildBodyParams();
            return checkValidityOfAsync(orgId, partialPolicy, _callback);
        }
    }

    /**
     * Return if a policy is valid
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CheckValidityOfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CheckValidityOfRequestBuilder checkValidityOf(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CheckValidityOfRequestBuilder(orgId);
    }
    private okhttp3.Call copyExistingPolicyCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/{policyId}/copy"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copyExistingPolicyValidateBeforeCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling copyExistingPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling copyExistingPolicy(Async)");
        }

        return copyExistingPolicyCall(orgId, policyId, _callback);

    }


    private ApiResponse<Policy> copyExistingPolicyWithHttpInfo(String orgId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = copyExistingPolicyValidateBeforeCall(orgId, policyId, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call copyExistingPolicyAsync(String orgId, String policyId, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = copyExistingPolicyValidateBeforeCall(orgId, policyId, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CopyExistingPolicyRequestBuilder {
        private final String orgId;
        private final String policyId;

        private CopyExistingPolicyRequestBuilder(String orgId, String policyId) {
            this.orgId = orgId;
            this.policyId = policyId;
        }

        /**
         * Build call for copyExistingPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return copyExistingPolicyCall(orgId, policyId, _callback);
        }


        /**
         * Execute copyExistingPolicy request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            ApiResponse<Policy> localVarResp = copyExistingPolicyWithHttpInfo(orgId, policyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute copyExistingPolicy request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            return copyExistingPolicyWithHttpInfo(orgId, policyId);
        }

        /**
         * Execute copyExistingPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            return copyExistingPolicyAsync(orgId, policyId, _callback);
        }
    }

    /**
     * Copy an existing policy
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param policyId Policy id (required)
     * @return CopyExistingPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CopyExistingPolicyRequestBuilder copyExistingPolicy(String orgId, String policyId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new CopyExistingPolicyRequestBuilder(orgId, policyId);
    }
    private okhttp3.Call createNewPolicyCall(String orgId, CreatePolicy createPolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPolicy;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPolicyValidateBeforeCall(String orgId, CreatePolicy createPolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewPolicy(Async)");
        }

        return createNewPolicyCall(orgId, createPolicy, _callback);

    }


    private ApiResponse<Policy> createNewPolicyWithHttpInfo(String orgId, CreatePolicy createPolicy) throws ApiException {
        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(orgId, createPolicy, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPolicyAsync(String orgId, CreatePolicy createPolicy, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPolicyValidateBeforeCall(orgId, createPolicy, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPolicyRequestBuilder {
        private final String label;
        private final String orgId;
        private String description;
        private String orgId;
        private List<PolicyRule> rules;
        private String copiedFromId;

        private CreateNewPolicyRequestBuilder(String label, String orgId) {
            this.label = label;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description description of policy (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (empty if global) (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set rules
         * @param rules the rules that define the policy (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder rules(List<PolicyRule> rules) {
            this.rules = rules;
            return this;
        }
        
        /**
         * Set copiedFromId
         * @param copiedFromId policy id that was copied (empty if original) (optional)
         * @return CreateNewPolicyRequestBuilder
         */
        public CreateNewPolicyRequestBuilder copiedFromId(String copiedFromId) {
            this.copiedFromId = copiedFromId;
            return this;
        }
        
        /**
         * Build call for createNewPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreatePolicy createPolicy = buildBodyParams();
            return createNewPolicyCall(orgId, createPolicy, _callback);
        }

        private CreatePolicy buildBodyParams() {
            CreatePolicy createPolicy = new CreatePolicy();
            createPolicy.description(this.description);
            createPolicy.orgId(this.orgId);
            createPolicy.label(this.label);
            createPolicy.rules(this.rules);
            createPolicy.copiedFromId(this.copiedFromId);
            return createPolicy;
        }

        /**
         * Execute createNewPolicy request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            CreatePolicy createPolicy = buildBodyParams();
            ApiResponse<Policy> localVarResp = createNewPolicyWithHttpInfo(orgId, createPolicy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPolicy request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            CreatePolicy createPolicy = buildBodyParams();
            return createNewPolicyWithHttpInfo(orgId, createPolicy);
        }

        /**
         * Execute createNewPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            CreatePolicy createPolicy = buildBodyParams();
            return createNewPolicyAsync(orgId, createPolicy, _callback);
        }
    }

    /**
     * Create a policy
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPolicyRequestBuilder createNewPolicy(String label, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewPolicyRequestBuilder(label, orgId);
    }
    private okhttp3.Call getAllEntityActionMapsCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/action"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllEntityActionMapsValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllEntityActionMaps(Async)");
        }

        return getAllEntityActionMapsCall(orgId, _callback);

    }


    private ApiResponse<EntityAction> getAllEntityActionMapsWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getAllEntityActionMapsValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<EntityAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllEntityActionMapsAsync(String orgId, final ApiCallback<EntityAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllEntityActionMapsValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<EntityAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllEntityActionMapsRequestBuilder {
        private final String orgId;

        private GetAllEntityActionMapsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getAllEntityActionMaps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllEntityActionMapsCall(orgId, _callback);
        }


        /**
         * Execute getAllEntityActionMaps request
         * @return EntityAction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public EntityAction execute() throws ApiException {
            ApiResponse<EntityAction> localVarResp = getAllEntityActionMapsWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllEntityActionMaps request with HTTP info returned
         * @return ApiResponse&lt;EntityAction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EntityAction> executeWithHttpInfo() throws ApiException {
            return getAllEntityActionMapsWithHttpInfo(orgId);
        }

        /**
         * Execute getAllEntityActionMaps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EntityAction> _callback) throws ApiException {
            return getAllEntityActionMapsAsync(orgId, _callback);
        }
    }

    /**
     * Return all entity:action maps allowed on a policy rule
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllEntityActionMapsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllEntityActionMapsRequestBuilder getAllEntityActionMaps(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllEntityActionMapsRequestBuilder(orgId);
    }
    private okhttp3.Call getAllPoliciesCall(String orgId, String ids, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPoliciesValidateBeforeCall(String orgId, String ids, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPolicies(Async)");
        }

        return getAllPoliciesCall(orgId, ids, type, _callback);

    }


    private ApiResponse<ResultsPolicy> getAllPoliciesWithHttpInfo(String orgId, String ids, String type) throws ApiException {
        okhttp3.Call localVarCall = getAllPoliciesValidateBeforeCall(orgId, ids, type, null);
        Type localVarReturnType = new TypeToken<ResultsPolicy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPoliciesAsync(String orgId, String ids, String type, final ApiCallback<ResultsPolicy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPoliciesValidateBeforeCall(orgId, ids, type, _callback);
        Type localVarReturnType = new TypeToken<ResultsPolicy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPoliciesRequestBuilder {
        private final String orgId;
        private String ids;
        private String type;

        private GetAllPoliciesRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set ids
         * @param ids (Optional) Comma separated Policy Ids to find (optional)
         * @return GetAllPoliciesRequestBuilder
         */
        public GetAllPoliciesRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set type
         * @param type (Optional) Return only default or custom policies (optional)
         * @return GetAllPoliciesRequestBuilder
         */
        public GetAllPoliciesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for getAllPolicies
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPoliciesCall(orgId, ids, type, _callback);
        }


        /**
         * Execute getAllPolicies request
         * @return ResultsPolicy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsPolicy execute() throws ApiException {
            ApiResponse<ResultsPolicy> localVarResp = getAllPoliciesWithHttpInfo(orgId, ids, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPolicies request with HTTP info returned
         * @return ApiResponse&lt;ResultsPolicy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsPolicy> executeWithHttpInfo() throws ApiException {
            return getAllPoliciesWithHttpInfo(orgId, ids, type);
        }

        /**
         * Execute getAllPolicies request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsPolicy> _callback) throws ApiException {
            return getAllPoliciesAsync(orgId, ids, type, _callback);
        }
    }

    /**
     * Return all or a set of policies in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPoliciesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPoliciesRequestBuilder getAllPolicies(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPoliciesRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/{policyId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling getById(Async)");
        }

        return getByIdCall(orgId, policyId, _callback);

    }


    private ApiResponse<Policy> getByIdWithHttpInfo(String orgId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, policyId, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String policyId, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, policyId, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String policyId;

        private GetByIdRequestBuilder(String orgId, String policyId) {
            this.orgId = orgId;
            this.policyId = policyId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, policyId, _callback);
        }


        /**
         * Execute getById request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            ApiResponse<Policy> localVarResp = getByIdWithHttpInfo(orgId, policyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, policyId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            return getByIdAsync(orgId, policyId, _callback);
        }
    }

    /**
     * Return a particular policy by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param policyId Policy id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String policyId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, policyId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/{policyId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, policyId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, policyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String policyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, policyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String policyId;

        private RemoveByIdRequestBuilder(String orgId, String policyId) {
            this.orgId = orgId;
            this.policyId = policyId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, policyId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, policyId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, policyId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, policyId, _callback);
        }
    }

    /**
     * Delete a policy
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param policyId Policy id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String policyId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, policyId);
    }
    private okhttp3.Call updateExistingPolicyCall(String orgId, String policyId, UpdatePolicy updatePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePolicy;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/policy/{policyId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingPolicyValidateBeforeCall(String orgId, String policyId, UpdatePolicy updatePolicy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingPolicy(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling updateExistingPolicy(Async)");
        }

        return updateExistingPolicyCall(orgId, policyId, updatePolicy, _callback);

    }


    private ApiResponse<Void> updateExistingPolicyWithHttpInfo(String orgId, String policyId, UpdatePolicy updatePolicy) throws ApiException {
        okhttp3.Call localVarCall = updateExistingPolicyValidateBeforeCall(orgId, policyId, updatePolicy, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingPolicyAsync(String orgId, String policyId, UpdatePolicy updatePolicy, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingPolicyValidateBeforeCall(orgId, policyId, updatePolicy, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingPolicyRequestBuilder {
        private final String orgId;
        private final String policyId;
        private String description;
        private String label;
        private List<PolicyRule> rules;

        private UpdateExistingPolicyRequestBuilder(String orgId, String policyId) {
            this.orgId = orgId;
            this.policyId = policyId;
        }

        /**
         * Set description
         * @param description description of policy (optional)
         * @return UpdateExistingPolicyRequestBuilder
         */
        public UpdateExistingPolicyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable full name of policy (optional)
         * @return UpdateExistingPolicyRequestBuilder
         */
        public UpdateExistingPolicyRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set rules
         * @param rules the rules that define the policy (optional)
         * @return UpdateExistingPolicyRequestBuilder
         */
        public UpdateExistingPolicyRequestBuilder rules(List<PolicyRule> rules) {
            this.rules = rules;
            return this;
        }
        
        /**
         * Build call for updateExistingPolicy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdatePolicy updatePolicy = buildBodyParams();
            return updateExistingPolicyCall(orgId, policyId, updatePolicy, _callback);
        }

        private UpdatePolicy buildBodyParams() {
            UpdatePolicy updatePolicy = new UpdatePolicy();
            updatePolicy.description(this.description);
            updatePolicy.label(this.label);
            updatePolicy.rules(this.rules);
            return updatePolicy;
        }

        /**
         * Execute updateExistingPolicy request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdatePolicy updatePolicy = buildBodyParams();
            updateExistingPolicyWithHttpInfo(orgId, policyId, updatePolicy);
        }

        /**
         * Execute updateExistingPolicy request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdatePolicy updatePolicy = buildBodyParams();
            return updateExistingPolicyWithHttpInfo(orgId, policyId, updatePolicy);
        }

        /**
         * Execute updateExistingPolicy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdatePolicy updatePolicy = buildBodyParams();
            return updateExistingPolicyAsync(orgId, policyId, updatePolicy, _callback);
        }
    }

    /**
     * Update an existing policy
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param policyId Policy id (required)
     * @return UpdateExistingPolicyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingPolicyRequestBuilder updateExistingPolicy(String orgId, String policyId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (policyId == null) throw new IllegalArgumentException("\"policyId\" is required but got null");
            

        return new UpdateExistingPolicyRequestBuilder(orgId, policyId);
    }
}
