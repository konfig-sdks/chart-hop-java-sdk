/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppConfig;
import com.konfigthis.client.model.CreateAppConfig;
import com.konfigthis.client.model.FieldMapper;
import com.konfigthis.client.model.OutboundFieldMapper;
import com.konfigthis.client.model.UpdateAppConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppConfigApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppConfigApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppConfigApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewConfigCall(CreateAppConfig createAppConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppConfig;

        // create path and map variables
        String localVarPath = "/v1/app-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewConfigValidateBeforeCall(CreateAppConfig createAppConfig, final ApiCallback _callback) throws ApiException {
        return createNewConfigCall(createAppConfig, _callback);

    }


    private ApiResponse<AppConfig> createNewConfigWithHttpInfo(CreateAppConfig createAppConfig) throws ApiException {
        okhttp3.Call localVarCall = createNewConfigValidateBeforeCall(createAppConfig, null);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewConfigAsync(CreateAppConfig createAppConfig, final ApiCallback<AppConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewConfigValidateBeforeCall(createAppConfig, _callback);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewConfigRequestBuilder {
        private final String appId;
        private String userId;
        private String orgId;
        private List<FieldMapper> fieldMappers;
        private List<FieldMapper> customFieldMappers;
        private List<OutboundFieldMapper> customOutboundFieldMappers;
        private Set<String> disabledFieldMappers;
        private Set<String> enabledOutboundFieldMappers;
        private List<Map<String, String>> templateMatchers;
        private Object options;

        private CreateNewConfigRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set userId
         * @param userId user id, if this person corresponds with a user (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId org id, if this app config corresponds with an org (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set fieldMappers
         * @param fieldMappers list of default field mappers (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder fieldMappers(List<FieldMapper> fieldMappers) {
            this.fieldMappers = fieldMappers;
            return this;
        }
        
        /**
         * Set customFieldMappers
         * @param customFieldMappers list of custom field mappers by a user (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder customFieldMappers(List<FieldMapper> customFieldMappers) {
            this.customFieldMappers = customFieldMappers;
            return this;
        }
        
        /**
         * Set customOutboundFieldMappers
         * @param customOutboundFieldMappers list of custom outbound field mappers (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder customOutboundFieldMappers(List<OutboundFieldMapper> customOutboundFieldMappers) {
            this.customOutboundFieldMappers = customOutboundFieldMappers;
            return this;
        }
        
        /**
         * Set disabledFieldMappers
         * @param disabledFieldMappers list of disabled inbound field mappers by id (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder disabledFieldMappers(Set<String> disabledFieldMappers) {
            this.disabledFieldMappers = disabledFieldMappers;
            return this;
        }
        
        /**
         * Set enabledOutboundFieldMappers
         * @param enabledOutboundFieldMappers list of enabled outbound field mappers by id (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder enabledOutboundFieldMappers(Set<String> enabledOutboundFieldMappers) {
            this.enabledOutboundFieldMappers = enabledOutboundFieldMappers;
            return this;
        }
        
        /**
         * Set templateMatchers
         * @param templateMatchers template field matchers defined by a user (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder templateMatchers(List<Map<String, String>> templateMatchers) {
            this.templateMatchers = templateMatchers;
            return this;
        }
        
        /**
         * Set options
         * @param options app specific options (optional)
         * @return CreateNewConfigRequestBuilder
         */
        public CreateNewConfigRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for createNewConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateAppConfig createAppConfig = buildBodyParams();
            return createNewConfigCall(createAppConfig, _callback);
        }

        private CreateAppConfig buildBodyParams() {
            CreateAppConfig createAppConfig = new CreateAppConfig();
            createAppConfig.appId(this.appId);
            createAppConfig.userId(this.userId);
            createAppConfig.orgId(this.orgId);
            createAppConfig.fieldMappers(this.fieldMappers);
            createAppConfig.customFieldMappers(this.customFieldMappers);
            createAppConfig.customOutboundFieldMappers(this.customOutboundFieldMappers);
            createAppConfig.disabledFieldMappers(this.disabledFieldMappers);
            createAppConfig.enabledOutboundFieldMappers(this.enabledOutboundFieldMappers);
            createAppConfig.templateMatchers(this.templateMatchers);
            createAppConfig.options(this.options);
            return createAppConfig;
        }

        /**
         * Execute createNewConfig request
         * @return AppConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public AppConfig execute() throws ApiException {
            CreateAppConfig createAppConfig = buildBodyParams();
            ApiResponse<AppConfig> localVarResp = createNewConfigWithHttpInfo(createAppConfig);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewConfig request with HTTP info returned
         * @return ApiResponse&lt;AppConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppConfig> executeWithHttpInfo() throws ApiException {
            CreateAppConfig createAppConfig = buildBodyParams();
            return createNewConfigWithHttpInfo(createAppConfig);
        }

        /**
         * Execute createNewConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppConfig> _callback) throws ApiException {
            CreateAppConfig createAppConfig = buildBodyParams();
            return createNewConfigAsync(createAppConfig, _callback);
        }
    }

    /**
     * Create a new app config
     * 
     * @return CreateNewConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewConfigRequestBuilder createNewConfig(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new CreateNewConfigRequestBuilder(appId);
    }
    private okhttp3.Call getDefaultConfigByAppCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app-config/{appId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultConfigByAppValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getDefaultConfigByApp(Async)");
        }

        return getDefaultConfigByAppCall(appId, _callback);

    }


    private ApiResponse<AppConfig> getDefaultConfigByAppWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getDefaultConfigByAppValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDefaultConfigByAppAsync(String appId, final ApiCallback<AppConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultConfigByAppValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDefaultConfigByAppRequestBuilder {
        private final String appId;

        private GetDefaultConfigByAppRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getDefaultConfigByApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDefaultConfigByAppCall(appId, _callback);
        }


        /**
         * Execute getDefaultConfigByApp request
         * @return AppConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AppConfig execute() throws ApiException {
            ApiResponse<AppConfig> localVarResp = getDefaultConfigByAppWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDefaultConfigByApp request with HTTP info returned
         * @return ApiResponse&lt;AppConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppConfig> executeWithHttpInfo() throws ApiException {
            return getDefaultConfigByAppWithHttpInfo(appId);
        }

        /**
         * Execute getDefaultConfigByApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppConfig> _callback) throws ApiException {
            return getDefaultConfigByAppAsync(appId, _callback);
        }
    }

    /**
     * Return default app configuration by app
     * 
     * @param appId App id (required)
     * @return GetDefaultConfigByAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDefaultConfigByAppRequestBuilder getDefaultConfigByApp(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new GetDefaultConfigByAppRequestBuilder(appId);
    }
    private okhttp3.Call getUserConfigByAppAndUserCall(String appId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/app-config/{appId}/{userId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserConfigByAppAndUserValidateBeforeCall(String appId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getUserConfigByAppAndUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserConfigByAppAndUser(Async)");
        }

        return getUserConfigByAppAndUserCall(appId, userId, _callback);

    }


    private ApiResponse<AppConfig> getUserConfigByAppAndUserWithHttpInfo(String appId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getUserConfigByAppAndUserValidateBeforeCall(appId, userId, null);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserConfigByAppAndUserAsync(String appId, String userId, final ApiCallback<AppConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserConfigByAppAndUserValidateBeforeCall(appId, userId, _callback);
        Type localVarReturnType = new TypeToken<AppConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserConfigByAppAndUserRequestBuilder {
        private final String appId;
        private final String userId;

        private GetUserConfigByAppAndUserRequestBuilder(String appId, String userId) {
            this.appId = appId;
            this.userId = userId;
        }

        /**
         * Build call for getUserConfigByAppAndUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserConfigByAppAndUserCall(appId, userId, _callback);
        }


        /**
         * Execute getUserConfigByAppAndUser request
         * @return AppConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AppConfig execute() throws ApiException {
            ApiResponse<AppConfig> localVarResp = getUserConfigByAppAndUserWithHttpInfo(appId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserConfigByAppAndUser request with HTTP info returned
         * @return ApiResponse&lt;AppConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppConfig> executeWithHttpInfo() throws ApiException {
            return getUserConfigByAppAndUserWithHttpInfo(appId, userId);
        }

        /**
         * Execute getUserConfigByAppAndUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppConfig> _callback) throws ApiException {
            return getUserConfigByAppAndUserAsync(appId, userId, _callback);
        }
    }

    /**
     * Return user app configuration by app and user
     * 
     * @param appId App id (required)
     * @param userId User id (required)
     * @return GetUserConfigByAppAndUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetUserConfigByAppAndUserRequestBuilder getUserConfigByAppAndUser(String appId, String userId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserConfigByAppAndUserRequestBuilder(appId, userId);
    }
    private okhttp3.Call updateByIdCall(String appId, String userId, UpdateAppConfig updateAppConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppConfig;

        // create path and map variables
        String localVarPath = "/v1/app-config/{appId}/{userId}"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String appId, String userId, UpdateAppConfig updateAppConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateById(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateById(Async)");
        }

        return updateByIdCall(appId, userId, updateAppConfig, _callback);

    }


    private ApiResponse<Void> updateByIdWithHttpInfo(String appId, String userId, UpdateAppConfig updateAppConfig) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(appId, userId, updateAppConfig, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateByIdAsync(String appId, String userId, UpdateAppConfig updateAppConfig, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(appId, userId, updateAppConfig, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String appId;
        private final String userId;
        private List<FieldMapper> fieldMappers;
        private List<FieldMapper> customFieldMappers;
        private List<OutboundFieldMapper> customOutboundFieldMappers;
        private Set<String> disabledFieldMappers;
        private Set<String> enabledOutboundFieldMappers;
        private List<Map<String, String>> templateMatchers;
        private Object options;

        private UpdateByIdRequestBuilder(String appId, String userId) {
            this.appId = appId;
            this.userId = userId;
        }

        /**
         * Set fieldMappers
         * @param fieldMappers list of default field mappers (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder fieldMappers(List<FieldMapper> fieldMappers) {
            this.fieldMappers = fieldMappers;
            return this;
        }
        
        /**
         * Set customFieldMappers
         * @param customFieldMappers list of custom field mappers by a user (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder customFieldMappers(List<FieldMapper> customFieldMappers) {
            this.customFieldMappers = customFieldMappers;
            return this;
        }
        
        /**
         * Set customOutboundFieldMappers
         * @param customOutboundFieldMappers list of custom outbound field mappers (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder customOutboundFieldMappers(List<OutboundFieldMapper> customOutboundFieldMappers) {
            this.customOutboundFieldMappers = customOutboundFieldMappers;
            return this;
        }
        
        /**
         * Set disabledFieldMappers
         * @param disabledFieldMappers list of disabled inbound field mappers by id (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder disabledFieldMappers(Set<String> disabledFieldMappers) {
            this.disabledFieldMappers = disabledFieldMappers;
            return this;
        }
        
        /**
         * Set enabledOutboundFieldMappers
         * @param enabledOutboundFieldMappers list of enabled outbound field mappers by id (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder enabledOutboundFieldMappers(Set<String> enabledOutboundFieldMappers) {
            this.enabledOutboundFieldMappers = enabledOutboundFieldMappers;
            return this;
        }
        
        /**
         * Set templateMatchers
         * @param templateMatchers template field matchers defined by a user (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder templateMatchers(List<Map<String, String>> templateMatchers) {
            this.templateMatchers = templateMatchers;
            return this;
        }
        
        /**
         * Set options
         * @param options app specific options (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateAppConfig updateAppConfig = buildBodyParams();
            return updateByIdCall(appId, userId, updateAppConfig, _callback);
        }

        private UpdateAppConfig buildBodyParams() {
            UpdateAppConfig updateAppConfig = new UpdateAppConfig();
            updateAppConfig.fieldMappers(this.fieldMappers);
            updateAppConfig.customFieldMappers(this.customFieldMappers);
            updateAppConfig.customOutboundFieldMappers(this.customOutboundFieldMappers);
            updateAppConfig.disabledFieldMappers(this.disabledFieldMappers);
            updateAppConfig.enabledOutboundFieldMappers(this.enabledOutboundFieldMappers);
            updateAppConfig.templateMatchers(this.templateMatchers);
            updateAppConfig.options(this.options);
            return updateAppConfig;
        }

        /**
         * Execute updateById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateAppConfig updateAppConfig = buildBodyParams();
            updateByIdWithHttpInfo(appId, userId, updateAppConfig);
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateAppConfig updateAppConfig = buildBodyParams();
            return updateByIdWithHttpInfo(appId, userId, updateAppConfig);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateAppConfig updateAppConfig = buildBodyParams();
            return updateByIdAsync(appId, userId, updateAppConfig, _callback);
        }
    }

    /**
     * Update an existing app
     * 
     * @param appId App id (required)
     * @param userId User id (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String appId, String userId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new UpdateByIdRequestBuilder(appId, userId);
    }
}
