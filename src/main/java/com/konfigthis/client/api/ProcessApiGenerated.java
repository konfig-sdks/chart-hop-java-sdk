/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppProcessStatus;
import com.konfigthis.client.model.CreateProcess;
import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import com.konfigthis.client.model.LogData;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ProcessCreatePendingProcessRequest;
import com.konfigthis.client.model.ProcessEventResponse;
import com.konfigthis.client.model.ResultsProcess;
import com.konfigthis.client.model.UpdateProcess;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProcessApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProcessApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkProcessStatusCall(String orgId, String processId, Boolean showState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showState", showState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkProcessStatusValidateBeforeCall(String orgId, String processId, Boolean showState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling checkProcessStatus(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling checkProcessStatus(Async)");
        }

        return checkProcessStatusCall(orgId, processId, showState, _callback);

    }


    private ApiResponse<Process> checkProcessStatusWithHttpInfo(String orgId, String processId, Boolean showState) throws ApiException {
        okhttp3.Call localVarCall = checkProcessStatusValidateBeforeCall(orgId, processId, showState, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkProcessStatusAsync(String orgId, String processId, Boolean showState, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkProcessStatusValidateBeforeCall(orgId, processId, showState, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckProcessStatusRequestBuilder {
        private final String orgId;
        private final String processId;
        private Boolean showState;

        private CheckProcessStatusRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Set showState
         * @param showState showState (optional)
         * @return CheckProcessStatusRequestBuilder
         */
        public CheckProcessStatusRequestBuilder showState(Boolean showState) {
            this.showState = showState;
            return this;
        }
        
        /**
         * Build call for checkProcessStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkProcessStatusCall(orgId, processId, showState, _callback);
        }


        /**
         * Execute checkProcessStatus request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            ApiResponse<Process> localVarResp = checkProcessStatusWithHttpInfo(orgId, processId, showState);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkProcessStatus request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            return checkProcessStatusWithHttpInfo(orgId, processId, showState);
        }

        /**
         * Execute checkProcessStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            return checkProcessStatusAsync(orgId, processId, showState, _callback);
        }
    }

    /**
     * Check the status of a particular process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return CheckProcessStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CheckProcessStatusRequestBuilder checkProcessStatus(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new CheckProcessStatusRequestBuilder(orgId, processId);
    }
    private okhttp3.Call createNewPendingProcessCall(String orgId, CreateProcess createProcess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProcess;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPendingProcessValidateBeforeCall(String orgId, CreateProcess createProcess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewPendingProcess(Async)");
        }

        return createNewPendingProcessCall(orgId, createProcess, _callback);

    }


    private ApiResponse<Process> createNewPendingProcessWithHttpInfo(String orgId, CreateProcess createProcess) throws ApiException {
        okhttp3.Call localVarCall = createNewPendingProcessValidateBeforeCall(orgId, createProcess, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewPendingProcessAsync(String orgId, CreateProcess createProcess, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPendingProcessValidateBeforeCall(orgId, createProcess, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewPendingProcessRequestBuilder {
        private final String orgId;
        private final String label;
        private final String type;
        private final String status;
        private final String runUserId;
        private final Object options;
        private final String orgId;
        private String filePath;
        private String parentProcessId;
        private String message;
        private Double progress;
        private String internalError;
        private Map<String, Object> results;
        private List<LogData> logDataList;
        private Object state;
        private String appId;
        private String uuid;

        private CreateNewPendingProcessRequestBuilder(String orgId, String label, String type, String status, String runUserId, Object options, String orgId) {
            this.orgId = orgId;
            this.label = label;
            this.type = type;
            this.status = status;
            this.runUserId = runUserId;
            this.options = options;
            this.orgId = orgId;
        }

        /**
         * Set filePath
         * @param filePath data file path (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder filePath(String filePath) {
            this.filePath = filePath;
            return this;
        }
        
        /**
         * Set parentProcessId
         * @param parentProcessId process id of parent process (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder parentProcessId(String parentProcessId) {
            this.parentProcessId = parentProcessId;
            return this;
        }
        
        /**
         * Set message
         * @param message status or error message (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set progress
         * @param progress percent progress so far (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder progress(Double progress) {
            this.progress = progress;
            return this;
        }
        
        /**
         * Set internalError
         * @param internalError internal-only error message (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder internalError(String internalError) {
            this.internalError = internalError;
            return this;
        }
        
        /**
         * Set results
         * @param results results summary for the process (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder results(Map<String, Object> results) {
            this.results = results;
            return this;
        }
        
        /**
         * Set logDataList
         * @param logDataList list of log data that occurred during running of this process (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder logDataList(List<LogData> logDataList) {
            this.logDataList = logDataList;
            return this;
        }
        
        /**
         * Set state
         * @param state process-specific state data (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder state(Object state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set appId
         * @param appId app id of the process (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set uuid
         * @param uuid unique ID of the process at queue time (optional)
         * @return CreateNewPendingProcessRequestBuilder
         */
        public CreateNewPendingProcessRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Build call for createNewPendingProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createNewPendingProcessCall(orgId, createProcess, _callback);
        }

        private CreateProcess buildBodyParams() {
            CreateProcess createProcess = new CreateProcess();
            createProcess.orgId(this.orgId);
            createProcess.label(this.label);
            createProcess.type(this.type);
            if (this.status != null)
            createProcess.status(CreateProcess.StatusEnum.fromValue(this.status));
            createProcess.filePath(this.filePath);
            createProcess.runUserId(this.runUserId);
            createProcess.parentProcessId(this.parentProcessId);
            createProcess.message(this.message);
            createProcess.progress(this.progress);
            createProcess.internalError(this.internalError);
            createProcess.options(this.options);
            createProcess.results(this.results);
            createProcess.logDataList(this.logDataList);
            createProcess.state(this.state);
            createProcess.appId(this.appId);
            createProcess.uuid(this.uuid);
            return createProcess;
        }

        /**
         * Execute createNewPendingProcess request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            ApiResponse<Process> localVarResp = createNewPendingProcessWithHttpInfo(orgId, createProcess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewPendingProcess request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createNewPendingProcessWithHttpInfo(orgId, createProcess);
        }

        /**
         * Execute createNewPendingProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createNewPendingProcessAsync(orgId, createProcess, _callback);
        }
    }

    /**
     * Creates a new process in the pending state
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewPendingProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPendingProcessRequestBuilder createNewPendingProcess(String orgId, String label, String type, String status, String runUserId, Object options, String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (runUserId == null) throw new IllegalArgumentException("\"runUserId\" is required but got null");
            

        if (options == null) throw new IllegalArgumentException("\"options\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewPendingProcessRequestBuilder(orgId, label, type, status, runUserId, options, orgId);
    }
    private okhttp3.Call createPendingProcessCall(String orgId, String type, Integer maxRows, Integer minColumns, Boolean isSync, File _file, Object state, ProcessCreatePendingProcessRequest processCreatePendingProcessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processCreatePendingProcessRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/self-serve"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (state != null) {
            localVarFormParams.put("state", state);
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maxRows != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxRows", maxRows));
        }

        if (minColumns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minColumns", minColumns));
        }

        if (isSync != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSync", isSync));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPendingProcessValidateBeforeCall(String orgId, String type, Integer maxRows, Integer minColumns, Boolean isSync, File _file, Object state, ProcessCreatePendingProcessRequest processCreatePendingProcessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createPendingProcess(Async)");
        }

        return createPendingProcessCall(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest, _callback);

    }


    private ApiResponse<Void> createPendingProcessWithHttpInfo(String orgId, String type, Integer maxRows, Integer minColumns, Boolean isSync, File _file, Object state, ProcessCreatePendingProcessRequest processCreatePendingProcessRequest) throws ApiException {
        okhttp3.Call localVarCall = createPendingProcessValidateBeforeCall(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createPendingProcessAsync(String orgId, String type, Integer maxRows, Integer minColumns, Boolean isSync, File _file, Object state, ProcessCreatePendingProcessRequest processCreatePendingProcessRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPendingProcessValidateBeforeCall(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreatePendingProcessRequestBuilder {
        private final String orgId;
        private String type;
        private Integer maxRows;
        private Integer minColumns;
        private Boolean isSync;
        private File _file;
        private Object state;

        private CreatePendingProcessRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type Process type (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set maxRows
         * @param maxRows Max rows allowed in an imported spreadsheet file (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder maxRows(Integer maxRows) {
            this.maxRows = maxRows;
            return this;
        }
        
        /**
         * Set minColumns
         * @param minColumns Min columns required in an imported spreadsheet file (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder minColumns(Integer minColumns) {
            this.minColumns = minColumns;
            return this;
        }
        
        /**
         * Set isSync
         * @param isSync Whether the created process is sync flow or manual flow (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder isSync(Boolean isSync) {
            this.isSync = isSync;
            return this;
        }
        
        /**
         * Set _file
         * @param _file  (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set state
         * @param state  (optional)
         * @return CreatePendingProcessRequestBuilder
         */
        public CreatePendingProcessRequestBuilder state(Object state) {
            this.state = state;
            return this;
        }
        
        /**
         * Build call for createPendingProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProcessCreatePendingProcessRequest processCreatePendingProcessRequest = buildBodyParams();
            return createPendingProcessCall(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest, _callback);
        }

        private ProcessCreatePendingProcessRequest buildBodyParams() {
            ProcessCreatePendingProcessRequest processCreatePendingProcessRequest = new ProcessCreatePendingProcessRequest();
            processCreatePendingProcessRequest._file(this._file);
            processCreatePendingProcessRequest.state(this.state);
            return processCreatePendingProcessRequest;
        }

        /**
         * Execute createPendingProcess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ProcessCreatePendingProcessRequest processCreatePendingProcessRequest = buildBodyParams();
            createPendingProcessWithHttpInfo(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest);
        }

        /**
         * Execute createPendingProcess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ProcessCreatePendingProcessRequest processCreatePendingProcessRequest = buildBodyParams();
            return createPendingProcessWithHttpInfo(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest);
        }

        /**
         * Execute createPendingProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ProcessCreatePendingProcessRequest processCreatePendingProcessRequest = buildBodyParams();
            return createPendingProcessAsync(orgId, type, maxRows, minColumns, isSync, _file, state, processCreatePendingProcessRequest, _callback);
        }
    }

    /**
     * Creates a new process in the pending state
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreatePendingProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreatePendingProcessRequestBuilder createPendingProcess(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreatePendingProcessRequestBuilder(orgId);
    }
    private okhttp3.Call createPendingProcessWithUserIdCall(String orgId, String createIdOverride, CreateProcess createProcess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProcess;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{createIdOverride}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "createIdOverride" + "}", localVarApiClient.escapeString(createIdOverride.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPendingProcessWithUserIdValidateBeforeCall(String orgId, String createIdOverride, CreateProcess createProcess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createPendingProcessWithUserId(Async)");
        }

        // verify the required parameter 'createIdOverride' is set
        if (createIdOverride == null) {
            throw new ApiException("Missing the required parameter 'createIdOverride' when calling createPendingProcessWithUserId(Async)");
        }

        return createPendingProcessWithUserIdCall(orgId, createIdOverride, createProcess, _callback);

    }


    private ApiResponse<Process> createPendingProcessWithUserIdWithHttpInfo(String orgId, String createIdOverride, CreateProcess createProcess) throws ApiException {
        okhttp3.Call localVarCall = createPendingProcessWithUserIdValidateBeforeCall(orgId, createIdOverride, createProcess, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPendingProcessWithUserIdAsync(String orgId, String createIdOverride, CreateProcess createProcess, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPendingProcessWithUserIdValidateBeforeCall(orgId, createIdOverride, createProcess, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreatePendingProcessWithUserIdRequestBuilder {
        private final String orgId;
        private final String label;
        private final String type;
        private final String status;
        private final String runUserId;
        private final Object options;
        private final String orgId;
        private final String createIdOverride;
        private String filePath;
        private String parentProcessId;
        private String message;
        private Double progress;
        private String internalError;
        private Map<String, Object> results;
        private List<LogData> logDataList;
        private Object state;
        private String appId;
        private String uuid;

        private CreatePendingProcessWithUserIdRequestBuilder(String orgId, String label, String type, String status, String runUserId, Object options, String orgId, String createIdOverride) {
            this.orgId = orgId;
            this.label = label;
            this.type = type;
            this.status = status;
            this.runUserId = runUserId;
            this.options = options;
            this.orgId = orgId;
            this.createIdOverride = createIdOverride;
        }

        /**
         * Set filePath
         * @param filePath data file path (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder filePath(String filePath) {
            this.filePath = filePath;
            return this;
        }
        
        /**
         * Set parentProcessId
         * @param parentProcessId process id of parent process (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder parentProcessId(String parentProcessId) {
            this.parentProcessId = parentProcessId;
            return this;
        }
        
        /**
         * Set message
         * @param message status or error message (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set progress
         * @param progress percent progress so far (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder progress(Double progress) {
            this.progress = progress;
            return this;
        }
        
        /**
         * Set internalError
         * @param internalError internal-only error message (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder internalError(String internalError) {
            this.internalError = internalError;
            return this;
        }
        
        /**
         * Set results
         * @param results results summary for the process (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder results(Map<String, Object> results) {
            this.results = results;
            return this;
        }
        
        /**
         * Set logDataList
         * @param logDataList list of log data that occurred during running of this process (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder logDataList(List<LogData> logDataList) {
            this.logDataList = logDataList;
            return this;
        }
        
        /**
         * Set state
         * @param state process-specific state data (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder state(Object state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set appId
         * @param appId app id of the process (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set uuid
         * @param uuid unique ID of the process at queue time (optional)
         * @return CreatePendingProcessWithUserIdRequestBuilder
         */
        public CreatePendingProcessWithUserIdRequestBuilder uuid(String uuid) {
            this.uuid = uuid;
            return this;
        }
        
        /**
         * Build call for createPendingProcessWithUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createPendingProcessWithUserIdCall(orgId, createIdOverride, createProcess, _callback);
        }

        private CreateProcess buildBodyParams() {
            CreateProcess createProcess = new CreateProcess();
            createProcess.orgId(this.orgId);
            createProcess.label(this.label);
            createProcess.type(this.type);
            if (this.status != null)
            createProcess.status(CreateProcess.StatusEnum.fromValue(this.status));
            createProcess.filePath(this.filePath);
            createProcess.runUserId(this.runUserId);
            createProcess.parentProcessId(this.parentProcessId);
            createProcess.message(this.message);
            createProcess.progress(this.progress);
            createProcess.internalError(this.internalError);
            createProcess.options(this.options);
            createProcess.results(this.results);
            createProcess.logDataList(this.logDataList);
            createProcess.state(this.state);
            createProcess.appId(this.appId);
            createProcess.uuid(this.uuid);
            return createProcess;
        }

        /**
         * Execute createPendingProcessWithUserId request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            ApiResponse<Process> localVarResp = createPendingProcessWithUserIdWithHttpInfo(orgId, createIdOverride, createProcess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createPendingProcessWithUserId request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createPendingProcessWithUserIdWithHttpInfo(orgId, createIdOverride, createProcess);
        }

        /**
         * Execute createPendingProcessWithUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            CreateProcess createProcess = buildBodyParams();
            return createPendingProcessWithUserIdAsync(orgId, createIdOverride, createProcess, _callback);
        }
    }

    /**
     * Creates a new process with a specified createId in the pending state
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param createIdOverride created user id override (required)
     * @return CreatePendingProcessWithUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreatePendingProcessWithUserIdRequestBuilder createPendingProcessWithUserId(String orgId, String label, String type, String status, String runUserId, Object options, String orgId, String createIdOverride) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (runUserId == null) throw new IllegalArgumentException("\"runUserId\" is required but got null");
            

        if (options == null) throw new IllegalArgumentException("\"options\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (createIdOverride == null) throw new IllegalArgumentException("\"createIdOverride\" is required but got null");
            

        return new CreatePendingProcessWithUserIdRequestBuilder(orgId, label, type, status, runUserId, options, orgId, createIdOverride);
    }
    private okhttp3.Call decrementStepCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/decrement"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decrementStepValidateBeforeCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling decrementStep(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling decrementStep(Async)");
        }

        return decrementStepCall(orgId, processId, _callback);

    }


    private ApiResponse<Void> decrementStepWithHttpInfo(String orgId, String processId) throws ApiException {
        okhttp3.Call localVarCall = decrementStepValidateBeforeCall(orgId, processId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call decrementStepAsync(String orgId, String processId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = decrementStepValidateBeforeCall(orgId, processId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DecrementStepRequestBuilder {
        private final String orgId;
        private final String processId;

        private DecrementStepRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for decrementStep
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return decrementStepCall(orgId, processId, _callback);
        }


        /**
         * Execute decrementStep request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            decrementStepWithHttpInfo(orgId, processId);
        }

        /**
         * Execute decrementStep request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return decrementStepWithHttpInfo(orgId, processId);
        }

        /**
         * Execute decrementStep request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return decrementStepAsync(orgId, processId, _callback);
        }
    }

    /**
     * Decrement the step of an asynchronous process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return DecrementStepRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public DecrementStepRequestBuilder decrementStep(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new DecrementStepRequestBuilder(orgId, processId);
    }
    private okhttp3.Call downloadFileByIdCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/file"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadFileByIdValidateBeforeCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling downloadFileById(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling downloadFileById(Async)");
        }

        return downloadFileByIdCall(orgId, processId, _callback);

    }


    private ApiResponse<Void> downloadFileByIdWithHttpInfo(String orgId, String processId) throws ApiException {
        okhttp3.Call localVarCall = downloadFileByIdValidateBeforeCall(orgId, processId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call downloadFileByIdAsync(String orgId, String processId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadFileByIdValidateBeforeCall(orgId, processId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DownloadFileByIdRequestBuilder {
        private final String orgId;
        private final String processId;

        private DownloadFileByIdRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for downloadFileById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadFileByIdCall(orgId, processId, _callback);
        }


        /**
         * Execute downloadFileById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            downloadFileByIdWithHttpInfo(orgId, processId);
        }

        /**
         * Execute downloadFileById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return downloadFileByIdWithHttpInfo(orgId, processId);
        }

        /**
         * Execute downloadFileById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return downloadFileByIdAsync(orgId, processId, _callback);
        }
    }

    /**
     * Download the file associated with a particular process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return DownloadFileByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public DownloadFileByIdRequestBuilder downloadFileById(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new DownloadFileByIdRequestBuilder(orgId, processId);
    }
    private okhttp3.Call downloadLogCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/log"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLogValidateBeforeCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling downloadLog(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling downloadLog(Async)");
        }

        return downloadLogCall(orgId, processId, _callback);

    }


    private ApiResponse<Void> downloadLogWithHttpInfo(String orgId, String processId) throws ApiException {
        okhttp3.Call localVarCall = downloadLogValidateBeforeCall(orgId, processId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call downloadLogAsync(String orgId, String processId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLogValidateBeforeCall(orgId, processId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DownloadLogRequestBuilder {
        private final String orgId;
        private final String processId;

        private DownloadLogRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for downloadLog
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadLogCall(orgId, processId, _callback);
        }


        /**
         * Execute downloadLog request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            downloadLogWithHttpInfo(orgId, processId);
        }

        /**
         * Execute downloadLog request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return downloadLogWithHttpInfo(orgId, processId);
        }

        /**
         * Execute downloadLog request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return downloadLogAsync(orgId, processId, _callback);
        }
    }

    /**
     * Download the newline-delimited JSON log associated with a particular process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return DownloadLogRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public DownloadLogRequestBuilder downloadLog(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new DownloadLogRequestBuilder(orgId, processId);
    }
    private okhttp3.Call getEventsByProcessIdCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/events"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsByProcessIdValidateBeforeCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getEventsByProcessId(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling getEventsByProcessId(Async)");
        }

        return getEventsByProcessIdCall(orgId, processId, _callback);

    }


    private ApiResponse<ProcessEventResponse> getEventsByProcessIdWithHttpInfo(String orgId, String processId) throws ApiException {
        okhttp3.Call localVarCall = getEventsByProcessIdValidateBeforeCall(orgId, processId, null);
        Type localVarReturnType = new TypeToken<ProcessEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventsByProcessIdAsync(String orgId, String processId, final ApiCallback<ProcessEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsByProcessIdValidateBeforeCall(orgId, processId, _callback);
        Type localVarReturnType = new TypeToken<ProcessEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventsByProcessIdRequestBuilder {
        private final String orgId;
        private final String processId;

        private GetEventsByProcessIdRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for getEventsByProcessId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventsByProcessIdCall(orgId, processId, _callback);
        }


        /**
         * Execute getEventsByProcessId request
         * @return ProcessEventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ProcessEventResponse execute() throws ApiException {
            ApiResponse<ProcessEventResponse> localVarResp = getEventsByProcessIdWithHttpInfo(orgId, processId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventsByProcessId request with HTTP info returned
         * @return ApiResponse&lt;ProcessEventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProcessEventResponse> executeWithHttpInfo() throws ApiException {
            return getEventsByProcessIdWithHttpInfo(orgId, processId);
        }

        /**
         * Execute getEventsByProcessId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProcessEventResponse> _callback) throws ApiException {
            return getEventsByProcessIdAsync(orgId, processId, _callback);
        }
    }

    /**
     * Get events associated to a particular process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return GetEventsByProcessIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public GetEventsByProcessIdRequestBuilder getEventsByProcessId(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new GetEventsByProcessIdRequestBuilder(orgId, processId);
    }
    private okhttp3.Call getLastSyncForAppUserCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/last-sync/{appUserId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appUserId" + "}", localVarApiClient.escapeString(appUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastSyncForAppUserValidateBeforeCall(String orgId, String appUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getLastSyncForAppUser(Async)");
        }

        // verify the required parameter 'appUserId' is set
        if (appUserId == null) {
            throw new ApiException("Missing the required parameter 'appUserId' when calling getLastSyncForAppUser(Async)");
        }

        return getLastSyncForAppUserCall(orgId, appUserId, _callback);

    }


    private ApiResponse<AppProcessStatus> getLastSyncForAppUserWithHttpInfo(String orgId, String appUserId) throws ApiException {
        okhttp3.Call localVarCall = getLastSyncForAppUserValidateBeforeCall(orgId, appUserId, null);
        Type localVarReturnType = new TypeToken<AppProcessStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLastSyncForAppUserAsync(String orgId, String appUserId, final ApiCallback<AppProcessStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastSyncForAppUserValidateBeforeCall(orgId, appUserId, _callback);
        Type localVarReturnType = new TypeToken<AppProcessStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLastSyncForAppUserRequestBuilder {
        private final String orgId;
        private final String appUserId;

        private GetLastSyncForAppUserRequestBuilder(String orgId, String appUserId) {
            this.orgId = orgId;
            this.appUserId = appUserId;
        }

        /**
         * Build call for getLastSyncForAppUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLastSyncForAppUserCall(orgId, appUserId, _callback);
        }


        /**
         * Execute getLastSyncForAppUser request
         * @return AppProcessStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public AppProcessStatus execute() throws ApiException {
            ApiResponse<AppProcessStatus> localVarResp = getLastSyncForAppUserWithHttpInfo(orgId, appUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLastSyncForAppUser request with HTTP info returned
         * @return ApiResponse&lt;AppProcessStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppProcessStatus> executeWithHttpInfo() throws ApiException {
            return getLastSyncForAppUserWithHttpInfo(orgId, appUserId);
        }

        /**
         * Execute getLastSyncForAppUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppProcessStatus> _callback) throws ApiException {
            return getLastSyncForAppUserAsync(orgId, appUserId, _callback);
        }
    }

    /**
     * Get last success sync and last sync for given appUserId
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appUserId app user id (required)
     * @return GetLastSyncForAppUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public GetLastSyncForAppUserRequestBuilder getLastSyncForAppUser(String orgId, String appUserId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appUserId == null) throw new IllegalArgumentException("\"appUserId\" is required but got null");
            

        return new GetLastSyncForAppUserRequestBuilder(orgId, appUserId);
    }
    private okhttp3.Call getPreviouslyRunProcessesCall(String orgId, Boolean isAppProcess, String appId, String parentProcessId, String type, Long completedAtStart, Long completedAtEnd, String statuses, Boolean isParentProcess, String processTypes, String searchValue, String from, Integer limit, String syncDirections, String syncCauses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isAppProcess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAppProcess", isAppProcess));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appId", appId));
        }

        if (parentProcessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentProcessId", parentProcessId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (completedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completedAtStart", completedAtStart));
        }

        if (completedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("completedAtEnd", completedAtEnd));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (isParentProcess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isParentProcess", isParentProcess));
        }

        if (processTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processTypes", processTypes));
        }

        if (searchValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchValue", searchValue));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (syncDirections != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncDirections", syncDirections));
        }

        if (syncCauses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncCauses", syncCauses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPreviouslyRunProcessesValidateBeforeCall(String orgId, Boolean isAppProcess, String appId, String parentProcessId, String type, Long completedAtStart, Long completedAtEnd, String statuses, Boolean isParentProcess, String processTypes, String searchValue, String from, Integer limit, String syncDirections, String syncCauses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getPreviouslyRunProcesses(Async)");
        }

        return getPreviouslyRunProcessesCall(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses, _callback);

    }


    private ApiResponse<ResultsProcess> getPreviouslyRunProcessesWithHttpInfo(String orgId, Boolean isAppProcess, String appId, String parentProcessId, String type, Long completedAtStart, Long completedAtEnd, String statuses, Boolean isParentProcess, String processTypes, String searchValue, String from, Integer limit, String syncDirections, String syncCauses) throws ApiException {
        okhttp3.Call localVarCall = getPreviouslyRunProcessesValidateBeforeCall(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses, null);
        Type localVarReturnType = new TypeToken<ResultsProcess>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPreviouslyRunProcessesAsync(String orgId, Boolean isAppProcess, String appId, String parentProcessId, String type, Long completedAtStart, Long completedAtEnd, String statuses, Boolean isParentProcess, String processTypes, String searchValue, String from, Integer limit, String syncDirections, String syncCauses, final ApiCallback<ResultsProcess> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPreviouslyRunProcessesValidateBeforeCall(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses, _callback);
        Type localVarReturnType = new TypeToken<ResultsProcess>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPreviouslyRunProcessesRequestBuilder {
        private final String orgId;
        private Boolean isAppProcess;
        private String appId;
        private String parentProcessId;
        private String type;
        private Long completedAtStart;
        private Long completedAtEnd;
        private String statuses;
        private Boolean isParentProcess;
        private String processTypes;
        private String searchValue;
        private String from;
        private Integer limit;
        private String syncDirections;
        private String syncCauses;

        private GetPreviouslyRunProcessesRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set isAppProcess
         * @param isAppProcess Boolean if an app process (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder isAppProcess(Boolean isAppProcess) {
            this.isAppProcess = isAppProcess;
            return this;
        }
        
        /**
         * Set appId
         * @param appId App ID to filter by (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set parentProcessId
         * @param parentProcessId Parent process ID to search for children (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder parentProcessId(String parentProcessId) {
            this.parentProcessId = parentProcessId;
            return this;
        }
        
        /**
         * Set type
         * @param type Type to filter by. Accepted values: [&#39;auto&#39;, &#39;manual&#39;] (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set completedAtStart
         * @param completedAtStart completed at start (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder completedAtStart(Long completedAtStart) {
            this.completedAtStart = completedAtStart;
            return this;
        }
        
        /**
         * Set completedAtEnd
         * @param completedAtEnd completed at end (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder completedAtEnd(Long completedAtEnd) {
            this.completedAtEnd = completedAtEnd;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses Statuses to filter by, comma-separated. Accepted values: [&#39;DONE&#39;, &#39;ERROR&#39;, &#39;PENDING&#39;, &#39;RUNNING&#39;, &#39;DONE_WITH_ERRORS&#39;] (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder statuses(String statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Set isParentProcess
         * @param isParentProcess Boolean if a parent process (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder isParentProcess(Boolean isParentProcess) {
            this.isParentProcess = isParentProcess;
            return this;
        }
        
        /**
         * Set processTypes
         * @param processTypes Process types to filter by, comma-separated. (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder processTypes(String processTypes) {
            this.processTypes = processTypes;
            return this;
        }
        
        /**
         * Set searchValue
         * @param searchValue Search term for general filtering (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder searchValue(String searchValue) {
            this.searchValue = searchValue;
            return this;
        }
        
        /**
         * Set from
         * @param from from id (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit limit (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set syncDirections
         * @param syncDirections direction (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder syncDirections(String syncDirections) {
            this.syncDirections = syncDirections;
            return this;
        }
        
        /**
         * Set syncCauses
         * @param syncCauses V2 Causes to filter by, comma-separated. Accepted values: [&#39;MANUAL&#39;, &#39;AUTO&#39;, &#39;EVENT_BASED] (optional)
         * @return GetPreviouslyRunProcessesRequestBuilder
         */
        public GetPreviouslyRunProcessesRequestBuilder syncCauses(String syncCauses) {
            this.syncCauses = syncCauses;
            return this;
        }
        
        /**
         * Build call for getPreviouslyRunProcesses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPreviouslyRunProcessesCall(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses, _callback);
        }


        /**
         * Execute getPreviouslyRunProcesses request
         * @return ResultsProcess
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ResultsProcess execute() throws ApiException {
            ApiResponse<ResultsProcess> localVarResp = getPreviouslyRunProcessesWithHttpInfo(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPreviouslyRunProcesses request with HTTP info returned
         * @return ApiResponse&lt;ResultsProcess&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsProcess> executeWithHttpInfo() throws ApiException {
            return getPreviouslyRunProcessesWithHttpInfo(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses);
        }

        /**
         * Execute getPreviouslyRunProcesses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsProcess> _callback) throws ApiException {
            return getPreviouslyRunProcessesAsync(orgId, isAppProcess, appId, parentProcessId, type, completedAtStart, completedAtEnd, statuses, isParentProcess, processTypes, searchValue, from, limit, syncDirections, syncCauses, _callback);
        }
    }

    /**
     * Retrieve a number of previously run processes
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetPreviouslyRunProcessesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public GetPreviouslyRunProcessesRequestBuilder getPreviouslyRunProcesses(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetPreviouslyRunProcessesRequestBuilder(orgId);
    }
    private okhttp3.Call incrementProcessStepCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/increment"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call incrementProcessStepValidateBeforeCall(String orgId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling incrementProcessStep(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling incrementProcessStep(Async)");
        }

        return incrementProcessStepCall(orgId, processId, _callback);

    }


    private ApiResponse<Void> incrementProcessStepWithHttpInfo(String orgId, String processId) throws ApiException {
        okhttp3.Call localVarCall = incrementProcessStepValidateBeforeCall(orgId, processId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call incrementProcessStepAsync(String orgId, String processId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = incrementProcessStepValidateBeforeCall(orgId, processId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class IncrementProcessStepRequestBuilder {
        private final String orgId;
        private final String processId;

        private IncrementProcessStepRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for incrementProcessStep
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return incrementProcessStepCall(orgId, processId, _callback);
        }


        /**
         * Execute incrementProcessStep request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            incrementProcessStepWithHttpInfo(orgId, processId);
        }

        /**
         * Execute incrementProcessStep request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return incrementProcessStepWithHttpInfo(orgId, processId);
        }

        /**
         * Execute incrementProcessStep request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return incrementProcessStepAsync(orgId, processId, _callback);
        }
    }

    /**
     * Increment the step of an asynchronous process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return IncrementProcessStepRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public IncrementProcessStepRequestBuilder incrementProcessStep(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new IncrementProcessStepRequestBuilder(orgId, processId);
    }
    private okhttp3.Call resumeProcessWithUserIdCall(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/resume"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeProcessWithUserIdValidateBeforeCall(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling resumeProcessWithUserId(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling resumeProcessWithUserId(Async)");
        }

        return resumeProcessWithUserIdCall(orgId, processId, requestBody, _callback);

    }


    private ApiResponse<Void> resumeProcessWithUserIdWithHttpInfo(String orgId, String processId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = resumeProcessWithUserIdValidateBeforeCall(orgId, processId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resumeProcessWithUserIdAsync(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeProcessWithUserIdValidateBeforeCall(orgId, processId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResumeProcessWithUserIdRequestBuilder {
        private final String orgId;
        private final String processId;

        private ResumeProcessWithUserIdRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for resumeProcessWithUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return resumeProcessWithUserIdCall(orgId, processId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute resumeProcessWithUserId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            resumeProcessWithUserIdWithHttpInfo(orgId, processId, requestBody);
        }

        /**
         * Execute resumeProcessWithUserId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return resumeProcessWithUserIdWithHttpInfo(orgId, processId, requestBody);
        }

        /**
         * Execute resumeProcessWithUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return resumeProcessWithUserIdAsync(orgId, processId, requestBody, _callback);
        }
    }

    /**
     * Resume an asynchronous process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return ResumeProcessWithUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ResumeProcessWithUserIdRequestBuilder resumeProcessWithUserId(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new ResumeProcessWithUserIdRequestBuilder(orgId, processId);
    }
    private okhttp3.Call resumeWithFileCall(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/resumeWithFile"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeWithFileValidateBeforeCall(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling resumeWithFile(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling resumeWithFile(Async)");
        }

        return resumeWithFileCall(orgId, processId, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Void> resumeWithFileWithHttpInfo(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = resumeWithFileValidateBeforeCall(orgId, processId, fileUploadNewFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resumeWithFileAsync(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeWithFileValidateBeforeCall(orgId, processId, fileUploadNewFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResumeWithFileRequestBuilder {
        private final String orgId;
        private final String processId;
        private File _file;

        private ResumeWithFileRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return ResumeWithFileRequestBuilder
         */
        public ResumeWithFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for resumeWithFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return resumeWithFileCall(orgId, processId, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute resumeWithFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            resumeWithFileWithHttpInfo(orgId, processId, fileUploadNewFileRequest);
        }

        /**
         * Execute resumeWithFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return resumeWithFileWithHttpInfo(orgId, processId, fileUploadNewFileRequest);
        }

        /**
         * Execute resumeWithFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return resumeWithFileAsync(orgId, processId, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Resume an asynchronous process
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return ResumeWithFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ResumeWithFileRequestBuilder resumeWithFile(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new ResumeWithFileRequestBuilder(orgId, processId);
    }
    private okhttp3.Call updateProcessStateCall(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/state"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProcessStateValidateBeforeCall(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateProcessState(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateProcessState(Async)");
        }

        return updateProcessStateCall(orgId, processId, requestBody, _callback);

    }


    private ApiResponse<Void> updateProcessStateWithHttpInfo(String orgId, String processId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateProcessStateValidateBeforeCall(orgId, processId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateProcessStateAsync(String orgId, String processId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProcessStateValidateBeforeCall(orgId, processId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateProcessStateRequestBuilder {
        private final String orgId;
        private final String processId;

        private UpdateProcessStateRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Build call for updateProcessState
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateProcessStateCall(orgId, processId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateProcessState request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateProcessStateWithHttpInfo(orgId, processId, requestBody);
        }

        /**
         * Execute updateProcessState request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateProcessStateWithHttpInfo(orgId, processId, requestBody);
        }

        /**
         * Execute updateProcessState request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateProcessStateAsync(orgId, processId, requestBody, _callback);
        }
    }

    /**
     * Update process state
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return UpdateProcessStateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public UpdateProcessStateRequestBuilder updateProcessState(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new UpdateProcessStateRequestBuilder(orgId, processId);
    }
    private okhttp3.Call updateStatusOfProcessCall(String orgId, String processId, UpdateProcess updateProcess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProcess;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusOfProcessValidateBeforeCall(String orgId, String processId, UpdateProcess updateProcess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateStatusOfProcess(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling updateStatusOfProcess(Async)");
        }

        return updateStatusOfProcessCall(orgId, processId, updateProcess, _callback);

    }


    private ApiResponse<Void> updateStatusOfProcessWithHttpInfo(String orgId, String processId, UpdateProcess updateProcess) throws ApiException {
        okhttp3.Call localVarCall = updateStatusOfProcessValidateBeforeCall(orgId, processId, updateProcess, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusOfProcessAsync(String orgId, String processId, UpdateProcess updateProcess, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusOfProcessValidateBeforeCall(orgId, processId, updateProcess, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusOfProcessRequestBuilder {
        private final String orgId;
        private final String processId;
        private String status;
        private String filePath;
        private String message;
        private Double progress;
        private String internalError;
        private Object options;
        private Map<String, Object> results;
        private List<LogData> logDataList;
        private Object state;
        private String appId;

        private UpdateStatusOfProcessRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Set status
         * @param status current status of process (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set filePath
         * @param filePath data file path (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder filePath(String filePath) {
            this.filePath = filePath;
            return this;
        }
        
        /**
         * Set message
         * @param message status or error message (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set progress
         * @param progress percent progress so far (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder progress(Double progress) {
            this.progress = progress;
            return this;
        }
        
        /**
         * Set internalError
         * @param internalError internal-only error message (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder internalError(String internalError) {
            this.internalError = internalError;
            return this;
        }
        
        /**
         * Set options
         * @param options options passed to the process (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set results
         * @param results results summary for the process (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder results(Map<String, Object> results) {
            this.results = results;
            return this;
        }
        
        /**
         * Set logDataList
         * @param logDataList list of log data that occurred during running of this process (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder logDataList(List<LogData> logDataList) {
            this.logDataList = logDataList;
            return this;
        }
        
        /**
         * Set state
         * @param state process-specific state data (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder state(Object state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set appId
         * @param appId app id of the process (optional)
         * @return UpdateStatusOfProcessRequestBuilder
         */
        public UpdateStatusOfProcessRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Build call for updateStatusOfProcess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateProcess updateProcess = buildBodyParams();
            return updateStatusOfProcessCall(orgId, processId, updateProcess, _callback);
        }

        private UpdateProcess buildBodyParams() {
            UpdateProcess updateProcess = new UpdateProcess();
            if (this.status != null)
            updateProcess.status(UpdateProcess.StatusEnum.fromValue(this.status));
            updateProcess.filePath(this.filePath);
            updateProcess.message(this.message);
            updateProcess.progress(this.progress);
            updateProcess.internalError(this.internalError);
            updateProcess.options(this.options);
            updateProcess.results(this.results);
            updateProcess.logDataList(this.logDataList);
            updateProcess.state(this.state);
            updateProcess.appId(this.appId);
            return updateProcess;
        }

        /**
         * Execute updateStatusOfProcess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateProcess updateProcess = buildBodyParams();
            updateStatusOfProcessWithHttpInfo(orgId, processId, updateProcess);
        }

        /**
         * Execute updateStatusOfProcess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateProcess updateProcess = buildBodyParams();
            return updateStatusOfProcessWithHttpInfo(orgId, processId, updateProcess);
        }

        /**
         * Execute updateStatusOfProcess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateProcess updateProcess = buildBodyParams();
            return updateStatusOfProcessAsync(orgId, processId, updateProcess, _callback);
        }
    }

    /**
     * Update the status of a process, marking its progress or setting status to DONE or ERROR
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return UpdateStatusOfProcessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusOfProcessRequestBuilder updateStatusOfProcess(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new UpdateStatusOfProcessRequestBuilder(orgId, processId);
    }
    private okhttp3.Call uploadFileAndMarkCompleteCall(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/process/{processId}/file"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileAndMarkCompleteValidateBeforeCall(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling uploadFileAndMarkComplete(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling uploadFileAndMarkComplete(Async)");
        }

        return uploadFileAndMarkCompleteCall(orgId, processId, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Void> uploadFileAndMarkCompleteWithHttpInfo(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadFileAndMarkCompleteValidateBeforeCall(orgId, processId, fileUploadNewFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadFileAndMarkCompleteAsync(String orgId, String processId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileAndMarkCompleteValidateBeforeCall(orgId, processId, fileUploadNewFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadFileAndMarkCompleteRequestBuilder {
        private final String orgId;
        private final String processId;
        private File _file;

        private UploadFileAndMarkCompleteRequestBuilder(String orgId, String processId) {
            this.orgId = orgId;
            this.processId = processId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return UploadFileAndMarkCompleteRequestBuilder
         */
        public UploadFileAndMarkCompleteRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for uploadFileAndMarkComplete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadFileAndMarkCompleteCall(orgId, processId, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute uploadFileAndMarkComplete request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            uploadFileAndMarkCompleteWithHttpInfo(orgId, processId, fileUploadNewFileRequest);
        }

        /**
         * Execute uploadFileAndMarkComplete request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadFileAndMarkCompleteWithHttpInfo(orgId, processId, fileUploadNewFileRequest);
        }

        /**
         * Execute uploadFileAndMarkComplete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return uploadFileAndMarkCompleteAsync(orgId, processId, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Upload a file to be attached to a process, and mark the process as complete
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param processId process id (required)
     * @return UploadFileAndMarkCompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public UploadFileAndMarkCompleteRequestBuilder uploadFileAndMarkComplete(String orgId, String processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            

        return new UploadFileAndMarkCompleteRequestBuilder(orgId, processId);
    }
}
