/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FormResponse;
import com.konfigthis.client.model.FormResponseCount;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.UpdateFormResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FormResponseApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FormResponseApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FormResponseApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByFormCall(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String from, Integer limit, String returnAccess, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formId", formId));
        }

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (submitPersonId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submitPersonId", submitPersonId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByFormValidateBeforeCall(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String from, Integer limit, String returnAccess, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByForm(Async)");
        }

        return getByFormCall(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format, _callback);

    }


    private ApiResponse<Void> getByFormWithHttpInfo(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String from, Integer limit, String returnAccess, String format) throws ApiException {
        okhttp3.Call localVarCall = getByFormValidateBeforeCall(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByFormAsync(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String from, Integer limit, String returnAccess, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByFormValidateBeforeCall(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByFormRequestBuilder {
        private final String orgId;
        private String formId;
        private String assessmentId;
        private String submitPersonId;
        private String targetId;
        private String from;
        private Integer limit;
        private String returnAccess;
        private String format;

        private GetByFormRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set formId
         * @param formId Form id to filter by (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder formId(String formId) {
            this.formId = formId;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId Assessment id to filter by (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set submitPersonId
         * @param submitPersonId Person id to filter by (person who submitted the form) (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder submitPersonId(String submitPersonId) {
            this.submitPersonId = submitPersonId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Target id to filter by (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set from
         * @param from FormResponse id to start paginating from (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetByFormRequestBuilder
         */
        public GetByFormRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getByForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByFormCall(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format, _callback);
        }


        /**
         * Execute getByForm request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByFormWithHttpInfo(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format);
        }

        /**
         * Execute getByForm request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByFormWithHttpInfo(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format);
        }

        /**
         * Execute getByForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByFormAsync(orgId, formId, assessmentId, submitPersonId, targetId, from, limit, returnAccess, format, _callback);
        }
    }

    /**
     * Return form responses by form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetByFormRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByFormRequestBuilder getByForm(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetByFormRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String formResponseId, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response/{formResponseId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formResponseId" + "}", localVarApiClient.escapeString(formResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String formResponseId, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'formResponseId' is set
        if (formResponseId == null) {
            throw new ApiException("Missing the required parameter 'formResponseId' when calling getById(Async)");
        }

        return getByIdCall(orgId, formResponseId, format, _callback);

    }


    private ApiResponse<FormResponse> getByIdWithHttpInfo(String orgId, String formResponseId, String format) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, formResponseId, format, null);
        Type localVarReturnType = new TypeToken<FormResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String formResponseId, String format, final ApiCallback<FormResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, formResponseId, format, _callback);
        Type localVarReturnType = new TypeToken<FormResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String formResponseId;
        private String format;

        private GetByIdRequestBuilder(String orgId, String formResponseId) {
            this.orgId = orgId;
            this.formResponseId = formResponseId;
        }

        /**
         * Set format
         * @param format Data format to use for answers; default is json, can also use json-extended or json-readable (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, formResponseId, format, _callback);
        }


        /**
         * Execute getById request
         * @return FormResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public FormResponse execute() throws ApiException {
            ApiResponse<FormResponse> localVarResp = getByIdWithHttpInfo(orgId, formResponseId, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;FormResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, formResponseId, format);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormResponse> _callback) throws ApiException {
            return getByIdAsync(orgId, formResponseId, format, _callback);
        }
    }

    /**
     * Return a particular form response by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formResponseId FormResponse id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String formResponseId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formResponseId == null) throw new IllegalArgumentException("\"formResponseId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, formResponseId);
    }
    private okhttp3.Call getFormResponseCountCall(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String questionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response/count"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (formId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("formId", formId));
        }

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (submitPersonId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submitPersonId", submitPersonId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (questionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("questionId", questionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFormResponseCountValidateBeforeCall(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String questionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getFormResponseCount(Async)");
        }

        return getFormResponseCountCall(orgId, formId, assessmentId, submitPersonId, targetId, questionId, _callback);

    }


    private ApiResponse<FormResponseCount> getFormResponseCountWithHttpInfo(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String questionId) throws ApiException {
        okhttp3.Call localVarCall = getFormResponseCountValidateBeforeCall(orgId, formId, assessmentId, submitPersonId, targetId, questionId, null);
        Type localVarReturnType = new TypeToken<FormResponseCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFormResponseCountAsync(String orgId, String formId, String assessmentId, String submitPersonId, String targetId, String questionId, final ApiCallback<FormResponseCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFormResponseCountValidateBeforeCall(orgId, formId, assessmentId, submitPersonId, targetId, questionId, _callback);
        Type localVarReturnType = new TypeToken<FormResponseCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFormResponseCountRequestBuilder {
        private final String orgId;
        private String formId;
        private String assessmentId;
        private String submitPersonId;
        private String targetId;
        private String questionId;

        private GetFormResponseCountRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set formId
         * @param formId Form id to filter by (optional)
         * @return GetFormResponseCountRequestBuilder
         */
        public GetFormResponseCountRequestBuilder formId(String formId) {
            this.formId = formId;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId Assessment id to filter by (optional)
         * @return GetFormResponseCountRequestBuilder
         */
        public GetFormResponseCountRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set submitPersonId
         * @param submitPersonId Person id to filter by (person who submitted the form) (optional)
         * @return GetFormResponseCountRequestBuilder
         */
        public GetFormResponseCountRequestBuilder submitPersonId(String submitPersonId) {
            this.submitPersonId = submitPersonId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Target id to filter by (optional)
         * @return GetFormResponseCountRequestBuilder
         */
        public GetFormResponseCountRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set questionId
         * @param questionId Question id to filter by (optional)
         * @return GetFormResponseCountRequestBuilder
         */
        public GetFormResponseCountRequestBuilder questionId(String questionId) {
            this.questionId = questionId;
            return this;
        }
        
        /**
         * Build call for getFormResponseCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFormResponseCountCall(orgId, formId, assessmentId, submitPersonId, targetId, questionId, _callback);
        }


        /**
         * Execute getFormResponseCount request
         * @return FormResponseCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public FormResponseCount execute() throws ApiException {
            ApiResponse<FormResponseCount> localVarResp = getFormResponseCountWithHttpInfo(orgId, formId, assessmentId, submitPersonId, targetId, questionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFormResponseCount request with HTTP info returned
         * @return ApiResponse&lt;FormResponseCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FormResponseCount> executeWithHttpInfo() throws ApiException {
            return getFormResponseCountWithHttpInfo(orgId, formId, assessmentId, submitPersonId, targetId, questionId);
        }

        /**
         * Execute getFormResponseCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FormResponseCount> _callback) throws ApiException {
            return getFormResponseCountAsync(orgId, formId, assessmentId, submitPersonId, targetId, questionId, _callback);
        }
    }

    /**
     * Return the total count of form responses by form
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetFormResponseCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetFormResponseCountRequestBuilder getFormResponseCount(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetFormResponseCountRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String formResponseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response/{formResponseId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formResponseId" + "}", localVarApiClient.escapeString(formResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String formResponseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'formResponseId' is set
        if (formResponseId == null) {
            throw new ApiException("Missing the required parameter 'formResponseId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, formResponseId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String formResponseId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, formResponseId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String formResponseId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, formResponseId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String formResponseId;

        private RemoveByIdRequestBuilder(String orgId, String formResponseId) {
            this.orgId = orgId;
            this.formResponseId = formResponseId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, formResponseId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, formResponseId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, formResponseId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, formResponseId, _callback);
        }
    }

    /**
     * Delete a form response
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formResponseId FormResponse id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String formResponseId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formResponseId == null) throw new IllegalArgumentException("\"formResponseId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, formResponseId);
    }
    private okhttp3.Call updateAnswersMetadataCall(String orgId, String formResponseId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response/{formResponseId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formResponseId" + "}", localVarApiClient.escapeString(formResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnswersMetadataValidateBeforeCall(String orgId, String formResponseId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateAnswersMetadata(Async)");
        }

        // verify the required parameter 'formResponseId' is set
        if (formResponseId == null) {
            throw new ApiException("Missing the required parameter 'formResponseId' when calling updateAnswersMetadata(Async)");
        }

        return updateAnswersMetadataCall(orgId, formResponseId, requestBody, _callback);

    }


    private ApiResponse<Void> updateAnswersMetadataWithHttpInfo(String orgId, String formResponseId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateAnswersMetadataValidateBeforeCall(orgId, formResponseId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAnswersMetadataAsync(String orgId, String formResponseId, Map<String, Object> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnswersMetadataValidateBeforeCall(orgId, formResponseId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAnswersMetadataRequestBuilder {
        private final String orgId;
        private final String formResponseId;

        private UpdateAnswersMetadataRequestBuilder(String orgId, String formResponseId) {
            this.orgId = orgId;
            this.formResponseId = formResponseId;
        }

        /**
         * Build call for updateAnswersMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateAnswersMetadataCall(orgId, formResponseId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateAnswersMetadata request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            updateAnswersMetadataWithHttpInfo(orgId, formResponseId, requestBody);
        }

        /**
         * Execute updateAnswersMetadata request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateAnswersMetadataWithHttpInfo(orgId, formResponseId, requestBody);
        }

        /**
         * Execute updateAnswersMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateAnswersMetadataAsync(orgId, formResponseId, requestBody, _callback);
        }
    }

    /**
     * Re-submit (update) an existing form response&#39;s answers
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formResponseId FormResponse id (required)
     * @return UpdateAnswersMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAnswersMetadataRequestBuilder updateAnswersMetadata(String orgId, String formResponseId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formResponseId == null) throw new IllegalArgumentException("\"formResponseId\" is required but got null");
            

        return new UpdateAnswersMetadataRequestBuilder(orgId, formResponseId);
    }
    private okhttp3.Call updateMetadataCall(String orgId, String formResponseId, UpdateFormResponse updateFormResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFormResponse;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/form-response/{formResponseId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "formResponseId" + "}", localVarApiClient.escapeString(formResponseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMetadataValidateBeforeCall(String orgId, String formResponseId, UpdateFormResponse updateFormResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateMetadata(Async)");
        }

        // verify the required parameter 'formResponseId' is set
        if (formResponseId == null) {
            throw new ApiException("Missing the required parameter 'formResponseId' when calling updateMetadata(Async)");
        }

        return updateMetadataCall(orgId, formResponseId, updateFormResponse, _callback);

    }


    private ApiResponse<Void> updateMetadataWithHttpInfo(String orgId, String formResponseId, UpdateFormResponse updateFormResponse) throws ApiException {
        okhttp3.Call localVarCall = updateMetadataValidateBeforeCall(orgId, formResponseId, updateFormResponse, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMetadataAsync(String orgId, String formResponseId, UpdateFormResponse updateFormResponse, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMetadataValidateBeforeCall(orgId, formResponseId, updateFormResponse, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMetadataRequestBuilder {
        private final String orgId;
        private final String formResponseId;
        private List<ShareAccess> shareAccess;

        private UpdateMetadataRequestBuilder(String orgId, String formResponseId) {
            this.orgId = orgId;
            this.formResponseId = formResponseId;
        }

        /**
         * Set shareAccess
         * @param shareAccess list of share access, if the form response has been shared with anyone (optional)
         * @return UpdateMetadataRequestBuilder
         */
        public UpdateMetadataRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Build call for updateMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateFormResponse updateFormResponse = buildBodyParams();
            return updateMetadataCall(orgId, formResponseId, updateFormResponse, _callback);
        }

        private UpdateFormResponse buildBodyParams() {
            UpdateFormResponse updateFormResponse = new UpdateFormResponse();
            updateFormResponse.shareAccess(this.shareAccess);
            return updateFormResponse;
        }

        /**
         * Execute updateMetadata request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateFormResponse updateFormResponse = buildBodyParams();
            updateMetadataWithHttpInfo(orgId, formResponseId, updateFormResponse);
        }

        /**
         * Execute updateMetadata request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateFormResponse updateFormResponse = buildBodyParams();
            return updateMetadataWithHttpInfo(orgId, formResponseId, updateFormResponse);
        }

        /**
         * Execute updateMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateFormResponse updateFormResponse = buildBodyParams();
            return updateMetadataAsync(orgId, formResponseId, updateFormResponse, _callback);
        }
    }

    /**
     * Update an existing form response&#39;s metadata, such as shareAccess information
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param formResponseId FormResponse id (required)
     * @return UpdateMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMetadataRequestBuilder updateMetadata(String orgId, String formResponseId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (formResponseId == null) throw new IllegalArgumentException("\"formResponseId\" is required but got null");
            

        return new UpdateMetadataRequestBuilder(orgId, formResponseId);
    }
}
