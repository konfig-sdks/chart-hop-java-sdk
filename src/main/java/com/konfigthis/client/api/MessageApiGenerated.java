/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Message;
import com.konfigthis.client.model.PartialMessage;
import com.konfigthis.client.model.ResultsMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMessageCall(String orgId, PartialMessage partialMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialMessage;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMessageValidateBeforeCall(String orgId, PartialMessage partialMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewMessage(Async)");
        }

        return createNewMessageCall(orgId, partialMessage, _callback);

    }


    private ApiResponse<Message> createNewMessageWithHttpInfo(String orgId, PartialMessage partialMessage) throws ApiException {
        okhttp3.Call localVarCall = createNewMessageValidateBeforeCall(orgId, partialMessage, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMessageAsync(String orgId, PartialMessage partialMessage, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMessageValidateBeforeCall(orgId, partialMessage, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMessageRequestBuilder {
        private final String orgId;
        private String title;
        private String id;
        private String orgId;
        private String type;
        private String notificationType;
        private String userId;
        private String content;
        private String messageUrl;
        private String key;
        private String readAt;
        private String seenAt;
        private String createId;
        private String createAt;

        private CreateNewMessageRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set title
         * @param title message title (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set id
         * @param id globally unique id (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set type
         * @param type type of message (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set notificationType
         * @param notificationType type of notification (SUCCESS, ERR, ANNOUNCEMENT etc.) (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder notificationType(String notificationType) {
            this.notificationType = notificationType;
            return this;
        }
        
        /**
         * Set userId
         * @param userId user who receives the message (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set content
         * @param content message content (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set messageUrl
         * @param messageUrl link to message content (if applicable) (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder messageUrl(String messageUrl) {
            this.messageUrl = messageUrl;
            return this;
        }
        
        /**
         * Set key
         * @param key key of message if applicable (e.g. product-tour, import-complete-{id}) (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set readAt
         * @param readAt read timestamp (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder readAt(String readAt) {
            this.readAt = readAt;
            return this;
        }
        
        /**
         * Set seenAt
         * @param seenAt seen timestamp (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder seenAt(String seenAt) {
            this.seenAt = seenAt;
            return this;
        }
        
        /**
         * Set createId
         * @param createId created by user id (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder createId(String createId) {
            this.createId = createId;
            return this;
        }
        
        /**
         * Set createAt
         * @param createAt created timestamp (optional)
         * @return CreateNewMessageRequestBuilder
         */
        public CreateNewMessageRequestBuilder createAt(String createAt) {
            this.createAt = createAt;
            return this;
        }
        
        /**
         * Build call for createNewMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PartialMessage partialMessage = buildBodyParams();
            return createNewMessageCall(orgId, partialMessage, _callback);
        }

        private PartialMessage buildBodyParams() {
            PartialMessage partialMessage = new PartialMessage();
            partialMessage.title(this.title);
            partialMessage.id(this.id);
            partialMessage.orgId(this.orgId);
            if (this.type != null)
            partialMessage.type(PartialMessage.TypeEnum.fromValue(this.type));
            if (this.notificationType != null)
            partialMessage.notificationType(PartialMessage.NotificationTypeEnum.fromValue(this.notificationType));
            partialMessage.userId(this.userId);
            partialMessage.content(this.content);
            partialMessage.messageUrl(this.messageUrl);
            partialMessage.key(this.key);
            partialMessage.readAt(this.readAt);
            partialMessage.seenAt(this.seenAt);
            partialMessage.createId(this.createId);
            partialMessage.createAt(this.createAt);
            return partialMessage;
        }

        /**
         * Execute createNewMessage request
         * @return Message
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Message execute() throws ApiException {
            PartialMessage partialMessage = buildBodyParams();
            ApiResponse<Message> localVarResp = createNewMessageWithHttpInfo(orgId, partialMessage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMessage request with HTTP info returned
         * @return ApiResponse&lt;Message&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Message> executeWithHttpInfo() throws ApiException {
            PartialMessage partialMessage = buildBodyParams();
            return createNewMessageWithHttpInfo(orgId, partialMessage);
        }

        /**
         * Execute createNewMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Message> _callback) throws ApiException {
            PartialMessage partialMessage = buildBodyParams();
            return createNewMessageAsync(orgId, partialMessage, _callback);
        }
    }

    /**
     * Create a new message
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMessageRequestBuilder createNewMessage(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewMessageRequestBuilder(orgId);
    }
    private okhttp3.Call getAllForUserCall(String orgId, String type, Boolean unreadOnly, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/me"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForUserValidateBeforeCall(String orgId, String type, Boolean unreadOnly, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllForUser(Async)");
        }

        return getAllForUserCall(orgId, type, unreadOnly, from, limit, _callback);

    }


    private ApiResponse<ResultsMessage> getAllForUserWithHttpInfo(String orgId, String type, Boolean unreadOnly, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllForUserValidateBeforeCall(orgId, type, unreadOnly, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForUserAsync(String orgId, String type, Boolean unreadOnly, String from, Integer limit, final ApiCallback<ResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForUserValidateBeforeCall(orgId, type, unreadOnly, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForUserRequestBuilder {
        private final String orgId;
        private String type;
        private Boolean unreadOnly;
        private String from;
        private Integer limit;

        private GetAllForUserRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type Message \&quot;type\&quot; (WEB, CHAT, or EMAIL) (optional)
         * @return GetAllForUserRequestBuilder
         */
        public GetAllForUserRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set unreadOnly
         * @param unreadOnly Message \&quot;status\&quot; (read or unread) (optional)
         * @return GetAllForUserRequestBuilder
         */
        public GetAllForUserRequestBuilder unreadOnly(Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }
        
        /**
         * Set from
         * @param from MessageId to start paginating from (optional)
         * @return GetAllForUserRequestBuilder
         */
        public GetAllForUserRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit (optional)
         * @return GetAllForUserRequestBuilder
         */
        public GetAllForUserRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForUserCall(orgId, type, unreadOnly, from, limit, _callback);
        }


        /**
         * Execute getAllForUser request
         * @return ResultsMessage
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ResultsMessage execute() throws ApiException {
            ApiResponse<ResultsMessage> localVarResp = getAllForUserWithHttpInfo(orgId, type, unreadOnly, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForUser request with HTTP info returned
         * @return ApiResponse&lt;ResultsMessage&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsMessage> executeWithHttpInfo() throws ApiException {
            return getAllForUserWithHttpInfo(orgId, type, unreadOnly, from, limit);
        }

        /**
         * Execute getAllForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsMessage> _callback) throws ApiException {
            return getAllForUserAsync(orgId, type, unreadOnly, from, limit, _callback);
        }
    }

    /**
     * Return all messages for a particular user
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForUserRequestBuilder getAllForUser(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllForUserRequestBuilder(orgId);
    }
    private okhttp3.Call getMessageByIdCall(String orgId, String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/{messageId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageByIdValidateBeforeCall(String orgId, String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMessageById(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getMessageById(Async)");
        }

        return getMessageByIdCall(orgId, messageId, _callback);

    }


    private ApiResponse<Message> getMessageByIdWithHttpInfo(String orgId, String messageId) throws ApiException {
        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(orgId, messageId, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMessageByIdAsync(String orgId, String messageId, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageByIdValidateBeforeCall(orgId, messageId, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMessageByIdRequestBuilder {
        private final String orgId;
        private final String messageId;

        private GetMessageByIdRequestBuilder(String orgId, String messageId) {
            this.orgId = orgId;
            this.messageId = messageId;
        }

        /**
         * Build call for getMessageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMessageByIdCall(orgId, messageId, _callback);
        }


        /**
         * Execute getMessageById request
         * @return Message
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public Message execute() throws ApiException {
            ApiResponse<Message> localVarResp = getMessageByIdWithHttpInfo(orgId, messageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMessageById request with HTTP info returned
         * @return ApiResponse&lt;Message&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Message> executeWithHttpInfo() throws ApiException {
            return getMessageByIdWithHttpInfo(orgId, messageId);
        }

        /**
         * Execute getMessageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Message> _callback) throws ApiException {
            return getMessageByIdAsync(orgId, messageId, _callback);
        }
    }

    /**
     * Return a particular message by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param messageId Message id (required)
     * @return GetMessageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetMessageByIdRequestBuilder getMessageById(String orgId, String messageId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new GetMessageByIdRequestBuilder(orgId, messageId);
    }
    private okhttp3.Call getMessageByKeyCall(String orgId, String messageKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/me/{messageKey}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "messageKey" + "}", localVarApiClient.escapeString(messageKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessageByKeyValidateBeforeCall(String orgId, String messageKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getMessageByKey(Async)");
        }

        // verify the required parameter 'messageKey' is set
        if (messageKey == null) {
            throw new ApiException("Missing the required parameter 'messageKey' when calling getMessageByKey(Async)");
        }

        return getMessageByKeyCall(orgId, messageKey, _callback);

    }


    private ApiResponse<Message> getMessageByKeyWithHttpInfo(String orgId, String messageKey) throws ApiException {
        okhttp3.Call localVarCall = getMessageByKeyValidateBeforeCall(orgId, messageKey, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMessageByKeyAsync(String orgId, String messageKey, final ApiCallback<Message> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessageByKeyValidateBeforeCall(orgId, messageKey, _callback);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMessageByKeyRequestBuilder {
        private final String orgId;
        private final String messageKey;

        private GetMessageByKeyRequestBuilder(String orgId, String messageKey) {
            this.orgId = orgId;
            this.messageKey = messageKey;
        }

        /**
         * Build call for getMessageByKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMessageByKeyCall(orgId, messageKey, _callback);
        }


        /**
         * Execute getMessageByKey request
         * @return Message
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public Message execute() throws ApiException {
            ApiResponse<Message> localVarResp = getMessageByKeyWithHttpInfo(orgId, messageKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMessageByKey request with HTTP info returned
         * @return ApiResponse&lt;Message&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Message> executeWithHttpInfo() throws ApiException {
            return getMessageByKeyWithHttpInfo(orgId, messageKey);
        }

        /**
         * Execute getMessageByKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Message> _callback) throws ApiException {
            return getMessageByKeyAsync(orgId, messageKey, _callback);
        }
    }

    /**
     * Return a particular message by key
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param messageKey Message key (required)
     * @return GetMessageByKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetMessageByKeyRequestBuilder getMessageByKey(String orgId, String messageKey) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (messageKey == null) throw new IllegalArgumentException("\"messageKey\" is required but got null");
            

        return new GetMessageByKeyRequestBuilder(orgId, messageKey);
    }
    private okhttp3.Call markBulkAsSeenCall(String orgId, List<PartialMessage> partialMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialMessage;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/bulk/seen"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markBulkAsSeenValidateBeforeCall(String orgId, List<PartialMessage> partialMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling markBulkAsSeen(Async)");
        }

        return markBulkAsSeenCall(orgId, partialMessage, _callback);

    }


    private ApiResponse<Void> markBulkAsSeenWithHttpInfo(String orgId, List<PartialMessage> partialMessage) throws ApiException {
        okhttp3.Call localVarCall = markBulkAsSeenValidateBeforeCall(orgId, partialMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markBulkAsSeenAsync(String orgId, List<PartialMessage> partialMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markBulkAsSeenValidateBeforeCall(orgId, partialMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkBulkAsSeenRequestBuilder {
        private final String orgId;
        private List<PartialMessage> partialMessage;

        private MarkBulkAsSeenRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set partialMessage
         * @param partialMessage Messages to update (optional)
         * @return MarkBulkAsSeenRequestBuilder
         */
        public MarkBulkAsSeenRequestBuilder partialMessage(List<PartialMessage> partialMessage) {
            this.partialMessage = partialMessage;
            return this;
        }

        /**
         * Build call for markBulkAsSeen
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markBulkAsSeenCall(orgId, partialMessage, _callback);
        }

        private List<PartialMessage> buildBodyParams() {
            return this.partialMessage;
        }

        /**
         * Execute markBulkAsSeen request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            markBulkAsSeenWithHttpInfo(orgId, partialMessage);
        }

        /**
         * Execute markBulkAsSeen request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markBulkAsSeenWithHttpInfo(orgId, partialMessage);
        }

        /**
         * Execute markBulkAsSeen request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markBulkAsSeenAsync(orgId, partialMessage, _callback);
        }
    }

    /**
     * Marks each message as &#x60;seen&#x60;
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return MarkBulkAsSeenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public MarkBulkAsSeenRequestBuilder markBulkAsSeen(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new MarkBulkAsSeenRequestBuilder(orgId);
    }
    private okhttp3.Call markMessagesAsReadCall(String orgId, List<PartialMessage> partialMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialMessage;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/bulk/read"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markMessagesAsReadValidateBeforeCall(String orgId, List<PartialMessage> partialMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling markMessagesAsRead(Async)");
        }

        return markMessagesAsReadCall(orgId, partialMessage, _callback);

    }


    private ApiResponse<Void> markMessagesAsReadWithHttpInfo(String orgId, List<PartialMessage> partialMessage) throws ApiException {
        okhttp3.Call localVarCall = markMessagesAsReadValidateBeforeCall(orgId, partialMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markMessagesAsReadAsync(String orgId, List<PartialMessage> partialMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markMessagesAsReadValidateBeforeCall(orgId, partialMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkMessagesAsReadRequestBuilder {
        private final String orgId;
        private List<PartialMessage> partialMessage;

        private MarkMessagesAsReadRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set partialMessage
         * @param partialMessage Messages to update (optional)
         * @return MarkMessagesAsReadRequestBuilder
         */
        public MarkMessagesAsReadRequestBuilder partialMessage(List<PartialMessage> partialMessage) {
            this.partialMessage = partialMessage;
            return this;
        }

        /**
         * Build call for markMessagesAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markMessagesAsReadCall(orgId, partialMessage, _callback);
        }

        private List<PartialMessage> buildBodyParams() {
            return this.partialMessage;
        }

        /**
         * Execute markMessagesAsRead request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            markMessagesAsReadWithHttpInfo(orgId, partialMessage);
        }

        /**
         * Execute markMessagesAsRead request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markMessagesAsReadWithHttpInfo(orgId, partialMessage);
        }

        /**
         * Execute markMessagesAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<PartialMessage> partialMessage = buildBodyParams();
            return markMessagesAsReadAsync(orgId, partialMessage, _callback);
        }
    }

    /**
     * Sets each of the designated message&#39;s &#x60;readAt&#x60; property
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return MarkMessagesAsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public MarkMessagesAsReadRequestBuilder markMessagesAsRead(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new MarkMessagesAsReadRequestBuilder(orgId);
    }
    private okhttp3.Call setReadStatusCall(String orgId, String messageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/message/{messageId}/read"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setReadStatusValidateBeforeCall(String orgId, String messageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling setReadStatus(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling setReadStatus(Async)");
        }

        return setReadStatusCall(orgId, messageId, _callback);

    }


    private ApiResponse<Void> setReadStatusWithHttpInfo(String orgId, String messageId) throws ApiException {
        okhttp3.Call localVarCall = setReadStatusValidateBeforeCall(orgId, messageId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setReadStatusAsync(String orgId, String messageId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setReadStatusValidateBeforeCall(orgId, messageId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetReadStatusRequestBuilder {
        private final String orgId;
        private final String messageId;

        private SetReadStatusRequestBuilder(String orgId, String messageId) {
            this.orgId = orgId;
            this.messageId = messageId;
        }

        /**
         * Build call for setReadStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setReadStatusCall(orgId, messageId, _callback);
        }


        /**
         * Execute setReadStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setReadStatusWithHttpInfo(orgId, messageId);
        }

        /**
         * Execute setReadStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setReadStatusWithHttpInfo(orgId, messageId);
        }

        /**
         * Execute setReadStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setReadStatusAsync(orgId, messageId, _callback);
        }
    }

    /**
     * Sets the designated message&#39;s &#x60;readAt&#x60; property
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param messageId Message id (required)
     * @return SetReadStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public SetReadStatusRequestBuilder setReadStatus(String orgId, String messageId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new SetReadStatusRequestBuilder(orgId, messageId);
    }
}
