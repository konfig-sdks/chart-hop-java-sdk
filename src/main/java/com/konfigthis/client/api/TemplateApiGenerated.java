/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTemplate;
import com.konfigthis.client.model.GenerateTemplateRequest;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsTemplate;
import com.konfigthis.client.model.Template;
import com.konfigthis.client.model.TemplatePreviewRequest;
import com.konfigthis.client.model.TemplateRenderResponse;
import com.konfigthis.client.model.UpdateTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TemplateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkDeleteCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/bulk/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkDelete(Async)");
        }

        return bulkDeleteCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> bulkDeleteWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkDeleteAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkDeleteRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private BulkDeleteRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of template ids to delete (optional)
         * @return BulkDeleteRequestBuilder
         */
        public BulkDeleteRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for bulkDelete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute bulkDelete request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkDeleteWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkDelete request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute bulkDelete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return bulkDeleteAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete a set of templates
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkDeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkDeleteRequestBuilder bulkDelete(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkDeleteRequestBuilder(orgId);
    }
    private okhttp3.Call createBulkDuplicateCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/bulk/duplicate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBulkDuplicateValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createBulkDuplicate(Async)");
        }

        return createBulkDuplicateCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> createBulkDuplicateWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createBulkDuplicateValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBulkDuplicateAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBulkDuplicateValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBulkDuplicateRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private CreateBulkDuplicateRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of template ids to duplicate (optional)
         * @return CreateBulkDuplicateRequestBuilder
         */
        public CreateBulkDuplicateRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for createBulkDuplicate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute createBulkDuplicate request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = createBulkDuplicateWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBulkDuplicate request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute createBulkDuplicate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return createBulkDuplicateAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Duplicate a set of templates
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateBulkDuplicateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateBulkDuplicateRequestBuilder createBulkDuplicate(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateBulkDuplicateRequestBuilder(orgId);
    }
    private okhttp3.Call createEmailCall(CreateTemplate createTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTemplate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmailValidateBeforeCall(CreateTemplate createTemplate, final ApiCallback _callback) throws ApiException {
        return createEmailCall(createTemplate, _callback);

    }


    private ApiResponse<Template> createEmailWithHttpInfo(CreateTemplate createTemplate) throws ApiException {
        okhttp3.Call localVarCall = createEmailValidateBeforeCall(createTemplate, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmailAsync(CreateTemplate createTemplate, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmailValidateBeforeCall(createTemplate, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmailRequestBuilder {
        private final String name;
        private final String content;
        private List<String> tags;
        private String description;
        private String stylesheet;
        private String type;
        private String filename;

        private CreateEmailRequestBuilder(String name, String content) {
            this.name = name;
            this.content = content;
        }

        /**
         * Set tags
         * @param tags tags to organize the purpose of the template (optional)
         * @return CreateEmailRequestBuilder
         */
        public CreateEmailRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description description of template (optional)
         * @return CreateEmailRequestBuilder
         */
        public CreateEmailRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set stylesheet
         * @param stylesheet template inline stylesheet (optional)
         * @return CreateEmailRequestBuilder
         */
        public CreateEmailRequestBuilder stylesheet(String stylesheet) {
            this.stylesheet = stylesheet;
            return this;
        }
        
        /**
         * Set type
         * @param type type of template (optional)
         * @return CreateEmailRequestBuilder
         */
        public CreateEmailRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set filename
         * @param filename document filename CQL (optional)
         * @return CreateEmailRequestBuilder
         */
        public CreateEmailRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for createEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createEmailCall(createTemplate, _callback);
        }

        private CreateTemplate buildBodyParams() {
            CreateTemplate createTemplate = new CreateTemplate();
            createTemplate.tags(this.tags);
            createTemplate.description(this.description);
            createTemplate.name(this.name);
            createTemplate.content(this.content);
            createTemplate.stylesheet(this.stylesheet);
            if (this.type != null)
            createTemplate.type(CreateTemplate.TypeEnum.fromValue(this.type));
            createTemplate.filename(this.filename);
            return createTemplate;
        }

        /**
         * Execute createEmail request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            ApiResponse<Template> localVarResp = createEmailWithHttpInfo(createTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmail request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createEmailWithHttpInfo(createTemplate);
        }

        /**
         * Execute createEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createEmailAsync(createTemplate, _callback);
        }
    }

    /**
     * Create a template
     * 
     * @return CreateEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmailRequestBuilder createEmail(String name, String content) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
            

        return new CreateEmailRequestBuilder(name, content);
    }
    private okhttp3.Call createNewTemplateCall(String orgId, CreateTemplate createTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTemplate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTemplateValidateBeforeCall(String orgId, CreateTemplate createTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewTemplate(Async)");
        }

        return createNewTemplateCall(orgId, createTemplate, _callback);

    }


    private ApiResponse<Template> createNewTemplateWithHttpInfo(String orgId, CreateTemplate createTemplate) throws ApiException {
        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(orgId, createTemplate, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTemplateAsync(String orgId, CreateTemplate createTemplate, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(orgId, createTemplate, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTemplateRequestBuilder {
        private final String name;
        private final String content;
        private final String orgId;
        private List<String> tags;
        private String description;
        private String stylesheet;
        private String type;
        private String filename;

        private CreateNewTemplateRequestBuilder(String name, String content, String orgId) {
            this.name = name;
            this.content = content;
            this.orgId = orgId;
        }

        /**
         * Set tags
         * @param tags tags to organize the purpose of the template (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description description of template (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set stylesheet
         * @param stylesheet template inline stylesheet (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder stylesheet(String stylesheet) {
            this.stylesheet = stylesheet;
            return this;
        }
        
        /**
         * Set type
         * @param type type of template (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set filename
         * @param filename document filename CQL (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for createNewTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createNewTemplateCall(orgId, createTemplate, _callback);
        }

        private CreateTemplate buildBodyParams() {
            CreateTemplate createTemplate = new CreateTemplate();
            createTemplate.tags(this.tags);
            createTemplate.description(this.description);
            createTemplate.name(this.name);
            createTemplate.content(this.content);
            createTemplate.stylesheet(this.stylesheet);
            if (this.type != null)
            createTemplate.type(CreateTemplate.TypeEnum.fromValue(this.type));
            createTemplate.filename(this.filename);
            return createTemplate;
        }

        /**
         * Execute createNewTemplate request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            ApiResponse<Template> localVarResp = createNewTemplateWithHttpInfo(orgId, createTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTemplate request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createNewTemplateWithHttpInfo(orgId, createTemplate);
        }

        /**
         * Execute createNewTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            CreateTemplate createTemplate = buildBodyParams();
            return createNewTemplateAsync(orgId, createTemplate, _callback);
        }
    }

    /**
     * Create a template
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTemplateRequestBuilder createNewTemplate(String name, String content, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewTemplateRequestBuilder(name, content, orgId);
    }
    private okhttp3.Call evaluateAgainstJobCall(String orgId, String templateId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}/render"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (changeGroupingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingType", changeGroupingType));
        }

        if (changeGroupingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingId", changeGroupingId));
        }

        if (useScenarioChanges != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useScenarioChanges", useScenarioChanges));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluateAgainstJobValidateBeforeCall(String orgId, String templateId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling evaluateAgainstJob(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling evaluateAgainstJob(Async)");
        }

        return evaluateAgainstJobCall(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, _callback);

    }


    private ApiResponse<TemplateRenderResponse> evaluateAgainstJobWithHttpInfo(String orgId, String templateId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges) throws ApiException {
        okhttp3.Call localVarCall = evaluateAgainstJobValidateBeforeCall(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, null);
        Type localVarReturnType = new TypeToken<TemplateRenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call evaluateAgainstJobAsync(String orgId, String templateId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, final ApiCallback<TemplateRenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluateAgainstJobValidateBeforeCall(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, _callback);
        Type localVarReturnType = new TypeToken<TemplateRenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EvaluateAgainstJobRequestBuilder {
        private final String orgId;
        private final String templateId;
        private String jobId;
        private String scenarioId;
        private LocalDate date;
        private String format;
        private String changeGroupingType;
        private String changeGroupingId;
        private Boolean useScenarioChanges;

        private EvaluateAgainstJobRequestBuilder(String orgId, String templateId) {
            this.orgId = orgId;
            this.templateId = templateId;
        }

        /**
         * Set jobId
         * @param jobId Job id (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set format
         * @param format Format (optional, default to TEXT)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType Type of change grouping (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId Change grouping id to query (null for primary) (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Set useScenarioChanges
         * @param useScenarioChanges Generate documents for only the changes that are in the scenario. This option also allows you to reference the change within the template, which is otherwise not allowed (optional)
         * @return EvaluateAgainstJobRequestBuilder
         */
        public EvaluateAgainstJobRequestBuilder useScenarioChanges(Boolean useScenarioChanges) {
            this.useScenarioChanges = useScenarioChanges;
            return this;
        }
        
        /**
         * Build call for evaluateAgainstJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return evaluateAgainstJobCall(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, _callback);
        }


        /**
         * Execute evaluateAgainstJob request
         * @return TemplateRenderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public TemplateRenderResponse execute() throws ApiException {
            ApiResponse<TemplateRenderResponse> localVarResp = evaluateAgainstJobWithHttpInfo(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute evaluateAgainstJob request with HTTP info returned
         * @return ApiResponse&lt;TemplateRenderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateRenderResponse> executeWithHttpInfo() throws ApiException {
            return evaluateAgainstJobWithHttpInfo(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges);
        }

        /**
         * Execute evaluateAgainstJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateRenderResponse> _callback) throws ApiException {
            return evaluateAgainstJobAsync(orgId, templateId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, _callback);
        }
    }

    /**
     * Render a template by evaluating it against an existing job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param templateId Template id (required)
     * @return EvaluateAgainstJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public EvaluateAgainstJobRequestBuilder evaluateAgainstJob(String orgId, String templateId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new EvaluateAgainstJobRequestBuilder(orgId, templateId);
    }
    private okhttp3.Call generatePdfsAndEmailsCall(String orgId, String templateId, GenerateTemplateRequest generateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateTemplateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}/generate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePdfsAndEmailsValidateBeforeCall(String orgId, String templateId, GenerateTemplateRequest generateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generatePdfsAndEmails(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling generatePdfsAndEmails(Async)");
        }

        return generatePdfsAndEmailsCall(orgId, templateId, generateTemplateRequest, _callback);

    }


    private ApiResponse<Process> generatePdfsAndEmailsWithHttpInfo(String orgId, String templateId, GenerateTemplateRequest generateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePdfsAndEmailsValidateBeforeCall(orgId, templateId, generateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePdfsAndEmailsAsync(String orgId, String templateId, GenerateTemplateRequest generateTemplateRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePdfsAndEmailsValidateBeforeCall(orgId, templateId, generateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePdfsAndEmailsRequestBuilder {
        private final Boolean saveToFiles;
        private final Boolean sendToManagers;
        private final Boolean sendToPersons;
        private final Boolean useScenarioChanges;
        private final String orgId;
        private final String templateId;
        private String filter;
        private String emailSubject;
        private String emailMessage;
        private String fileSensitive;
        private String fileField;
        private String scenarioId;
        private LocalDate date;
        private String changeGroupingType;
        private String changeGroupingId;

        private GeneratePdfsAndEmailsRequestBuilder(Boolean saveToFiles, Boolean sendToManagers, Boolean sendToPersons, Boolean useScenarioChanges, String orgId, String templateId) {
            this.saveToFiles = saveToFiles;
            this.sendToManagers = sendToManagers;
            this.sendToPersons = sendToPersons;
            this.useScenarioChanges = useScenarioChanges;
            this.orgId = orgId;
            this.templateId = templateId;
        }

        /**
         * Set filter
         * @param filter  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set emailSubject
         * @param emailSubject  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder emailSubject(String emailSubject) {
            this.emailSubject = emailSubject;
            return this;
        }
        
        /**
         * Set emailMessage
         * @param emailMessage  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder emailMessage(String emailMessage) {
            this.emailMessage = emailMessage;
            return this;
        }
        
        /**
         * Set fileSensitive
         * @param fileSensitive  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder fileSensitive(String fileSensitive) {
            this.fileSensitive = fileSensitive;
            return this;
        }
        
        /**
         * Set fileField
         * @param fileField  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder fileField(String fileField) {
            this.fileField = fileField;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId  (optional)
         * @return GeneratePdfsAndEmailsRequestBuilder
         */
        public GeneratePdfsAndEmailsRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Build call for generatePdfsAndEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GenerateTemplateRequest generateTemplateRequest = buildBodyParams();
            return generatePdfsAndEmailsCall(orgId, templateId, generateTemplateRequest, _callback);
        }

        private GenerateTemplateRequest buildBodyParams() {
            GenerateTemplateRequest generateTemplateRequest = new GenerateTemplateRequest();
            generateTemplateRequest.filter(this.filter);
            generateTemplateRequest.emailSubject(this.emailSubject);
            generateTemplateRequest.emailMessage(this.emailMessage);
            generateTemplateRequest.saveToFiles(this.saveToFiles);
            if (this.fileSensitive != null)
            generateTemplateRequest.fileSensitive(GenerateTemplateRequest.FileSensitiveEnum.fromValue(this.fileSensitive));
            generateTemplateRequest.fileField(this.fileField);
            generateTemplateRequest.sendToManagers(this.sendToManagers);
            generateTemplateRequest.sendToPersons(this.sendToPersons);
            generateTemplateRequest.scenarioId(this.scenarioId);
            generateTemplateRequest.date(this.date);
            generateTemplateRequest.useScenarioChanges(this.useScenarioChanges);
            if (this.changeGroupingType != null)
            generateTemplateRequest.changeGroupingType(GenerateTemplateRequest.ChangeGroupingTypeEnum.fromValue(this.changeGroupingType));
            generateTemplateRequest.changeGroupingId(this.changeGroupingId);
            return generateTemplateRequest;
        }

        /**
         * Execute generatePdfsAndEmails request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            GenerateTemplateRequest generateTemplateRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = generatePdfsAndEmailsWithHttpInfo(orgId, templateId, generateTemplateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePdfsAndEmails request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            GenerateTemplateRequest generateTemplateRequest = buildBodyParams();
            return generatePdfsAndEmailsWithHttpInfo(orgId, templateId, generateTemplateRequest);
        }

        /**
         * Execute generatePdfsAndEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            GenerateTemplateRequest generateTemplateRequest = buildBodyParams();
            return generatePdfsAndEmailsAsync(orgId, templateId, generateTemplateRequest, _callback);
        }
    }

    /**
     * Automatically generate PDFs of the templates, and distribute emails to managers and people to download
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param templateId Template id (required)
     * @return GeneratePdfsAndEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePdfsAndEmailsRequestBuilder generatePdfsAndEmails(Boolean saveToFiles, Boolean sendToManagers, Boolean sendToPersons, Boolean useScenarioChanges, String orgId, String templateId) throws IllegalArgumentException {
        if (saveToFiles == null) throw new IllegalArgumentException("\"saveToFiles\" is required but got null");
        if (sendToManagers == null) throw new IllegalArgumentException("\"sendToManagers\" is required but got null");
        if (sendToPersons == null) throw new IllegalArgumentException("\"sendToPersons\" is required but got null");
        if (useScenarioChanges == null) throw new IllegalArgumentException("\"useScenarioChanges\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GeneratePdfsAndEmailsRequestBuilder(saveToFiles, sendToManagers, sendToPersons, useScenarioChanges, orgId, templateId);
    }
    private okhttp3.Call generateTemplatePreviewCall(String orgId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, TemplatePreviewRequest templatePreviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatePreviewRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}/preview"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (changeGroupingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingType", changeGroupingType));
        }

        if (changeGroupingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingId", changeGroupingId));
        }

        if (useScenarioChanges != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useScenarioChanges", useScenarioChanges));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTemplatePreviewValidateBeforeCall(String orgId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, TemplatePreviewRequest templatePreviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling generateTemplatePreview(Async)");
        }

        return generateTemplatePreviewCall(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest, _callback);

    }


    private ApiResponse<TemplateRenderResponse> generateTemplatePreviewWithHttpInfo(String orgId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, TemplatePreviewRequest templatePreviewRequest) throws ApiException {
        okhttp3.Call localVarCall = generateTemplatePreviewValidateBeforeCall(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest, null);
        Type localVarReturnType = new TypeToken<TemplateRenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateTemplatePreviewAsync(String orgId, String jobId, String scenarioId, LocalDate date, String format, String changeGroupingType, String changeGroupingId, Boolean useScenarioChanges, TemplatePreviewRequest templatePreviewRequest, final ApiCallback<TemplateRenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTemplatePreviewValidateBeforeCall(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplateRenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateTemplatePreviewRequestBuilder {
        private final String content;
        private final String orgId;
        private String stylesheet;
        private String jobId;
        private String scenarioId;
        private LocalDate date;
        private String format;
        private String changeGroupingType;
        private String changeGroupingId;
        private Boolean useScenarioChanges;

        private GenerateTemplatePreviewRequestBuilder(String content, String orgId) {
            this.content = content;
            this.orgId = orgId;
        }

        /**
         * Set stylesheet
         * @param stylesheet  (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder stylesheet(String stylesheet) {
            this.stylesheet = stylesheet;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId Job id (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to query (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set format
         * @param format Format (optional, default to TEXT)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType Type of change grouping (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId Change grouping id to query (null for primary) (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Set useScenarioChanges
         * @param useScenarioChanges Generate documents for only the changes that are in the scenario. This option also allows you to reference the change within the template, which is otherwise not allowed (optional)
         * @return GenerateTemplatePreviewRequestBuilder
         */
        public GenerateTemplatePreviewRequestBuilder useScenarioChanges(Boolean useScenarioChanges) {
            this.useScenarioChanges = useScenarioChanges;
            return this;
        }
        
        /**
         * Build call for generateTemplatePreview
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TemplatePreviewRequest templatePreviewRequest = buildBodyParams();
            return generateTemplatePreviewCall(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest, _callback);
        }

        private TemplatePreviewRequest buildBodyParams() {
            TemplatePreviewRequest templatePreviewRequest = new TemplatePreviewRequest();
            templatePreviewRequest.content(this.content);
            templatePreviewRequest.stylesheet(this.stylesheet);
            return templatePreviewRequest;
        }

        /**
         * Execute generateTemplatePreview request
         * @return TemplateRenderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public TemplateRenderResponse execute() throws ApiException {
            TemplatePreviewRequest templatePreviewRequest = buildBodyParams();
            ApiResponse<TemplateRenderResponse> localVarResp = generateTemplatePreviewWithHttpInfo(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateTemplatePreview request with HTTP info returned
         * @return ApiResponse&lt;TemplateRenderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TemplateRenderResponse> executeWithHttpInfo() throws ApiException {
            TemplatePreviewRequest templatePreviewRequest = buildBodyParams();
            return generateTemplatePreviewWithHttpInfo(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest);
        }

        /**
         * Execute generateTemplatePreview request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TemplateRenderResponse> _callback) throws ApiException {
            TemplatePreviewRequest templatePreviewRequest = buildBodyParams();
            return generateTemplatePreviewAsync(orgId, jobId, scenarioId, date, format, changeGroupingType, changeGroupingId, useScenarioChanges, templatePreviewRequest, _callback);
        }
    }

    /**
     * Preview template content without saving it
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GenerateTemplatePreviewRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GenerateTemplatePreviewRequestBuilder generateTemplatePreview(String content, String orgId) throws IllegalArgumentException {
        if (content == null) throw new IllegalArgumentException("\"content\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GenerateTemplatePreviewRequestBuilder(content, orgId);
    }
    private okhttp3.Call getAllInOrgsCall(String orgId, String type, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInOrgsValidateBeforeCall(String orgId, String type, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllInOrgs(Async)");
        }

        return getAllInOrgsCall(orgId, type, from, limit, _callback);

    }


    private ApiResponse<ResultsTemplate> getAllInOrgsWithHttpInfo(String orgId, String type, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllInOrgsValidateBeforeCall(orgId, type, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsTemplate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInOrgsAsync(String orgId, String type, String from, Integer limit, final ApiCallback<ResultsTemplate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInOrgsValidateBeforeCall(orgId, type, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsTemplate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllInOrgsRequestBuilder {
        private final String orgId;
        private String type;
        private String from;
        private Integer limit;

        private GetAllInOrgsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set type
         * @param type Type of template to filter by (optional)
         * @return GetAllInOrgsRequestBuilder
         */
        public GetAllInOrgsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set from
         * @param from Template id to start paginating from (optional)
         * @return GetAllInOrgsRequestBuilder
         */
        public GetAllInOrgsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllInOrgsRequestBuilder
         */
        public GetAllInOrgsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllInOrgs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInOrgsCall(orgId, type, from, limit, _callback);
        }


        /**
         * Execute getAllInOrgs request
         * @return ResultsTemplate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsTemplate execute() throws ApiException {
            ApiResponse<ResultsTemplate> localVarResp = getAllInOrgsWithHttpInfo(orgId, type, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllInOrgs request with HTTP info returned
         * @return ApiResponse&lt;ResultsTemplate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsTemplate> executeWithHttpInfo() throws ApiException {
            return getAllInOrgsWithHttpInfo(orgId, type, from, limit);
        }

        /**
         * Execute getAllInOrgs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsTemplate> _callback) throws ApiException {
            return getAllInOrgsAsync(orgId, type, from, limit, _callback);
        }
    }

    /**
     * Return all templates in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllInOrgsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllInOrgsRequestBuilder getAllInOrgs(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllInOrgsRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling getById(Async)");
        }

        return getByIdCall(orgId, templateId, _callback);

    }


    private ApiResponse<Template> getByIdWithHttpInfo(String orgId, String templateId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, templateId, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String templateId, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, templateId, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String templateId;

        private GetByIdRequestBuilder(String orgId, String templateId) {
            this.orgId = orgId;
            this.templateId = templateId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, templateId, _callback);
        }


        /**
         * Execute getById request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            ApiResponse<Template> localVarResp = getByIdWithHttpInfo(orgId, templateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, templateId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            return getByIdAsync(orgId, templateId, _callback);
        }
    }

    /**
     * Return a particular template by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param templateId Template id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String templateId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, templateId);
    }
    private okhttp3.Call getByNameCall(String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/email/{templateName}"
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNameValidateBeforeCall(String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling getByName(Async)");
        }

        return getByNameCall(templateName, _callback);

    }


    private ApiResponse<Template> getByNameWithHttpInfo(String templateName) throws ApiException {
        okhttp3.Call localVarCall = getByNameValidateBeforeCall(templateName, null);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByNameAsync(String templateName, final ApiCallback<Template> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNameValidateBeforeCall(templateName, _callback);
        Type localVarReturnType = new TypeToken<Template>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByNameRequestBuilder {
        private final String templateName;

        private GetByNameRequestBuilder(String templateName) {
            this.templateName = templateName;
        }

        /**
         * Build call for getByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByNameCall(templateName, _callback);
        }


        /**
         * Execute getByName request
         * @return Template
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Template execute() throws ApiException {
            ApiResponse<Template> localVarResp = getByNameWithHttpInfo(templateName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByName request with HTTP info returned
         * @return ApiResponse&lt;Template&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Template> executeWithHttpInfo() throws ApiException {
            return getByNameWithHttpInfo(templateName);
        }

        /**
         * Execute getByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Template> _callback) throws ApiException {
            return getByNameAsync(templateName, _callback);
        }
    }

    /**
     * Return a particular email template by name
     * 
     * @param templateName Template name (required)
     * @return GetByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByNameRequestBuilder getByName(String templateName) throws IllegalArgumentException {
        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new GetByNameRequestBuilder(templateName);
    }
    private okhttp3.Call removeByIdCall(String orgId, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, templateId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String templateId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, templateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String templateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, templateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String templateId;

        private RemoveByIdRequestBuilder(String orgId, String templateId) {
            this.orgId = orgId;
            this.templateId = templateId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, templateId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, templateId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, templateId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, templateId, _callback);
        }
    }

    /**
     * Delete a template
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param templateId Template id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String templateId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, templateId);
    }
    private okhttp3.Call removeEmailCall(String templateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/email/{templateName}"
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmailValidateBeforeCall(String templateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling removeEmail(Async)");
        }

        return removeEmailCall(templateName, _callback);

    }


    private ApiResponse<Void> removeEmailWithHttpInfo(String templateName) throws ApiException {
        okhttp3.Call localVarCall = removeEmailValidateBeforeCall(templateName, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeEmailAsync(String templateName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmailValidateBeforeCall(templateName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveEmailRequestBuilder {
        private final String templateName;

        private RemoveEmailRequestBuilder(String templateName) {
            this.templateName = templateName;
        }

        /**
         * Build call for removeEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEmailCall(templateName, _callback);
        }


        /**
         * Execute removeEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeEmailWithHttpInfo(templateName);
        }

        /**
         * Execute removeEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeEmailWithHttpInfo(templateName);
        }

        /**
         * Execute removeEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeEmailAsync(templateName, _callback);
        }
    }

    /**
     * Delete a template
     * 
     * @param templateName Template name (required)
     * @return RemoveEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmailRequestBuilder removeEmail(String templateName) throws IllegalArgumentException {
        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new RemoveEmailRequestBuilder(templateName);
    }
    private okhttp3.Call updateEmailTemplateCall(String templateName, UpdateTemplate updateTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTemplate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/email/{templateName}"
            .replace("{" + "templateName" + "}", localVarApiClient.escapeString(templateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailTemplateValidateBeforeCall(String templateName, UpdateTemplate updateTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateName' is set
        if (templateName == null) {
            throw new ApiException("Missing the required parameter 'templateName' when calling updateEmailTemplate(Async)");
        }

        return updateEmailTemplateCall(templateName, updateTemplate, _callback);

    }


    private ApiResponse<Void> updateEmailTemplateWithHttpInfo(String templateName, UpdateTemplate updateTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateEmailTemplateValidateBeforeCall(templateName, updateTemplate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmailTemplateAsync(String templateName, UpdateTemplate updateTemplate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailTemplateValidateBeforeCall(templateName, updateTemplate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmailTemplateRequestBuilder {
        private final String templateName;
        private List<String> tags;
        private String description;
        private String name;
        private String content;
        private String stylesheet;
        private String type;
        private String filename;

        private UpdateEmailTemplateRequestBuilder(String templateName) {
            this.templateName = templateName;
        }

        /**
         * Set tags
         * @param tags tags to organize the purpose of the template (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description description of template (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name template name, must be unique to organization (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set content
         * @param content template content (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set stylesheet
         * @param stylesheet template inline stylesheet (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder stylesheet(String stylesheet) {
            this.stylesheet = stylesheet;
            return this;
        }
        
        /**
         * Set type
         * @param type type of template (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set filename
         * @param filename document filename CQL (optional)
         * @return UpdateEmailTemplateRequestBuilder
         */
        public UpdateEmailTemplateRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for updateEmailTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateEmailTemplateCall(templateName, updateTemplate, _callback);
        }

        private UpdateTemplate buildBodyParams() {
            UpdateTemplate updateTemplate = new UpdateTemplate();
            updateTemplate.tags(this.tags);
            updateTemplate.description(this.description);
            updateTemplate.name(this.name);
            updateTemplate.content(this.content);
            updateTemplate.stylesheet(this.stylesheet);
            if (this.type != null)
            updateTemplate.type(UpdateTemplate.TypeEnum.fromValue(this.type));
            updateTemplate.filename(this.filename);
            return updateTemplate;
        }

        /**
         * Execute updateEmailTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            updateEmailTemplateWithHttpInfo(templateName, updateTemplate);
        }

        /**
         * Execute updateEmailTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateEmailTemplateWithHttpInfo(templateName, updateTemplate);
        }

        /**
         * Execute updateEmailTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateEmailTemplateAsync(templateName, updateTemplate, _callback);
        }
    }

    /**
     * Update an existing template
     * 
     * @param templateName Template name (required)
     * @return UpdateEmailTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailTemplateRequestBuilder updateEmailTemplate(String templateName) throws IllegalArgumentException {
        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        return new UpdateEmailTemplateRequestBuilder(templateName);
    }
    private okhttp3.Call updateExistingCall(String orgId, String templateId, UpdateTemplate updateTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTemplate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/template/{templateId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "templateId" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingValidateBeforeCall(String orgId, String templateId, UpdateTemplate updateTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExisting(Async)");
        }

        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling updateExisting(Async)");
        }

        return updateExistingCall(orgId, templateId, updateTemplate, _callback);

    }


    private ApiResponse<Void> updateExistingWithHttpInfo(String orgId, String templateId, UpdateTemplate updateTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateExistingValidateBeforeCall(orgId, templateId, updateTemplate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingAsync(String orgId, String templateId, UpdateTemplate updateTemplate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingValidateBeforeCall(orgId, templateId, updateTemplate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingRequestBuilder {
        private final String orgId;
        private final String templateId;
        private List<String> tags;
        private String description;
        private String name;
        private String content;
        private String stylesheet;
        private String type;
        private String filename;

        private UpdateExistingRequestBuilder(String orgId, String templateId) {
            this.orgId = orgId;
            this.templateId = templateId;
        }

        /**
         * Set tags
         * @param tags tags to organize the purpose of the template (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set description
         * @param description description of template (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name template name, must be unique to organization (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set content
         * @param content template content (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set stylesheet
         * @param stylesheet template inline stylesheet (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder stylesheet(String stylesheet) {
            this.stylesheet = stylesheet;
            return this;
        }
        
        /**
         * Set type
         * @param type type of template (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set filename
         * @param filename document filename CQL (optional)
         * @return UpdateExistingRequestBuilder
         */
        public UpdateExistingRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Build call for updateExisting
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateExistingCall(orgId, templateId, updateTemplate, _callback);
        }

        private UpdateTemplate buildBodyParams() {
            UpdateTemplate updateTemplate = new UpdateTemplate();
            updateTemplate.tags(this.tags);
            updateTemplate.description(this.description);
            updateTemplate.name(this.name);
            updateTemplate.content(this.content);
            updateTemplate.stylesheet(this.stylesheet);
            if (this.type != null)
            updateTemplate.type(UpdateTemplate.TypeEnum.fromValue(this.type));
            updateTemplate.filename(this.filename);
            return updateTemplate;
        }

        /**
         * Execute updateExisting request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            updateExistingWithHttpInfo(orgId, templateId, updateTemplate);
        }

        /**
         * Execute updateExisting request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateExistingWithHttpInfo(orgId, templateId, updateTemplate);
        }

        /**
         * Execute updateExisting request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTemplate updateTemplate = buildBodyParams();
            return updateExistingAsync(orgId, templateId, updateTemplate, _callback);
        }
    }

    /**
     * Update an existing template
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param templateId Template id (required)
     * @return UpdateExistingRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingRequestBuilder updateExisting(String orgId, String templateId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (templateId == null) throw new IllegalArgumentException("\"templateId\" is required but got null");
            

        return new UpdateExistingRequestBuilder(orgId, templateId);
    }
}
