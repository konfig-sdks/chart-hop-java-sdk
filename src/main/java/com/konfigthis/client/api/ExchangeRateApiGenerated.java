/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ExchangeRate;
import java.time.LocalDate;
import com.konfigthis.client.model.UpdateExchangeRate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExchangeRateApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExchangeRateApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExchangeRateApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkUpdateCustomRatesCall(String orgId, LocalDate date, Boolean addRates, List<UpdateExchangeRate> updateExchangeRate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExchangeRate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}/custom/bulkupdate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addRates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addRates", addRates));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateCustomRatesValidateBeforeCall(String orgId, LocalDate date, Boolean addRates, List<UpdateExchangeRate> updateExchangeRate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkUpdateCustomRates(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling bulkUpdateCustomRates(Async)");
        }

        return bulkUpdateCustomRatesCall(orgId, date, addRates, updateExchangeRate, _callback);

    }


    private ApiResponse<Void> bulkUpdateCustomRatesWithHttpInfo(String orgId, LocalDate date, Boolean addRates, List<UpdateExchangeRate> updateExchangeRate) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateCustomRatesValidateBeforeCall(orgId, date, addRates, updateExchangeRate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkUpdateCustomRatesAsync(String orgId, LocalDate date, Boolean addRates, List<UpdateExchangeRate> updateExchangeRate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateCustomRatesValidateBeforeCall(orgId, date, addRates, updateExchangeRate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class BulkUpdateCustomRatesRequestBuilder {
        private final String orgId;
        private final LocalDate date;
        private Boolean addRates;
        private List<UpdateExchangeRate> updateExchangeRate;

        private BulkUpdateCustomRatesRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Set updateExchangeRate
         * @param updateExchangeRate Update data (optional)
         * @return BulkUpdateCustomRatesRequestBuilder
         */
        public BulkUpdateCustomRatesRequestBuilder updateExchangeRate(List<UpdateExchangeRate> updateExchangeRate) {
            this.updateExchangeRate = updateExchangeRate;
            return this;
        }

        /**
         * Set addRates
         * @param addRates Boolean to determine whether to add or remove rates from update (optional)
         * @return BulkUpdateCustomRatesRequestBuilder
         */
        public BulkUpdateCustomRatesRequestBuilder addRates(Boolean addRates) {
            this.addRates = addRates;
            return this;
        }
        
        /**
         * Build call for bulkUpdateCustomRates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<UpdateExchangeRate> updateExchangeRate = buildBodyParams();
            return bulkUpdateCustomRatesCall(orgId, date, addRates, updateExchangeRate, _callback);
        }

        private List<UpdateExchangeRate> buildBodyParams() {
            return this.updateExchangeRate;
        }

        /**
         * Execute bulkUpdateCustomRates request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<UpdateExchangeRate> updateExchangeRate = buildBodyParams();
            bulkUpdateCustomRatesWithHttpInfo(orgId, date, addRates, updateExchangeRate);
        }

        /**
         * Execute bulkUpdateCustomRates request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<UpdateExchangeRate> updateExchangeRate = buildBodyParams();
            return bulkUpdateCustomRatesWithHttpInfo(orgId, date, addRates, updateExchangeRate);
        }

        /**
         * Execute bulkUpdateCustomRates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<UpdateExchangeRate> updateExchangeRate = buildBodyParams();
            return bulkUpdateCustomRatesAsync(orgId, date, addRates, updateExchangeRate, _callback);
        }
    }

    /**
     * Bulk update custom currency rates in org custom exchange rates
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return BulkUpdateCustomRatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkUpdateCustomRatesRequestBuilder bulkUpdateCustomRates(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new BulkUpdateCustomRatesRequestBuilder(orgId, date);
    }
    private okhttp3.Call deleteCustomRateOnDateCall(String orgId, LocalDate date, String currencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currencyCode", currencyCode));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomRateOnDateValidateBeforeCall(String orgId, LocalDate date, String currencyCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteCustomRateOnDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling deleteCustomRateOnDate(Async)");
        }

        return deleteCustomRateOnDateCall(orgId, date, currencyCode, _callback);

    }


    private ApiResponse<Void> deleteCustomRateOnDateWithHttpInfo(String orgId, LocalDate date, String currencyCode) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomRateOnDateValidateBeforeCall(orgId, date, currencyCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCustomRateOnDateAsync(String orgId, LocalDate date, String currencyCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomRateOnDateValidateBeforeCall(orgId, date, currencyCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCustomRateOnDateRequestBuilder {
        private final String orgId;
        private final LocalDate date;
        private String currencyCode;

        private DeleteCustomRateOnDateRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Set currencyCode
         * @param currencyCode Currency code (optional)
         * @return DeleteCustomRateOnDateRequestBuilder
         */
        public DeleteCustomRateOnDateRequestBuilder currencyCode(String currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }
        
        /**
         * Build call for deleteCustomRateOnDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomRateOnDateCall(orgId, date, currencyCode, _callback);
        }


        /**
         * Execute deleteCustomRateOnDate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCustomRateOnDateWithHttpInfo(orgId, date, currencyCode);
        }

        /**
         * Execute deleteCustomRateOnDate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCustomRateOnDateWithHttpInfo(orgId, date, currencyCode);
        }

        /**
         * Execute deleteCustomRateOnDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCustomRateOnDateAsync(orgId, date, currencyCode, _callback);
        }
    }

    /**
     * Delete a custom exchange rate on a particular date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return DeleteCustomRateOnDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomRateOnDateRequestBuilder deleteCustomRateOnDate(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new DeleteCustomRateOnDateRequestBuilder(orgId, date);
    }
    private okhttp3.Call getCustomExchangeRatesCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}/custom"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomExchangeRatesValidateBeforeCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCustomExchangeRates(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getCustomExchangeRates(Async)");
        }

        return getCustomExchangeRatesCall(orgId, date, _callback);

    }


    private ApiResponse<ExchangeRate> getCustomExchangeRatesWithHttpInfo(String orgId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getCustomExchangeRatesValidateBeforeCall(orgId, date, null);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomExchangeRatesAsync(String orgId, LocalDate date, final ApiCallback<ExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomExchangeRatesValidateBeforeCall(orgId, date, _callback);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomExchangeRatesRequestBuilder {
        private final String orgId;
        private final LocalDate date;

        private GetCustomExchangeRatesRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Build call for getCustomExchangeRates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomExchangeRatesCall(orgId, date, _callback);
        }


        /**
         * Execute getCustomExchangeRates request
         * @return ExchangeRate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ExchangeRate execute() throws ApiException {
            ApiResponse<ExchangeRate> localVarResp = getCustomExchangeRatesWithHttpInfo(orgId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomExchangeRates request with HTTP info returned
         * @return ApiResponse&lt;ExchangeRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExchangeRate> executeWithHttpInfo() throws ApiException {
            return getCustomExchangeRatesWithHttpInfo(orgId, date);
        }

        /**
         * Execute getCustomExchangeRates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExchangeRate> _callback) throws ApiException {
            return getCustomExchangeRatesAsync(orgId, date, _callback);
        }
    }

    /**
     * Return org custom exchange rates
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return GetCustomExchangeRatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomExchangeRatesRequestBuilder getCustomExchangeRates(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetCustomExchangeRatesRequestBuilder(orgId, date);
    }
    private okhttp3.Call getGlobalByDateCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}/global"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalByDateValidateBeforeCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getGlobalByDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getGlobalByDate(Async)");
        }

        return getGlobalByDateCall(orgId, date, _callback);

    }


    private ApiResponse<ExchangeRate> getGlobalByDateWithHttpInfo(String orgId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getGlobalByDateValidateBeforeCall(orgId, date, null);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGlobalByDateAsync(String orgId, LocalDate date, final ApiCallback<ExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalByDateValidateBeforeCall(orgId, date, _callback);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGlobalByDateRequestBuilder {
        private final String orgId;
        private final LocalDate date;

        private GetGlobalByDateRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Build call for getGlobalByDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGlobalByDateCall(orgId, date, _callback);
        }


        /**
         * Execute getGlobalByDate request
         * @return ExchangeRate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ExchangeRate execute() throws ApiException {
            ApiResponse<ExchangeRate> localVarResp = getGlobalByDateWithHttpInfo(orgId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGlobalByDate request with HTTP info returned
         * @return ApiResponse&lt;ExchangeRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExchangeRate> executeWithHttpInfo() throws ApiException {
            return getGlobalByDateWithHttpInfo(orgId, date);
        }

        /**
         * Execute getGlobalByDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExchangeRate> _callback) throws ApiException {
            return getGlobalByDateAsync(orgId, date, _callback);
        }
    }

    /**
     * Return the global exchange rates based on USD for a particular date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return GetGlobalByDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetGlobalByDateRequestBuilder getGlobalByDate(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetGlobalByDateRequestBuilder(orgId, date);
    }
    private okhttp3.Call getRatesOnDateCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRatesOnDateValidateBeforeCall(String orgId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getRatesOnDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getRatesOnDate(Async)");
        }

        return getRatesOnDateCall(orgId, date, _callback);

    }


    private ApiResponse<ExchangeRate> getRatesOnDateWithHttpInfo(String orgId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getRatesOnDateValidateBeforeCall(orgId, date, null);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRatesOnDateAsync(String orgId, LocalDate date, final ApiCallback<ExchangeRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRatesOnDateValidateBeforeCall(orgId, date, _callback);
        Type localVarReturnType = new TypeToken<ExchangeRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRatesOnDateRequestBuilder {
        private final String orgId;
        private final LocalDate date;

        private GetRatesOnDateRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Build call for getRatesOnDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRatesOnDateCall(orgId, date, _callback);
        }


        /**
         * Execute getRatesOnDate request
         * @return ExchangeRate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ExchangeRate execute() throws ApiException {
            ApiResponse<ExchangeRate> localVarResp = getRatesOnDateWithHttpInfo(orgId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRatesOnDate request with HTTP info returned
         * @return ApiResponse&lt;ExchangeRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExchangeRate> executeWithHttpInfo() throws ApiException {
            return getRatesOnDateWithHttpInfo(orgId, date);
        }

        /**
         * Execute getRatesOnDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExchangeRate> _callback) throws ApiException {
            return getRatesOnDateAsync(orgId, date, _callback);
        }
    }

    /**
     * Return the exchange rates on a particular date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return GetRatesOnDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetRatesOnDateRequestBuilder getRatesOnDate(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetRatesOnDateRequestBuilder(orgId, date);
    }
    private okhttp3.Call orgCustomExchangeRatesHistoryCall(String orgId, LocalDate date, String currency, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}/history"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toDate", toDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orgCustomExchangeRatesHistoryValidateBeforeCall(String orgId, LocalDate date, String currency, LocalDate fromDate, LocalDate toDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling orgCustomExchangeRatesHistory(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling orgCustomExchangeRatesHistory(Async)");
        }

        return orgCustomExchangeRatesHistoryCall(orgId, date, currency, fromDate, toDate, _callback);

    }


    private ApiResponse<List<ExchangeRate>> orgCustomExchangeRatesHistoryWithHttpInfo(String orgId, LocalDate date, String currency, LocalDate fromDate, LocalDate toDate) throws ApiException {
        okhttp3.Call localVarCall = orgCustomExchangeRatesHistoryValidateBeforeCall(orgId, date, currency, fromDate, toDate, null);
        Type localVarReturnType = new TypeToken<List<ExchangeRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call orgCustomExchangeRatesHistoryAsync(String orgId, LocalDate date, String currency, LocalDate fromDate, LocalDate toDate, final ApiCallback<List<ExchangeRate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = orgCustomExchangeRatesHistoryValidateBeforeCall(orgId, date, currency, fromDate, toDate, _callback);
        Type localVarReturnType = new TypeToken<List<ExchangeRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OrgCustomExchangeRatesHistoryRequestBuilder {
        private final String orgId;
        private final LocalDate date;
        private String currency;
        private LocalDate fromDate;
        private LocalDate toDate;

        private OrgCustomExchangeRatesHistoryRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Set currency
         * @param currency Currency to search for (optional)
         * @return OrgCustomExchangeRatesHistoryRequestBuilder
         */
        public OrgCustomExchangeRatesHistoryRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate Start date for search (optional)
         * @return OrgCustomExchangeRatesHistoryRequestBuilder
         */
        public OrgCustomExchangeRatesHistoryRequestBuilder fromDate(LocalDate fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set toDate
         * @param toDate End date for search (optional)
         * @return OrgCustomExchangeRatesHistoryRequestBuilder
         */
        public OrgCustomExchangeRatesHistoryRequestBuilder toDate(LocalDate toDate) {
            this.toDate = toDate;
            return this;
        }
        
        /**
         * Build call for orgCustomExchangeRatesHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return orgCustomExchangeRatesHistoryCall(orgId, date, currency, fromDate, toDate, _callback);
        }


        /**
         * Execute orgCustomExchangeRatesHistory request
         * @return List&lt;ExchangeRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public List<ExchangeRate> execute() throws ApiException {
            ApiResponse<List<ExchangeRate>> localVarResp = orgCustomExchangeRatesHistoryWithHttpInfo(orgId, date, currency, fromDate, toDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute orgCustomExchangeRatesHistory request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ExchangeRate&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ExchangeRate>> executeWithHttpInfo() throws ApiException {
            return orgCustomExchangeRatesHistoryWithHttpInfo(orgId, date, currency, fromDate, toDate);
        }

        /**
         * Execute orgCustomExchangeRatesHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ExchangeRate>> _callback) throws ApiException {
            return orgCustomExchangeRatesHistoryAsync(orgId, date, currency, fromDate, toDate, _callback);
        }
    }

    /**
     * Return org custom exchange rates
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return OrgCustomExchangeRatesHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public OrgCustomExchangeRatesHistoryRequestBuilder orgCustomExchangeRatesHistory(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new OrgCustomExchangeRatesHistoryRequestBuilder(orgId, date);
    }
    private okhttp3.Call updateUsdExchangeRatesForDateCall(String orgId, LocalDate date, UpdateExchangeRate updateExchangeRate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateExchangeRate;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/exchange-rate/{date}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUsdExchangeRatesForDateValidateBeforeCall(String orgId, LocalDate date, UpdateExchangeRate updateExchangeRate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateUsdExchangeRatesForDate(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling updateUsdExchangeRatesForDate(Async)");
        }

        return updateUsdExchangeRatesForDateCall(orgId, date, updateExchangeRate, _callback);

    }


    private ApiResponse<Void> updateUsdExchangeRatesForDateWithHttpInfo(String orgId, LocalDate date, UpdateExchangeRate updateExchangeRate) throws ApiException {
        okhttp3.Call localVarCall = updateUsdExchangeRatesForDateValidateBeforeCall(orgId, date, updateExchangeRate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateUsdExchangeRatesForDateAsync(String orgId, LocalDate date, UpdateExchangeRate updateExchangeRate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUsdExchangeRatesForDateValidateBeforeCall(orgId, date, updateExchangeRate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateUsdExchangeRatesForDateRequestBuilder {
        private final String orgId;
        private final LocalDate date;
        private LocalDate date;
        private Map<String, Double> rates;

        private UpdateUsdExchangeRatesForDateRequestBuilder(String orgId, LocalDate date) {
            this.orgId = orgId;
            this.date = date;
        }

        /**
         * Set date
         * @param date date (optional)
         * @return UpdateUsdExchangeRatesForDateRequestBuilder
         */
        public UpdateUsdExchangeRatesForDateRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set rates
         * @param rates exchange rates, per currency - the multiplier to convert the base currency into the foreign currency (optional)
         * @return UpdateUsdExchangeRatesForDateRequestBuilder
         */
        public UpdateUsdExchangeRatesForDateRequestBuilder rates(Map<String, Double> rates) {
            this.rates = rates;
            return this;
        }
        
        /**
         * Build call for updateUsdExchangeRatesForDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateExchangeRate updateExchangeRate = buildBodyParams();
            return updateUsdExchangeRatesForDateCall(orgId, date, updateExchangeRate, _callback);
        }

        private UpdateExchangeRate buildBodyParams() {
            UpdateExchangeRate updateExchangeRate = new UpdateExchangeRate();
            updateExchangeRate.date(this.date);
            updateExchangeRate.rates(this.rates);
            return updateExchangeRate;
        }

        /**
         * Execute updateUsdExchangeRatesForDate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateExchangeRate updateExchangeRate = buildBodyParams();
            updateUsdExchangeRatesForDateWithHttpInfo(orgId, date, updateExchangeRate);
        }

        /**
         * Execute updateUsdExchangeRatesForDate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateExchangeRate updateExchangeRate = buildBodyParams();
            return updateUsdExchangeRatesForDateWithHttpInfo(orgId, date, updateExchangeRate);
        }

        /**
         * Execute updateUsdExchangeRatesForDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateExchangeRate updateExchangeRate = buildBodyParams();
            return updateUsdExchangeRatesForDateAsync(orgId, date, updateExchangeRate, _callback);
        }
    }

    /**
     * Update the USD-based exchange rates for a particular date. Must be the first of a month.
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param date Date to use (required)
     * @return UpdateUsdExchangeRatesForDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUsdExchangeRatesForDateRequestBuilder updateUsdExchangeRatesForDate(String orgId, LocalDate date) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new UpdateUsdExchangeRatesForDateRequestBuilder(orgId, date);
    }
}
