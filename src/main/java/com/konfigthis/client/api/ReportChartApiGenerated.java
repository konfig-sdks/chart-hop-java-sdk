/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateReportChart;
import com.konfigthis.client.model.ReportChart;
import com.konfigthis.client.model.ReportMetricsReturnType;
import com.konfigthis.client.model.ReportQuery;
import com.konfigthis.client.model.ResultsReportChart;
import com.konfigthis.client.model.UpdateReportChart;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportChartApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportChartApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportChartApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cloneChartCall(String orgId, String reportId, String chartId, String chartLabel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart/{chartId}/clone"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chartLabel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chartLabel", chartLabel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloneChartValidateBeforeCall(String orgId, String reportId, String chartId, String chartLabel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling cloneChart(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling cloneChart(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling cloneChart(Async)");
        }

        return cloneChartCall(orgId, reportId, chartId, chartLabel, _callback);

    }


    private ApiResponse<ReportChart> cloneChartWithHttpInfo(String orgId, String reportId, String chartId, String chartLabel) throws ApiException {
        okhttp3.Call localVarCall = cloneChartValidateBeforeCall(orgId, reportId, chartId, chartLabel, null);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cloneChartAsync(String orgId, String reportId, String chartId, String chartLabel, final ApiCallback<ReportChart> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloneChartValidateBeforeCall(orgId, reportId, chartId, chartLabel, _callback);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CloneChartRequestBuilder {
        private final String orgId;
        private final String reportId;
        private final String chartId;
        private String chartLabel;

        private CloneChartRequestBuilder(String orgId, String reportId, String chartId) {
            this.orgId = orgId;
            this.reportId = reportId;
            this.chartId = chartId;
        }

        /**
         * Set chartLabel
         * @param chartLabel New label (optional)
         * @return CloneChartRequestBuilder
         */
        public CloneChartRequestBuilder chartLabel(String chartLabel) {
            this.chartLabel = chartLabel;
            return this;
        }
        
        /**
         * Build call for cloneChart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cloneChartCall(orgId, reportId, chartId, chartLabel, _callback);
        }


        /**
         * Execute cloneChart request
         * @return ReportChart
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportChart execute() throws ApiException {
            ApiResponse<ReportChart> localVarResp = cloneChartWithHttpInfo(orgId, reportId, chartId, chartLabel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cloneChart request with HTTP info returned
         * @return ApiResponse&lt;ReportChart&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportChart> executeWithHttpInfo() throws ApiException {
            return cloneChartWithHttpInfo(orgId, reportId, chartId, chartLabel);
        }

        /**
         * Execute cloneChart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportChart> _callback) throws ApiException {
            return cloneChartAsync(orgId, reportId, chartId, chartLabel, _callback);
        }
    }

    /**
     * Clone a chart in a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @param chartId Chart id (required)
     * @return CloneChartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CloneChartRequestBuilder cloneChart(String orgId, String reportId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new CloneChartRequestBuilder(orgId, reportId, chartId);
    }
    private okhttp3.Call createNewChartCall(String orgId, String reportId, CreateReportChart createReportChart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReportChart;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewChartValidateBeforeCall(String orgId, String reportId, CreateReportChart createReportChart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewChart(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling createNewChart(Async)");
        }

        return createNewChartCall(orgId, reportId, createReportChart, _callback);

    }


    private ApiResponse<ReportChart> createNewChartWithHttpInfo(String orgId, String reportId, CreateReportChart createReportChart) throws ApiException {
        okhttp3.Call localVarCall = createNewChartValidateBeforeCall(orgId, reportId, createReportChart, null);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewChartAsync(String orgId, String reportId, CreateReportChart createReportChart, final ApiCallback<ReportChart> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewChartValidateBeforeCall(orgId, reportId, createReportChart, _callback);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewChartRequestBuilder {
        private final String label;
        private final String type;
        private final ReportQuery query;
        private final Integer sort;
        private final String orgId;
        private final String reportId;
        private String filter;
        private Boolean filterOverride;
        private Boolean isAdvancedQueryMode;

        private CreateNewChartRequestBuilder(String label, String type, ReportQuery query, Integer sort, String orgId, String reportId) {
            this.label = label;
            this.type = type;
            this.query = query;
            this.sort = sort;
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Set filter
         * @param filter filter that applies to this chart (optional)
         * @return CreateNewChartRequestBuilder
         */
        public CreateNewChartRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterOverride
         * @param filterOverride whether the chart filter overrides the global filter (optional)
         * @return CreateNewChartRequestBuilder
         */
        public CreateNewChartRequestBuilder filterOverride(Boolean filterOverride) {
            this.filterOverride = filterOverride;
            return this;
        }
        
        /**
         * Set isAdvancedQueryMode
         * @param isAdvancedQueryMode whether the chart configuration is using advanced mode (optional)
         * @return CreateNewChartRequestBuilder
         */
        public CreateNewChartRequestBuilder isAdvancedQueryMode(Boolean isAdvancedQueryMode) {
            this.isAdvancedQueryMode = isAdvancedQueryMode;
            return this;
        }
        
        /**
         * Build call for createNewChart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateReportChart createReportChart = buildBodyParams();
            return createNewChartCall(orgId, reportId, createReportChart, _callback);
        }

        private CreateReportChart buildBodyParams() {
            CreateReportChart createReportChart = new CreateReportChart();
            createReportChart.label(this.label);
            if (this.type != null)
            createReportChart.type(CreateReportChart.TypeEnum.fromValue(this.type));
            createReportChart.filter(this.filter);
            createReportChart.filterOverride(this.filterOverride);
            createReportChart.query(this.query);
            createReportChart.sort(this.sort);
            createReportChart.isAdvancedQueryMode(this.isAdvancedQueryMode);
            return createReportChart;
        }

        /**
         * Execute createNewChart request
         * @return ReportChart
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportChart execute() throws ApiException {
            CreateReportChart createReportChart = buildBodyParams();
            ApiResponse<ReportChart> localVarResp = createNewChartWithHttpInfo(orgId, reportId, createReportChart);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewChart request with HTTP info returned
         * @return ApiResponse&lt;ReportChart&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportChart> executeWithHttpInfo() throws ApiException {
            CreateReportChart createReportChart = buildBodyParams();
            return createNewChartWithHttpInfo(orgId, reportId, createReportChart);
        }

        /**
         * Execute createNewChart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportChart> _callback) throws ApiException {
            CreateReportChart createReportChart = buildBodyParams();
            return createNewChartAsync(orgId, reportId, createReportChart, _callback);
        }
    }

    /**
     * Create a new chart in a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return CreateNewChartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewChartRequestBuilder createNewChart(String label, String type, ReportQuery query, Integer sort, String orgId, String reportId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
        if (sort == null) throw new IllegalArgumentException("\"sort\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new CreateNewChartRequestBuilder(label, type, query, sort, orgId, reportId);
    }
    private okhttp3.Call exportDataCall(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart/{chartId}/data"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (projectHires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectHires", projectHires));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDataValidateBeforeCall(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportData(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling exportData(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling exportData(Async)");
        }

        return exportDataCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format, _callback);

    }


    private ApiResponse<Void> exportDataWithHttpInfo(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String format) throws ApiException {
        okhttp3.Call localVarCall = exportDataValidateBeforeCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call exportDataAsync(String orgId, String reportId, String chartId, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDataValidateBeforeCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ExportDataRequestBuilder {
        private final String orgId;
        private final String reportId;
        private final String chartId;
        private String startDate;
        private String endDate;
        private String interval;
        private String scenarioId;
        private Boolean projectHires;
        private String format;

        private ExportDataRequestBuilder(String orgId, String reportId, String chartId) {
            this.orgId = orgId;
            this.reportId = reportId;
            this.chartId = chartId;
        }

        /**
         * Set startDate
         * @param startDate Start date, inclusive (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date, exclusive (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Interval (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set projectHires
         * @param projectHires Project future hires (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder projectHires(Boolean projectHires) {
            this.projectHires = projectHires;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use html (optional)
         * @return ExportDataRequestBuilder
         */
        public ExportDataRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for exportData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exportDataCall(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format, _callback);
        }


        /**
         * Execute exportData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            exportDataWithHttpInfo(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format);
        }

        /**
         * Execute exportData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return exportDataWithHttpInfo(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format);
        }

        /**
         * Execute exportData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return exportDataAsync(orgId, reportId, chartId, startDate, endDate, interval, scenarioId, projectHires, format, _callback);
        }
    }

    /**
     * Export a particular chart&#39;s data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @param chartId Chart id (required)
     * @return ExportDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExportDataRequestBuilder exportData(String orgId, String reportId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new ExportDataRequestBuilder(orgId, reportId, chartId);
    }
    private okhttp3.Call getAllCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String orgId, String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAll(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getAll(Async)");
        }

        return getAllCall(orgId, reportId, _callback);

    }


    private ApiResponse<ResultsReportChart> getAllWithHttpInfo(String orgId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(orgId, reportId, null);
        Type localVarReturnType = new TypeToken<ResultsReportChart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String orgId, String reportId, final ApiCallback<ResultsReportChart> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(orgId, reportId, _callback);
        Type localVarReturnType = new TypeToken<ResultsReportChart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String orgId;
        private final String reportId;

        private GetAllRequestBuilder(String orgId, String reportId) {
            this.orgId = orgId;
            this.reportId = reportId;
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(orgId, reportId, _callback);
        }


        /**
         * Execute getAll request
         * @return ResultsReportChart
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsReportChart execute() throws ApiException {
            ApiResponse<ResultsReportChart> localVarResp = getAllWithHttpInfo(orgId, reportId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;ResultsReportChart&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsReportChart> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(orgId, reportId);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsReportChart> _callback) throws ApiException {
            return getAllAsync(orgId, reportId, _callback);
        }
    }

    /**
     * Return all of the charts for a particular report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll(String orgId, String reportId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        return new GetAllRequestBuilder(orgId, reportId);
    }
    private okhttp3.Call getByChartIdCall(String orgId, String chartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/chart/{chartId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByChartIdValidateBeforeCall(String orgId, String chartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByChartId(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling getByChartId(Async)");
        }

        return getByChartIdCall(orgId, chartId, _callback);

    }


    private ApiResponse<ReportChart> getByChartIdWithHttpInfo(String orgId, String chartId) throws ApiException {
        okhttp3.Call localVarCall = getByChartIdValidateBeforeCall(orgId, chartId, null);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByChartIdAsync(String orgId, String chartId, final ApiCallback<ReportChart> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByChartIdValidateBeforeCall(orgId, chartId, _callback);
        Type localVarReturnType = new TypeToken<ReportChart>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByChartIdRequestBuilder {
        private final String orgId;
        private final String chartId;

        private GetByChartIdRequestBuilder(String orgId, String chartId) {
            this.orgId = orgId;
            this.chartId = chartId;
        }

        /**
         * Build call for getByChartId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByChartIdCall(orgId, chartId, _callback);
        }


        /**
         * Execute getByChartId request
         * @return ReportChart
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportChart execute() throws ApiException {
            ApiResponse<ReportChart> localVarResp = getByChartIdWithHttpInfo(orgId, chartId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByChartId request with HTTP info returned
         * @return ApiResponse&lt;ReportChart&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportChart> executeWithHttpInfo() throws ApiException {
            return getByChartIdWithHttpInfo(orgId, chartId);
        }

        /**
         * Execute getByChartId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportChart> _callback) throws ApiException {
            return getByChartIdAsync(orgId, chartId, _callback);
        }
    }

    /**
     * Return a particular report chart by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param chartId Chart id (required)
     * @return GetByChartIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByChartIdRequestBuilder getByChartId(String orgId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new GetByChartIdRequestBuilder(orgId, chartId);
    }
    private okhttp3.Call queryUnderlyingDataInChartCall(String orgId, String reportId, String chartId, String providedQuery, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/{reportId}/chart/{chartId}/query"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (providedQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providedQuery", providedQuery));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (projectHires != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectHires", projectHires));
        }

        if (changeGroupingType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingType", changeGroupingType));
        }

        if (changeGroupingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changeGroupingId", changeGroupingId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryUnderlyingDataInChartValidateBeforeCall(String orgId, String reportId, String chartId, String providedQuery, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String changeGroupingType, String changeGroupingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling queryUnderlyingDataInChart(Async)");
        }

        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling queryUnderlyingDataInChart(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling queryUnderlyingDataInChart(Async)");
        }

        return queryUnderlyingDataInChartCall(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId, _callback);

    }


    private ApiResponse<ReportMetricsReturnType> queryUnderlyingDataInChartWithHttpInfo(String orgId, String reportId, String chartId, String providedQuery, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String changeGroupingType, String changeGroupingId) throws ApiException {
        okhttp3.Call localVarCall = queryUnderlyingDataInChartValidateBeforeCall(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId, null);
        Type localVarReturnType = new TypeToken<ReportMetricsReturnType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryUnderlyingDataInChartAsync(String orgId, String reportId, String chartId, String providedQuery, String startDate, String endDate, String interval, String scenarioId, Boolean projectHires, String changeGroupingType, String changeGroupingId, final ApiCallback<ReportMetricsReturnType> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryUnderlyingDataInChartValidateBeforeCall(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId, _callback);
        Type localVarReturnType = new TypeToken<ReportMetricsReturnType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryUnderlyingDataInChartRequestBuilder {
        private final String orgId;
        private final String reportId;
        private final String chartId;
        private String providedQuery;
        private String startDate;
        private String endDate;
        private String interval;
        private String scenarioId;
        private Boolean projectHires;
        private String changeGroupingType;
        private String changeGroupingId;

        private QueryUnderlyingDataInChartRequestBuilder(String orgId, String reportId, String chartId) {
            this.orgId = orgId;
            this.reportId = reportId;
            this.chartId = chartId;
        }

        /**
         * Set providedQuery
         * @param providedQuery Query to run (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder providedQuery(String providedQuery) {
            this.providedQuery = providedQuery;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start date, inclusive (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate End date, exclusive (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder endDate(String endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set interval
         * @param interval Interval (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder interval(String interval) {
            this.interval = interval;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set projectHires
         * @param projectHires Project future hires (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder projectHires(Boolean projectHires) {
            this.projectHires = projectHires;
            return this;
        }
        
        /**
         * Set changeGroupingType
         * @param changeGroupingType Type of change grouping (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder changeGroupingType(String changeGroupingType) {
            this.changeGroupingType = changeGroupingType;
            return this;
        }
        
        /**
         * Set changeGroupingId
         * @param changeGroupingId Change grouping id to query (null for primary) (optional)
         * @return QueryUnderlyingDataInChartRequestBuilder
         */
        public QueryUnderlyingDataInChartRequestBuilder changeGroupingId(String changeGroupingId) {
            this.changeGroupingId = changeGroupingId;
            return this;
        }
        
        /**
         * Build call for queryUnderlyingDataInChart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryUnderlyingDataInChartCall(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId, _callback);
        }


        /**
         * Execute queryUnderlyingDataInChart request
         * @return ReportMetricsReturnType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ReportMetricsReturnType execute() throws ApiException {
            ApiResponse<ReportMetricsReturnType> localVarResp = queryUnderlyingDataInChartWithHttpInfo(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryUnderlyingDataInChart request with HTTP info returned
         * @return ApiResponse&lt;ReportMetricsReturnType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReportMetricsReturnType> executeWithHttpInfo() throws ApiException {
            return queryUnderlyingDataInChartWithHttpInfo(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId);
        }

        /**
         * Execute queryUnderlyingDataInChart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReportMetricsReturnType> _callback) throws ApiException {
            return queryUnderlyingDataInChartAsync(orgId, reportId, chartId, providedQuery, startDate, endDate, interval, scenarioId, projectHires, changeGroupingType, changeGroupingId, _callback);
        }
    }

    /**
     * Query for the underlying data in a chart
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param reportId Report id (required)
     * @param chartId Chart id (required)
     * @return QueryUnderlyingDataInChartRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public QueryUnderlyingDataInChartRequestBuilder queryUnderlyingDataInChart(String orgId, String reportId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (reportId == null) throw new IllegalArgumentException("\"reportId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new QueryUnderlyingDataInChartRequestBuilder(orgId, reportId, chartId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String chartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/chart/{chartId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String chartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, chartId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String chartId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, chartId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String chartId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, chartId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String chartId;

        private RemoveByIdRequestBuilder(String orgId, String chartId) {
            this.orgId = orgId;
            this.chartId = chartId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, chartId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, chartId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, chartId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, chartId, _callback);
        }
    }

    /**
     * Delete a chart from a report
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param chartId Chart id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, chartId);
    }
    private okhttp3.Call updateExistingChartDataCall(String orgId, String chartId, UpdateReportChart updateReportChart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateReportChart;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/report/chart/{chartId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "chartId" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingChartDataValidateBeforeCall(String orgId, String chartId, UpdateReportChart updateReportChart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingChartData(Async)");
        }

        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling updateExistingChartData(Async)");
        }

        return updateExistingChartDataCall(orgId, chartId, updateReportChart, _callback);

    }


    private ApiResponse<Void> updateExistingChartDataWithHttpInfo(String orgId, String chartId, UpdateReportChart updateReportChart) throws ApiException {
        okhttp3.Call localVarCall = updateExistingChartDataValidateBeforeCall(orgId, chartId, updateReportChart, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingChartDataAsync(String orgId, String chartId, UpdateReportChart updateReportChart, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingChartDataValidateBeforeCall(orgId, chartId, updateReportChart, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingChartDataRequestBuilder {
        private final String orgId;
        private final String chartId;
        private String label;
        private String type;
        private String filter;
        private Boolean filterOverride;
        private ReportQuery query;
        private Integer sort;
        private Boolean isAdvancedQueryMode;

        private UpdateExistingChartDataRequestBuilder(String orgId, String chartId) {
            this.orgId = orgId;
            this.chartId = chartId;
        }

        /**
         * Set label
         * @param label chart label (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set type
         * @param type chart type (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set filter
         * @param filter filter that applies to this chart (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set filterOverride
         * @param filterOverride whether the chart filter overrides the global filter (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder filterOverride(Boolean filterOverride) {
            this.filterOverride = filterOverride;
            return this;
        }
        
        /**
         * Set query
         * @param query  (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder query(ReportQuery query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set sort
         * @param sort sort order (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set isAdvancedQueryMode
         * @param isAdvancedQueryMode whether the chart configuration is using advanced mode (optional)
         * @return UpdateExistingChartDataRequestBuilder
         */
        public UpdateExistingChartDataRequestBuilder isAdvancedQueryMode(Boolean isAdvancedQueryMode) {
            this.isAdvancedQueryMode = isAdvancedQueryMode;
            return this;
        }
        
        /**
         * Build call for updateExistingChartData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateReportChart updateReportChart = buildBodyParams();
            return updateExistingChartDataCall(orgId, chartId, updateReportChart, _callback);
        }

        private UpdateReportChart buildBodyParams() {
            UpdateReportChart updateReportChart = new UpdateReportChart();
            updateReportChart.label(this.label);
            if (this.type != null)
            updateReportChart.type(UpdateReportChart.TypeEnum.fromValue(this.type));
            updateReportChart.filter(this.filter);
            updateReportChart.filterOverride(this.filterOverride);
            updateReportChart.query(this.query);
            updateReportChart.sort(this.sort);
            updateReportChart.isAdvancedQueryMode(this.isAdvancedQueryMode);
            return updateReportChart;
        }

        /**
         * Execute updateExistingChartData request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateReportChart updateReportChart = buildBodyParams();
            updateExistingChartDataWithHttpInfo(orgId, chartId, updateReportChart);
        }

        /**
         * Execute updateExistingChartData request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateReportChart updateReportChart = buildBodyParams();
            return updateExistingChartDataWithHttpInfo(orgId, chartId, updateReportChart);
        }

        /**
         * Execute updateExistingChartData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateReportChart updateReportChart = buildBodyParams();
            return updateExistingChartDataAsync(orgId, chartId, updateReportChart, _callback);
        }
    }

    /**
     * Update an existing report chart
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param chartId Chart id (required)
     * @return UpdateExistingChartDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingChartDataRequestBuilder updateExistingChartData(String orgId, String chartId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (chartId == null) throw new IllegalArgumentException("\"chartId\" is required but got null");
            

        return new UpdateExistingChartDataRequestBuilder(orgId, chartId);
    }
}
