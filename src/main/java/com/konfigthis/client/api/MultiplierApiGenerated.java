/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateMultiplier;
import java.time.LocalDate;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.UpdateMultiplier;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MultiplierApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MultiplierApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MultiplierApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMultiplierCall(String orgId, LocalDate date, CreateMultiplier createMultiplier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMultiplier;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/multiplier"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMultiplierValidateBeforeCall(String orgId, LocalDate date, CreateMultiplier createMultiplier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewMultiplier(Async)");
        }

        return createNewMultiplierCall(orgId, date, createMultiplier, _callback);

    }


    private ApiResponse<Void> createNewMultiplierWithHttpInfo(String orgId, LocalDate date, CreateMultiplier createMultiplier) throws ApiException {
        okhttp3.Call localVarCall = createNewMultiplierValidateBeforeCall(orgId, date, createMultiplier, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewMultiplierAsync(String orgId, LocalDate date, CreateMultiplier createMultiplier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMultiplierValidateBeforeCall(orgId, date, createMultiplier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewMultiplierRequestBuilder {
        private final String label;
        private final Double value;
        private final String expr;
        private final String orgId;
        private String code;
        private String category;
        private LocalDate date;

        private CreateNewMultiplierRequestBuilder(String label, double value, String expr, String orgId) {
            this.label = label;
            this.value = value;
            this.expr = expr;
            this.orgId = orgId;
        }

        /**
         * Set code
         * @param code  (optional)
         * @return CreateNewMultiplierRequestBuilder
         */
        public CreateNewMultiplierRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set category
         * @param category tag to group multipliers together by (optional)
         * @return CreateNewMultiplierRequestBuilder
         */
        public CreateNewMultiplierRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of multiplier creation (optional)
         * @return CreateNewMultiplierRequestBuilder
         */
        public CreateNewMultiplierRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for createNewMultiplier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMultiplier createMultiplier = buildBodyParams();
            return createNewMultiplierCall(orgId, date, createMultiplier, _callback);
        }

        private CreateMultiplier buildBodyParams() {
            CreateMultiplier createMultiplier = new CreateMultiplier();
            createMultiplier.label(this.label);
            createMultiplier.code(this.code);
            createMultiplier.value(this.value);
            createMultiplier.expr(this.expr);
            createMultiplier.category(this.category);
            return createMultiplier;
        }

        /**
         * Execute createNewMultiplier request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateMultiplier createMultiplier = buildBodyParams();
            createNewMultiplierWithHttpInfo(orgId, date, createMultiplier);
        }

        /**
         * Execute createNewMultiplier request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateMultiplier createMultiplier = buildBodyParams();
            return createNewMultiplierWithHttpInfo(orgId, date, createMultiplier);
        }

        /**
         * Execute createNewMultiplier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateMultiplier createMultiplier = buildBodyParams();
            return createNewMultiplierAsync(orgId, date, createMultiplier, _callback);
        }
    }

    /**
     * Create a multiplier
     * 
     * @param orgId org identifier (either id or slug) (required)
     * @return CreateNewMultiplierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMultiplierRequestBuilder createNewMultiplier(String label, double value, String expr, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        
        if (expr == null) throw new IllegalArgumentException("\"expr\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewMultiplierRequestBuilder(label, value, expr, orgId);
    }
    private okhttp3.Call deleteMultiplierByIdCall(String orgId, String multiplierId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/multiplier/{multiplierId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "multiplierId" + "}", localVarApiClient.escapeString(multiplierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMultiplierByIdValidateBeforeCall(String orgId, String multiplierId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteMultiplierById(Async)");
        }

        // verify the required parameter 'multiplierId' is set
        if (multiplierId == null) {
            throw new ApiException("Missing the required parameter 'multiplierId' when calling deleteMultiplierById(Async)");
        }

        return deleteMultiplierByIdCall(orgId, multiplierId, date, _callback);

    }


    private ApiResponse<Void> deleteMultiplierByIdWithHttpInfo(String orgId, String multiplierId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = deleteMultiplierByIdValidateBeforeCall(orgId, multiplierId, date, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteMultiplierByIdAsync(String orgId, String multiplierId, LocalDate date, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMultiplierByIdValidateBeforeCall(orgId, multiplierId, date, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteMultiplierByIdRequestBuilder {
        private final String orgId;
        private final String multiplierId;
        private LocalDate date;

        private DeleteMultiplierByIdRequestBuilder(String orgId, String multiplierId) {
            this.orgId = orgId;
            this.multiplierId = multiplierId;
        }

        /**
         * Set date
         * @param date Effective date of group update (optional)
         * @return DeleteMultiplierByIdRequestBuilder
         */
        public DeleteMultiplierByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for deleteMultiplierById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteMultiplierByIdCall(orgId, multiplierId, date, _callback);
        }


        /**
         * Execute deleteMultiplierById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteMultiplierByIdWithHttpInfo(orgId, multiplierId, date);
        }

        /**
         * Execute deleteMultiplierById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteMultiplierByIdWithHttpInfo(orgId, multiplierId, date);
        }

        /**
         * Execute deleteMultiplierById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteMultiplierByIdAsync(orgId, multiplierId, date, _callback);
        }
    }

    /**
     * Delete a multiplier
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param multiplierId Multiplier id (required)
     * @return DeleteMultiplierByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteMultiplierByIdRequestBuilder deleteMultiplierById(String orgId, String multiplierId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (multiplierId == null) throw new IllegalArgumentException("\"multiplierId\" is required but got null");
            

        return new DeleteMultiplierByIdRequestBuilder(orgId, multiplierId);
    }
    private okhttp3.Call findCompBandMultipliersInOrgCall(String orgId, String multiplierId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/multiplier/{multiplierId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "multiplierId" + "}", localVarApiClient.escapeString(multiplierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompBandMultipliersInOrgValidateBeforeCall(String orgId, String multiplierId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompBandMultipliersInOrg(Async)");
        }

        // verify the required parameter 'multiplierId' is set
        if (multiplierId == null) {
            throw new ApiException("Missing the required parameter 'multiplierId' when calling findCompBandMultipliersInOrg(Async)");
        }

        return findCompBandMultipliersInOrgCall(orgId, multiplierId, date, _callback);

    }


    private ApiResponse<ResultsData> findCompBandMultipliersInOrgWithHttpInfo(String orgId, String multiplierId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = findCompBandMultipliersInOrgValidateBeforeCall(orgId, multiplierId, date, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompBandMultipliersInOrgAsync(String orgId, String multiplierId, LocalDate date, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompBandMultipliersInOrgValidateBeforeCall(orgId, multiplierId, date, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompBandMultipliersInOrgRequestBuilder {
        private final String orgId;
        private final String multiplierId;
        private LocalDate date;

        private FindCompBandMultipliersInOrgRequestBuilder(String orgId, String multiplierId) {
            this.orgId = orgId;
            this.multiplierId = multiplierId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindCompBandMultipliersInOrgRequestBuilder
         */
        public FindCompBandMultipliersInOrgRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for findCompBandMultipliersInOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompBandMultipliersInOrgCall(orgId, multiplierId, date, _callback);
        }


        /**
         * Execute findCompBandMultipliersInOrg request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findCompBandMultipliersInOrgWithHttpInfo(orgId, multiplierId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompBandMultipliersInOrg request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findCompBandMultipliersInOrgWithHttpInfo(orgId, multiplierId, date);
        }

        /**
         * Execute findCompBandMultipliersInOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findCompBandMultipliersInOrgAsync(orgId, multiplierId, date, _callback);
        }
    }

    /**
     * Return a particular comp band multiplier by id on an effective date
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param multiplierId Comp band multiplier id (required)
     * @return FindCompBandMultipliersInOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompBandMultipliersInOrgRequestBuilder findCompBandMultipliersInOrg(String orgId, String multiplierId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (multiplierId == null) throw new IllegalArgumentException("\"multiplierId\" is required but got null");
            

        return new FindCompBandMultipliersInOrgRequestBuilder(orgId, multiplierId);
    }
    private okhttp3.Call findCompBandMultipliersInOrg_0Call(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/multiplier"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findCompBandMultipliersInOrg_0ValidateBeforeCall(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findCompBandMultipliersInOrg_0(Async)");
        }

        return findCompBandMultipliersInOrg_0Call(orgId, date, from, limit, includeDeleted, _callback);

    }


    private ApiResponse<ResultsData> findCompBandMultipliersInOrg_0WithHttpInfo(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = findCompBandMultipliersInOrg_0ValidateBeforeCall(orgId, date, from, limit, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findCompBandMultipliersInOrg_0Async(String orgId, LocalDate date, String from, Integer limit, Boolean includeDeleted, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = findCompBandMultipliersInOrg_0ValidateBeforeCall(orgId, date, from, limit, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindCompBandMultipliersInOrg0RequestBuilder {
        private final String orgId;
        private LocalDate date;
        private String from;
        private Integer limit;
        private Boolean includeDeleted;

        private FindCompBandMultipliersInOrg0RequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return FindCompBandMultipliersInOrg0RequestBuilder
         */
        public FindCompBandMultipliersInOrg0RequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set from
         * @param from Multiplier id to start paginating from (optional)
         * @return FindCompBandMultipliersInOrg0RequestBuilder
         */
        public FindCompBandMultipliersInOrg0RequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return FindCompBandMultipliersInOrg0RequestBuilder
         */
        public FindCompBandMultipliersInOrg0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted Include deleted multipliers (optional)
         * @return FindCompBandMultipliersInOrg0RequestBuilder
         */
        public FindCompBandMultipliersInOrg0RequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for findCompBandMultipliersInOrg_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findCompBandMultipliersInOrg_0Call(orgId, date, from, limit, includeDeleted, _callback);
        }


        /**
         * Execute findCompBandMultipliersInOrg_0 request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = findCompBandMultipliersInOrg_0WithHttpInfo(orgId, date, from, limit, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findCompBandMultipliersInOrg_0 request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return findCompBandMultipliersInOrg_0WithHttpInfo(orgId, date, from, limit, includeDeleted);
        }

        /**
         * Execute findCompBandMultipliersInOrg_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return findCompBandMultipliersInOrg_0Async(orgId, date, from, limit, includeDeleted, _callback);
        }
    }

    /**
     * Find comp band multipliers in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return FindCompBandMultipliersInOrg0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindCompBandMultipliersInOrg0RequestBuilder findCompBandMultipliersInOrg_0(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new FindCompBandMultipliersInOrg0RequestBuilder(orgId);
    }
    private okhttp3.Call updateMultiplerByIdCall(String orgId, String multiplierId, LocalDate date, UpdateMultiplier updateMultiplier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMultiplier;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/multiplier/{multiplierId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "multiplierId" + "}", localVarApiClient.escapeString(multiplierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMultiplerByIdValidateBeforeCall(String orgId, String multiplierId, LocalDate date, UpdateMultiplier updateMultiplier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateMultiplerById(Async)");
        }

        // verify the required parameter 'multiplierId' is set
        if (multiplierId == null) {
            throw new ApiException("Missing the required parameter 'multiplierId' when calling updateMultiplerById(Async)");
        }

        return updateMultiplerByIdCall(orgId, multiplierId, date, updateMultiplier, _callback);

    }


    private ApiResponse<Void> updateMultiplerByIdWithHttpInfo(String orgId, String multiplierId, LocalDate date, UpdateMultiplier updateMultiplier) throws ApiException {
        okhttp3.Call localVarCall = updateMultiplerByIdValidateBeforeCall(orgId, multiplierId, date, updateMultiplier, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateMultiplerByIdAsync(String orgId, String multiplierId, LocalDate date, UpdateMultiplier updateMultiplier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMultiplerByIdValidateBeforeCall(orgId, multiplierId, date, updateMultiplier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateMultiplerByIdRequestBuilder {
        private final String orgId;
        private final String multiplierId;
        private String label;
        private String code;
        private Double value;
        private String expr;
        private String category;
        private LocalDate date;

        private UpdateMultiplerByIdRequestBuilder(String orgId, String multiplierId) {
            this.orgId = orgId;
            this.multiplierId = multiplierId;
        }

        /**
         * Set label
         * @param label human-readable name of multiplier (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set code
         * @param code  (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set value
         * @param value amount to multiply the initial value by (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder value(Double value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set expr
         * @param expr calculated expression to match against the job (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder expr(String expr) {
            this.expr = expr;
            return this;
        }
        
        /**
         * Set category
         * @param category tag to group multipliers together by (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder category(String category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set date
         * @param date Effective date of multiplier update (optional)
         * @return UpdateMultiplerByIdRequestBuilder
         */
        public UpdateMultiplerByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for updateMultiplerById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateMultiplier updateMultiplier = buildBodyParams();
            return updateMultiplerByIdCall(orgId, multiplierId, date, updateMultiplier, _callback);
        }

        private UpdateMultiplier buildBodyParams() {
            UpdateMultiplier updateMultiplier = new UpdateMultiplier();
            updateMultiplier.label(this.label);
            updateMultiplier.code(this.code);
            updateMultiplier.value(this.value);
            updateMultiplier.expr(this.expr);
            updateMultiplier.category(this.category);
            return updateMultiplier;
        }

        /**
         * Execute updateMultiplerById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateMultiplier updateMultiplier = buildBodyParams();
            updateMultiplerByIdWithHttpInfo(orgId, multiplierId, date, updateMultiplier);
        }

        /**
         * Execute updateMultiplerById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateMultiplier updateMultiplier = buildBodyParams();
            return updateMultiplerByIdWithHttpInfo(orgId, multiplierId, date, updateMultiplier);
        }

        /**
         * Execute updateMultiplerById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateMultiplier updateMultiplier = buildBodyParams();
            return updateMultiplerByIdAsync(orgId, multiplierId, date, updateMultiplier, _callback);
        }
    }

    /**
     * Update a multiplier
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param multiplierId Multiplier id (required)
     * @return UpdateMultiplerByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateMultiplerByIdRequestBuilder updateMultiplerById(String orgId, String multiplierId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (multiplierId == null) throw new IllegalArgumentException("\"multiplierId\" is required but got null");
            

        return new UpdateMultiplerByIdRequestBuilder(orgId, multiplierId);
    }
}
