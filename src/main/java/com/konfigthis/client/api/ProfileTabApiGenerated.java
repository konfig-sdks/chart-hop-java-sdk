/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Block;
import com.konfigthis.client.model.CreateProfileTab;
import java.time.LocalDate;
import com.konfigthis.client.model.ProfileTab;
import com.konfigthis.client.model.ProfileTabSummary;
import com.konfigthis.client.model.ResultsProfileTab;
import com.konfigthis.client.model.ResultsProfileTabSummary;
import com.konfigthis.client.model.UpdateProfileTab;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProfileTabApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProfileTabApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ProfileTabApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTabCall(String orgId, CreateProfileTab createProfileTab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProfileTab;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTabValidateBeforeCall(String orgId, CreateProfileTab createProfileTab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewTab(Async)");
        }

        return createNewTabCall(orgId, createProfileTab, _callback);

    }


    private ApiResponse<ProfileTab> createNewTabWithHttpInfo(String orgId, CreateProfileTab createProfileTab) throws ApiException {
        okhttp3.Call localVarCall = createNewTabValidateBeforeCall(orgId, createProfileTab, null);
        Type localVarReturnType = new TypeToken<ProfileTab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTabAsync(String orgId, CreateProfileTab createProfileTab, final ApiCallback<ProfileTab> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTabValidateBeforeCall(orgId, createProfileTab, _callback);
        Type localVarReturnType = new TypeToken<ProfileTab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTabRequestBuilder {
        private final String label;
        private final List<Block> blocks;
        private final String status;
        private final Integer sort;
        private final String orgId;
        private String targetFilter;
        private String readFilter;

        private CreateNewTabRequestBuilder(String label, List<Block> blocks, String status, Integer sort, String orgId) {
            this.label = label;
            this.blocks = blocks;
            this.status = status;
            this.sort = sort;
            this.orgId = orgId;
        }

        /**
         * Set targetFilter
         * @param targetFilter filter that controls on which profiles this tab will appear (optional)
         * @return CreateNewTabRequestBuilder
         */
        public CreateNewTabRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set readFilter
         * @param readFilter filter that controls which viewers can read this profile tab. The profileTab:read permission, if present, overrides this filter (optional)
         * @return CreateNewTabRequestBuilder
         */
        public CreateNewTabRequestBuilder readFilter(String readFilter) {
            this.readFilter = readFilter;
            return this;
        }
        
        /**
         * Build call for createNewTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateProfileTab createProfileTab = buildBodyParams();
            return createNewTabCall(orgId, createProfileTab, _callback);
        }

        private CreateProfileTab buildBodyParams() {
            CreateProfileTab createProfileTab = new CreateProfileTab();
            createProfileTab.label(this.label);
            createProfileTab.blocks(this.blocks);
            if (this.status != null)
            createProfileTab.status(CreateProfileTab.StatusEnum.fromValue(this.status));
            createProfileTab.targetFilter(this.targetFilter);
            createProfileTab.readFilter(this.readFilter);
            createProfileTab.sort(this.sort);
            return createProfileTab;
        }

        /**
         * Execute createNewTab request
         * @return ProfileTab
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ProfileTab execute() throws ApiException {
            CreateProfileTab createProfileTab = buildBodyParams();
            ApiResponse<ProfileTab> localVarResp = createNewTabWithHttpInfo(orgId, createProfileTab);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTab request with HTTP info returned
         * @return ApiResponse&lt;ProfileTab&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileTab> executeWithHttpInfo() throws ApiException {
            CreateProfileTab createProfileTab = buildBodyParams();
            return createNewTabWithHttpInfo(orgId, createProfileTab);
        }

        /**
         * Execute createNewTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileTab> _callback) throws ApiException {
            CreateProfileTab createProfileTab = buildBodyParams();
            return createNewTabAsync(orgId, createProfileTab, _callback);
        }
    }

    /**
     * Create a profile tab
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTabRequestBuilder createNewTab(String label, List<Block> blocks, String status, Integer sort, String orgId) throws IllegalArgumentException {
        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (blocks == null) throw new IllegalArgumentException("\"blocks\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (sort == null) throw new IllegalArgumentException("\"sort\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewTabRequestBuilder(label, blocks, status, sort, orgId);
    }
    private okhttp3.Call deleteProfileTabCall(String orgId, String profileTabId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/{profileTabId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "profileTabId" + "}", localVarApiClient.escapeString(profileTabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProfileTabValidateBeforeCall(String orgId, String profileTabId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteProfileTab(Async)");
        }

        // verify the required parameter 'profileTabId' is set
        if (profileTabId == null) {
            throw new ApiException("Missing the required parameter 'profileTabId' when calling deleteProfileTab(Async)");
        }

        return deleteProfileTabCall(orgId, profileTabId, _callback);

    }


    private ApiResponse<Void> deleteProfileTabWithHttpInfo(String orgId, String profileTabId) throws ApiException {
        okhttp3.Call localVarCall = deleteProfileTabValidateBeforeCall(orgId, profileTabId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteProfileTabAsync(String orgId, String profileTabId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProfileTabValidateBeforeCall(orgId, profileTabId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteProfileTabRequestBuilder {
        private final String orgId;
        private final String profileTabId;

        private DeleteProfileTabRequestBuilder(String orgId, String profileTabId) {
            this.orgId = orgId;
            this.profileTabId = profileTabId;
        }

        /**
         * Build call for deleteProfileTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteProfileTabCall(orgId, profileTabId, _callback);
        }


        /**
         * Execute deleteProfileTab request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteProfileTabWithHttpInfo(orgId, profileTabId);
        }

        /**
         * Execute deleteProfileTab request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteProfileTabWithHttpInfo(orgId, profileTabId);
        }

        /**
         * Execute deleteProfileTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteProfileTabAsync(orgId, profileTabId, _callback);
        }
    }

    /**
     * Delete a profile tab
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param profileTabId Profile tab id (required)
     * @return DeleteProfileTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteProfileTabRequestBuilder deleteProfileTab(String orgId, String profileTabId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (profileTabId == null) throw new IllegalArgumentException("\"profileTabId\" is required but got null");
            

        return new DeleteProfileTabRequestBuilder(orgId, profileTabId);
    }
    private okhttp3.Call findTabsForJobCall(String orgId, String jobId, LocalDate date, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/job/{jobId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTabsForJobValidateBeforeCall(String orgId, String jobId, LocalDate date, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findTabsForJob(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling findTabsForJob(Async)");
        }

        return findTabsForJobCall(orgId, jobId, date, fields, _callback);

    }


    private ApiResponse<ResultsProfileTabSummary> findTabsForJobWithHttpInfo(String orgId, String jobId, LocalDate date, String fields) throws ApiException {
        okhttp3.Call localVarCall = findTabsForJobValidateBeforeCall(orgId, jobId, date, fields, null);
        Type localVarReturnType = new TypeToken<ResultsProfileTabSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findTabsForJobAsync(String orgId, String jobId, LocalDate date, String fields, final ApiCallback<ResultsProfileTabSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTabsForJobValidateBeforeCall(orgId, jobId, date, fields, _callback);
        Type localVarReturnType = new TypeToken<ResultsProfileTabSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindTabsForJobRequestBuilder {
        private final String orgId;
        private final String jobId;
        private LocalDate date;
        private String fields;

        private FindTabsForJobRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Set date
         * @param date Date (optional)
         * @return FindTabsForJobRequestBuilder
         */
        public FindTabsForJobRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Return profile tabs that contain particular fields (comma-separated) (optional)
         * @return FindTabsForJobRequestBuilder
         */
        public FindTabsForJobRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for findTabsForJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findTabsForJobCall(orgId, jobId, date, fields, _callback);
        }


        /**
         * Execute findTabsForJob request
         * @return ResultsProfileTabSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsProfileTabSummary execute() throws ApiException {
            ApiResponse<ResultsProfileTabSummary> localVarResp = findTabsForJobWithHttpInfo(orgId, jobId, date, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findTabsForJob request with HTTP info returned
         * @return ApiResponse&lt;ResultsProfileTabSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsProfileTabSummary> executeWithHttpInfo() throws ApiException {
            return findTabsForJobWithHttpInfo(orgId, jobId, date, fields);
        }

        /**
         * Execute findTabsForJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsProfileTabSummary> _callback) throws ApiException {
            return findTabsForJobAsync(orgId, jobId, date, fields, _callback);
        }
    }

    /**
     * Return all profile tabs applicable to a particular job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return FindTabsForJobRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindTabsForJobRequestBuilder findTabsForJob(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new FindTabsForJobRequestBuilder(orgId, jobId);
    }
    private okhttp3.Call getByOrgIdAndTabIdCall(String orgId, String profileTabId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/{profileTabId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "profileTabId" + "}", localVarApiClient.escapeString(profileTabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByOrgIdAndTabIdValidateBeforeCall(String orgId, String profileTabId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByOrgIdAndTabId(Async)");
        }

        // verify the required parameter 'profileTabId' is set
        if (profileTabId == null) {
            throw new ApiException("Missing the required parameter 'profileTabId' when calling getByOrgIdAndTabId(Async)");
        }

        return getByOrgIdAndTabIdCall(orgId, profileTabId, _callback);

    }


    private ApiResponse<ProfileTab> getByOrgIdAndTabIdWithHttpInfo(String orgId, String profileTabId) throws ApiException {
        okhttp3.Call localVarCall = getByOrgIdAndTabIdValidateBeforeCall(orgId, profileTabId, null);
        Type localVarReturnType = new TypeToken<ProfileTab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByOrgIdAndTabIdAsync(String orgId, String profileTabId, final ApiCallback<ProfileTab> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByOrgIdAndTabIdValidateBeforeCall(orgId, profileTabId, _callback);
        Type localVarReturnType = new TypeToken<ProfileTab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByOrgIdAndTabIdRequestBuilder {
        private final String orgId;
        private final String profileTabId;

        private GetByOrgIdAndTabIdRequestBuilder(String orgId, String profileTabId) {
            this.orgId = orgId;
            this.profileTabId = profileTabId;
        }

        /**
         * Build call for getByOrgIdAndTabId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByOrgIdAndTabIdCall(orgId, profileTabId, _callback);
        }


        /**
         * Execute getByOrgIdAndTabId request
         * @return ProfileTab
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ProfileTab execute() throws ApiException {
            ApiResponse<ProfileTab> localVarResp = getByOrgIdAndTabIdWithHttpInfo(orgId, profileTabId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByOrgIdAndTabId request with HTTP info returned
         * @return ApiResponse&lt;ProfileTab&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileTab> executeWithHttpInfo() throws ApiException {
            return getByOrgIdAndTabIdWithHttpInfo(orgId, profileTabId);
        }

        /**
         * Execute getByOrgIdAndTabId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileTab> _callback) throws ApiException {
            return getByOrgIdAndTabIdAsync(orgId, profileTabId, _callback);
        }
    }

    /**
     * Return a particular profile tab by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param profileTabId Content id (required)
     * @return GetByOrgIdAndTabIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByOrgIdAndTabIdRequestBuilder getByOrgIdAndTabId(String orgId, String profileTabId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (profileTabId == null) throw new IllegalArgumentException("\"profileTabId\" is required but got null");
            

        return new GetByOrgIdAndTabIdRequestBuilder(orgId, profileTabId);
    }
    private okhttp3.Call getEvaluateProfileTabContentCall(String orgId, String jobId, String tabId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/job/{jobId}/profile-tab/{tabId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "tabId" + "}", localVarApiClient.escapeString(tabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEvaluateProfileTabContentValidateBeforeCall(String orgId, String jobId, String tabId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getEvaluateProfileTabContent(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getEvaluateProfileTabContent(Async)");
        }

        // verify the required parameter 'tabId' is set
        if (tabId == null) {
            throw new ApiException("Missing the required parameter 'tabId' when calling getEvaluateProfileTabContent(Async)");
        }

        return getEvaluateProfileTabContentCall(orgId, jobId, tabId, date, _callback);

    }


    private ApiResponse<ProfileTabSummary> getEvaluateProfileTabContentWithHttpInfo(String orgId, String jobId, String tabId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getEvaluateProfileTabContentValidateBeforeCall(orgId, jobId, tabId, date, null);
        Type localVarReturnType = new TypeToken<ProfileTabSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEvaluateProfileTabContentAsync(String orgId, String jobId, String tabId, LocalDate date, final ApiCallback<ProfileTabSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEvaluateProfileTabContentValidateBeforeCall(orgId, jobId, tabId, date, _callback);
        Type localVarReturnType = new TypeToken<ProfileTabSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEvaluateProfileTabContentRequestBuilder {
        private final String orgId;
        private final String jobId;
        private final String tabId;
        private LocalDate date;

        private GetEvaluateProfileTabContentRequestBuilder(String orgId, String jobId, String tabId) {
            this.orgId = orgId;
            this.jobId = jobId;
            this.tabId = tabId;
        }

        /**
         * Set date
         * @param date Date (optional)
         * @return GetEvaluateProfileTabContentRequestBuilder
         */
        public GetEvaluateProfileTabContentRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for getEvaluateProfileTabContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEvaluateProfileTabContentCall(orgId, jobId, tabId, date, _callback);
        }


        /**
         * Execute getEvaluateProfileTabContent request
         * @return ProfileTabSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ProfileTabSummary execute() throws ApiException {
            ApiResponse<ProfileTabSummary> localVarResp = getEvaluateProfileTabContentWithHttpInfo(orgId, jobId, tabId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEvaluateProfileTabContent request with HTTP info returned
         * @return ApiResponse&lt;ProfileTabSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ProfileTabSummary> executeWithHttpInfo() throws ApiException {
            return getEvaluateProfileTabContentWithHttpInfo(orgId, jobId, tabId, date);
        }

        /**
         * Execute getEvaluateProfileTabContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ProfileTabSummary> _callback) throws ApiException {
            return getEvaluateProfileTabContentAsync(orgId, jobId, tabId, date, _callback);
        }
    }

    /**
     * Fetch and evaluate the content of a particular profile tab id, relative to a particular job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @param tabId Profile tab id (required)
     * @return GetEvaluateProfileTabContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetEvaluateProfileTabContentRequestBuilder getEvaluateProfileTabContent(String orgId, String jobId, String tabId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        if (tabId == null) throw new IllegalArgumentException("\"tabId\" is required but got null");
            

        return new GetEvaluateProfileTabContentRequestBuilder(orgId, jobId, tabId);
    }
    private okhttp3.Call getProfileTabsCall(String orgId, String personId, LocalDate date, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/person/{personId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileTabsValidateBeforeCall(String orgId, String personId, LocalDate date, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getProfileTabs(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getProfileTabs(Async)");
        }

        return getProfileTabsCall(orgId, personId, date, fields, _callback);

    }


    private ApiResponse<ResultsProfileTabSummary> getProfileTabsWithHttpInfo(String orgId, String personId, LocalDate date, String fields) throws ApiException {
        okhttp3.Call localVarCall = getProfileTabsValidateBeforeCall(orgId, personId, date, fields, null);
        Type localVarReturnType = new TypeToken<ResultsProfileTabSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileTabsAsync(String orgId, String personId, LocalDate date, String fields, final ApiCallback<ResultsProfileTabSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileTabsValidateBeforeCall(orgId, personId, date, fields, _callback);
        Type localVarReturnType = new TypeToken<ResultsProfileTabSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileTabsRequestBuilder {
        private final String orgId;
        private final String personId;
        private LocalDate date;
        private String fields;

        private GetProfileTabsRequestBuilder(String orgId, String personId) {
            this.orgId = orgId;
            this.personId = personId;
        }

        /**
         * Set date
         * @param date Date (optional)
         * @return GetProfileTabsRequestBuilder
         */
        public GetProfileTabsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Return profile tabs that contain particular fields (comma-separated) (optional)
         * @return GetProfileTabsRequestBuilder
         */
        public GetProfileTabsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Build call for getProfileTabs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileTabsCall(orgId, personId, date, fields, _callback);
        }


        /**
         * Execute getProfileTabs request
         * @return ResultsProfileTabSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsProfileTabSummary execute() throws ApiException {
            ApiResponse<ResultsProfileTabSummary> localVarResp = getProfileTabsWithHttpInfo(orgId, personId, date, fields);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileTabs request with HTTP info returned
         * @return ApiResponse&lt;ResultsProfileTabSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsProfileTabSummary> executeWithHttpInfo() throws ApiException {
            return getProfileTabsWithHttpInfo(orgId, personId, date, fields);
        }

        /**
         * Execute getProfileTabs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsProfileTabSummary> _callback) throws ApiException {
            return getProfileTabsAsync(orgId, personId, date, fields, _callback);
        }
    }

    /**
     * Return all profile tabs applicable to a particular person
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param personId Person id (required)
     * @return GetProfileTabsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetProfileTabsRequestBuilder getProfileTabs(String orgId, String personId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetProfileTabsRequestBuilder(orgId, personId);
    }
    private okhttp3.Call listProfileTabsCall(String orgId, String status, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProfileTabsValidateBeforeCall(String orgId, String status, String from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listProfileTabs(Async)");
        }

        return listProfileTabsCall(orgId, status, from, limit, _callback);

    }


    private ApiResponse<ResultsProfileTab> listProfileTabsWithHttpInfo(String orgId, String status, String from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listProfileTabsValidateBeforeCall(orgId, status, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsProfileTab>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listProfileTabsAsync(String orgId, String status, String from, Integer limit, final ApiCallback<ResultsProfileTab> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProfileTabsValidateBeforeCall(orgId, status, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsProfileTab>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListProfileTabsRequestBuilder {
        private final String orgId;
        private String status;
        private String from;
        private Integer limit;

        private ListProfileTabsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set status
         * @param status Status to filter by (optional)
         * @return ListProfileTabsRequestBuilder
         */
        public ListProfileTabsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set from
         * @param from Content id to start paginating from (optional)
         * @return ListProfileTabsRequestBuilder
         */
        public ListProfileTabsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListProfileTabsRequestBuilder
         */
        public ListProfileTabsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listProfileTabs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listProfileTabsCall(orgId, status, from, limit, _callback);
        }


        /**
         * Execute listProfileTabs request
         * @return ResultsProfileTab
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsProfileTab execute() throws ApiException {
            ApiResponse<ResultsProfileTab> localVarResp = listProfileTabsWithHttpInfo(orgId, status, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listProfileTabs request with HTTP info returned
         * @return ApiResponse&lt;ResultsProfileTab&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsProfileTab> executeWithHttpInfo() throws ApiException {
            return listProfileTabsWithHttpInfo(orgId, status, from, limit);
        }

        /**
         * Execute listProfileTabs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsProfileTab> _callback) throws ApiException {
            return listProfileTabsAsync(orgId, status, from, limit, _callback);
        }
    }

    /**
     * Return all profile tabs in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ListProfileTabsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListProfileTabsRequestBuilder listProfileTabs(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListProfileTabsRequestBuilder(orgId);
    }
    private okhttp3.Call updateExistingTabCall(String orgId, String profileTabId, UpdateProfileTab updateProfileTab, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProfileTab;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/profile-tab/{profileTabId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "profileTabId" + "}", localVarApiClient.escapeString(profileTabId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingTabValidateBeforeCall(String orgId, String profileTabId, UpdateProfileTab updateProfileTab, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingTab(Async)");
        }

        // verify the required parameter 'profileTabId' is set
        if (profileTabId == null) {
            throw new ApiException("Missing the required parameter 'profileTabId' when calling updateExistingTab(Async)");
        }

        return updateExistingTabCall(orgId, profileTabId, updateProfileTab, _callback);

    }


    private ApiResponse<Void> updateExistingTabWithHttpInfo(String orgId, String profileTabId, UpdateProfileTab updateProfileTab) throws ApiException {
        okhttp3.Call localVarCall = updateExistingTabValidateBeforeCall(orgId, profileTabId, updateProfileTab, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingTabAsync(String orgId, String profileTabId, UpdateProfileTab updateProfileTab, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingTabValidateBeforeCall(orgId, profileTabId, updateProfileTab, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingTabRequestBuilder {
        private final String orgId;
        private final String profileTabId;
        private String label;
        private List<Block> blocks;
        private String status;
        private String targetFilter;
        private String readFilter;
        private Integer sort;

        private UpdateExistingTabRequestBuilder(String orgId, String profileTabId) {
            this.orgId = orgId;
            this.profileTabId = profileTabId;
        }

        /**
         * Set label
         * @param label human-readable name of profile tab (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set blocks
         * @param blocks ordered list of blocks contained by profile tab (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder blocks(List<Block> blocks) {
            this.blocks = blocks;
            return this;
        }
        
        /**
         * Set status
         * @param status status of the profile tab (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set targetFilter
         * @param targetFilter filter that controls on which profiles this tab will appear (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder targetFilter(String targetFilter) {
            this.targetFilter = targetFilter;
            return this;
        }
        
        /**
         * Set readFilter
         * @param readFilter filter that controls which viewers can read this profile tab. The profileTab:read permission, if present, overrides this filter (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder readFilter(String readFilter) {
            this.readFilter = readFilter;
            return this;
        }
        
        /**
         * Set sort
         * @param sort sort order (optional)
         * @return UpdateExistingTabRequestBuilder
         */
        public UpdateExistingTabRequestBuilder sort(Integer sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Build call for updateExistingTab
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateProfileTab updateProfileTab = buildBodyParams();
            return updateExistingTabCall(orgId, profileTabId, updateProfileTab, _callback);
        }

        private UpdateProfileTab buildBodyParams() {
            UpdateProfileTab updateProfileTab = new UpdateProfileTab();
            updateProfileTab.label(this.label);
            updateProfileTab.blocks(this.blocks);
            if (this.status != null)
            updateProfileTab.status(UpdateProfileTab.StatusEnum.fromValue(this.status));
            updateProfileTab.targetFilter(this.targetFilter);
            updateProfileTab.readFilter(this.readFilter);
            updateProfileTab.sort(this.sort);
            return updateProfileTab;
        }

        /**
         * Execute updateExistingTab request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateProfileTab updateProfileTab = buildBodyParams();
            updateExistingTabWithHttpInfo(orgId, profileTabId, updateProfileTab);
        }

        /**
         * Execute updateExistingTab request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateProfileTab updateProfileTab = buildBodyParams();
            return updateExistingTabWithHttpInfo(orgId, profileTabId, updateProfileTab);
        }

        /**
         * Execute updateExistingTab request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateProfileTab updateProfileTab = buildBodyParams();
            return updateExistingTabAsync(orgId, profileTabId, updateProfileTab, _callback);
        }
    }

    /**
     * Update an existing profile tab
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param profileTabId Profile tab id (required)
     * @return UpdateExistingTabRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingTabRequestBuilder updateExistingTab(String orgId, String profileTabId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (profileTabId == null) throw new IllegalArgumentException("\"profileTabId\" is required but got null");
            

        return new UpdateExistingTabRequestBuilder(orgId, profileTabId);
    }
}
