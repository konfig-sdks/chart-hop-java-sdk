/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApproveChange;
import com.konfigthis.client.model.BulkChangeRequest;
import com.konfigthis.client.model.BulkUpdateRequest;
import com.konfigthis.client.model.Change;
import com.konfigthis.client.model.ChangeStatusResponse;
import com.konfigthis.client.model.CreateChange;
import com.konfigthis.client.model.JobUpdate;
import java.time.LocalDate;
import com.konfigthis.client.model.PartialJob;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsChange;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ScenarioChangesWithBudgetRollup;
import com.konfigthis.client.model.UpdateChange;
import com.konfigthis.client.model.UpdateScenarioChangeResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChangeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChangeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChangeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call amendScenarioChangeCall(String orgId, String scenarioId, String changeId, String fields, Boolean includeUpdatedFields, String format, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/change/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (includeUpdatedFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeUpdatedFields", includeUpdatedFields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amendScenarioChangeValidateBeforeCall(String orgId, String scenarioId, String changeId, String fields, Boolean includeUpdatedFields, String format, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling amendScenarioChange(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling amendScenarioChange(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling amendScenarioChange(Async)");
        }

        return amendScenarioChangeCall(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody, _callback);

    }


    private ApiResponse<UpdateScenarioChangeResponse> amendScenarioChangeWithHttpInfo(String orgId, String scenarioId, String changeId, String fields, Boolean includeUpdatedFields, String format, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = amendScenarioChangeValidateBeforeCall(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody, null);
        Type localVarReturnType = new TypeToken<UpdateScenarioChangeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call amendScenarioChangeAsync(String orgId, String scenarioId, String changeId, String fields, Boolean includeUpdatedFields, String format, Map<String, Object> requestBody, final ApiCallback<UpdateScenarioChangeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = amendScenarioChangeValidateBeforeCall(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateScenarioChangeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AmendScenarioChangeRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private final String changeId;
        private String fields;
        private Boolean includeUpdatedFields;
        private String format;

        private AmendScenarioChangeRequestBuilder(String orgId, String scenarioId, String changeId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
            this.changeId = changeId;
        }

        /**
         * Set fields
         * @param fields Fields to retrieve (optional)
         * @return AmendScenarioChangeRequestBuilder
         */
        public AmendScenarioChangeRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set includeUpdatedFields
         * @param includeUpdatedFields Include all updated fields in the response, including change.after.fieldName for each updated field (optional)
         * @return AmendScenarioChangeRequestBuilder
         */
        public AmendScenarioChangeRequestBuilder includeUpdatedFields(Boolean includeUpdatedFields) {
            this.includeUpdatedFields = includeUpdatedFields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to return; default is json, can also use json-extended or json-readable (optional)
         * @return AmendScenarioChangeRequestBuilder
         */
        public AmendScenarioChangeRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for amendScenarioChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return amendScenarioChangeCall(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute amendScenarioChange request
         * @return UpdateScenarioChangeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public UpdateScenarioChangeResponse execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<UpdateScenarioChangeResponse> localVarResp = amendScenarioChangeWithHttpInfo(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute amendScenarioChange request with HTTP info returned
         * @return ApiResponse&lt;UpdateScenarioChangeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UpdateScenarioChangeResponse> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return amendScenarioChangeWithHttpInfo(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody);
        }

        /**
         * Execute amendScenarioChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UpdateScenarioChangeResponse> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return amendScenarioChangeAsync(orgId, scenarioId, changeId, fields, includeUpdatedFields, format, requestBody, _callback);
        }
    }

    /**
     * Amend a change within a scenario, and potentially return the updated data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @param changeId Change id (required)
     * @return AmendScenarioChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public AmendScenarioChangeRequestBuilder amendScenarioChange(String orgId, String scenarioId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new AmendScenarioChangeRequestBuilder(orgId, scenarioId, changeId);
    }
    private okhttp3.Call approveOrRejectCall(String orgId, String changeId, ApproveChange approveChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = approveChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{changeId}/approve"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveOrRejectValidateBeforeCall(String orgId, String changeId, ApproveChange approveChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling approveOrReject(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling approveOrReject(Async)");
        }

        return approveOrRejectCall(orgId, changeId, approveChange, _callback);

    }


    private ApiResponse<Void> approveOrRejectWithHttpInfo(String orgId, String changeId, ApproveChange approveChange) throws ApiException {
        okhttp3.Call localVarCall = approveOrRejectValidateBeforeCall(orgId, changeId, approveChange, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveOrRejectAsync(String orgId, String changeId, ApproveChange approveChange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveOrRejectValidateBeforeCall(orgId, changeId, approveChange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveOrRejectRequestBuilder {
        private final String status;
        private final String orgId;
        private final String changeId;
        private String approvalNote;
        private String changeId;

        private ApproveOrRejectRequestBuilder(String status, String orgId, String changeId) {
            this.status = status;
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set approvalNote
         * @param approvalNote  (optional)
         * @return ApproveOrRejectRequestBuilder
         */
        public ApproveOrRejectRequestBuilder approvalNote(String approvalNote) {
            this.approvalNote = approvalNote;
            return this;
        }
        
        /**
         * Set changeId
         * @param changeId  (optional)
         * @return ApproveOrRejectRequestBuilder
         */
        public ApproveOrRejectRequestBuilder changeId(String changeId) {
            this.changeId = changeId;
            return this;
        }
        
        /**
         * Build call for approveOrReject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApproveChange approveChange = buildBodyParams();
            return approveOrRejectCall(orgId, changeId, approveChange, _callback);
        }

        private ApproveChange buildBodyParams() {
            ApproveChange approveChange = new ApproveChange();
            if (this.status != null)
            approveChange.status(ApproveChange.StatusEnum.fromValue(this.status));
            approveChange.approvalNote(this.approvalNote);
            approveChange.changeId(this.changeId);
            return approveChange;
        }

        /**
         * Execute approveOrReject request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApproveChange approveChange = buildBodyParams();
            approveOrRejectWithHttpInfo(orgId, changeId, approveChange);
        }

        /**
         * Execute approveOrReject request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApproveChange approveChange = buildBodyParams();
            return approveOrRejectWithHttpInfo(orgId, changeId, approveChange);
        }

        /**
         * Execute approveOrReject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApproveChange approveChange = buildBodyParams();
            return approveOrRejectAsync(orgId, changeId, approveChange, _callback);
        }
    }

    /**
     * Approve or reject a change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change id (required)
     * @return ApproveOrRejectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ApproveOrRejectRequestBuilder approveOrReject(String status, String orgId, String changeId) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new ApproveOrRejectRequestBuilder(status, orgId, changeId);
    }
    private okhttp3.Call bulkUpdateJobsCall(String orgId, BulkUpdateRequest bulkUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/bulkupdate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkUpdateJobsValidateBeforeCall(String orgId, BulkUpdateRequest bulkUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling bulkUpdateJobs(Async)");
        }

        return bulkUpdateJobsCall(orgId, bulkUpdateRequest, _callback);

    }


    private ApiResponse<Process> bulkUpdateJobsWithHttpInfo(String orgId, BulkUpdateRequest bulkUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkUpdateJobsValidateBeforeCall(orgId, bulkUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkUpdateJobsAsync(String orgId, BulkUpdateRequest bulkUpdateRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkUpdateJobsValidateBeforeCall(orgId, bulkUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BulkUpdateJobsRequestBuilder {
        private final Set<String> jobIds;
        private final JobUpdate update;
        private final LocalDate date;
        private final String orgId;
        private String scenarioId;
        private String note;

        private BulkUpdateJobsRequestBuilder(Set<String> jobIds, JobUpdate update, LocalDate date, String orgId) {
            this.jobIds = jobIds;
            this.update = update;
            this.date = date;
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId scenario id (optional)
         * @return BulkUpdateJobsRequestBuilder
         */
        public BulkUpdateJobsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set note
         * @param note note for update (optional)
         * @return BulkUpdateJobsRequestBuilder
         */
        public BulkUpdateJobsRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for bulkUpdateJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkUpdateRequest bulkUpdateRequest = buildBodyParams();
            return bulkUpdateJobsCall(orgId, bulkUpdateRequest, _callback);
        }

        private BulkUpdateRequest buildBodyParams() {
            BulkUpdateRequest bulkUpdateRequest = new BulkUpdateRequest();
            bulkUpdateRequest.jobIds(this.jobIds);
            bulkUpdateRequest.update(this.update);
            bulkUpdateRequest.date(this.date);
            bulkUpdateRequest.scenarioId(this.scenarioId);
            bulkUpdateRequest.note(this.note);
            return bulkUpdateRequest;
        }

        /**
         * Execute bulkUpdateJobs request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            BulkUpdateRequest bulkUpdateRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = bulkUpdateJobsWithHttpInfo(orgId, bulkUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute bulkUpdateJobs request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            BulkUpdateRequest bulkUpdateRequest = buildBodyParams();
            return bulkUpdateJobsWithHttpInfo(orgId, bulkUpdateRequest);
        }

        /**
         * Execute bulkUpdateJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            BulkUpdateRequest bulkUpdateRequest = buildBodyParams();
            return bulkUpdateJobsAsync(orgId, bulkUpdateRequest, _callback);
        }
    }

    /**
     * Perform a bulk update on a number of jobs
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return BulkUpdateJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public BulkUpdateJobsRequestBuilder bulkUpdateJobs(Set<String> jobIds, JobUpdate update, LocalDate date, String orgId) throws IllegalArgumentException {
        if (jobIds == null) throw new IllegalArgumentException("\"jobIds\" is required but got null");
        if (update == null) throw new IllegalArgumentException("\"update\" is required but got null");
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new BulkUpdateJobsRequestBuilder(jobIds, update, date, orgId);
    }
    private okhttp3.Call checkApproverEligibilityCall(String orgId, String changeId, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{changeId}/approver"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkApproverEligibilityValidateBeforeCall(String orgId, String changeId, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling checkApproverEligibility(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling checkApproverEligibility(Async)");
        }

        return checkApproverEligibilityCall(orgId, changeId, date, _callback);

    }


    private ApiResponse<Boolean> checkApproverEligibilityWithHttpInfo(String orgId, String changeId, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = checkApproverEligibilityValidateBeforeCall(orgId, changeId, date, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkApproverEligibilityAsync(String orgId, String changeId, LocalDate date, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkApproverEligibilityValidateBeforeCall(orgId, changeId, date, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CheckApproverEligibilityRequestBuilder {
        private final String orgId;
        private final String changeId;
        private LocalDate date;

        private CheckApproverEligibilityRequestBuilder(String orgId, String changeId) {
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set date
         * @param date Date to check the approval on (optional)
         * @return CheckApproverEligibilityRequestBuilder
         */
        public CheckApproverEligibilityRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for checkApproverEligibility
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkApproverEligibilityCall(orgId, changeId, date, _callback);
        }


        /**
         * Execute checkApproverEligibility request
         * @return Boolean
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Boolean execute() throws ApiException {
            ApiResponse<Boolean> localVarResp = checkApproverEligibilityWithHttpInfo(orgId, changeId, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute checkApproverEligibility request with HTTP info returned
         * @return ApiResponse&lt;Boolean&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Boolean> executeWithHttpInfo() throws ApiException {
            return checkApproverEligibilityWithHttpInfo(orgId, changeId, date);
        }

        /**
         * Execute checkApproverEligibility request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Boolean> _callback) throws ApiException {
            return checkApproverEligibilityAsync(orgId, changeId, date, _callback);
        }
    }

    /**
     * Given a of change id, see if the person can approve/reject
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change Id (required)
     * @return CheckApproverEligibilityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CheckApproverEligibilityRequestBuilder checkApproverEligibility(String orgId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new CheckApproverEligibilityRequestBuilder(orgId, changeId);
    }
    private okhttp3.Call createDepartRehirePairCall(String orgId, LocalDate startDate, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/depart-rehire"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDepartRehirePairValidateBeforeCall(String orgId, LocalDate startDate, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createDepartRehirePair(Async)");
        }

        return createDepartRehirePairCall(orgId, startDate, createChange, _callback);

    }


    private ApiResponse<Change> createDepartRehirePairWithHttpInfo(String orgId, LocalDate startDate, CreateChange createChange) throws ApiException {
        okhttp3.Call localVarCall = createDepartRehirePairValidateBeforeCall(orgId, startDate, createChange, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDepartRehirePairAsync(String orgId, LocalDate startDate, CreateChange createChange, final ApiCallback<Change> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDepartRehirePairValidateBeforeCall(orgId, startDate, createChange, _callback);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDepartRehirePairRequestBuilder {
        private final String orgId;
        private String jobId;
        private String orgId;
        private String scenarioId;
        private String personId;
        private String otherJobId;
        private String type;
        private LocalDate date;
        private LocalDate announceDate;
        private String departType;
        private String departRegret;
        private String reason;
        private String promotionType;
        private PartialJob job;
        private JobUpdate update;
        private String note;
        private LocalDate startDate;

        private CreateDepartRehirePairRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set jobId
         * @param jobId job id (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario that this change belongs to (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId the id of the person involved, or empty if no person attached to job (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set otherJobId
         * @param otherJobId for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder otherJobId(String otherJobId) {
            this.otherJobId = otherJobId;
            return this;
        }
        
        /**
         * Set type
         * @param type type of change (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set date
         * @param date date of change (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set announceDate
         * @param announceDate for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder announceDate(LocalDate announceDate) {
            this.announceDate = announceDate;
            return this;
        }
        
        /**
         * Set departType
         * @param departType for DEPART changes, the type of departure (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder departType(String departType) {
            this.departType = departType;
            return this;
        }
        
        /**
         * Set departRegret
         * @param departRegret for DEPART changes, whether the departure is regrettable (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder departRegret(String departRegret) {
            this.departRegret = departRegret;
            return this;
        }
        
        /**
         * Set reason
         * @param reason the reason of the change (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set promotionType
         * @param promotionType if it&#39;s a promotion or a demotion (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder promotionType(String promotionType) {
            this.promotionType = promotionType;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder job(PartialJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder update(JobUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Set note
         * @param note note on the change (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Rehire start date (optional)
         * @return CreateDepartRehirePairRequestBuilder
         */
        public CreateDepartRehirePairRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Build call for createDepartRehirePair
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createDepartRehirePairCall(orgId, startDate, createChange, _callback);
        }

        private CreateChange buildBodyParams() {
            CreateChange createChange = new CreateChange();
            createChange.jobId(this.jobId);
            createChange.orgId(this.orgId);
            createChange.scenarioId(this.scenarioId);
            createChange.personId(this.personId);
            createChange.otherJobId(this.otherJobId);
            if (this.type != null)
            createChange.type(CreateChange.TypeEnum.fromValue(this.type));
            createChange.date(this.date);
            createChange.announceDate(this.announceDate);
            if (this.departType != null)
            createChange.departType(CreateChange.DepartTypeEnum.fromValue(this.departType));
            if (this.departRegret != null)
            createChange.departRegret(CreateChange.DepartRegretEnum.fromValue(this.departRegret));
            createChange.reason(this.reason);
            if (this.promotionType != null)
            createChange.promotionType(CreateChange.PromotionTypeEnum.fromValue(this.promotionType));
            createChange.job(this.job);
            createChange.update(this.update);
            createChange.note(this.note);
            return createChange;
        }

        /**
         * Execute createDepartRehirePair request
         * @return Change
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Change execute() throws ApiException {
            CreateChange createChange = buildBodyParams();
            ApiResponse<Change> localVarResp = createDepartRehirePairWithHttpInfo(orgId, startDate, createChange);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDepartRehirePair request with HTTP info returned
         * @return ApiResponse&lt;Change&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Change> executeWithHttpInfo() throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createDepartRehirePairWithHttpInfo(orgId, startDate, createChange);
        }

        /**
         * Execute createDepartRehirePair request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Change> _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createDepartRehirePairAsync(orgId, startDate, createChange, _callback);
        }
    }

    /**
     * Create a depart-rehire pair of changes, for filling in historical data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateDepartRehirePairRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateDepartRehirePairRequestBuilder createDepartRehirePair(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateDepartRehirePairRequestBuilder(orgId);
    }
    private okhttp3.Call createIfNotExistsCall(String orgId, String type, String processId, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/sync/{type}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIfNotExistsValidateBeforeCall(String orgId, String type, String processId, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createIfNotExists(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createIfNotExists(Async)");
        }

        return createIfNotExistsCall(orgId, type, processId, createChange, _callback);

    }


    private ApiResponse<Change> createIfNotExistsWithHttpInfo(String orgId, String type, String processId, CreateChange createChange) throws ApiException {
        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, type, processId, createChange, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIfNotExistsAsync(String orgId, String type, String processId, CreateChange createChange, final ApiCallback<Change> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, type, processId, createChange, _callback);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIfNotExistsRequestBuilder {
        private final String orgId;
        private final String type;
        private String jobId;
        private String orgId;
        private String scenarioId;
        private String personId;
        private String otherJobId;
        private String type;
        private LocalDate date;
        private LocalDate announceDate;
        private String departType;
        private String departRegret;
        private String reason;
        private String promotionType;
        private PartialJob job;
        private JobUpdate update;
        private String note;
        private String processId;

        private CreateIfNotExistsRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set jobId
         * @param jobId job id (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario that this change belongs to (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId the id of the person involved, or empty if no person attached to job (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set otherJobId
         * @param otherJobId for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder otherJobId(String otherJobId) {
            this.otherJobId = otherJobId;
            return this;
        }
        
        /**
         * Set type
         * @param type type of change (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set date
         * @param date date of change (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set announceDate
         * @param announceDate for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder announceDate(LocalDate announceDate) {
            this.announceDate = announceDate;
            return this;
        }
        
        /**
         * Set departType
         * @param departType for DEPART changes, the type of departure (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder departType(String departType) {
            this.departType = departType;
            return this;
        }
        
        /**
         * Set departRegret
         * @param departRegret for DEPART changes, whether the departure is regrettable (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder departRegret(String departRegret) {
            this.departRegret = departRegret;
            return this;
        }
        
        /**
         * Set reason
         * @param reason the reason of the change (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set promotionType
         * @param promotionType if it&#39;s a promotion or a demotion (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder promotionType(String promotionType) {
            this.promotionType = promotionType;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder job(PartialJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder update(JobUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Set note
         * @param note note on the change (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set processId
         * @param processId Process id of person creation (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for createIfNotExists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createIfNotExistsCall(orgId, type, processId, createChange, _callback);
        }

        private CreateChange buildBodyParams() {
            CreateChange createChange = new CreateChange();
            createChange.jobId(this.jobId);
            createChange.orgId(this.orgId);
            createChange.scenarioId(this.scenarioId);
            createChange.personId(this.personId);
            createChange.otherJobId(this.otherJobId);
            if (this.type != null)
            createChange.type(CreateChange.TypeEnum.fromValue(this.type));
            createChange.date(this.date);
            createChange.announceDate(this.announceDate);
            if (this.departType != null)
            createChange.departType(CreateChange.DepartTypeEnum.fromValue(this.departType));
            if (this.departRegret != null)
            createChange.departRegret(CreateChange.DepartRegretEnum.fromValue(this.departRegret));
            createChange.reason(this.reason);
            if (this.promotionType != null)
            createChange.promotionType(CreateChange.PromotionTypeEnum.fromValue(this.promotionType));
            createChange.job(this.job);
            createChange.update(this.update);
            createChange.note(this.note);
            return createChange;
        }

        /**
         * Execute createIfNotExists request
         * @return Change
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Change execute() throws ApiException {
            CreateChange createChange = buildBodyParams();
            ApiResponse<Change> localVarResp = createIfNotExistsWithHttpInfo(orgId, type, processId, createChange);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIfNotExists request with HTTP info returned
         * @return ApiResponse&lt;Change&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Change> executeWithHttpInfo() throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createIfNotExistsWithHttpInfo(orgId, type, processId, createChange);
        }

        /**
         * Execute createIfNotExists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Change> _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createIfNotExistsAsync(orgId, type, processId, createChange, _callback);
        }
    }

    /**
     * Sync a change (create the change only if it does not already exist)
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Change type (required)
     * @return CreateIfNotExistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateIfNotExistsRequestBuilder createIfNotExists(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateIfNotExistsRequestBuilder(orgId, type);
    }
    private okhttp3.Call createNewChangeCall(String orgId, String type, String source, String processId, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{type}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewChangeValidateBeforeCall(String orgId, String type, String source, String processId, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewChange(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createNewChange(Async)");
        }

        return createNewChangeCall(orgId, type, source, processId, createChange, _callback);

    }


    private ApiResponse<Change> createNewChangeWithHttpInfo(String orgId, String type, String source, String processId, CreateChange createChange) throws ApiException {
        okhttp3.Call localVarCall = createNewChangeValidateBeforeCall(orgId, type, source, processId, createChange, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewChangeAsync(String orgId, String type, String source, String processId, CreateChange createChange, final ApiCallback<Change> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewChangeValidateBeforeCall(orgId, type, source, processId, createChange, _callback);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewChangeRequestBuilder {
        private final String orgId;
        private final String type;
        private String jobId;
        private String orgId;
        private String scenarioId;
        private String personId;
        private String otherJobId;
        private String type;
        private LocalDate date;
        private LocalDate announceDate;
        private String departType;
        private String departRegret;
        private String reason;
        private String promotionType;
        private PartialJob job;
        private JobUpdate update;
        private String note;
        private String source;
        private String processId;

        private CreateNewChangeRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set jobId
         * @param jobId job id (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario that this change belongs to (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId the id of the person involved, or empty if no person attached to job (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set otherJobId
         * @param otherJobId for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder otherJobId(String otherJobId) {
            this.otherJobId = otherJobId;
            return this;
        }
        
        /**
         * Set type
         * @param type type of change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set date
         * @param date date of change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set announceDate
         * @param announceDate for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder announceDate(LocalDate announceDate) {
            this.announceDate = announceDate;
            return this;
        }
        
        /**
         * Set departType
         * @param departType for DEPART changes, the type of departure (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder departType(String departType) {
            this.departType = departType;
            return this;
        }
        
        /**
         * Set departRegret
         * @param departRegret for DEPART changes, whether the departure is regrettable (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder departRegret(String departRegret) {
            this.departRegret = departRegret;
            return this;
        }
        
        /**
         * Set reason
         * @param reason the reason of the change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set promotionType
         * @param promotionType if it&#39;s a promotion or a demotion (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder promotionType(String promotionType) {
            this.promotionType = promotionType;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder job(PartialJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder update(JobUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Set note
         * @param note note on the change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set source
         * @param source Source of change (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set processId
         * @param processId Process id of change creation (optional)
         * @return CreateNewChangeRequestBuilder
         */
        public CreateNewChangeRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for createNewChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createNewChangeCall(orgId, type, source, processId, createChange, _callback);
        }

        private CreateChange buildBodyParams() {
            CreateChange createChange = new CreateChange();
            createChange.jobId(this.jobId);
            createChange.orgId(this.orgId);
            createChange.scenarioId(this.scenarioId);
            createChange.personId(this.personId);
            createChange.otherJobId(this.otherJobId);
            if (this.type != null)
            createChange.type(CreateChange.TypeEnum.fromValue(this.type));
            createChange.date(this.date);
            createChange.announceDate(this.announceDate);
            if (this.departType != null)
            createChange.departType(CreateChange.DepartTypeEnum.fromValue(this.departType));
            if (this.departRegret != null)
            createChange.departRegret(CreateChange.DepartRegretEnum.fromValue(this.departRegret));
            createChange.reason(this.reason);
            if (this.promotionType != null)
            createChange.promotionType(CreateChange.PromotionTypeEnum.fromValue(this.promotionType));
            createChange.job(this.job);
            createChange.update(this.update);
            createChange.note(this.note);
            return createChange;
        }

        /**
         * Execute createNewChange request
         * @return Change
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Change execute() throws ApiException {
            CreateChange createChange = buildBodyParams();
            ApiResponse<Change> localVarResp = createNewChangeWithHttpInfo(orgId, type, source, processId, createChange);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewChange request with HTTP info returned
         * @return ApiResponse&lt;Change&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Change> executeWithHttpInfo() throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createNewChangeWithHttpInfo(orgId, type, source, processId, createChange);
        }

        /**
         * Execute createNewChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Change> _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return createNewChangeAsync(orgId, type, source, processId, createChange, _callback);
        }
    }

    /**
     * Create a new change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Change type (required)
     * @return CreateNewChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewChangeRequestBuilder createNewChange(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateNewChangeRequestBuilder(orgId, type);
    }
    private okhttp3.Call deletePreviousChangeCall(String orgId, String changeId, String processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePreviousChangeValidateBeforeCall(String orgId, String changeId, String processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deletePreviousChange(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling deletePreviousChange(Async)");
        }

        return deletePreviousChangeCall(orgId, changeId, processId, _callback);

    }


    private ApiResponse<Void> deletePreviousChangeWithHttpInfo(String orgId, String changeId, String processId) throws ApiException {
        okhttp3.Call localVarCall = deletePreviousChangeValidateBeforeCall(orgId, changeId, processId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePreviousChangeAsync(String orgId, String changeId, String processId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePreviousChangeValidateBeforeCall(orgId, changeId, processId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeletePreviousChangeRequestBuilder {
        private final String orgId;
        private final String changeId;
        private String processId;

        private DeletePreviousChangeRequestBuilder(String orgId, String changeId) {
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set processId
         * @param processId Process id of person creation (optional)
         * @return DeletePreviousChangeRequestBuilder
         */
        public DeletePreviousChangeRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for deletePreviousChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePreviousChangeCall(orgId, changeId, processId, _callback);
        }


        /**
         * Execute deletePreviousChange request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePreviousChangeWithHttpInfo(orgId, changeId, processId);
        }

        /**
         * Execute deletePreviousChange request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePreviousChangeWithHttpInfo(orgId, changeId, processId);
        }

        /**
         * Execute deletePreviousChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePreviousChangeAsync(orgId, changeId, processId, _callback);
        }
    }

    /**
     * Delete a previous change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change id (required)
     * @return DeletePreviousChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeletePreviousChangeRequestBuilder deletePreviousChange(String orgId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new DeletePreviousChangeRequestBuilder(orgId, changeId);
    }
    private okhttp3.Call findScenarioChangesCall(String orgId, String scenarioId, String fields, String format, String q, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/scenario/{scenarioId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findScenarioChangesValidateBeforeCall(String orgId, String scenarioId, String fields, String format, String q, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling findScenarioChanges(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling findScenarioChanges(Async)");
        }

        return findScenarioChangesCall(orgId, scenarioId, fields, format, q, returnAccess, _callback);

    }


    private ApiResponse<ScenarioChangesWithBudgetRollup> findScenarioChangesWithHttpInfo(String orgId, String scenarioId, String fields, String format, String q, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = findScenarioChangesValidateBeforeCall(orgId, scenarioId, fields, format, q, returnAccess, null);
        Type localVarReturnType = new TypeToken<ScenarioChangesWithBudgetRollup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call findScenarioChangesAsync(String orgId, String scenarioId, String fields, String format, String q, String returnAccess, final ApiCallback<ScenarioChangesWithBudgetRollup> _callback) throws ApiException {

        okhttp3.Call localVarCall = findScenarioChangesValidateBeforeCall(orgId, scenarioId, fields, format, q, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ScenarioChangesWithBudgetRollup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FindScenarioChangesRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private String fields;
        private String format;
        private String q;
        private String returnAccess;

        private FindScenarioChangesRequestBuilder(String orgId, String scenarioId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
        }

        /**
         * Set fields
         * @param fields Fields to retrieve (optional)
         * @return FindScenarioChangesRequestBuilder
         */
        public FindScenarioChangesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return FindScenarioChangesRequestBuilder
         */
        public FindScenarioChangesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set q
         * @param q Search query (optional)
         * @return FindScenarioChangesRequestBuilder
         */
        public FindScenarioChangesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return FindScenarioChangesRequestBuilder
         */
        public FindScenarioChangesRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for findScenarioChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return findScenarioChangesCall(orgId, scenarioId, fields, format, q, returnAccess, _callback);
        }


        /**
         * Execute findScenarioChanges request
         * @return ScenarioChangesWithBudgetRollup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ScenarioChangesWithBudgetRollup execute() throws ApiException {
            ApiResponse<ScenarioChangesWithBudgetRollup> localVarResp = findScenarioChangesWithHttpInfo(orgId, scenarioId, fields, format, q, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute findScenarioChanges request with HTTP info returned
         * @return ApiResponse&lt;ScenarioChangesWithBudgetRollup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScenarioChangesWithBudgetRollup> executeWithHttpInfo() throws ApiException {
            return findScenarioChangesWithHttpInfo(orgId, scenarioId, fields, format, q, returnAccess);
        }

        /**
         * Execute findScenarioChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScenarioChangesWithBudgetRollup> _callback) throws ApiException {
            return findScenarioChangesAsync(orgId, scenarioId, fields, format, q, returnAccess, _callback);
        }
    }

    /**
     * Return all changes for a particular scenario, with before job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @return FindScenarioChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public FindScenarioChangesRequestBuilder findScenarioChanges(String orgId, String scenarioId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        return new FindScenarioChangesRequestBuilder(orgId, scenarioId);
    }
    private okhttp3.Call getByIdCall(String orgId, String changeId, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String changeId, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getById(Async)");
        }

        return getByIdCall(orgId, changeId, format, _callback);

    }


    private ApiResponse<Change> getByIdWithHttpInfo(String orgId, String changeId, String format) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, changeId, format, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String changeId, String format, final ApiCallback<Change> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, changeId, format, _callback);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String changeId;
        private String format;

        private GetByIdRequestBuilder(String orgId, String changeId) {
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, changeId, format, _callback);
        }


        /**
         * Execute getById request
         * @return Change
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Change execute() throws ApiException {
            ApiResponse<Change> localVarResp = getByIdWithHttpInfo(orgId, changeId, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Change&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Change> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, changeId, format);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Change> _callback) throws ApiException {
            return getByIdAsync(orgId, changeId, format, _callback);
        }
    }

    /**
     * Return a particular change by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, changeId);
    }
    private okhttp3.Call getById_0Call(String orgId, String changeId, String fields, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/change/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getById_0ValidateBeforeCall(String orgId, String changeId, String fields, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById_0(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getById_0(Async)");
        }

        return getById_0Call(orgId, changeId, fields, format, _callback);

    }


    private ApiResponse<Void> getById_0WithHttpInfo(String orgId, String changeId, String fields, String format) throws ApiException {
        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(orgId, changeId, fields, format, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getById_0Async(String orgId, String changeId, String fields, String format, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getById_0ValidateBeforeCall(orgId, changeId, fields, format, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetById0RequestBuilder {
        private final String orgId;
        private final String changeId;
        private String fields;
        private String format;

        private GetById0RequestBuilder(String orgId, String changeId) {
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetById0RequestBuilder
         */
        public GetById0RequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetById0RequestBuilder
         */
        public GetById0RequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getById_0Call(orgId, changeId, fields, format, _callback);
        }


        /**
         * Execute getById_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getById_0WithHttpInfo(orgId, changeId, fields, format);
        }

        /**
         * Execute getById_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getById_0WithHttpInfo(orgId, changeId, fields, format);
        }

        /**
         * Execute getById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getById_0Async(orgId, changeId, fields, format, _callback);
        }
    }

    /**
     * Return a particular change by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change id (required)
     * @return GetById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetById0RequestBuilder getById_0(String orgId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new GetById0RequestBuilder(orgId, changeId);
    }
    private okhttp3.Call getRecentChangesCall(String orgId, String scenarioId, LocalDate date, LocalDate endDate, String type, String fields, String personId, String jobId, Boolean includeBackfill, String refs, String q, String from, Integer limit, String open, Boolean desc, Boolean scenarioOnly, Boolean parentOnly, Boolean includeGrantSchedule, Boolean excludeAtsRecruitingFields, Boolean includeStruck, String status, Boolean stripUpdates, String format, String fieldEntityTypes, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personId", personId));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (includeBackfill != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBackfill", includeBackfill));
        }

        if (refs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refs", refs));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (open != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("open", open));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        if (scenarioOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioOnly", scenarioOnly));
        }

        if (parentOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentOnly", parentOnly));
        }

        if (includeGrantSchedule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeGrantSchedule", includeGrantSchedule));
        }

        if (excludeAtsRecruitingFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeAtsRecruitingFields", excludeAtsRecruitingFields));
        }

        if (includeStruck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeStruck", includeStruck));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (stripUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripUpdates", stripUpdates));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (fieldEntityTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldEntityTypes", fieldEntityTypes));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentChangesValidateBeforeCall(String orgId, String scenarioId, LocalDate date, LocalDate endDate, String type, String fields, String personId, String jobId, Boolean includeBackfill, String refs, String q, String from, Integer limit, String open, Boolean desc, Boolean scenarioOnly, Boolean parentOnly, Boolean includeGrantSchedule, Boolean excludeAtsRecruitingFields, Boolean includeStruck, String status, Boolean stripUpdates, String format, String fieldEntityTypes, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getRecentChanges(Async)");
        }

        return getRecentChangesCall(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess, _callback);

    }


    private ApiResponse<ResultsChange> getRecentChangesWithHttpInfo(String orgId, String scenarioId, LocalDate date, LocalDate endDate, String type, String fields, String personId, String jobId, Boolean includeBackfill, String refs, String q, String from, Integer limit, String open, Boolean desc, Boolean scenarioOnly, Boolean parentOnly, Boolean includeGrantSchedule, Boolean excludeAtsRecruitingFields, Boolean includeStruck, String status, Boolean stripUpdates, String format, String fieldEntityTypes, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getRecentChangesValidateBeforeCall(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsChange>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentChangesAsync(String orgId, String scenarioId, LocalDate date, LocalDate endDate, String type, String fields, String personId, String jobId, Boolean includeBackfill, String refs, String q, String from, Integer limit, String open, Boolean desc, Boolean scenarioOnly, Boolean parentOnly, Boolean includeGrantSchedule, Boolean excludeAtsRecruitingFields, Boolean includeStruck, String status, Boolean stripUpdates, String format, String fieldEntityTypes, String returnAccess, final ApiCallback<ResultsChange> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentChangesValidateBeforeCall(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsChange>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentChangesRequestBuilder {
        private final String orgId;
        private String scenarioId;
        private LocalDate date;
        private LocalDate endDate;
        private String type;
        private String fields;
        private String personId;
        private String jobId;
        private Boolean includeBackfill;
        private String refs;
        private String q;
        private String from;
        private Integer limit;
        private String open;
        private Boolean desc;
        private Boolean scenarioOnly;
        private Boolean parentOnly;
        private Boolean includeGrantSchedule;
        private Boolean excludeAtsRecruitingFields;
        private Boolean includeStruck;
        private String status;
        private Boolean stripUpdates;
        private String format;
        private String fieldEntityTypes;
        private String returnAccess;

        private GetRecentChangesRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to start from (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date to get changes through (inclusive) (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set type
         * @param type Types of change to filter by (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Return changes that modify these fields (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set personId
         * @param personId Person id to filter by (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set jobId
         * @param jobId Job id to filter by (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set includeBackfill
         * @param includeBackfill Find and include first backfill if it exists (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder includeBackfill(Boolean includeBackfill) {
            this.includeBackfill = includeBackfill;
            return this;
        }
        
        /**
         * Set refs
         * @param refs References to filter by (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder refs(String refs) {
            this.refs = refs;
            return this;
        }
        
        /**
         * Set q
         * @param q Query to filter against (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set from
         * @param from Change id to start paginating from (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set open
         * @param open Whether the role is open or not (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder open(String open) {
            this.open = open;
            return this;
        }
        
        /**
         * Set desc
         * @param desc Descending (default false) (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder desc(Boolean desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set scenarioOnly
         * @param scenarioOnly Scenario only (exclude primary changes) (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder scenarioOnly(Boolean scenarioOnly) {
            this.scenarioOnly = scenarioOnly;
            return this;
        }
        
        /**
         * Set parentOnly
         * @param parentOnly Parent changes only (exclude child changes) (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder parentOnly(Boolean parentOnly) {
            this.parentOnly = parentOnly;
            return this;
        }
        
        /**
         * Set includeGrantSchedule
         * @param includeGrantSchedule Whether to include full grant schedule when returning equity updates (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder includeGrantSchedule(Boolean includeGrantSchedule) {
            this.includeGrantSchedule = includeGrantSchedule;
            return this;
        }
        
        /**
         * Set excludeAtsRecruitingFields
         * @param excludeAtsRecruitingFields Whether to exclude ats recruiting fields. Only applies when fieldEntityTypeString is passed (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder excludeAtsRecruitingFields(Boolean excludeAtsRecruitingFields) {
            this.excludeAtsRecruitingFields = excludeAtsRecruitingFields;
            return this;
        }
        
        /**
         * Set includeStruck
         * @param includeStruck Deprecated parameter for backwards-compatibility (use statuses) - whether to include STRUCK and PROPOSED changes, or just ACTIVE changes (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder includeStruck(Boolean includeStruck) {
            this.includeStruck = includeStruck;
            return this;
        }
        
        /**
         * Set status
         * @param status Statuses to filter by (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set stripUpdates
         * @param stripUpdates Whether to strip returned update changes of update types that were not explicitly requested (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder stripUpdates(Boolean stripUpdates) {
            this.stripUpdates = stripUpdates;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set fieldEntityTypes
         * @param fieldEntityTypes Only return changes which set fields with these entity types (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder fieldEntityTypes(String fieldEntityTypes) {
            this.fieldEntityTypes = fieldEntityTypes;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetRecentChangesRequestBuilder
         */
        public GetRecentChangesRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getRecentChanges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentChangesCall(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess, _callback);
        }


        /**
         * Execute getRecentChanges request
         * @return ResultsChange
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsChange execute() throws ApiException {
            ApiResponse<ResultsChange> localVarResp = getRecentChangesWithHttpInfo(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentChanges request with HTTP info returned
         * @return ApiResponse&lt;ResultsChange&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsChange> executeWithHttpInfo() throws ApiException {
            return getRecentChangesWithHttpInfo(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess);
        }

        /**
         * Execute getRecentChanges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsChange> _callback) throws ApiException {
            return getRecentChangesAsync(orgId, scenarioId, date, endDate, type, fields, personId, jobId, includeBackfill, refs, q, from, limit, open, desc, scenarioOnly, parentOnly, includeGrantSchedule, excludeAtsRecruitingFields, includeStruck, status, stripUpdates, format, fieldEntityTypes, returnAccess, _callback);
        }
    }

    /**
     * Return recent changes across an org, or for a particular person or job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetRecentChangesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentChangesRequestBuilder getRecentChanges(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetRecentChangesRequestBuilder(orgId);
    }
    private okhttp3.Call getRecentChangesForOrgOrPersonCall(String orgId, String jobId, String personId, String scenarioId, String type, String status, String fields, String fieldsChanged, String q, String open, Boolean includeGrantSchedule, LocalDate fromDate, String from, Integer limit, Boolean desc, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/org/{orgId}/change"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personId", personId));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (fieldsChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fieldsChanged", fieldsChanged));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (open != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("open", open));
        }

        if (includeGrantSchedule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeGrantSchedule", includeGrantSchedule));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromDate", fromDate));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (desc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("desc", desc));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentChangesForOrgOrPersonValidateBeforeCall(String orgId, String jobId, String personId, String scenarioId, String type, String status, String fields, String fieldsChanged, String q, String open, Boolean includeGrantSchedule, LocalDate fromDate, String from, Integer limit, Boolean desc, String format, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getRecentChangesForOrgOrPerson(Async)");
        }

        return getRecentChangesForOrgOrPersonCall(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess, _callback);

    }


    private ApiResponse<ResultsData> getRecentChangesForOrgOrPersonWithHttpInfo(String orgId, String jobId, String personId, String scenarioId, String type, String status, String fields, String fieldsChanged, String q, String open, Boolean includeGrantSchedule, LocalDate fromDate, String from, Integer limit, Boolean desc, String format, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getRecentChangesForOrgOrPersonValidateBeforeCall(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRecentChangesForOrgOrPersonAsync(String orgId, String jobId, String personId, String scenarioId, String type, String status, String fields, String fieldsChanged, String q, String open, Boolean includeGrantSchedule, LocalDate fromDate, String from, Integer limit, Boolean desc, String format, String returnAccess, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentChangesForOrgOrPersonValidateBeforeCall(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRecentChangesForOrgOrPersonRequestBuilder {
        private final String orgId;
        private String jobId;
        private String personId;
        private String scenarioId;
        private String type;
        private String status;
        private String fields;
        private String fieldsChanged;
        private String q;
        private String open;
        private Boolean includeGrantSchedule;
        private LocalDate fromDate;
        private String from;
        private Integer limit;
        private Boolean desc;
        private String format;
        private String returnAccess;

        private GetRecentChangesForOrgOrPersonRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set jobId
         * @param jobId Job id to filter by (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId Person id to filter by (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set type
         * @param type Types of change to filter by, comma-separated (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set status
         * @param status Statuses to filter by, comma-separated (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set fieldsChanged
         * @param fieldsChanged Changed fields to filter by, comma-separated (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder fieldsChanged(String fieldsChanged) {
            this.fieldsChanged = fieldsChanged;
            return this;
        }
        
        /**
         * Set q
         * @param q Query to filter against (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set open
         * @param open Whether the role is open or not (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder open(String open) {
            this.open = open;
            return this;
        }
        
        /**
         * Set includeGrantSchedule
         * @param includeGrantSchedule Whether to include full grant schedule when returning equity updates (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder includeGrantSchedule(Boolean includeGrantSchedule) {
            this.includeGrantSchedule = includeGrantSchedule;
            return this;
        }
        
        /**
         * Set fromDate
         * @param fromDate Date to start from (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder fromDate(LocalDate fromDate) {
            this.fromDate = fromDate;
            return this;
        }
        
        /**
         * Set from
         * @param from Change id to start paginating from (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set desc
         * @param desc Descending (default false) (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder desc(Boolean desc) {
            this.desc = desc;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetRecentChangesForOrgOrPersonRequestBuilder
         */
        public GetRecentChangesForOrgOrPersonRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getRecentChangesForOrgOrPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRecentChangesForOrgOrPersonCall(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess, _callback);
        }


        /**
         * Execute getRecentChangesForOrgOrPerson request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getRecentChangesForOrgOrPersonWithHttpInfo(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRecentChangesForOrgOrPerson request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getRecentChangesForOrgOrPersonWithHttpInfo(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess);
        }

        /**
         * Execute getRecentChangesForOrgOrPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getRecentChangesForOrgOrPersonAsync(orgId, jobId, personId, scenarioId, type, status, fields, fieldsChanged, q, open, includeGrantSchedule, fromDate, from, limit, desc, format, returnAccess, _callback);
        }
    }

    /**
     * Return recent changes across an org, or for a particular person or job
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetRecentChangesForOrgOrPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetRecentChangesForOrgOrPersonRequestBuilder getRecentChangesForOrgOrPerson(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetRecentChangesForOrgOrPersonRequestBuilder(orgId);
    }
    private okhttp3.Call getStatusCall(String orgId, String scenarioId, String changeId, Integer processId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/scenario/{scenarioId}/change/{changeId}/status/{processId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "scenarioId" + "}", localVarApiClient.escapeString(scenarioId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()))
            .replace("{" + "processId" + "}", localVarApiClient.escapeString(processId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String orgId, String scenarioId, String changeId, Integer processId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getStatus(Async)");
        }

        // verify the required parameter 'scenarioId' is set
        if (scenarioId == null) {
            throw new ApiException("Missing the required parameter 'scenarioId' when calling getStatus(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getStatus(Async)");
        }

        // verify the required parameter 'processId' is set
        if (processId == null) {
            throw new ApiException("Missing the required parameter 'processId' when calling getStatus(Async)");
        }

        return getStatusCall(orgId, scenarioId, changeId, processId, _callback);

    }


    private ApiResponse<ChangeStatusResponse> getStatusWithHttpInfo(String orgId, String scenarioId, String changeId, Integer processId) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(orgId, scenarioId, changeId, processId, null);
        Type localVarReturnType = new TypeToken<ChangeStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(String orgId, String scenarioId, String changeId, Integer processId, final ApiCallback<ChangeStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(orgId, scenarioId, changeId, processId, _callback);
        Type localVarReturnType = new TypeToken<ChangeStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final String orgId;
        private final String scenarioId;
        private final String changeId;
        private final Integer processId;

        private GetStatusRequestBuilder(String orgId, String scenarioId, String changeId, Integer processId) {
            this.orgId = orgId;
            this.scenarioId = scenarioId;
            this.changeId = changeId;
            this.processId = processId;
        }

        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(orgId, scenarioId, changeId, processId, _callback);
        }


        /**
         * Execute getStatus request
         * @return ChangeStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ChangeStatusResponse execute() throws ApiException {
            ApiResponse<ChangeStatusResponse> localVarResp = getStatusWithHttpInfo(orgId, scenarioId, changeId, processId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;ChangeStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChangeStatusResponse> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(orgId, scenarioId, changeId, processId);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChangeStatusResponse> _callback) throws ApiException {
            return getStatusAsync(orgId, scenarioId, changeId, processId, _callback);
        }
    }

    /**
     * Get the status of a running change within a scenario
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param scenarioId Scenario id (required)
     * @param changeId Change id (required)
     * @param processId Process id (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(String orgId, String scenarioId, String changeId, Integer processId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scenarioId == null) throw new IllegalArgumentException("\"scenarioId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
        return new GetStatusRequestBuilder(orgId, scenarioId, changeId, processId);
    }
    private okhttp3.Call performBulkChangeCall(String orgId, BulkChangeRequest bulkChangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkChangeRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/bulkchange"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call performBulkChangeValidateBeforeCall(String orgId, BulkChangeRequest bulkChangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling performBulkChange(Async)");
        }

        return performBulkChangeCall(orgId, bulkChangeRequest, _callback);

    }


    private ApiResponse<Process> performBulkChangeWithHttpInfo(String orgId, BulkChangeRequest bulkChangeRequest) throws ApiException {
        okhttp3.Call localVarCall = performBulkChangeValidateBeforeCall(orgId, bulkChangeRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call performBulkChangeAsync(String orgId, BulkChangeRequest bulkChangeRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = performBulkChangeValidateBeforeCall(orgId, bulkChangeRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PerformBulkChangeRequestBuilder {
        private final List<CreateChange> changes;
        private final String orgId;

        private PerformBulkChangeRequestBuilder(List<CreateChange> changes, String orgId) {
            this.changes = changes;
            this.orgId = orgId;
        }

        /**
         * Build call for performBulkChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BulkChangeRequest bulkChangeRequest = buildBodyParams();
            return performBulkChangeCall(orgId, bulkChangeRequest, _callback);
        }

        private BulkChangeRequest buildBodyParams() {
            BulkChangeRequest bulkChangeRequest = new BulkChangeRequest();
            bulkChangeRequest.changes(this.changes);
            return bulkChangeRequest;
        }

        /**
         * Execute performBulkChange request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            BulkChangeRequest bulkChangeRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = performBulkChangeWithHttpInfo(orgId, bulkChangeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute performBulkChange request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            BulkChangeRequest bulkChangeRequest = buildBodyParams();
            return performBulkChangeWithHttpInfo(orgId, bulkChangeRequest);
        }

        /**
         * Execute performBulkChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            BulkChangeRequest bulkChangeRequest = buildBodyParams();
            return performBulkChangeAsync(orgId, bulkChangeRequest, _callback);
        }
    }

    /**
     * Perform a series of changes at once
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return PerformBulkChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public PerformBulkChangeRequestBuilder performBulkChange(List<CreateChange> changes, String orgId) throws IllegalArgumentException {
        if (changes == null) throw new IllegalArgumentException("\"changes\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new PerformBulkChangeRequestBuilder(changes, orgId);
    }
    private okhttp3.Call updateChangeByIdCall(String orgId, String changeId, String processId, UpdateChange updateChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{changeId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChangeByIdValidateBeforeCall(String orgId, String changeId, String processId, UpdateChange updateChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateChangeById(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling updateChangeById(Async)");
        }

        return updateChangeByIdCall(orgId, changeId, processId, updateChange, _callback);

    }


    private ApiResponse<Void> updateChangeByIdWithHttpInfo(String orgId, String changeId, String processId, UpdateChange updateChange) throws ApiException {
        okhttp3.Call localVarCall = updateChangeByIdValidateBeforeCall(orgId, changeId, processId, updateChange, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChangeByIdAsync(String orgId, String changeId, String processId, UpdateChange updateChange, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChangeByIdValidateBeforeCall(orgId, changeId, processId, updateChange, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChangeByIdRequestBuilder {
        private final String orgId;
        private final String changeId;
        private LocalDate date;
        private LocalDate announceDate;
        private String status;
        private String departType;
        private String departRegret;
        private String reason;
        private String promotionType;
        private PartialJob job;
        private JobUpdate update;
        private String note;
        private String approvalNote;
        private String processId;

        private UpdateChangeByIdRequestBuilder(String orgId, String changeId) {
            this.orgId = orgId;
            this.changeId = changeId;
        }

        /**
         * Set date
         * @param date date of change (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set announceDate
         * @param announceDate for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder announceDate(LocalDate announceDate) {
            this.announceDate = announceDate;
            return this;
        }
        
        /**
         * Set status
         * @param status whether the change is active or not (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set departType
         * @param departType for DEPART changes, the type of departure (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder departType(String departType) {
            this.departType = departType;
            return this;
        }
        
        /**
         * Set departRegret
         * @param departRegret for DEPART changes, whether the departure is regrettable (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder departRegret(String departRegret) {
            this.departRegret = departRegret;
            return this;
        }
        
        /**
         * Set reason
         * @param reason the reason of the change (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set promotionType
         * @param promotionType if it&#39;s a promotion or a demotion (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder promotionType(String promotionType) {
            this.promotionType = promotionType;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder job(PartialJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder update(JobUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Set note
         * @param note note on the change (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Set approvalNote
         * @param approvalNote approval/rejection note (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder approvalNote(String approvalNote) {
            this.approvalNote = approvalNote;
            return this;
        }
        
        /**
         * Set processId
         * @param processId Process id of person creation (optional)
         * @return UpdateChangeByIdRequestBuilder
         */
        public UpdateChangeByIdRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for updateChangeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateChange updateChange = buildBodyParams();
            return updateChangeByIdCall(orgId, changeId, processId, updateChange, _callback);
        }

        private UpdateChange buildBodyParams() {
            UpdateChange updateChange = new UpdateChange();
            updateChange.date(this.date);
            updateChange.announceDate(this.announceDate);
            if (this.status != null)
            updateChange.status(UpdateChange.StatusEnum.fromValue(this.status));
            if (this.departType != null)
            updateChange.departType(UpdateChange.DepartTypeEnum.fromValue(this.departType));
            if (this.departRegret != null)
            updateChange.departRegret(UpdateChange.DepartRegretEnum.fromValue(this.departRegret));
            updateChange.reason(this.reason);
            if (this.promotionType != null)
            updateChange.promotionType(UpdateChange.PromotionTypeEnum.fromValue(this.promotionType));
            updateChange.job(this.job);
            updateChange.update(this.update);
            updateChange.note(this.note);
            updateChange.approvalNote(this.approvalNote);
            return updateChange;
        }

        /**
         * Execute updateChangeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateChange updateChange = buildBodyParams();
            updateChangeByIdWithHttpInfo(orgId, changeId, processId, updateChange);
        }

        /**
         * Execute updateChangeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateChange updateChange = buildBodyParams();
            return updateChangeByIdWithHttpInfo(orgId, changeId, processId, updateChange);
        }

        /**
         * Execute updateChangeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateChange updateChange = buildBodyParams();
            return updateChangeByIdAsync(orgId, changeId, processId, updateChange, _callback);
        }
    }

    /**
     * Make a change to a change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param changeId Change id (required)
     * @return UpdateChangeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChangeByIdRequestBuilder updateChangeById(String orgId, String changeId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (changeId == null) throw new IllegalArgumentException("\"changeId\" is required but got null");
            

        return new UpdateChangeByIdRequestBuilder(orgId, changeId);
    }
    private okhttp3.Call validateChangeOperationCall(String orgId, String type, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChange;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change/{type}/validate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateChangeOperationValidateBeforeCall(String orgId, String type, CreateChange createChange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling validateChangeOperation(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling validateChangeOperation(Async)");
        }

        return validateChangeOperationCall(orgId, type, createChange, _callback);

    }


    private ApiResponse<Change> validateChangeOperationWithHttpInfo(String orgId, String type, CreateChange createChange) throws ApiException {
        okhttp3.Call localVarCall = validateChangeOperationValidateBeforeCall(orgId, type, createChange, null);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateChangeOperationAsync(String orgId, String type, CreateChange createChange, final ApiCallback<Change> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateChangeOperationValidateBeforeCall(orgId, type, createChange, _callback);
        Type localVarReturnType = new TypeToken<Change>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateChangeOperationRequestBuilder {
        private final String orgId;
        private final String type;
        private String jobId;
        private String orgId;
        private String scenarioId;
        private String personId;
        private String otherJobId;
        private String type;
        private LocalDate date;
        private LocalDate announceDate;
        private String departType;
        private String departRegret;
        private String reason;
        private String promotionType;
        private PartialJob job;
        private JobUpdate update;
        private String note;

        private ValidateChangeOperationRequestBuilder(String orgId, String type) {
            this.orgId = orgId;
            this.type = type;
        }

        /**
         * Set jobId
         * @param jobId job id (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder jobId(String jobId) {
            this.jobId = jobId;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId scenario that this change belongs to (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId the id of the person involved, or empty if no person attached to job (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set otherJobId
         * @param otherJobId for MOVE changes, the id of the job moving from; for RELATE changes, the id of the other job (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder otherJobId(String otherJobId) {
            this.otherJobId = otherJobId;
            return this;
        }
        
        /**
         * Set type
         * @param type type of change (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set date
         * @param date date of change (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set announceDate
         * @param announceDate for HIRE and DEPART changes, the announce date, if the announce date is different from the date of change (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder announceDate(LocalDate announceDate) {
            this.announceDate = announceDate;
            return this;
        }
        
        /**
         * Set departType
         * @param departType for DEPART changes, the type of departure (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder departType(String departType) {
            this.departType = departType;
            return this;
        }
        
        /**
         * Set departRegret
         * @param departRegret for DEPART changes, whether the departure is regrettable (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder departRegret(String departRegret) {
            this.departRegret = departRegret;
            return this;
        }
        
        /**
         * Set reason
         * @param reason the reason of the change (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set promotionType
         * @param promotionType if it&#39;s a promotion or a demotion (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder promotionType(String promotionType) {
            this.promotionType = promotionType;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder job(PartialJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set update
         * @param update  (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder update(JobUpdate update) {
            this.update = update;
            return this;
        }
        
        /**
         * Set note
         * @param note note on the change (optional)
         * @return ValidateChangeOperationRequestBuilder
         */
        public ValidateChangeOperationRequestBuilder note(String note) {
            this.note = note;
            return this;
        }
        
        /**
         * Build call for validateChangeOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return validateChangeOperationCall(orgId, type, createChange, _callback);
        }

        private CreateChange buildBodyParams() {
            CreateChange createChange = new CreateChange();
            createChange.jobId(this.jobId);
            createChange.orgId(this.orgId);
            createChange.scenarioId(this.scenarioId);
            createChange.personId(this.personId);
            createChange.otherJobId(this.otherJobId);
            if (this.type != null)
            createChange.type(CreateChange.TypeEnum.fromValue(this.type));
            createChange.date(this.date);
            createChange.announceDate(this.announceDate);
            if (this.departType != null)
            createChange.departType(CreateChange.DepartTypeEnum.fromValue(this.departType));
            if (this.departRegret != null)
            createChange.departRegret(CreateChange.DepartRegretEnum.fromValue(this.departRegret));
            createChange.reason(this.reason);
            if (this.promotionType != null)
            createChange.promotionType(CreateChange.PromotionTypeEnum.fromValue(this.promotionType));
            createChange.job(this.job);
            createChange.update(this.update);
            createChange.note(this.note);
            return createChange;
        }

        /**
         * Execute validateChangeOperation request
         * @return Change
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Change execute() throws ApiException {
            CreateChange createChange = buildBodyParams();
            ApiResponse<Change> localVarResp = validateChangeOperationWithHttpInfo(orgId, type, createChange);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateChangeOperation request with HTTP info returned
         * @return ApiResponse&lt;Change&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Change> executeWithHttpInfo() throws ApiException {
            CreateChange createChange = buildBodyParams();
            return validateChangeOperationWithHttpInfo(orgId, type, createChange);
        }

        /**
         * Execute validateChangeOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Change> _callback) throws ApiException {
            CreateChange createChange = buildBodyParams();
            return validateChangeOperationAsync(orgId, type, createChange, _callback);
        }
    }

    /**
     * Validate a change
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param type Change type (required)
     * @return ValidateChangeOperationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ValidateChangeOperationRequestBuilder validateChangeOperation(String orgId, String type) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new ValidateChangeOperationRequestBuilder(orgId, type);
    }
}
