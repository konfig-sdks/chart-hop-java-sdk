/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateTable;
import java.io.File;
import com.konfigthis.client.model.FileUploadNewFileRequest;
import java.time.LocalDate;
import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsTable;
import com.konfigthis.client.model.ShareAccess;
import com.konfigthis.client.model.Table;
import com.konfigthis.client.model.UpdateTable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TableApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TableApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TableApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewTableCall(String orgId, CreateTable createTable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTable;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTableValidateBeforeCall(String orgId, CreateTable createTable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewTable(Async)");
        }

        return createNewTableCall(orgId, createTable, _callback);

    }


    private ApiResponse<Table> createNewTableWithHttpInfo(String orgId, CreateTable createTable) throws ApiException {
        okhttp3.Call localVarCall = createNewTableValidateBeforeCall(orgId, createTable, null);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTableAsync(String orgId, CreateTable createTable, final ApiCallback<Table> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTableValidateBeforeCall(orgId, createTable, _callback);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTableRequestBuilder {
        private final String name;
        private final Boolean effectiveDated;
        private final String orgId;
        private String label;
        private String sensitive;
        private List<ShareAccess> shareAccess;

        private CreateNewTableRequestBuilder(String name, Boolean effectiveDated, String orgId) {
            this.name = name;
            this.effectiveDated = effectiveDated;
            this.orgId = orgId;
        }

        /**
         * Set label
         * @param label human readable label for the table (optional)
         * @return CreateNewTableRequestBuilder
         */
        public CreateNewTableRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive base sensitivity of this table and entities in it -- should be either ORG or HIGH (optional)
         * @return CreateNewTableRequestBuilder
         */
        public CreateNewTableRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to this table (optional)
         * @return CreateNewTableRequestBuilder
         */
        public CreateNewTableRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Build call for createNewTable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTable createTable = buildBodyParams();
            return createNewTableCall(orgId, createTable, _callback);
        }

        private CreateTable buildBodyParams() {
            CreateTable createTable = new CreateTable();
            createTable.name(this.name);
            createTable.label(this.label);
            createTable.effectiveDated(this.effectiveDated);
            if (this.sensitive != null)
            createTable.sensitive(CreateTable.SensitiveEnum.fromValue(this.sensitive));
            createTable.shareAccess(this.shareAccess);
            return createTable;
        }

        /**
         * Execute createNewTable request
         * @return Table
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Table execute() throws ApiException {
            CreateTable createTable = buildBodyParams();
            ApiResponse<Table> localVarResp = createNewTableWithHttpInfo(orgId, createTable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTable request with HTTP info returned
         * @return ApiResponse&lt;Table&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Table> executeWithHttpInfo() throws ApiException {
            CreateTable createTable = buildBodyParams();
            return createNewTableWithHttpInfo(orgId, createTable);
        }

        /**
         * Execute createNewTable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Table> _callback) throws ApiException {
            CreateTable createTable = buildBodyParams();
            return createNewTableAsync(orgId, createTable, _callback);
        }
    }

    /**
     * Create a table
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewTableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTableRequestBuilder createNewTable(String name, Boolean effectiveDated, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (effectiveDated == null) throw new IllegalArgumentException("\"effectiveDated\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewTableRequestBuilder(name, effectiveDated, orgId);
    }
    private okhttp3.Call deleteRowCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()))
            .replace("{" + "keyColumn" + "}", localVarApiClient.escapeString(keyColumn.toString()))
            .replace("{" + "keyValue" + "}", localVarApiClient.escapeString(keyValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRowValidateBeforeCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteRow(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteRow(Async)");
        }

        // verify the required parameter 'keyColumn' is set
        if (keyColumn == null) {
            throw new ApiException("Missing the required parameter 'keyColumn' when calling deleteRow(Async)");
        }

        // verify the required parameter 'keyValue' is set
        if (keyValue == null) {
            throw new ApiException("Missing the required parameter 'keyValue' when calling deleteRow(Async)");
        }

        return deleteRowCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, _callback);

    }


    private ApiResponse<ResultsData> deleteRowWithHttpInfo(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = deleteRowValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRowAsync(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRowValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRowRequestBuilder {
        private final String orgId;
        private final String tableId;
        private final String keyColumn;
        private final String keyValue;
        private LocalDate date;
        private String scenarioId;

        private DeleteRowRequestBuilder(String orgId, String tableId, String keyColumn, String keyValue) {
            this.orgId = orgId;
            this.tableId = tableId;
            this.keyColumn = keyColumn;
            this.keyValue = keyValue;
        }

        /**
         * Set date
         * @param date Date to delete as of (optional)
         * @return DeleteRowRequestBuilder
         */
        public DeleteRowRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to delete from (optional)
         * @return DeleteRowRequestBuilder
         */
        public DeleteRowRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for deleteRow
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRowCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, _callback);
        }


        /**
         * Execute deleteRow request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = deleteRowWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRow request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return deleteRowWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId);
        }

        /**
         * Execute deleteRow request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return deleteRowAsync(orgId, tableId, keyColumn, keyValue, date, scenarioId, _callback);
        }
    }

    /**
     * Delete an existing row
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @param keyColumn Column name to look up the row by (for example: id) (required)
     * @param keyValue Value of the key column (required)
     * @return DeleteRowRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRowRequestBuilder deleteRow(String orgId, String tableId, String keyColumn, String keyValue) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        if (keyColumn == null) throw new IllegalArgumentException("\"keyColumn\" is required but got null");
            

        if (keyValue == null) throw new IllegalArgumentException("\"keyValue\" is required but got null");
            

        return new DeleteRowRequestBuilder(orgId, tableId, keyColumn, keyValue);
    }
    private okhttp3.Call deleteRowFromHistoryCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}/purge"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()))
            .replace("{" + "keyColumn" + "}", localVarApiClient.escapeString(keyColumn.toString()))
            .replace("{" + "keyValue" + "}", localVarApiClient.escapeString(keyValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRowFromHistoryValidateBeforeCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteRowFromHistory(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling deleteRowFromHistory(Async)");
        }

        // verify the required parameter 'keyColumn' is set
        if (keyColumn == null) {
            throw new ApiException("Missing the required parameter 'keyColumn' when calling deleteRowFromHistory(Async)");
        }

        // verify the required parameter 'keyValue' is set
        if (keyValue == null) {
            throw new ApiException("Missing the required parameter 'keyValue' when calling deleteRowFromHistory(Async)");
        }

        return deleteRowFromHistoryCall(orgId, tableId, keyColumn, keyValue, date, _callback);

    }


    private ApiResponse<ResultsData> deleteRowFromHistoryWithHttpInfo(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = deleteRowFromHistoryValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteRowFromHistoryAsync(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRowFromHistoryValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRowFromHistoryRequestBuilder {
        private final String orgId;
        private final String tableId;
        private final String keyColumn;
        private final String keyValue;
        private LocalDate date;

        private DeleteRowFromHistoryRequestBuilder(String orgId, String tableId, String keyColumn, String keyValue) {
            this.orgId = orgId;
            this.tableId = tableId;
            this.keyColumn = keyColumn;
            this.keyValue = keyValue;
        }

        /**
         * Set date
         * @param date Date to look up as of (optional)
         * @return DeleteRowFromHistoryRequestBuilder
         */
        public DeleteRowFromHistoryRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for deleteRowFromHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRowFromHistoryCall(orgId, tableId, keyColumn, keyValue, date, _callback);
        }


        /**
         * Execute deleteRowFromHistory request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = deleteRowFromHistoryWithHttpInfo(orgId, tableId, keyColumn, keyValue, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteRowFromHistory request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return deleteRowFromHistoryWithHttpInfo(orgId, tableId, keyColumn, keyValue, date);
        }

        /**
         * Execute deleteRowFromHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return deleteRowFromHistoryAsync(orgId, tableId, keyColumn, keyValue, date, _callback);
        }
    }

    /**
     * Delete an existing row, purging from history entirely
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @param keyColumn Column name to look up the row by (for example: id) (required)
     * @param keyValue Value of the key column (required)
     * @return DeleteRowFromHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRowFromHistoryRequestBuilder deleteRowFromHistory(String orgId, String tableId, String keyColumn, String keyValue) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        if (keyColumn == null) throw new IllegalArgumentException("\"keyColumn\" is required but got null");
            

        if (keyValue == null) throw new IllegalArgumentException("\"keyValue\" is required but got null");
            

        return new DeleteRowFromHistoryRequestBuilder(orgId, tableId, keyColumn, keyValue);
    }
    private okhttp3.Call exportDataToCsvCall(String orgId, String tableId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/export"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportDataToCsvValidateBeforeCall(String orgId, String tableId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling exportDataToCsv(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling exportDataToCsv(Async)");
        }

        return exportDataToCsvCall(orgId, tableId, requestBody, _callback);

    }


    private ApiResponse<Process> exportDataToCsvWithHttpInfo(String orgId, String tableId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = exportDataToCsvValidateBeforeCall(orgId, tableId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportDataToCsvAsync(String orgId, String tableId, Map<String, Object> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportDataToCsvValidateBeforeCall(orgId, tableId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExportDataToCsvRequestBuilder {
        private final String orgId;
        private final String tableId;

        private ExportDataToCsvRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Build call for exportDataToCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportDataToCsvCall(orgId, tableId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute exportDataToCsv request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = exportDataToCsvWithHttpInfo(orgId, tableId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exportDataToCsv request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportDataToCsvWithHttpInfo(orgId, tableId, requestBody);
        }

        /**
         * Execute exportDataToCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return exportDataToCsvAsync(orgId, tableId, requestBody, _callback);
        }
    }

    /**
     * Export table data to CSV file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @return ExportDataToCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ExportDataToCsvRequestBuilder exportDataToCsv(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new ExportDataToCsvRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call getAllRowsCall(String orgId, String tableId, LocalDate date, String scenarioId, String columns, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (columns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("columns", columns));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRowsValidateBeforeCall(String orgId, String tableId, LocalDate date, String scenarioId, String columns, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllRows(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getAllRows(Async)");
        }

        return getAllRowsCall(orgId, tableId, date, scenarioId, columns, format, _callback);

    }


    private ApiResponse<ResultsData> getAllRowsWithHttpInfo(String orgId, String tableId, LocalDate date, String scenarioId, String columns, String format) throws ApiException {
        okhttp3.Call localVarCall = getAllRowsValidateBeforeCall(orgId, tableId, date, scenarioId, columns, format, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllRowsAsync(String orgId, String tableId, LocalDate date, String scenarioId, String columns, String format, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRowsValidateBeforeCall(orgId, tableId, date, scenarioId, columns, format, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRowsRequestBuilder {
        private final String orgId;
        private final String tableId;
        private LocalDate date;
        private String scenarioId;
        private String columns;
        private String format;

        private GetAllRowsRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetAllRowsRequestBuilder
         */
        public GetAllRowsRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to retrieve from (optional)
         * @return GetAllRowsRequestBuilder
         */
        public GetAllRowsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set columns
         * @param columns Columns to retrieve, comma-separated (defaults to all columns) (optional)
         * @return GetAllRowsRequestBuilder
         */
        public GetAllRowsRequestBuilder columns(String columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended, json-readable, or csv (optional)
         * @return GetAllRowsRequestBuilder
         */
        public GetAllRowsRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getAllRows
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllRowsCall(orgId, tableId, date, scenarioId, columns, format, _callback);
        }


        /**
         * Execute getAllRows request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getAllRowsWithHttpInfo(orgId, tableId, date, scenarioId, columns, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllRows request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getAllRowsWithHttpInfo(orgId, tableId, date, scenarioId, columns, format);
        }

        /**
         * Execute getAllRows request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getAllRowsAsync(orgId, tableId, date, scenarioId, columns, format, _callback);
        }
    }

    /**
     * Retrieve all rows from the table
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to retrieve (required)
     * @return GetAllRowsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRowsRequestBuilder getAllRows(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new GetAllRowsRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call getRowByColumnCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, String columns, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()))
            .replace("{" + "keyColumn" + "}", localVarApiClient.escapeString(keyColumn.toString()))
            .replace("{" + "keyValue" + "}", localVarApiClient.escapeString(keyValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (columns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("columns", columns));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRowByColumnValidateBeforeCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, String columns, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getRowByColumn(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getRowByColumn(Async)");
        }

        // verify the required parameter 'keyColumn' is set
        if (keyColumn == null) {
            throw new ApiException("Missing the required parameter 'keyColumn' when calling getRowByColumn(Async)");
        }

        // verify the required parameter 'keyValue' is set
        if (keyValue == null) {
            throw new ApiException("Missing the required parameter 'keyValue' when calling getRowByColumn(Async)");
        }

        return getRowByColumnCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format, _callback);

    }


    private ApiResponse<ResultsData> getRowByColumnWithHttpInfo(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, String columns, String format) throws ApiException {
        okhttp3.Call localVarCall = getRowByColumnValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRowByColumnAsync(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, String columns, String format, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRowByColumnValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRowByColumnRequestBuilder {
        private final String orgId;
        private final String tableId;
        private final String keyColumn;
        private final String keyValue;
        private LocalDate date;
        private String scenarioId;
        private String columns;
        private String format;

        private GetRowByColumnRequestBuilder(String orgId, String tableId, String keyColumn, String keyValue) {
            this.orgId = orgId;
            this.tableId = tableId;
            this.keyColumn = keyColumn;
            this.keyValue = keyValue;
        }

        /**
         * Set date
         * @param date Date to search as of (optional)
         * @return GetRowByColumnRequestBuilder
         */
        public GetRowByColumnRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to retrieve from (optional)
         * @return GetRowByColumnRequestBuilder
         */
        public GetRowByColumnRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set columns
         * @param columns Columns to retrieve, comma-separated (defaults to all columns) (optional)
         * @return GetRowByColumnRequestBuilder
         */
        public GetRowByColumnRequestBuilder columns(String columns) {
            this.columns = columns;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended, json-readable, or csv (optional)
         * @return GetRowByColumnRequestBuilder
         */
        public GetRowByColumnRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Build call for getRowByColumn
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRowByColumnCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format, _callback);
        }


        /**
         * Execute getRowByColumn request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getRowByColumnWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRowByColumn request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getRowByColumnWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format);
        }

        /**
         * Execute getRowByColumn request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getRowByColumnAsync(orgId, tableId, keyColumn, keyValue, date, scenarioId, columns, format, _callback);
        }
    }

    /**
     * Retrieve a particular row
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to retrieve (required)
     * @param keyColumn Column name to look up the row by (for example: id) (required)
     * @param keyValue Value of the column (required)
     * @return GetRowByColumnRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetRowByColumnRequestBuilder getRowByColumn(String orgId, String tableId, String keyColumn, String keyValue) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        if (keyColumn == null) throw new IllegalArgumentException("\"keyColumn\" is required but got null");
            

        if (keyValue == null) throw new IllegalArgumentException("\"keyValue\" is required but got null");
            

        return new GetRowByColumnRequestBuilder(orgId, tableId, keyColumn, keyValue);
    }
    private okhttp3.Call getTableByIdOrNameCall(String orgId, String tableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTableByIdOrNameValidateBeforeCall(String orgId, String tableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getTableByIdOrName(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling getTableByIdOrName(Async)");
        }

        return getTableByIdOrNameCall(orgId, tableId, _callback);

    }


    private ApiResponse<Table> getTableByIdOrNameWithHttpInfo(String orgId, String tableId) throws ApiException {
        okhttp3.Call localVarCall = getTableByIdOrNameValidateBeforeCall(orgId, tableId, null);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTableByIdOrNameAsync(String orgId, String tableId, final ApiCallback<Table> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTableByIdOrNameValidateBeforeCall(orgId, tableId, _callback);
        Type localVarReturnType = new TypeToken<Table>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTableByIdOrNameRequestBuilder {
        private final String orgId;
        private final String tableId;

        private GetTableByIdOrNameRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Build call for getTableByIdOrName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTableByIdOrNameCall(orgId, tableId, _callback);
        }


        /**
         * Execute getTableByIdOrName request
         * @return Table
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Table execute() throws ApiException {
            ApiResponse<Table> localVarResp = getTableByIdOrNameWithHttpInfo(orgId, tableId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTableByIdOrName request with HTTP info returned
         * @return ApiResponse&lt;Table&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Table> executeWithHttpInfo() throws ApiException {
            return getTableByIdOrNameWithHttpInfo(orgId, tableId);
        }

        /**
         * Execute getTableByIdOrName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Table> _callback) throws ApiException {
            return getTableByIdOrNameAsync(orgId, tableId, _callback);
        }
    }

    /**
     * Return a particular table by id or name
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or name (required)
     * @return GetTableByIdOrNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetTableByIdOrNameRequestBuilder getTableByIdOrName(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new GetTableByIdOrNameRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call importDataFromCsvFileCall(String orgId, String tableId, LocalDate date, String importFromProcessId, String parentProcessId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fileUploadNewFileRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/import"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (importFromProcessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importFromProcessId", importFromProcessId));
        }

        if (parentProcessId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentProcessId", parentProcessId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importDataFromCsvFileValidateBeforeCall(String orgId, String tableId, LocalDate date, String importFromProcessId, String parentProcessId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling importDataFromCsvFile(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling importDataFromCsvFile(Async)");
        }

        return importDataFromCsvFileCall(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest, _callback);

    }


    private ApiResponse<Process> importDataFromCsvFileWithHttpInfo(String orgId, String tableId, LocalDate date, String importFromProcessId, String parentProcessId, FileUploadNewFileRequest fileUploadNewFileRequest) throws ApiException {
        okhttp3.Call localVarCall = importDataFromCsvFileValidateBeforeCall(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importDataFromCsvFileAsync(String orgId, String tableId, LocalDate date, String importFromProcessId, String parentProcessId, FileUploadNewFileRequest fileUploadNewFileRequest, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = importDataFromCsvFileValidateBeforeCall(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportDataFromCsvFileRequestBuilder {
        private final String orgId;
        private final String tableId;
        private File _file;
        private LocalDate date;
        private String importFromProcessId;
        private String parentProcessId;

        private ImportDataFromCsvFileRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Set _file
         * @param _file  (optional)
         * @return ImportDataFromCsvFileRequestBuilder
         */
        public ImportDataFromCsvFileRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set date
         * @param date Date to update as of (optional)
         * @return ImportDataFromCsvFileRequestBuilder
         */
        public ImportDataFromCsvFileRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set importFromProcessId
         * @param importFromProcessId Import a file from another process, instead of directly uploading it (optional)
         * @return ImportDataFromCsvFileRequestBuilder
         */
        public ImportDataFromCsvFileRequestBuilder importFromProcessId(String importFromProcessId) {
            this.importFromProcessId = importFromProcessId;
            return this;
        }
        
        /**
         * Set parentProcessId
         * @param parentProcessId Parent process id to attach to (optional)
         * @return ImportDataFromCsvFileRequestBuilder
         */
        public ImportDataFromCsvFileRequestBuilder parentProcessId(String parentProcessId) {
            this.parentProcessId = parentProcessId;
            return this;
        }
        
        /**
         * Build call for importDataFromCsvFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importDataFromCsvFileCall(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest, _callback);
        }

        private FileUploadNewFileRequest buildBodyParams() {
            FileUploadNewFileRequest fileUploadNewFileRequest = new FileUploadNewFileRequest();
            fileUploadNewFileRequest._file(this._file);
            return fileUploadNewFileRequest;
        }

        /**
         * Execute importDataFromCsvFile request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            ApiResponse<Process> localVarResp = importDataFromCsvFileWithHttpInfo(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importDataFromCsvFile request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importDataFromCsvFileWithHttpInfo(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest);
        }

        /**
         * Execute importDataFromCsvFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            FileUploadNewFileRequest fileUploadNewFileRequest = buildBodyParams();
            return importDataFromCsvFileAsync(orgId, tableId, date, importFromProcessId, parentProcessId, fileUploadNewFileRequest, _callback);
        }
    }

    /**
     * Import data from CSV file
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @return ImportDataFromCsvFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid manifest data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public ImportDataFromCsvFileRequestBuilder importDataFromCsvFile(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new ImportDataFromCsvFileRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call listInOrgPaginatedCall(String orgId, String from, Integer limit, Boolean includeBuiltIns, String names, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeBuiltIns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeBuiltIns", includeBuiltIns));
        }

        if (names != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("names", names));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInOrgPaginatedValidateBeforeCall(String orgId, String from, Integer limit, Boolean includeBuiltIns, String names, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling listInOrgPaginated(Async)");
        }

        return listInOrgPaginatedCall(orgId, from, limit, includeBuiltIns, names, _callback);

    }


    private ApiResponse<ResultsTable> listInOrgPaginatedWithHttpInfo(String orgId, String from, Integer limit, Boolean includeBuiltIns, String names) throws ApiException {
        okhttp3.Call localVarCall = listInOrgPaginatedValidateBeforeCall(orgId, from, limit, includeBuiltIns, names, null);
        Type localVarReturnType = new TypeToken<ResultsTable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInOrgPaginatedAsync(String orgId, String from, Integer limit, Boolean includeBuiltIns, String names, final ApiCallback<ResultsTable> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInOrgPaginatedValidateBeforeCall(orgId, from, limit, includeBuiltIns, names, _callback);
        Type localVarReturnType = new TypeToken<ResultsTable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInOrgPaginatedRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;
        private Boolean includeBuiltIns;
        private String names;

        private ListInOrgPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Table id to start paginating from (optional)
         * @return ListInOrgPaginatedRequestBuilder
         */
        public ListInOrgPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListInOrgPaginatedRequestBuilder
         */
        public ListInOrgPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set includeBuiltIns
         * @param includeBuiltIns Whether to include built-in tables (optional)
         * @return ListInOrgPaginatedRequestBuilder
         */
        public ListInOrgPaginatedRequestBuilder includeBuiltIns(Boolean includeBuiltIns) {
            this.includeBuiltIns = includeBuiltIns;
            return this;
        }
        
        /**
         * Set names
         * @param names Table names to filter to (optional)
         * @return ListInOrgPaginatedRequestBuilder
         */
        public ListInOrgPaginatedRequestBuilder names(String names) {
            this.names = names;
            return this;
        }
        
        /**
         * Build call for listInOrgPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInOrgPaginatedCall(orgId, from, limit, includeBuiltIns, names, _callback);
        }


        /**
         * Execute listInOrgPaginated request
         * @return ResultsTable
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsTable execute() throws ApiException {
            ApiResponse<ResultsTable> localVarResp = listInOrgPaginatedWithHttpInfo(orgId, from, limit, includeBuiltIns, names);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInOrgPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsTable&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsTable> executeWithHttpInfo() throws ApiException {
            return listInOrgPaginatedWithHttpInfo(orgId, from, limit, includeBuiltIns, names);
        }

        /**
         * Execute listInOrgPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsTable> _callback) throws ApiException {
            return listInOrgPaginatedAsync(orgId, from, limit, includeBuiltIns, names, _callback);
        }
    }

    /**
     * Return all tables in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ListInOrgPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListInOrgPaginatedRequestBuilder listInOrgPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ListInOrgPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String tableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String tableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, tableId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String tableId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, tableId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String tableId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, tableId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String tableId;

        private RemoveByIdRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, tableId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, tableId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, tableId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, tableId, _callback);
        }
    }

    /**
     * Delete a table
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or name (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call updateExistingRowDataCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data/{keyColumn}/{keyValue}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()))
            .replace("{" + "keyColumn" + "}", localVarApiClient.escapeString(keyColumn.toString()))
            .replace("{" + "keyValue" + "}", localVarApiClient.escapeString(keyValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingRowDataValidateBeforeCall(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingRowData(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling updateExistingRowData(Async)");
        }

        // verify the required parameter 'keyColumn' is set
        if (keyColumn == null) {
            throw new ApiException("Missing the required parameter 'keyColumn' when calling updateExistingRowData(Async)");
        }

        // verify the required parameter 'keyValue' is set
        if (keyValue == null) {
            throw new ApiException("Missing the required parameter 'keyValue' when calling updateExistingRowData(Async)");
        }

        return updateExistingRowDataCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody, _callback);

    }


    private ApiResponse<ResultsData> updateExistingRowDataWithHttpInfo(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = updateExistingRowDataValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingRowDataAsync(String orgId, String tableId, String keyColumn, String keyValue, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingRowDataValidateBeforeCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingRowDataRequestBuilder {
        private final String orgId;
        private final String tableId;
        private final String keyColumn;
        private final String keyValue;
        private LocalDate date;
        private String scenarioId;

        private UpdateExistingRowDataRequestBuilder(String orgId, String tableId, String keyColumn, String keyValue) {
            this.orgId = orgId;
            this.tableId = tableId;
            this.keyColumn = keyColumn;
            this.keyValue = keyValue;
        }

        /**
         * Set date
         * @param date Date to update as of (optional)
         * @return UpdateExistingRowDataRequestBuilder
         */
        public UpdateExistingRowDataRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update (optional)
         * @return UpdateExistingRowDataRequestBuilder
         */
        public UpdateExistingRowDataRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for updateExistingRowData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateExistingRowDataCall(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute updateExistingRowData request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<ResultsData> localVarResp = updateExistingRowDataWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingRowData request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateExistingRowDataWithHttpInfo(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody);
        }

        /**
         * Execute updateExistingRowData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return updateExistingRowDataAsync(orgId, tableId, keyColumn, keyValue, date, scenarioId, requestBody, _callback);
        }
    }

    /**
     * Update an existing row
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @param keyColumn Column name to look up the row by (for example: id) (required)
     * @param keyValue Value of the key column (required)
     * @return UpdateExistingRowDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingRowDataRequestBuilder updateExistingRowData(String orgId, String tableId, String keyColumn, String keyValue) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        if (keyColumn == null) throw new IllegalArgumentException("\"keyColumn\" is required but got null");
            

        if (keyValue == null) throw new IllegalArgumentException("\"keyValue\" is required but got null");
            

        return new UpdateExistingRowDataRequestBuilder(orgId, tableId, keyColumn, keyValue);
    }
    private okhttp3.Call updateExistingTableCall(String orgId, String tableId, UpdateTable updateTable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTable;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingTableValidateBeforeCall(String orgId, String tableId, UpdateTable updateTable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingTable(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling updateExistingTable(Async)");
        }

        return updateExistingTableCall(orgId, tableId, updateTable, _callback);

    }


    private ApiResponse<Void> updateExistingTableWithHttpInfo(String orgId, String tableId, UpdateTable updateTable) throws ApiException {
        okhttp3.Call localVarCall = updateExistingTableValidateBeforeCall(orgId, tableId, updateTable, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingTableAsync(String orgId, String tableId, UpdateTable updateTable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingTableValidateBeforeCall(orgId, tableId, updateTable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingTableRequestBuilder {
        private final String orgId;
        private final String tableId;
        private String name;
        private String label;
        private String labelColumnId;
        private Boolean effectiveDated;
        private String sensitive;
        private List<ShareAccess> shareAccess;

        private UpdateExistingTableRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Set name
         * @param name name of table (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set label
         * @param label human readable label for the table (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set labelColumnId
         * @param labelColumnId if set, use this column id as the label when referencing rows (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder labelColumnId(String labelColumnId) {
            this.labelColumnId = labelColumnId;
            return this;
        }
        
        /**
         * Set effectiveDated
         * @param effectiveDated whether or not the table is time tracked with effective dates (allows time travel or not). If false, then the values set in the table will be the same across all dates. (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder effectiveDated(Boolean effectiveDated) {
            this.effectiveDated = effectiveDated;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive base sensitivity of this table and entities in it -- should be either ORG or HIGH (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set shareAccess
         * @param shareAccess users who are specifically granted permission to this table (optional)
         * @return UpdateExistingTableRequestBuilder
         */
        public UpdateExistingTableRequestBuilder shareAccess(List<ShareAccess> shareAccess) {
            this.shareAccess = shareAccess;
            return this;
        }
        
        /**
         * Build call for updateExistingTable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTable updateTable = buildBodyParams();
            return updateExistingTableCall(orgId, tableId, updateTable, _callback);
        }

        private UpdateTable buildBodyParams() {
            UpdateTable updateTable = new UpdateTable();
            updateTable.name(this.name);
            updateTable.label(this.label);
            updateTable.labelColumnId(this.labelColumnId);
            updateTable.effectiveDated(this.effectiveDated);
            if (this.sensitive != null)
            updateTable.sensitive(UpdateTable.SensitiveEnum.fromValue(this.sensitive));
            updateTable.shareAccess(this.shareAccess);
            return updateTable;
        }

        /**
         * Execute updateExistingTable request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTable updateTable = buildBodyParams();
            updateExistingTableWithHttpInfo(orgId, tableId, updateTable);
        }

        /**
         * Execute updateExistingTable request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTable updateTable = buildBodyParams();
            return updateExistingTableWithHttpInfo(orgId, tableId, updateTable);
        }

        /**
         * Execute updateExistingTable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTable updateTable = buildBodyParams();
            return updateExistingTableAsync(orgId, tableId, updateTable, _callback);
        }
    }

    /**
     * Update an existing table
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or name (required)
     * @return UpdateExistingTableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingTableRequestBuilder updateExistingTable(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new UpdateExistingTableRequestBuilder(orgId, tableId);
    }
    private okhttp3.Call upsertRowDataCall(String orgId, String tableId, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/table/{tableId}/data"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "tableId" + "}", localVarApiClient.escapeString(tableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertRowDataValidateBeforeCall(String orgId, String tableId, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling upsertRowData(Async)");
        }

        // verify the required parameter 'tableId' is set
        if (tableId == null) {
            throw new ApiException("Missing the required parameter 'tableId' when calling upsertRowData(Async)");
        }

        return upsertRowDataCall(orgId, tableId, date, scenarioId, requestBody, _callback);

    }


    private ApiResponse<ResultsData> upsertRowDataWithHttpInfo(String orgId, String tableId, LocalDate date, String scenarioId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = upsertRowDataValidateBeforeCall(orgId, tableId, date, scenarioId, requestBody, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertRowDataAsync(String orgId, String tableId, LocalDate date, String scenarioId, Map<String, Object> requestBody, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertRowDataValidateBeforeCall(orgId, tableId, date, scenarioId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpsertRowDataRequestBuilder {
        private final String orgId;
        private final String tableId;
        private LocalDate date;
        private String scenarioId;

        private UpsertRowDataRequestBuilder(String orgId, String tableId) {
            this.orgId = orgId;
            this.tableId = tableId;
        }

        /**
         * Set date
         * @param date Date to update as of (optional)
         * @return UpsertRowDataRequestBuilder
         */
        public UpsertRowDataRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id to update (optional)
         * @return UpsertRowDataRequestBuilder
         */
        public UpsertRowDataRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for upsertRowData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return upsertRowDataCall(orgId, tableId, date, scenarioId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute upsertRowData request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<ResultsData> localVarResp = upsertRowDataWithHttpInfo(orgId, tableId, date, scenarioId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upsertRowData request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return upsertRowDataWithHttpInfo(orgId, tableId, date, scenarioId, requestBody);
        }

        /**
         * Execute upsertRowData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return upsertRowDataAsync(orgId, tableId, date, scenarioId, requestBody, _callback);
        }
    }

    /**
     * Upsert row data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param tableId Table id or unique name to update (required)
     * @return UpsertRowDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpsertRowDataRequestBuilder upsertRowData(String orgId, String tableId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (tableId == null) throw new IllegalArgumentException("\"tableId\" is required but got null");
            

        return new UpsertRowDataRequestBuilder(orgId, tableId);
    }
}
