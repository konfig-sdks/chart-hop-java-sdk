/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Process;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsTask;
import com.konfigthis.client.model.TaskRemindRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TaskApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteBulkTasksCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/bulk-delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBulkTasksValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteBulkTasks(Async)");
        }

        return deleteBulkTasksCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Process> deleteBulkTasksWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = deleteBulkTasksValidateBeforeCall(orgId, requestBody, null);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBulkTasksAsync(String orgId, List<String> requestBody, final ApiCallback<Process> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBulkTasksValidateBeforeCall(orgId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<Process>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBulkTasksRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private DeleteBulkTasksRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody List of task ids to delete (optional)
         * @return DeleteBulkTasksRequestBuilder
         */
        public DeleteBulkTasksRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for deleteBulkTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkTasksCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute deleteBulkTasks request
         * @return Process
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public Process execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            ApiResponse<Process> localVarResp = deleteBulkTasksWithHttpInfo(orgId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBulkTasks request with HTTP info returned
         * @return ApiResponse&lt;Process&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Process> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkTasksWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute deleteBulkTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Process> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return deleteBulkTasksAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Bulk delete tasks
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteBulkTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBulkTasksRequestBuilder deleteBulkTasks(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteBulkTasksRequestBuilder(orgId);
    }
    private okhttp3.Call getAllTasksCall(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllTasksValidateBeforeCall(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllTasks(Async)");
        }

        return getAllTasksCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, _callback);

    }


    private ApiResponse<ResultsTask> getAllTasksWithHttpInfo(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllTasksValidateBeforeCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, null);
        Type localVarReturnType = new TypeToken<ResultsTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllTasksAsync(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback<ResultsTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllTasksValidateBeforeCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllTasksRequestBuilder {
        private final String orgId;
        private String userId;
        private String assessmentId;
        private String status;
        private String type;
        private String entityId;
        private String targetId;
        private Integer limit;

        private GetAllTasksRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set userId
         * @param userId Task User id (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId Assessment id (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set status
         * @param status Task.Status. (PENDING/DONE) (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type Task.Type of task (form) (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId Entity Id (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Target Id (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllTasksRequestBuilder
         */
        public GetAllTasksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAllTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllTasksCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, _callback);
        }


        /**
         * Execute getAllTasks request
         * @return ResultsTask
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ResultsTask execute() throws ApiException {
            ApiResponse<ResultsTask> localVarResp = getAllTasksWithHttpInfo(orgId, userId, assessmentId, status, type, entityId, targetId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllTasks request with HTTP info returned
         * @return ApiResponse&lt;ResultsTask&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsTask> executeWithHttpInfo() throws ApiException {
            return getAllTasksWithHttpInfo(orgId, userId, assessmentId, status, type, entityId, targetId, limit);
        }

        /**
         * Execute getAllTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsTask> _callback) throws ApiException {
            return getAllTasksAsync(orgId, userId, assessmentId, status, type, entityId, targetId, limit, _callback);
        }
    }

    /**
     * Return all existing tasks
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTasksRequestBuilder getAllTasks(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllTasksRequestBuilder(orgId);
    }
    private okhttp3.Call getAssessmentTasksSummaryCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/summary/{assessmentId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssessmentTasksSummaryValidateBeforeCall(String orgId, String assessmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAssessmentTasksSummary(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling getAssessmentTasksSummary(Async)");
        }

        return getAssessmentTasksSummaryCall(orgId, assessmentId, _callback);

    }


    private ApiResponse<Void> getAssessmentTasksSummaryWithHttpInfo(String orgId, String assessmentId) throws ApiException {
        okhttp3.Call localVarCall = getAssessmentTasksSummaryValidateBeforeCall(orgId, assessmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAssessmentTasksSummaryAsync(String orgId, String assessmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssessmentTasksSummaryValidateBeforeCall(orgId, assessmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAssessmentTasksSummaryRequestBuilder {
        private final String orgId;
        private final String assessmentId;

        private GetAssessmentTasksSummaryRequestBuilder(String orgId, String assessmentId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
        }

        /**
         * Build call for getAssessmentTasksSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssessmentTasksSummaryCall(orgId, assessmentId, _callback);
        }


        /**
         * Execute getAssessmentTasksSummary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAssessmentTasksSummaryWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute getAssessmentTasksSummary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAssessmentTasksSummaryWithHttpInfo(orgId, assessmentId);
        }

        /**
         * Execute getAssessmentTasksSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAssessmentTasksSummaryAsync(orgId, assessmentId, _callback);
        }
    }

    /**
     * Return the tasks for a given assessment
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @return GetAssessmentTasksSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetAssessmentTasksSummaryRequestBuilder getAssessmentTasksSummary(String orgId, String assessmentId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        return new GetAssessmentTasksSummaryRequestBuilder(orgId, assessmentId);
    }
    private okhttp3.Call getCurrentUserTasksCall(String orgId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/me"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentUserTasksValidateBeforeCall(String orgId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCurrentUserTasks(Async)");
        }

        return getCurrentUserTasksCall(orgId, assessmentId, status, type, entityId, targetId, limit, _callback);

    }


    private ApiResponse<ResultsTask> getCurrentUserTasksWithHttpInfo(String orgId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getCurrentUserTasksValidateBeforeCall(orgId, assessmentId, status, type, entityId, targetId, limit, null);
        Type localVarReturnType = new TypeToken<ResultsTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCurrentUserTasksAsync(String orgId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, final ApiCallback<ResultsTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentUserTasksValidateBeforeCall(orgId, assessmentId, status, type, entityId, targetId, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCurrentUserTasksRequestBuilder {
        private final String orgId;
        private String assessmentId;
        private String status;
        private String type;
        private String entityId;
        private String targetId;
        private Integer limit;

        private GetCurrentUserTasksRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set assessmentId
         * @param assessmentId Assessment id (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set status
         * @param status Task.Status. (PENDING/ACTIVE) (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type Task.Type of task (form) (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId Entity Id (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Target Id (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetCurrentUserTasksRequestBuilder
         */
        public GetCurrentUserTasksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getCurrentUserTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCurrentUserTasksCall(orgId, assessmentId, status, type, entityId, targetId, limit, _callback);
        }


        /**
         * Execute getCurrentUserTasks request
         * @return ResultsTask
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ResultsTask execute() throws ApiException {
            ApiResponse<ResultsTask> localVarResp = getCurrentUserTasksWithHttpInfo(orgId, assessmentId, status, type, entityId, targetId, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCurrentUserTasks request with HTTP info returned
         * @return ApiResponse&lt;ResultsTask&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsTask> executeWithHttpInfo() throws ApiException {
            return getCurrentUserTasksWithHttpInfo(orgId, assessmentId, status, type, entityId, targetId, limit);
        }

        /**
         * Execute getCurrentUserTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsTask> _callback) throws ApiException {
            return getCurrentUserTasksAsync(orgId, assessmentId, status, type, entityId, targetId, limit, _callback);
        }
    }

    /**
     * Return the tasks for the current user
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetCurrentUserTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public GetCurrentUserTasksRequestBuilder getCurrentUserTasks(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetCurrentUserTasksRequestBuilder(orgId);
    }
    private okhttp3.Call markAsSkippedCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/{taskId}/skip"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsSkippedValidateBeforeCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling markAsSkipped(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling markAsSkipped(Async)");
        }

        return markAsSkippedCall(orgId, taskId, _callback);

    }


    private ApiResponse<Void> markAsSkippedWithHttpInfo(String orgId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = markAsSkippedValidateBeforeCall(orgId, taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAsSkippedAsync(String orgId, String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsSkippedValidateBeforeCall(orgId, taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class MarkAsSkippedRequestBuilder {
        private final String orgId;
        private final String taskId;

        private MarkAsSkippedRequestBuilder(String orgId, String taskId) {
            this.orgId = orgId;
            this.taskId = taskId;
        }

        /**
         * Build call for markAsSkipped
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAsSkippedCall(orgId, taskId, _callback);
        }


        /**
         * Execute markAsSkipped request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAsSkippedWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute markAsSkipped request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAsSkippedWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute markAsSkipped request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAsSkippedAsync(orgId, taskId, _callback);
        }
    }

    /**
     * Skip task
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param taskId Task id (required)
     * @return MarkAsSkippedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsSkippedRequestBuilder markAsSkipped(String orgId, String taskId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new MarkAsSkippedRequestBuilder(orgId, taskId);
    }
    private okhttp3.Call queryAssessmentTasksCall(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, String fields, String format, String from, String returnAccess, Boolean returnFormCompletionLinks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/task"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (assessmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assessmentId", assessmentId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (targetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetId", targetId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        if (returnFormCompletionLinks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnFormCompletionLinks", returnFormCompletionLinks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryAssessmentTasksValidateBeforeCall(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, String fields, String format, String from, String returnAccess, Boolean returnFormCompletionLinks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling queryAssessmentTasks(Async)");
        }

        return queryAssessmentTasksCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks, _callback);

    }


    private ApiResponse<ResultsData> queryAssessmentTasksWithHttpInfo(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, String fields, String format, String from, String returnAccess, Boolean returnFormCompletionLinks) throws ApiException {
        okhttp3.Call localVarCall = queryAssessmentTasksValidateBeforeCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryAssessmentTasksAsync(String orgId, String userId, String assessmentId, String status, String type, String entityId, String targetId, Integer limit, String fields, String format, String from, String returnAccess, Boolean returnFormCompletionLinks, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryAssessmentTasksValidateBeforeCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class QueryAssessmentTasksRequestBuilder {
        private final String orgId;
        private String userId;
        private String assessmentId;
        private String status;
        private String type;
        private String entityId;
        private String targetId;
        private Integer limit;
        private String fields;
        private String format;
        private String from;
        private String returnAccess;
        private Boolean returnFormCompletionLinks;

        private QueryAssessmentTasksRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set userId
         * @param userId Task User id (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set assessmentId
         * @param assessmentId Assessment id (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder assessmentId(String assessmentId) {
            this.assessmentId = assessmentId;
            return this;
        }
        
        /**
         * Set status
         * @param status Task.Status. (PENDING/DONE) (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set type
         * @param type Task.Type. (FORM_SUBMIT/CHANGE_APPROVE) (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId Entity Id (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set targetId
         * @param targetId Target Id (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder targetId(String targetId) {
            this.targetId = targetId;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields to retrieve, comma-separated (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set format
         * @param format Data format to use; default is json, can also use json-extended or json-readable (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder format(String format) {
            this.format = format;
            return this;
        }
        
        /**
         * Set from
         * @param from Job id to start paginating from (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Set returnFormCompletionLinks
         * @param returnFormCompletionLinks Return links that employees would use to complete a task if true else return links that direct to the form settings (optional)
         * @return QueryAssessmentTasksRequestBuilder
         */
        public QueryAssessmentTasksRequestBuilder returnFormCompletionLinks(Boolean returnFormCompletionLinks) {
            this.returnFormCompletionLinks = returnFormCompletionLinks;
            return this;
        }
        
        /**
         * Build call for queryAssessmentTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryAssessmentTasksCall(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks, _callback);
        }


        /**
         * Execute queryAssessmentTasks request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = queryAssessmentTasksWithHttpInfo(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute queryAssessmentTasks request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return queryAssessmentTasksWithHttpInfo(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks);
        }

        /**
         * Execute queryAssessmentTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return queryAssessmentTasksAsync(orgId, userId, assessmentId, status, type, entityId, targetId, limit, fields, format, from, returnAccess, returnFormCompletionLinks, _callback);
        }
    }

    /**
     * Query tasks for assessments in the organization
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return QueryAssessmentTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> snapshot currently building </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public QueryAssessmentTasksRequestBuilder queryAssessmentTasks(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new QueryAssessmentTasksRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/{taskId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, taskId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String taskId;

        private RemoveByIdRequestBuilder(String orgId, String taskId) {
            this.orgId = orgId;
            this.taskId = taskId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, taskId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, taskId, _callback);
        }
    }

    /**
     * Delete task
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param taskId Task id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String taskId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, taskId);
    }
    private okhttp3.Call removeFormFromAssessmentCall(String orgId, String assessmentId, String formId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/{assessmentId}/{formId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "assessmentId" + "}", localVarApiClient.escapeString(assessmentId.toString()))
            .replace("{" + "formId" + "}", localVarApiClient.escapeString(formId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFormFromAssessmentValidateBeforeCall(String orgId, String assessmentId, String formId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeFormFromAssessment(Async)");
        }

        // verify the required parameter 'assessmentId' is set
        if (assessmentId == null) {
            throw new ApiException("Missing the required parameter 'assessmentId' when calling removeFormFromAssessment(Async)");
        }

        // verify the required parameter 'formId' is set
        if (formId == null) {
            throw new ApiException("Missing the required parameter 'formId' when calling removeFormFromAssessment(Async)");
        }

        return removeFormFromAssessmentCall(orgId, assessmentId, formId, _callback);

    }


    private ApiResponse<Void> removeFormFromAssessmentWithHttpInfo(String orgId, String assessmentId, String formId) throws ApiException {
        okhttp3.Call localVarCall = removeFormFromAssessmentValidateBeforeCall(orgId, assessmentId, formId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFormFromAssessmentAsync(String orgId, String assessmentId, String formId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFormFromAssessmentValidateBeforeCall(orgId, assessmentId, formId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFormFromAssessmentRequestBuilder {
        private final String orgId;
        private final String assessmentId;
        private final String formId;

        private RemoveFormFromAssessmentRequestBuilder(String orgId, String assessmentId, String formId) {
            this.orgId = orgId;
            this.assessmentId = assessmentId;
            this.formId = formId;
        }

        /**
         * Build call for removeFormFromAssessment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeFormFromAssessmentCall(orgId, assessmentId, formId, _callback);
        }


        /**
         * Execute removeFormFromAssessment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeFormFromAssessmentWithHttpInfo(orgId, assessmentId, formId);
        }

        /**
         * Execute removeFormFromAssessment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeFormFromAssessmentWithHttpInfo(orgId, assessmentId, formId);
        }

        /**
         * Execute removeFormFromAssessment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeFormFromAssessmentAsync(orgId, assessmentId, formId, _callback);
        }
    }

    /**
     * Delete task
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param assessmentId Assessment id (required)
     * @param formId Form id (required)
     * @return RemoveFormFromAssessmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFormFromAssessmentRequestBuilder removeFormFromAssessment(String orgId, String assessmentId, String formId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (assessmentId == null) throw new IllegalArgumentException("\"assessmentId\" is required but got null");
            

        if (formId == null) throw new IllegalArgumentException("\"formId\" is required but got null");
            

        return new RemoveFormFromAssessmentRequestBuilder(orgId, assessmentId, formId);
    }
    private okhttp3.Call sendReminderNotificationCall(String orgId, TaskRemindRequest taskRemindRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskRemindRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/remind"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendReminderNotificationValidateBeforeCall(String orgId, TaskRemindRequest taskRemindRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendReminderNotification(Async)");
        }

        return sendReminderNotificationCall(orgId, taskRemindRequest, _callback);

    }


    private ApiResponse<Void> sendReminderNotificationWithHttpInfo(String orgId, TaskRemindRequest taskRemindRequest) throws ApiException {
        okhttp3.Call localVarCall = sendReminderNotificationValidateBeforeCall(orgId, taskRemindRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendReminderNotificationAsync(String orgId, TaskRemindRequest taskRemindRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendReminderNotificationValidateBeforeCall(orgId, taskRemindRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendReminderNotificationRequestBuilder {
        private final List<String> taskIds;
        private final String orgId;
        private String message;

        private SendReminderNotificationRequestBuilder(List<String> taskIds, String orgId) {
            this.taskIds = taskIds;
            this.orgId = orgId;
        }

        /**
         * Set message
         * @param message  (optional)
         * @return SendReminderNotificationRequestBuilder
         */
        public SendReminderNotificationRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Build call for sendReminderNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TaskRemindRequest taskRemindRequest = buildBodyParams();
            return sendReminderNotificationCall(orgId, taskRemindRequest, _callback);
        }

        private TaskRemindRequest buildBodyParams() {
            TaskRemindRequest taskRemindRequest = new TaskRemindRequest();
            taskRemindRequest.taskIds(this.taskIds);
            taskRemindRequest.message(this.message);
            return taskRemindRequest;
        }

        /**
         * Execute sendReminderNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TaskRemindRequest taskRemindRequest = buildBodyParams();
            sendReminderNotificationWithHttpInfo(orgId, taskRemindRequest);
        }

        /**
         * Execute sendReminderNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TaskRemindRequest taskRemindRequest = buildBodyParams();
            return sendReminderNotificationWithHttpInfo(orgId, taskRemindRequest);
        }

        /**
         * Execute sendReminderNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TaskRemindRequest taskRemindRequest = buildBodyParams();
            return sendReminderNotificationAsync(orgId, taskRemindRequest, _callback);
        }
    }

    /**
     * Send a reminder notification for a particular task
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SendReminderNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public SendReminderNotificationRequestBuilder sendReminderNotification(List<String> taskIds, String orgId) throws IllegalArgumentException {
        if (taskIds == null) throw new IllegalArgumentException("\"taskIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SendReminderNotificationRequestBuilder(taskIds, orgId);
    }
    private okhttp3.Call updateStatusCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/task/{taskId}/mark-done"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusValidateBeforeCall(String orgId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateStatus(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling updateStatus(Async)");
        }

        return updateStatusCall(orgId, taskId, _callback);

    }


    private ApiResponse<Void> updateStatusWithHttpInfo(String orgId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(orgId, taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusAsync(String orgId, String taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusValidateBeforeCall(orgId, taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusRequestBuilder {
        private final String orgId;
        private final String taskId;

        private UpdateStatusRequestBuilder(String orgId, String taskId) {
            this.orgId = orgId;
            this.taskId = taskId;
        }

        /**
         * Build call for updateStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateStatusCall(orgId, taskId, _callback);
        }


        /**
         * Execute updateStatus request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateStatusWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute updateStatus request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateStatusWithHttpInfo(orgId, taskId);
        }

        /**
         * Execute updateStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateStatusAsync(orgId, taskId, _callback);
        }
    }

    /**
     * Mark task done
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param taskId Task id (required)
     * @return UpdateStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> unauthorized </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusRequestBuilder updateStatus(String orgId, String taskId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new UpdateStatusRequestBuilder(orgId, taskId);
    }
}
