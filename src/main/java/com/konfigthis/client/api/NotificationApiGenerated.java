/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NotificationJobData;
import com.konfigthis.client.model.NotificationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call sendEmailOrInAppNotificationCall(String orgId, NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/notification"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailOrInAppNotificationValidateBeforeCall(String orgId, NotificationRequest notificationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendEmailOrInAppNotification(Async)");
        }

        return sendEmailOrInAppNotificationCall(orgId, notificationRequest, _callback);

    }


    private ApiResponse<Void> sendEmailOrInAppNotificationWithHttpInfo(String orgId, NotificationRequest notificationRequest) throws ApiException {
        okhttp3.Call localVarCall = sendEmailOrInAppNotificationValidateBeforeCall(orgId, notificationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailOrInAppNotificationAsync(String orgId, NotificationRequest notificationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailOrInAppNotificationValidateBeforeCall(orgId, notificationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendEmailOrInAppNotificationRequestBuilder {
        private final String templateName;
        private final List<String> toUserIds;
        private final NotificationJobData jobData;
        private final String orgId;
        private String atsName;
        private String orgName;
        private String userName;
        private String syncSummary;
        private String processId;

        private SendEmailOrInAppNotificationRequestBuilder(String templateName, List<String> toUserIds, NotificationJobData jobData, String orgId) {
            this.templateName = templateName;
            this.toUserIds = toUserIds;
            this.jobData = jobData;
            this.orgId = orgId;
        }

        /**
         * Set atsName
         * @param atsName name of the ATS system (optional)
         * @return SendEmailOrInAppNotificationRequestBuilder
         */
        public SendEmailOrInAppNotificationRequestBuilder atsName(String atsName) {
            this.atsName = atsName;
            return this;
        }
        
        /**
         * Set orgName
         * @param orgName name of the organization (optional)
         * @return SendEmailOrInAppNotificationRequestBuilder
         */
        public SendEmailOrInAppNotificationRequestBuilder orgName(String orgName) {
            this.orgName = orgName;
            return this;
        }
        
        /**
         * Set userName
         * @param userName preferred name of the user (optional)
         * @return SendEmailOrInAppNotificationRequestBuilder
         */
        public SendEmailOrInAppNotificationRequestBuilder userName(String userName) {
            this.userName = userName;
            return this;
        }
        
        /**
         * Set syncSummary
         * @param syncSummary summary of reason for email (optional)
         * @return SendEmailOrInAppNotificationRequestBuilder
         */
        public SendEmailOrInAppNotificationRequestBuilder syncSummary(String syncSummary) {
            this.syncSummary = syncSummary;
            return this;
        }
        
        /**
         * Set processId
         * @param processId id of the sync history process (optional)
         * @return SendEmailOrInAppNotificationRequestBuilder
         */
        public SendEmailOrInAppNotificationRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for sendEmailOrInAppNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendEmailOrInAppNotificationCall(orgId, notificationRequest, _callback);
        }

        private NotificationRequest buildBodyParams() {
            NotificationRequest notificationRequest = new NotificationRequest();
            notificationRequest.templateName(this.templateName);
            notificationRequest.toUserIds(this.toUserIds);
            notificationRequest.jobData(this.jobData);
            notificationRequest.atsName(this.atsName);
            notificationRequest.orgName(this.orgName);
            notificationRequest.userName(this.userName);
            notificationRequest.syncSummary(this.syncSummary);
            notificationRequest.processId(this.processId);
            return notificationRequest;
        }

        /**
         * Execute sendEmailOrInAppNotification request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            sendEmailOrInAppNotificationWithHttpInfo(orgId, notificationRequest);
        }

        /**
         * Execute sendEmailOrInAppNotification request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendEmailOrInAppNotificationWithHttpInfo(orgId, notificationRequest);
        }

        /**
         * Execute sendEmailOrInAppNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            NotificationRequest notificationRequest = buildBodyParams();
            return sendEmailOrInAppNotificationAsync(orgId, notificationRequest, _callback);
        }
    }

    /**
     * Send a email or in-app notification
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SendEmailOrInAppNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailOrInAppNotificationRequestBuilder sendEmailOrInAppNotification(String templateName, List<String> toUserIds, NotificationJobData jobData, String orgId) throws IllegalArgumentException {
        if (templateName == null) throw new IllegalArgumentException("\"templateName\" is required but got null");
            

        if (toUserIds == null) throw new IllegalArgumentException("\"toUserIds\" is required but got null");
        if (jobData == null) throw new IllegalArgumentException("\"jobData\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SendEmailOrInAppNotificationRequestBuilder(templateName, toUserIds, jobData, orgId);
    }
}
