/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.Address;
import com.konfigthis.client.model.AgreementRequest;
import com.konfigthis.client.model.AppInstallCodeValidateRequest;
import com.konfigthis.client.model.AppInstallCodeValidateResponse;
import com.konfigthis.client.model.CreateOrg;
import com.konfigthis.client.model.OnboardStepResult;
import com.konfigthis.client.model.Org;
import com.konfigthis.client.model.OrgDomain;
import com.konfigthis.client.model.OrgUsersPersonsCountResponse;
import com.konfigthis.client.model.OrgUsersPersonsResponse;
import com.konfigthis.client.model.ResultsOrg;
import com.konfigthis.client.model.TestEmailRequest;
import java.net.URI;
import com.konfigthis.client.model.UpdateOrg;
import com.konfigthis.client.model.WelcomeEmailSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call consentTermsOfServiceCall(String orgId, AgreementRequest agreementRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agreementRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/agreement"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consentTermsOfServiceValidateBeforeCall(String orgId, AgreementRequest agreementRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling consentTermsOfService(Async)");
        }

        return consentTermsOfServiceCall(orgId, agreementRequest, _callback);

    }


    private ApiResponse<Void> consentTermsOfServiceWithHttpInfo(String orgId, AgreementRequest agreementRequest) throws ApiException {
        okhttp3.Call localVarCall = consentTermsOfServiceValidateBeforeCall(orgId, agreementRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call consentTermsOfServiceAsync(String orgId, AgreementRequest agreementRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = consentTermsOfServiceValidateBeforeCall(orgId, agreementRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ConsentTermsOfServiceRequestBuilder {
        private final String action;
        private final String legalDocId;
        private final String orgId;

        private ConsentTermsOfServiceRequestBuilder(String action, String legalDocId, String orgId) {
            this.action = action;
            this.legalDocId = legalDocId;
            this.orgId = orgId;
        }

        /**
         * Build call for consentTermsOfService
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AgreementRequest agreementRequest = buildBodyParams();
            return consentTermsOfServiceCall(orgId, agreementRequest, _callback);
        }

        private AgreementRequest buildBodyParams() {
            AgreementRequest agreementRequest = new AgreementRequest();
            agreementRequest.action(this.action);
            agreementRequest.legalDocId(this.legalDocId);
            return agreementRequest;
        }

        /**
         * Execute consentTermsOfService request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AgreementRequest agreementRequest = buildBodyParams();
            consentTermsOfServiceWithHttpInfo(orgId, agreementRequest);
        }

        /**
         * Execute consentTermsOfService request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AgreementRequest agreementRequest = buildBodyParams();
            return consentTermsOfServiceWithHttpInfo(orgId, agreementRequest);
        }

        /**
         * Execute consentTermsOfService request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AgreementRequest agreementRequest = buildBodyParams();
            return consentTermsOfServiceAsync(orgId, agreementRequest, _callback);
        }
    }

    /**
     * Consent on Terms of Service agreement
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return ConsentTermsOfServiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ConsentTermsOfServiceRequestBuilder consentTermsOfService(String action, String legalDocId, String orgId) throws IllegalArgumentException {
        if (action == null) throw new IllegalArgumentException("\"action\" is required but got null");
            

        if (legalDocId == null) throw new IllegalArgumentException("\"legalDocId\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new ConsentTermsOfServiceRequestBuilder(action, legalDocId, orgId);
    }
    private okhttp3.Call createNewJobPlaceholderCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/change-head"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewJobPlaceholderValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewJobPlaceholder(Async)");
        }

        return createNewJobPlaceholderCall(orgId, _callback);

    }


    private ApiResponse<Void> createNewJobPlaceholderWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = createNewJobPlaceholderValidateBeforeCall(orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewJobPlaceholderAsync(String orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewJobPlaceholderValidateBeforeCall(orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewJobPlaceholderRequestBuilder {
        private final String orgId;

        private CreateNewJobPlaceholderRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for createNewJobPlaceholder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewJobPlaceholderCall(orgId, _callback);
        }


        /**
         * Execute createNewJobPlaceholder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            createNewJobPlaceholderWithHttpInfo(orgId);
        }

        /**
         * Execute createNewJobPlaceholder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return createNewJobPlaceholderWithHttpInfo(orgId);
        }

        /**
         * Execute createNewJobPlaceholder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return createNewJobPlaceholderAsync(orgId, _callback);
        }
    }

    /**
     * Create a new org head in the history, by creating an empty job placeholder above the current head
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewJobPlaceholderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewJobPlaceholderRequestBuilder createNewJobPlaceholder(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewJobPlaceholderRequestBuilder(orgId);
    }
    private okhttp3.Call createNewOrgCall(CreateOrg createOrg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrg;

        // create path and map variables
        String localVarPath = "/v1/org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrgValidateBeforeCall(CreateOrg createOrg, final ApiCallback _callback) throws ApiException {
        return createNewOrgCall(createOrg, _callback);

    }


    private ApiResponse<Org> createNewOrgWithHttpInfo(CreateOrg createOrg) throws ApiException {
        okhttp3.Call localVarCall = createNewOrgValidateBeforeCall(createOrg, null);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrgAsync(CreateOrg createOrg, final ApiCallback<Org> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrgValidateBeforeCall(createOrg, _callback);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrgRequestBuilder {
        private final String name;
        private final String type;
        private final Integer estEmployees;
        private final String status;
        private final List<String> currencies;
        private final String timezone;
        private final Boolean onboarding;
        private String customerId;
        private String slug;
        private String industry;
        private Integer estRevenue;
        private Integer foundedYear;
        private Address address;
        private String phone;
        private String email;
        private URI url;
        private List<OrgDomain> domains;
        private String imagePath;
        private String stock;
        private String appTime;
        private Integer zone;
        private Integer fiscalStart;
        private String startDate;
        private Object sensitiveFields;
        private Object options;
        private Object internalOptions;
        private List<OnboardStepResult> onboardSteps;
        private Boolean selfServeImporting;
        private Integer headCount;

        private CreateNewOrgRequestBuilder(String name, String type, Integer estEmployees, String status, List<String> currencies, String timezone, Boolean onboarding) {
            this.name = name;
            this.type = type;
            this.estEmployees = estEmployees;
            this.status = status;
            this.currencies = currencies;
            this.timezone = timezone;
            this.onboarding = onboarding;
        }

        /**
         * Set customerId
         * @param customerId customer for billing processing (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set slug
         * @param slug unique slug of organization (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set industry
         * @param industry industry (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set estRevenue
         * @param estRevenue approximate amount of revenue (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder estRevenue(Integer estRevenue) {
            this.estRevenue = estRevenue;
            return this;
        }
        
        /**
         * Set foundedYear
         * @param foundedYear year of founding (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder foundedYear(Integer foundedYear) {
            this.foundedYear = foundedYear;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder address(Address address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set phone
         * @param phone company phone number in E.164 format (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email primary contact email (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set url
         * @param url website URL (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set domains
         * @param domains domains used by this org (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder domains(List<OrgDomain> domains) {
            this.domains = domains;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to full-sized profile image in storage (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set stock
         * @param stock stock symbol (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder stock(String stock) {
            this.stock = stock;
            return this;
        }
        
        /**
         * Set appTime
         * @param appTime approximate time of day for daily app syncs to run (defaults to 9am Eastern time) (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder appTime(String appTime) {
            this.appTime = appTime;
            return this;
        }
        
        /**
         * Set zone
         * @param zone infrastructure zone (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder zone(Integer zone) {
            this.zone = zone;
            return this;
        }
        
        /**
         * Set fiscalStart
         * @param fiscalStart number of months into the calendar year that the fiscal year starts (1 &#x3D; February, 2 &#x3D; March) (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder fiscalStart(Integer fiscalStart) {
            this.fiscalStart = fiscalStart;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date of history (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set sensitiveFields
         * @param sensitiveFields map of sensitive field defaults (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder sensitiveFields(Object sensitiveFields) {
            this.sensitiveFields = sensitiveFields;
            return this;
        }
        
        /**
         * Set options
         * @param options org-public options (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions internal (ChartHop controlled) options (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder internalOptions(Object internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Set onboardSteps
         * @param onboardSteps list of onboard steps that this Org has completed (or skipped) (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder onboardSteps(List<OnboardStepResult> onboardSteps) {
            this.onboardSteps = onboardSteps;
            return this;
        }
        
        /**
         * Set selfServeImporting
         * @param selfServeImporting completion status of initial import for orgs signed up via self serve (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder selfServeImporting(Boolean selfServeImporting) {
            this.selfServeImporting = selfServeImporting;
            return this;
        }
        
        /**
         * Set headCount
         * @param headCount number of total headcount currently in the org (optional)
         * @return CreateNewOrgRequestBuilder
         */
        public CreateNewOrgRequestBuilder headCount(Integer headCount) {
            this.headCount = headCount;
            return this;
        }
        
        /**
         * Build call for createNewOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOrg createOrg = buildBodyParams();
            return createNewOrgCall(createOrg, _callback);
        }

        private CreateOrg buildBodyParams() {
            CreateOrg createOrg = new CreateOrg();
            createOrg.customerId(this.customerId);
            createOrg.name(this.name);
            createOrg.slug(this.slug);
            if (this.type != null)
            createOrg.type(CreateOrg.TypeEnum.fromValue(this.type));
            createOrg.industry(this.industry);
            createOrg.estEmployees(this.estEmployees);
            createOrg.estRevenue(this.estRevenue);
            createOrg.foundedYear(this.foundedYear);
            createOrg.address(this.address);
            createOrg.phone(this.phone);
            createOrg.email(this.email);
            createOrg.url(this.url);
            createOrg.domains(this.domains);
            if (this.status != null)
            createOrg.status(CreateOrg.StatusEnum.fromValue(this.status));
            createOrg.imagePath(this.imagePath);
            createOrg.currencies(this.currencies);
            createOrg.stock(this.stock);
            createOrg.timezone(this.timezone);
            createOrg.appTime(this.appTime);
            createOrg.zone(this.zone);
            createOrg.fiscalStart(this.fiscalStart);
            createOrg.startDate(this.startDate);
            createOrg.sensitiveFields(this.sensitiveFields);
            createOrg.options(this.options);
            createOrg.internalOptions(this.internalOptions);
            createOrg.onboardSteps(this.onboardSteps);
            createOrg.onboarding(this.onboarding);
            createOrg.selfServeImporting(this.selfServeImporting);
            createOrg.headCount(this.headCount);
            return createOrg;
        }

        /**
         * Execute createNewOrg request
         * @return Org
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public Org execute() throws ApiException {
            CreateOrg createOrg = buildBodyParams();
            ApiResponse<Org> localVarResp = createNewOrgWithHttpInfo(createOrg);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrg request with HTTP info returned
         * @return ApiResponse&lt;Org&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Org> executeWithHttpInfo() throws ApiException {
            CreateOrg createOrg = buildBodyParams();
            return createNewOrgWithHttpInfo(createOrg);
        }

        /**
         * Execute createNewOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Org> _callback) throws ApiException {
            CreateOrg createOrg = buildBodyParams();
            return createNewOrgAsync(createOrg, _callback);
        }
    }

    /**
     * Create a new org
     * 
     * @return CreateNewOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrgRequestBuilder createNewOrg(String name, String type, Integer estEmployees, String status, List<String> currencies, String timezone, Boolean onboarding) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (estEmployees == null) throw new IllegalArgumentException("\"estEmployees\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (currencies == null) throw new IllegalArgumentException("\"currencies\" is required but got null");
        if (timezone == null) throw new IllegalArgumentException("\"timezone\" is required but got null");
            

        if (onboarding == null) throw new IllegalArgumentException("\"onboarding\" is required but got null");
        return new CreateNewOrgRequestBuilder(name, type, estEmployees, status, currencies, timezone, onboarding);
    }
    private okhttp3.Call getByIdCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        return getByIdCall(orgId, _callback);

    }


    private ApiResponse<Org> getByIdWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, final ApiCallback<Org> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;

        private GetByIdRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, _callback);
        }


        /**
         * Execute getById request
         * @return Org
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Org execute() throws ApiException {
            ApiResponse<Org> localVarResp = getByIdWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Org&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Org> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Org> _callback) throws ApiException {
            return getByIdAsync(orgId, _callback);
        }
    }

    /**
     * Return a particular org by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId);
    }
    private okhttp3.Call getBySlugCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/slug/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBySlugValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getBySlug(Async)");
        }

        return getBySlugCall(slug, _callback);

    }


    private ApiResponse<Org> getBySlugWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getBySlugValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBySlugAsync(String slug, final ApiCallback<Org> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBySlugValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<Org>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBySlugRequestBuilder {
        private final String slug;

        private GetBySlugRequestBuilder(String slug) {
            this.slug = slug;
        }

        /**
         * Build call for getBySlug
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBySlugCall(slug, _callback);
        }


        /**
         * Execute getBySlug request
         * @return Org
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Org execute() throws ApiException {
            ApiResponse<Org> localVarResp = getBySlugWithHttpInfo(slug);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBySlug request with HTTP info returned
         * @return ApiResponse&lt;Org&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Org> executeWithHttpInfo() throws ApiException {
            return getBySlugWithHttpInfo(slug);
        }

        /**
         * Execute getBySlug request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Org> _callback) throws ApiException {
            return getBySlugAsync(slug, _callback);
        }
    }

    /**
     * Return a particular org by slug
     * 
     * @param slug Org slug (required)
     * @return GetBySlugRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetBySlugRequestBuilder getBySlug(String slug) throws IllegalArgumentException {
        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        return new GetBySlugRequestBuilder(slug);
    }
    private okhttp3.Call getDataUserPersonByIdCall(String orgId, String userId, String personId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-user-person"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (personId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("personId", personId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataUserPersonByIdValidateBeforeCall(String orgId, String userId, String personId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDataUserPersonById(Async)");
        }

        return getDataUserPersonByIdCall(orgId, userId, personId, _callback);

    }


    private ApiResponse<OrgUsersPersonsResponse> getDataUserPersonByIdWithHttpInfo(String orgId, String userId, String personId) throws ApiException {
        okhttp3.Call localVarCall = getDataUserPersonByIdValidateBeforeCall(orgId, userId, personId, null);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataUserPersonByIdAsync(String orgId, String userId, String personId, final ApiCallback<OrgUsersPersonsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataUserPersonByIdValidateBeforeCall(orgId, userId, personId, _callback);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataUserPersonByIdRequestBuilder {
        private final String orgId;
        private String userId;
        private String personId;

        private GetDataUserPersonByIdRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set userId
         * @param userId userId (optional)
         * @return GetDataUserPersonByIdRequestBuilder
         */
        public GetDataUserPersonByIdRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set personId
         * @param personId personId (optional)
         * @return GetDataUserPersonByIdRequestBuilder
         */
        public GetDataUserPersonByIdRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Build call for getDataUserPersonById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataUserPersonByIdCall(orgId, userId, personId, _callback);
        }


        /**
         * Execute getDataUserPersonById request
         * @return OrgUsersPersonsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public OrgUsersPersonsResponse execute() throws ApiException {
            ApiResponse<OrgUsersPersonsResponse> localVarResp = getDataUserPersonByIdWithHttpInfo(orgId, userId, personId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataUserPersonById request with HTTP info returned
         * @return ApiResponse&lt;OrgUsersPersonsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgUsersPersonsResponse> executeWithHttpInfo() throws ApiException {
            return getDataUserPersonByIdWithHttpInfo(orgId, userId, personId);
        }

        /**
         * Execute getDataUserPersonById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgUsersPersonsResponse> _callback) throws ApiException {
            return getDataUserPersonByIdAsync(orgId, userId, personId, _callback);
        }
    }

    /**
     * Gets a user or person by id. If both are provided, userId takes precedence
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetDataUserPersonByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDataUserPersonByIdRequestBuilder getDataUserPersonById(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetDataUserPersonByIdRequestBuilder(orgId);
    }
    private okhttp3.Call getDataUserPersonCountCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-user-person-count"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataUserPersonCountValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDataUserPersonCount(Async)");
        }

        return getDataUserPersonCountCall(orgId, _callback);

    }


    private ApiResponse<OrgUsersPersonsCountResponse> getDataUserPersonCountWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getDataUserPersonCountValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataUserPersonCountAsync(String orgId, final ApiCallback<OrgUsersPersonsCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataUserPersonCountValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataUserPersonCountRequestBuilder {
        private final String orgId;

        private GetDataUserPersonCountRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getDataUserPersonCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataUserPersonCountCall(orgId, _callback);
        }


        /**
         * Execute getDataUserPersonCount request
         * @return OrgUsersPersonsCountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public OrgUsersPersonsCountResponse execute() throws ApiException {
            ApiResponse<OrgUsersPersonsCountResponse> localVarResp = getDataUserPersonCountWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataUserPersonCount request with HTTP info returned
         * @return ApiResponse&lt;OrgUsersPersonsCountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgUsersPersonsCountResponse> executeWithHttpInfo() throws ApiException {
            return getDataUserPersonCountWithHttpInfo(orgId);
        }

        /**
         * Execute getDataUserPersonCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgUsersPersonsCountResponse> _callback) throws ApiException {
            return getDataUserPersonCountAsync(orgId, _callback);
        }
    }

    /**
     * Gets the count of joined users, invited users, and org members who are not yet invited
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetDataUserPersonCountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDataUserPersonCountRequestBuilder getDataUserPersonCount(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetDataUserPersonCountRequestBuilder(orgId);
    }
    private okhttp3.Call getDataUsersPersonsCall(String orgId, Integer limit, Integer offset, String sort, String role, String status, String returnAccess, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/data-users-persons"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (role != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("role", role));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (returnAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnAccess", returnAccess));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataUsersPersonsValidateBeforeCall(String orgId, Integer limit, Integer offset, String sort, String role, String status, String returnAccess, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getDataUsersPersons(Async)");
        }

        return getDataUsersPersonsCall(orgId, limit, offset, sort, role, status, returnAccess, _callback);

    }


    private ApiResponse<OrgUsersPersonsResponse> getDataUsersPersonsWithHttpInfo(String orgId, Integer limit, Integer offset, String sort, String role, String status, String returnAccess) throws ApiException {
        okhttp3.Call localVarCall = getDataUsersPersonsValidateBeforeCall(orgId, limit, offset, sort, role, status, returnAccess, null);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDataUsersPersonsAsync(String orgId, Integer limit, Integer offset, String sort, String role, String status, String returnAccess, final ApiCallback<OrgUsersPersonsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataUsersPersonsValidateBeforeCall(orgId, limit, offset, sort, role, status, returnAccess, _callback);
        Type localVarReturnType = new TypeToken<OrgUsersPersonsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDataUsersPersonsRequestBuilder {
        private final String orgId;
        private Integer limit;
        private Integer offset;
        private String sort;
        private String role;
        private String status;
        private String returnAccess;

        private GetDataUsersPersonsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set limit
         * @param limit limit (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset offset (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort by (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set role
         * @param role Filter by user role label (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder role(String role) {
            this.role = role;
            return this;
        }
        
        /**
         * Set status
         * @param status Filter by status (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set returnAccess
         * @param returnAccess Return access information -- pass a list of actions to check, for example: create,update,delete (optional)
         * @return GetDataUsersPersonsRequestBuilder
         */
        public GetDataUsersPersonsRequestBuilder returnAccess(String returnAccess) {
            this.returnAccess = returnAccess;
            return this;
        }
        
        /**
         * Build call for getDataUsersPersons
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDataUsersPersonsCall(orgId, limit, offset, sort, role, status, returnAccess, _callback);
        }


        /**
         * Execute getDataUsersPersons request
         * @return OrgUsersPersonsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public OrgUsersPersonsResponse execute() throws ApiException {
            ApiResponse<OrgUsersPersonsResponse> localVarResp = getDataUsersPersonsWithHttpInfo(orgId, limit, offset, sort, role, status, returnAccess);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDataUsersPersons request with HTTP info returned
         * @return ApiResponse&lt;OrgUsersPersonsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgUsersPersonsResponse> executeWithHttpInfo() throws ApiException {
            return getDataUsersPersonsWithHttpInfo(orgId, limit, offset, sort, role, status, returnAccess);
        }

        /**
         * Execute getDataUsersPersons request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgUsersPersonsResponse> _callback) throws ApiException {
            return getDataUsersPersonsAsync(orgId, limit, offset, sort, role, status, returnAccess, _callback);
        }
    }

    /**
     * Gets a list of org users (joined or invited) and org members (not yet invited)
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetDataUsersPersonsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetDataUsersPersonsRequestBuilder getDataUsersPersons(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetDataUsersPersonsRequestBuilder(orgId);
    }
    private okhttp3.Call getOauth2AuthorizationCodeCall(String org, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{org}/app-install-code"
            .replace("{" + "org" + "}", localVarApiClient.escapeString(org.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOauth2AuthorizationCodeValidateBeforeCall(String org, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'org' is set
        if (org == null) {
            throw new ApiException("Missing the required parameter 'org' when calling getOauth2AuthorizationCode(Async)");
        }

        return getOauth2AuthorizationCodeCall(org, _callback);

    }


    private ApiResponse<AccessTokenResponse> getOauth2AuthorizationCodeWithHttpInfo(String org) throws ApiException {
        okhttp3.Call localVarCall = getOauth2AuthorizationCodeValidateBeforeCall(org, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOauth2AuthorizationCodeAsync(String org, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOauth2AuthorizationCodeValidateBeforeCall(org, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOauth2AuthorizationCodeRequestBuilder {
        private final String org;

        private GetOauth2AuthorizationCodeRequestBuilder(String org) {
            this.org = org;
        }

        /**
         * Build call for getOauth2AuthorizationCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOauth2AuthorizationCodeCall(org, _callback);
        }


        /**
         * Execute getOauth2AuthorizationCode request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            ApiResponse<AccessTokenResponse> localVarResp = getOauth2AuthorizationCodeWithHttpInfo(org);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOauth2AuthorizationCode request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            return getOauth2AuthorizationCodeWithHttpInfo(org);
        }

        /**
         * Execute getOauth2AuthorizationCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            return getOauth2AuthorizationCodeAsync(org, _callback);
        }
    }

    /**
     * Retrieve an Oauth2 authorization code to install an app at this org
     * 
     * @param org Org identifier (either id or slug) (required)
     * @return GetOauth2AuthorizationCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetOauth2AuthorizationCodeRequestBuilder getOauth2AuthorizationCode(String org) throws IllegalArgumentException {
        if (org == null) throw new IllegalArgumentException("\"org\" is required but got null");
            

        return new GetOauth2AuthorizationCodeRequestBuilder(org);
    }
    private okhttp3.Call getUserAccessCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/access"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAccessValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getUserAccess(Async)");
        }

        return getUserAccessCall(orgId, _callback);

    }


    private ApiResponse<Void> getUserAccessWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getUserAccessValidateBeforeCall(orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getUserAccessAsync(String orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAccessValidateBeforeCall(orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetUserAccessRequestBuilder {
        private final String orgId;

        private GetUserAccessRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getUserAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserAccessCall(orgId, _callback);
        }


        /**
         * Execute getUserAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getUserAccessWithHttpInfo(orgId);
        }

        /**
         * Execute getUserAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getUserAccessWithHttpInfo(orgId);
        }

        /**
         * Execute getUserAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getUserAccessAsync(orgId, _callback);
        }
    }

    /**
     * Return information on current user&#39;s access
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetUserAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAccessRequestBuilder getUserAccess(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetUserAccessRequestBuilder(orgId);
    }
    private okhttp3.Call getValidationBySlugCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/org/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidationBySlugValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling getValidationBySlug(Async)");
        }

        return getValidationBySlugCall(slug, _callback);

    }


    private ApiResponse<Void> getValidationBySlugWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = getValidationBySlugValidateBeforeCall(slug, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getValidationBySlugAsync(String slug, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidationBySlugValidateBeforeCall(slug, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetValidationBySlugRequestBuilder {
        private final String slug;

        private GetValidationBySlugRequestBuilder(String slug) {
            this.slug = slug;
        }

        /**
         * Build call for getValidationBySlug
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getValidationBySlugCall(slug, _callback);
        }


        /**
         * Execute getValidationBySlug request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getValidationBySlugWithHttpInfo(slug);
        }

        /**
         * Execute getValidationBySlug request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getValidationBySlugWithHttpInfo(slug);
        }

        /**
         * Execute getValidationBySlug request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getValidationBySlugAsync(slug, _callback);
        }
    }

    /**
     * Return validation for a org by slug
     * 
     * @param slug Org slug (required)
     * @return GetValidationBySlugRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetValidationBySlugRequestBuilder getValidationBySlug(String slug) throws IllegalArgumentException {
        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        return new GetValidationBySlugRequestBuilder(slug);
    }
    private okhttp3.Call getWelcomeEmailSettingsCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/welcome-email"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWelcomeEmailSettingsValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getWelcomeEmailSettings(Async)");
        }

        return getWelcomeEmailSettingsCall(orgId, _callback);

    }


    private ApiResponse<WelcomeEmailSettings> getWelcomeEmailSettingsWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getWelcomeEmailSettingsValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<WelcomeEmailSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWelcomeEmailSettingsAsync(String orgId, final ApiCallback<WelcomeEmailSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWelcomeEmailSettingsValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<WelcomeEmailSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWelcomeEmailSettingsRequestBuilder {
        private final String orgId;

        private GetWelcomeEmailSettingsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getWelcomeEmailSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Service error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWelcomeEmailSettingsCall(orgId, _callback);
        }


        /**
         * Execute getWelcomeEmailSettings request
         * @return WelcomeEmailSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Service error </td><td>  -  </td></tr>
         </table>
         */
        public WelcomeEmailSettings execute() throws ApiException {
            ApiResponse<WelcomeEmailSettings> localVarResp = getWelcomeEmailSettingsWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWelcomeEmailSettings request with HTTP info returned
         * @return ApiResponse&lt;WelcomeEmailSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Service error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WelcomeEmailSettings> executeWithHttpInfo() throws ApiException {
            return getWelcomeEmailSettingsWithHttpInfo(orgId);
        }

        /**
         * Execute getWelcomeEmailSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Service error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WelcomeEmailSettings> _callback) throws ApiException {
            return getWelcomeEmailSettingsAsync(orgId, _callback);
        }
    }

    /**
     * Gets the custom setting or default for the welcome email&#39;s subject, body, cta button label
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetWelcomeEmailSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Service error </td><td>  -  </td></tr>
     </table>
     */
    public GetWelcomeEmailSettingsRequestBuilder getWelcomeEmailSettings(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetWelcomeEmailSettingsRequestBuilder(orgId);
    }
    private okhttp3.Call listVisibleOrgsCall(String from, String q, Integer limit, String customerId, Boolean realOnly, Long lastCreateAt, Long lastActiveAt, String internalOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        if (realOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("realOnly", realOnly));
        }

        if (lastCreateAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastCreateAt", lastCreateAt));
        }

        if (lastActiveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastActiveAt", lastActiveAt));
        }

        if (internalOptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("internalOptions", internalOptions));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVisibleOrgsValidateBeforeCall(String from, String q, Integer limit, String customerId, Boolean realOnly, Long lastCreateAt, Long lastActiveAt, String internalOptions, final ApiCallback _callback) throws ApiException {
        return listVisibleOrgsCall(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions, _callback);

    }


    private ApiResponse<ResultsOrg> listVisibleOrgsWithHttpInfo(String from, String q, Integer limit, String customerId, Boolean realOnly, Long lastCreateAt, Long lastActiveAt, String internalOptions) throws ApiException {
        okhttp3.Call localVarCall = listVisibleOrgsValidateBeforeCall(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions, null);
        Type localVarReturnType = new TypeToken<ResultsOrg>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVisibleOrgsAsync(String from, String q, Integer limit, String customerId, Boolean realOnly, Long lastCreateAt, Long lastActiveAt, String internalOptions, final ApiCallback<ResultsOrg> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVisibleOrgsValidateBeforeCall(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions, _callback);
        Type localVarReturnType = new TypeToken<ResultsOrg>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVisibleOrgsRequestBuilder {
        private String from;
        private String q;
        private Integer limit;
        private String customerId;
        private Boolean realOnly;
        private Long lastCreateAt;
        private Long lastActiveAt;
        private String internalOptions;

        private ListVisibleOrgsRequestBuilder() {
        }

        /**
         * Set from
         * @param from Org id to start from (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set q
         * @param q Search query (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set customerId
         * @param customerId Find orgs belonging to a particular customer id (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set realOnly
         * @param realOnly Include only orgs where type is REAL? (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder realOnly(Boolean realOnly) {
            this.realOnly = realOnly;
            return this;
        }
        
        /**
         * Set lastCreateAt
         * @param lastCreateAt Only include orgs whose last createAt occurred after the date (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder lastCreateAt(Long lastCreateAt) {
            this.lastCreateAt = lastCreateAt;
            return this;
        }
        
        /**
         * Set lastActiveAt
         * @param lastActiveAt Only include orgs whose last activeAt occurred after the date (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder lastActiveAt(Long lastActiveAt) {
            this.lastActiveAt = lastActiveAt;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions Filter orgs by internal option key-value pair (optional)
         * @return ListVisibleOrgsRequestBuilder
         */
        public ListVisibleOrgsRequestBuilder internalOptions(String internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Build call for listVisibleOrgs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVisibleOrgsCall(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions, _callback);
        }


        /**
         * Execute listVisibleOrgs request
         * @return ResultsOrg
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsOrg execute() throws ApiException {
            ApiResponse<ResultsOrg> localVarResp = listVisibleOrgsWithHttpInfo(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVisibleOrgs request with HTTP info returned
         * @return ApiResponse&lt;ResultsOrg&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsOrg> executeWithHttpInfo() throws ApiException {
            return listVisibleOrgsWithHttpInfo(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions);
        }

        /**
         * Execute listVisibleOrgs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsOrg> _callback) throws ApiException {
            return listVisibleOrgsAsync(from, q, limit, customerId, realOnly, lastCreateAt, lastActiveAt, internalOptions, _callback);
        }
    }

    /**
     * Return all visible orgs, paginated by name
     * 
     * @return ListVisibleOrgsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ListVisibleOrgsRequestBuilder listVisibleOrgs() throws IllegalArgumentException {
        return new ListVisibleOrgsRequestBuilder();
    }
    private okhttp3.Call sendTestEmailToOneselfCall(String orgId, TestEmailRequest testEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testEmailRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/test-email"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTestEmailToOneselfValidateBeforeCall(String orgId, TestEmailRequest testEmailRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling sendTestEmailToOneself(Async)");
        }

        return sendTestEmailToOneselfCall(orgId, testEmailRequest, _callback);

    }


    private ApiResponse<Void> sendTestEmailToOneselfWithHttpInfo(String orgId, TestEmailRequest testEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTestEmailToOneselfValidateBeforeCall(orgId, testEmailRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendTestEmailToOneselfAsync(String orgId, TestEmailRequest testEmailRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTestEmailToOneselfValidateBeforeCall(orgId, testEmailRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SendTestEmailToOneselfRequestBuilder {
        private final String orgId;
        private String welcomeEmailSubject;
        private String welcomeEmailButtonLabel;
        private String welcomeEmailBody;

        private SendTestEmailToOneselfRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set welcomeEmailSubject
         * @param welcomeEmailSubject  (optional)
         * @return SendTestEmailToOneselfRequestBuilder
         */
        public SendTestEmailToOneselfRequestBuilder welcomeEmailSubject(String welcomeEmailSubject) {
            this.welcomeEmailSubject = welcomeEmailSubject;
            return this;
        }
        
        /**
         * Set welcomeEmailButtonLabel
         * @param welcomeEmailButtonLabel  (optional)
         * @return SendTestEmailToOneselfRequestBuilder
         */
        public SendTestEmailToOneselfRequestBuilder welcomeEmailButtonLabel(String welcomeEmailButtonLabel) {
            this.welcomeEmailButtonLabel = welcomeEmailButtonLabel;
            return this;
        }
        
        /**
         * Set welcomeEmailBody
         * @param welcomeEmailBody  (optional)
         * @return SendTestEmailToOneselfRequestBuilder
         */
        public SendTestEmailToOneselfRequestBuilder welcomeEmailBody(String welcomeEmailBody) {
            this.welcomeEmailBody = welcomeEmailBody;
            return this;
        }
        
        /**
         * Build call for sendTestEmailToOneself
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TestEmailRequest testEmailRequest = buildBodyParams();
            return sendTestEmailToOneselfCall(orgId, testEmailRequest, _callback);
        }

        private TestEmailRequest buildBodyParams() {
            TestEmailRequest testEmailRequest = new TestEmailRequest();
            testEmailRequest.welcomeEmailSubject(this.welcomeEmailSubject);
            testEmailRequest.welcomeEmailButtonLabel(this.welcomeEmailButtonLabel);
            testEmailRequest.welcomeEmailBody(this.welcomeEmailBody);
            return testEmailRequest;
        }

        /**
         * Execute sendTestEmailToOneself request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TestEmailRequest testEmailRequest = buildBodyParams();
            sendTestEmailToOneselfWithHttpInfo(orgId, testEmailRequest);
        }

        /**
         * Execute sendTestEmailToOneself request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TestEmailRequest testEmailRequest = buildBodyParams();
            return sendTestEmailToOneselfWithHttpInfo(orgId, testEmailRequest);
        }

        /**
         * Execute sendTestEmailToOneself request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TestEmailRequest testEmailRequest = buildBodyParams();
            return sendTestEmailToOneselfAsync(orgId, testEmailRequest, _callback);
        }
    }

    /**
     * Send a test welcome email to oneself
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return SendTestEmailToOneselfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public SendTestEmailToOneselfRequestBuilder sendTestEmailToOneself(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new SendTestEmailToOneselfRequestBuilder(orgId);
    }
    private okhttp3.Call updateExistingOrgCall(String orgId, UpdateOrg updateOrg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrg;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingOrgValidateBeforeCall(String orgId, UpdateOrg updateOrg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingOrg(Async)");
        }

        return updateExistingOrgCall(orgId, updateOrg, _callback);

    }


    private ApiResponse<Void> updateExistingOrgWithHttpInfo(String orgId, UpdateOrg updateOrg) throws ApiException {
        okhttp3.Call localVarCall = updateExistingOrgValidateBeforeCall(orgId, updateOrg, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingOrgAsync(String orgId, UpdateOrg updateOrg, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingOrgValidateBeforeCall(orgId, updateOrg, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingOrgRequestBuilder {
        private final String orgId;
        private String customerId;
        private String name;
        private String slug;
        private String type;
        private String industry;
        private Integer estEmployees;
        private Integer estRevenue;
        private Integer foundedYear;
        private Address address;
        private String phone;
        private String email;
        private URI url;
        private List<OrgDomain> domains;
        private String status;
        private String imagePath;
        private List<String> currencies;
        private String stock;
        private String timezone;
        private String appTime;
        private Integer zone;
        private Integer fiscalStart;
        private String startDate;
        private Object sensitiveFields;
        private Object options;
        private Object internalOptions;
        private List<OnboardStepResult> onboardSteps;
        private Boolean onboarding;
        private Boolean selfServeImporting;
        private Integer headCount;

        private UpdateExistingOrgRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set customerId
         * @param customerId customer for billing processing (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder customerId(String customerId) {
            this.customerId = customerId;
            return this;
        }
        
        /**
         * Set name
         * @param name name of organization (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set slug
         * @param slug unique slug of organization (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set type
         * @param type type of organization (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set industry
         * @param industry industry (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder industry(String industry) {
            this.industry = industry;
            return this;
        }
        
        /**
         * Set estEmployees
         * @param estEmployees approximate number of employees (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder estEmployees(Integer estEmployees) {
            this.estEmployees = estEmployees;
            return this;
        }
        
        /**
         * Set estRevenue
         * @param estRevenue approximate amount of revenue (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder estRevenue(Integer estRevenue) {
            this.estRevenue = estRevenue;
            return this;
        }
        
        /**
         * Set foundedYear
         * @param foundedYear year of founding (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder foundedYear(Integer foundedYear) {
            this.foundedYear = foundedYear;
            return this;
        }
        
        /**
         * Set address
         * @param address  (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder address(Address address) {
            this.address = address;
            return this;
        }
        
        /**
         * Set phone
         * @param phone company phone number in E.164 format (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set email
         * @param email primary contact email (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set url
         * @param url website URL (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set domains
         * @param domains domains used by this org (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder domains(List<OrgDomain> domains) {
            this.domains = domains;
            return this;
        }
        
        /**
         * Set status
         * @param status current status of organization (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set imagePath
         * @param imagePath path to full-sized profile image in storage (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder imagePath(String imagePath) {
            this.imagePath = imagePath;
            return this;
        }
        
        /**
         * Set currencies
         * @param currencies types of currencies in use, with the first currency the primary currency (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder currencies(List<String> currencies) {
            this.currencies = currencies;
            return this;
        }
        
        /**
         * Set stock
         * @param stock stock symbol (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder stock(String stock) {
            this.stock = stock;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone timezone in use (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set appTime
         * @param appTime approximate time of day for daily app syncs to run (defaults to 9am Eastern time) (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder appTime(String appTime) {
            this.appTime = appTime;
            return this;
        }
        
        /**
         * Set zone
         * @param zone infrastructure zone (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder zone(Integer zone) {
            this.zone = zone;
            return this;
        }
        
        /**
         * Set fiscalStart
         * @param fiscalStart number of months into the calendar year that the fiscal year starts (1 &#x3D; February, 2 &#x3D; March) (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder fiscalStart(Integer fiscalStart) {
            this.fiscalStart = fiscalStart;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate start date of history (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder startDate(String startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set sensitiveFields
         * @param sensitiveFields map of sensitive field defaults (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder sensitiveFields(Object sensitiveFields) {
            this.sensitiveFields = sensitiveFields;
            return this;
        }
        
        /**
         * Set options
         * @param options org-public options (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set internalOptions
         * @param internalOptions internal (ChartHop controlled) options (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder internalOptions(Object internalOptions) {
            this.internalOptions = internalOptions;
            return this;
        }
        
        /**
         * Set onboardSteps
         * @param onboardSteps list of onboard steps that this Org has completed (or skipped) (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder onboardSteps(List<OnboardStepResult> onboardSteps) {
            this.onboardSteps = onboardSteps;
            return this;
        }
        
        /**
         * Set onboarding
         * @param onboarding current onboarding status of an organization, allowing clearing of org (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder onboarding(Boolean onboarding) {
            this.onboarding = onboarding;
            return this;
        }
        
        /**
         * Set selfServeImporting
         * @param selfServeImporting completion status of initial import for orgs signed up via self serve (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder selfServeImporting(Boolean selfServeImporting) {
            this.selfServeImporting = selfServeImporting;
            return this;
        }
        
        /**
         * Set headCount
         * @param headCount number of total headcount currently in the org (optional)
         * @return UpdateExistingOrgRequestBuilder
         */
        public UpdateExistingOrgRequestBuilder headCount(Integer headCount) {
            this.headCount = headCount;
            return this;
        }
        
        /**
         * Build call for updateExistingOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateOrg updateOrg = buildBodyParams();
            return updateExistingOrgCall(orgId, updateOrg, _callback);
        }

        private UpdateOrg buildBodyParams() {
            UpdateOrg updateOrg = new UpdateOrg();
            updateOrg.customerId(this.customerId);
            updateOrg.name(this.name);
            updateOrg.slug(this.slug);
            if (this.type != null)
            updateOrg.type(UpdateOrg.TypeEnum.fromValue(this.type));
            updateOrg.industry(this.industry);
            updateOrg.estEmployees(this.estEmployees);
            updateOrg.estRevenue(this.estRevenue);
            updateOrg.foundedYear(this.foundedYear);
            updateOrg.address(this.address);
            updateOrg.phone(this.phone);
            updateOrg.email(this.email);
            updateOrg.url(this.url);
            updateOrg.domains(this.domains);
            if (this.status != null)
            updateOrg.status(UpdateOrg.StatusEnum.fromValue(this.status));
            updateOrg.imagePath(this.imagePath);
            updateOrg.currencies(this.currencies);
            updateOrg.stock(this.stock);
            updateOrg.timezone(this.timezone);
            updateOrg.appTime(this.appTime);
            updateOrg.zone(this.zone);
            updateOrg.fiscalStart(this.fiscalStart);
            updateOrg.startDate(this.startDate);
            updateOrg.sensitiveFields(this.sensitiveFields);
            updateOrg.options(this.options);
            updateOrg.internalOptions(this.internalOptions);
            updateOrg.onboardSteps(this.onboardSteps);
            updateOrg.onboarding(this.onboarding);
            updateOrg.selfServeImporting(this.selfServeImporting);
            updateOrg.headCount(this.headCount);
            return updateOrg;
        }

        /**
         * Execute updateExistingOrg request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateOrg updateOrg = buildBodyParams();
            updateExistingOrgWithHttpInfo(orgId, updateOrg);
        }

        /**
         * Execute updateExistingOrg request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateOrg updateOrg = buildBodyParams();
            return updateExistingOrgWithHttpInfo(orgId, updateOrg);
        }

        /**
         * Execute updateExistingOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateOrg updateOrg = buildBodyParams();
            return updateExistingOrgAsync(orgId, updateOrg, _callback);
        }
    }

    /**
     * Update an existing org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateExistingOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingOrgRequestBuilder updateExistingOrg(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateExistingOrgRequestBuilder(orgId);
    }
    private okhttp3.Call validateAppInstallAuthorizationCodeCall(AppInstallCodeValidateRequest appInstallCodeValidateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appInstallCodeValidateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/app-install-code/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateAppInstallAuthorizationCodeValidateBeforeCall(AppInstallCodeValidateRequest appInstallCodeValidateRequest, final ApiCallback _callback) throws ApiException {
        return validateAppInstallAuthorizationCodeCall(appInstallCodeValidateRequest, _callback);

    }


    private ApiResponse<AppInstallCodeValidateResponse> validateAppInstallAuthorizationCodeWithHttpInfo(AppInstallCodeValidateRequest appInstallCodeValidateRequest) throws ApiException {
        okhttp3.Call localVarCall = validateAppInstallAuthorizationCodeValidateBeforeCall(appInstallCodeValidateRequest, null);
        Type localVarReturnType = new TypeToken<AppInstallCodeValidateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateAppInstallAuthorizationCodeAsync(AppInstallCodeValidateRequest appInstallCodeValidateRequest, final ApiCallback<AppInstallCodeValidateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateAppInstallAuthorizationCodeValidateBeforeCall(appInstallCodeValidateRequest, _callback);
        Type localVarReturnType = new TypeToken<AppInstallCodeValidateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateAppInstallAuthorizationCodeRequestBuilder {
        private final String authorizationCode;
        private final Boolean issueAccessToken;

        private ValidateAppInstallAuthorizationCodeRequestBuilder(String authorizationCode, Boolean issueAccessToken) {
            this.authorizationCode = authorizationCode;
            this.issueAccessToken = issueAccessToken;
        }

        /**
         * Build call for validateAppInstallAuthorizationCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppInstallCodeValidateRequest appInstallCodeValidateRequest = buildBodyParams();
            return validateAppInstallAuthorizationCodeCall(appInstallCodeValidateRequest, _callback);
        }

        private AppInstallCodeValidateRequest buildBodyParams() {
            AppInstallCodeValidateRequest appInstallCodeValidateRequest = new AppInstallCodeValidateRequest();
            appInstallCodeValidateRequest.authorizationCode(this.authorizationCode);
            appInstallCodeValidateRequest.issueAccessToken(this.issueAccessToken);
            return appInstallCodeValidateRequest;
        }

        /**
         * Execute validateAppInstallAuthorizationCode request
         * @return AppInstallCodeValidateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public AppInstallCodeValidateResponse execute() throws ApiException {
            AppInstallCodeValidateRequest appInstallCodeValidateRequest = buildBodyParams();
            ApiResponse<AppInstallCodeValidateResponse> localVarResp = validateAppInstallAuthorizationCodeWithHttpInfo(appInstallCodeValidateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateAppInstallAuthorizationCode request with HTTP info returned
         * @return ApiResponse&lt;AppInstallCodeValidateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppInstallCodeValidateResponse> executeWithHttpInfo() throws ApiException {
            AppInstallCodeValidateRequest appInstallCodeValidateRequest = buildBodyParams();
            return validateAppInstallAuthorizationCodeWithHttpInfo(appInstallCodeValidateRequest);
        }

        /**
         * Execute validateAppInstallAuthorizationCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppInstallCodeValidateResponse> _callback) throws ApiException {
            AppInstallCodeValidateRequest appInstallCodeValidateRequest = buildBodyParams();
            return validateAppInstallAuthorizationCodeAsync(appInstallCodeValidateRequest, _callback);
        }
    }

    /**
     * Validate authorization code
     * 
     * @return ValidateAppInstallAuthorizationCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ValidateAppInstallAuthorizationCodeRequestBuilder validateAppInstallAuthorizationCode(String authorizationCode, Boolean issueAccessToken) throws IllegalArgumentException {
        if (authorizationCode == null) throw new IllegalArgumentException("\"authorizationCode\" is required but got null");
            

        if (issueAccessToken == null) throw new IllegalArgumentException("\"issueAccessToken\" is required but got null");
        return new ValidateAppInstallAuthorizationCodeRequestBuilder(authorizationCode, issueAccessToken);
    }
}
