/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BasisFieldMatrix;
import com.konfigthis.client.model.BudgetPool;
import com.konfigthis.client.model.BudgetTiersResponse;
import com.konfigthis.client.model.CreateBudgetPool;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.ResultsData;
import com.konfigthis.client.model.ResultsGuideline;
import com.konfigthis.client.model.UpdateBudgetPool;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BudgetPoolApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BudgetPoolApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetPoolApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateGuidelineCall(String orgId, String id, String scenarioId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}/calculate"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateGuidelineValidateBeforeCall(String orgId, String id, String scenarioId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling calculateGuideline(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling calculateGuideline(Async)");
        }

        return calculateGuidelineCall(orgId, id, scenarioId, _callback);

    }


    private ApiResponse<Void> calculateGuidelineWithHttpInfo(String orgId, String id, String scenarioId) throws ApiException {
        okhttp3.Call localVarCall = calculateGuidelineValidateBeforeCall(orgId, id, scenarioId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call calculateGuidelineAsync(String orgId, String id, String scenarioId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateGuidelineValidateBeforeCall(orgId, id, scenarioId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CalculateGuidelineRequestBuilder {
        private final String orgId;
        private final String id;
        private String scenarioId;

        private CalculateGuidelineRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Set scenarioId
         * @param scenarioId ID of the scenario the budget will be calculated against (optional)
         * @return CalculateGuidelineRequestBuilder
         */
        public CalculateGuidelineRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Build call for calculateGuideline
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateGuidelineCall(orgId, id, scenarioId, _callback);
        }


        /**
         * Execute calculateGuideline request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            calculateGuidelineWithHttpInfo(orgId, id, scenarioId);
        }

        /**
         * Execute calculateGuideline request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return calculateGuidelineWithHttpInfo(orgId, id, scenarioId);
        }

        /**
         * Execute calculateGuideline request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return calculateGuidelineAsync(orgId, id, scenarioId, _callback);
        }
    }

    /**
     * 
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @param id ID of the desired budget pool (required)
     * @return CalculateGuidelineRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CalculateGuidelineRequestBuilder calculateGuideline(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CalculateGuidelineRequestBuilder(orgId, id);
    }
    private okhttp3.Call calculateGuideline_0Call(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}/preview"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateGuideline_0ValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling calculateGuideline_0(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling calculateGuideline_0(Async)");
        }

        return calculateGuideline_0Call(orgId, id, _callback);

    }


    private ApiResponse<BudgetTiersResponse> calculateGuideline_0WithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = calculateGuideline_0ValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<BudgetTiersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateGuideline_0Async(String orgId, String id, final ApiCallback<BudgetTiersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateGuideline_0ValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<BudgetTiersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateGuideline0RequestBuilder {
        private final String orgId;
        private final String id;

        private CalculateGuideline0RequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for calculateGuideline_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateGuideline_0Call(orgId, id, _callback);
        }


        /**
         * Execute calculateGuideline_0 request
         * @return BudgetTiersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public BudgetTiersResponse execute() throws ApiException {
            ApiResponse<BudgetTiersResponse> localVarResp = calculateGuideline_0WithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateGuideline_0 request with HTTP info returned
         * @return ApiResponse&lt;BudgetTiersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetTiersResponse> executeWithHttpInfo() throws ApiException {
            return calculateGuideline_0WithHttpInfo(orgId, id);
        }

        /**
         * Execute calculateGuideline_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetTiersResponse> _callback) throws ApiException {
            return calculateGuideline_0Async(orgId, id, _callback);
        }
    }

    /**
     * Generate tiering &amp; preview with the given budget calculated for the compensation review
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @param id ID of the desired budget pool (required)
     * @return CalculateGuideline0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CalculateGuideline0RequestBuilder calculateGuideline_0(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CalculateGuideline0RequestBuilder(orgId, id);
    }
    private okhttp3.Call createNewPoolCall(String orgId, CreateBudgetPool createBudgetPool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBudgetPool;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewPoolValidateBeforeCall(String orgId, CreateBudgetPool createBudgetPool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewPool(Async)");
        }

        return createNewPoolCall(orgId, createBudgetPool, _callback);

    }


    private ApiResponse<Void> createNewPoolWithHttpInfo(String orgId, CreateBudgetPool createBudgetPool) throws ApiException {
        okhttp3.Call localVarCall = createNewPoolValidateBeforeCall(orgId, createBudgetPool, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewPoolAsync(String orgId, CreateBudgetPool createBudgetPool, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewPoolValidateBeforeCall(orgId, createBudgetPool, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewPoolRequestBuilder {
        private final String compReviewId;
        private final String label;
        private final String appliedField;
        private final String sourceField;
        private final String basisType;
        private final String orgId;
        private String participantsExpr;
        private Money fixedAmount;
        private Double fixedValue;
        private BasisFieldMatrix basisFieldMatrix;
        private Map<String, Money> fixedBudgetMap;
        private String basisExpr;
        private String defaultCurrency;

        private CreateNewPoolRequestBuilder(String compReviewId, String label, String appliedField, String sourceField, String basisType, String orgId) {
            this.compReviewId = compReviewId;
            this.label = label;
            this.appliedField = appliedField;
            this.sourceField = sourceField;
            this.basisType = basisType;
            this.orgId = orgId;
        }

        /**
         * Set participantsExpr
         * @param participantsExpr expression that determines if a particular job is included in this budget pool (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder participantsExpr(String participantsExpr) {
            this.participantsExpr = participantsExpr;
            return this;
        }
        
        /**
         * Set fixedAmount
         * @param fixedAmount  (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder fixedAmount(Money fixedAmount) {
            this.fixedAmount = fixedAmount;
            return this;
        }
        
        /**
         * Set fixedValue
         * @param fixedValue a fixed amount for the budget (used with basisType&#x3D;FIXED || basisType&#x3D;PERCENTAGE) (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder fixedValue(Double fixedValue) {
            this.fixedValue = fixedValue;
            return this;
        }
        
        /**
         * Set basisFieldMatrix
         * @param basisFieldMatrix  (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder basisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
            this.basisFieldMatrix = basisFieldMatrix;
            return this;
        }
        
        /**
         * Set fixedBudgetMap
         * @param fixedBudgetMap a map of reviewer job IDs to fixed budget money amounts (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder fixedBudgetMap(Map<String, Money> fixedBudgetMap) {
            this.fixedBudgetMap = fixedBudgetMap;
            return this;
        }
        
        /**
         * Set basisExpr
         * @param basisExpr expression that calculates how much each job contributes to the budget (used with basisType&#x3D;CUSTOM) (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder basisExpr(String basisExpr) {
            this.basisExpr = basisExpr;
            return this;
        }
        
        /**
         * Set defaultCurrency
         * @param defaultCurrency Default currency used when calculating budget pool, falls back to org primary currency if not set (optional)
         * @return CreateNewPoolRequestBuilder
         */
        public CreateNewPoolRequestBuilder defaultCurrency(String defaultCurrency) {
            this.defaultCurrency = defaultCurrency;
            return this;
        }
        
        /**
         * Build call for createNewPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateBudgetPool createBudgetPool = buildBodyParams();
            return createNewPoolCall(orgId, createBudgetPool, _callback);
        }

        private CreateBudgetPool buildBodyParams() {
            CreateBudgetPool createBudgetPool = new CreateBudgetPool();
            createBudgetPool.compReviewId(this.compReviewId);
            createBudgetPool.label(this.label);
            createBudgetPool.participantsExpr(this.participantsExpr);
            createBudgetPool.appliedField(this.appliedField);
            createBudgetPool.sourceField(this.sourceField);
            if (this.basisType != null)
            createBudgetPool.basisType(CreateBudgetPool.BasisTypeEnum.fromValue(this.basisType));
            createBudgetPool.fixedAmount(this.fixedAmount);
            createBudgetPool.fixedValue(this.fixedValue);
            createBudgetPool.basisFieldMatrix(this.basisFieldMatrix);
            createBudgetPool.fixedBudgetMap(this.fixedBudgetMap);
            createBudgetPool.basisExpr(this.basisExpr);
            createBudgetPool.defaultCurrency(this.defaultCurrency);
            return createBudgetPool;
        }

        /**
         * Execute createNewPool request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateBudgetPool createBudgetPool = buildBodyParams();
            createNewPoolWithHttpInfo(orgId, createBudgetPool);
        }

        /**
         * Execute createNewPool request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateBudgetPool createBudgetPool = buildBodyParams();
            return createNewPoolWithHttpInfo(orgId, createBudgetPool);
        }

        /**
         * Execute createNewPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateBudgetPool createBudgetPool = buildBodyParams();
            return createNewPoolAsync(orgId, createBudgetPool, _callback);
        }
    }

    /**
     * Create a new budget pool
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @return CreateNewPoolRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewPoolRequestBuilder createNewPool(String compReviewId, String label, String appliedField, String sourceField, String basisType, String orgId) throws IllegalArgumentException {
        if (compReviewId == null) throw new IllegalArgumentException("\"compReviewId\" is required but got null");
            

        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (appliedField == null) throw new IllegalArgumentException("\"appliedField\" is required but got null");
            

        if (sourceField == null) throw new IllegalArgumentException("\"sourceField\" is required but got null");
            

        if (basisType == null) throw new IllegalArgumentException("\"basisType\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewPoolRequestBuilder(compReviewId, label, appliedField, sourceField, basisType, orgId);
    }
    private okhttp3.Call deleteBudgetPoolByIdCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBudgetPoolByIdValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteBudgetPoolById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteBudgetPoolById(Async)");
        }

        return deleteBudgetPoolByIdCall(orgId, id, _callback);

    }


    private ApiResponse<Void> deleteBudgetPoolByIdWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = deleteBudgetPoolByIdValidateBeforeCall(orgId, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteBudgetPoolByIdAsync(String orgId, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBudgetPoolByIdValidateBeforeCall(orgId, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteBudgetPoolByIdRequestBuilder {
        private final String orgId;
        private final String id;

        private DeleteBudgetPoolByIdRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for deleteBudgetPoolById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBudgetPoolByIdCall(orgId, id, _callback);
        }


        /**
         * Execute deleteBudgetPoolById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteBudgetPoolByIdWithHttpInfo(orgId, id);
        }

        /**
         * Execute deleteBudgetPoolById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteBudgetPoolByIdWithHttpInfo(orgId, id);
        }

        /**
         * Execute deleteBudgetPoolById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteBudgetPoolByIdAsync(orgId, id, _callback);
        }
    }

    /**
     * Delete a budget pool
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @param id ID of the desired budget pool (required)
     * @return DeleteBudgetPoolByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBudgetPoolByIdRequestBuilder deleteBudgetPoolById(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteBudgetPoolByIdRequestBuilder(orgId, id);
    }
    private okhttp3.Call getAllForOrgCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (compReviewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compReviewId", compReviewId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllForOrgValidateBeforeCall(String orgId, String compReviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllForOrg(Async)");
        }

        return getAllForOrgCall(orgId, compReviewId, _callback);

    }


    private ApiResponse<ResultsData> getAllForOrgWithHttpInfo(String orgId, String compReviewId) throws ApiException {
        okhttp3.Call localVarCall = getAllForOrgValidateBeforeCall(orgId, compReviewId, null);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllForOrgAsync(String orgId, String compReviewId, final ApiCallback<ResultsData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllForOrgValidateBeforeCall(orgId, compReviewId, _callback);
        Type localVarReturnType = new TypeToken<ResultsData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllForOrgRequestBuilder {
        private final String orgId;
        private String compReviewId;

        private GetAllForOrgRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set compReviewId
         * @param compReviewId Comp Review Id to filter on (optional)
         * @return GetAllForOrgRequestBuilder
         */
        public GetAllForOrgRequestBuilder compReviewId(String compReviewId) {
            this.compReviewId = compReviewId;
            return this;
        }
        
        /**
         * Build call for getAllForOrg
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllForOrgCall(orgId, compReviewId, _callback);
        }


        /**
         * Execute getAllForOrg request
         * @return ResultsData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsData execute() throws ApiException {
            ApiResponse<ResultsData> localVarResp = getAllForOrgWithHttpInfo(orgId, compReviewId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllForOrg request with HTTP info returned
         * @return ApiResponse&lt;ResultsData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsData> executeWithHttpInfo() throws ApiException {
            return getAllForOrgWithHttpInfo(orgId, compReviewId);
        }

        /**
         * Execute getAllForOrg request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsData> _callback) throws ApiException {
            return getAllForOrgAsync(orgId, compReviewId, _callback);
        }
    }

    /**
     * Get all budget pools for an org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllForOrgRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllForOrgRequestBuilder getAllForOrg(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllForOrgRequestBuilder(orgId);
    }
    private okhttp3.Call getGuidelinesForBudgetPoolCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}/guidelines"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuidelinesForBudgetPoolValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getGuidelinesForBudgetPool(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGuidelinesForBudgetPool(Async)");
        }

        return getGuidelinesForBudgetPoolCall(orgId, id, _callback);

    }


    private ApiResponse<ResultsGuideline> getGuidelinesForBudgetPoolWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = getGuidelinesForBudgetPoolValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<ResultsGuideline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuidelinesForBudgetPoolAsync(String orgId, String id, final ApiCallback<ResultsGuideline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuidelinesForBudgetPoolValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<ResultsGuideline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGuidelinesForBudgetPoolRequestBuilder {
        private final String orgId;
        private final String id;

        private GetGuidelinesForBudgetPoolRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for getGuidelinesForBudgetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuidelinesForBudgetPoolCall(orgId, id, _callback);
        }


        /**
         * Execute getGuidelinesForBudgetPool request
         * @return ResultsGuideline
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsGuideline execute() throws ApiException {
            ApiResponse<ResultsGuideline> localVarResp = getGuidelinesForBudgetPoolWithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGuidelinesForBudgetPool request with HTTP info returned
         * @return ApiResponse&lt;ResultsGuideline&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsGuideline> executeWithHttpInfo() throws ApiException {
            return getGuidelinesForBudgetPoolWithHttpInfo(orgId, id);
        }

        /**
         * Execute getGuidelinesForBudgetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsGuideline> _callback) throws ApiException {
            return getGuidelinesForBudgetPoolAsync(orgId, id, _callback);
        }
    }

    /**
     * Get the guidelines associated with a budget pool
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param id ID of the desired budget pool (required)
     * @return GetGuidelinesForBudgetPoolRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetGuidelinesForBudgetPoolRequestBuilder getGuidelinesForBudgetPool(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetGuidelinesForBudgetPoolRequestBuilder(orgId, id);
    }
    private okhttp3.Call getSpecificPoolCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPoolValidateBeforeCall(String orgId, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getSpecificPool(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificPool(Async)");
        }

        return getSpecificPoolCall(orgId, id, _callback);

    }


    private ApiResponse<BudgetPool> getSpecificPoolWithHttpInfo(String orgId, String id) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPoolValidateBeforeCall(orgId, id, null);
        Type localVarReturnType = new TypeToken<BudgetPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPoolAsync(String orgId, String id, final ApiCallback<BudgetPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPoolValidateBeforeCall(orgId, id, _callback);
        Type localVarReturnType = new TypeToken<BudgetPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPoolRequestBuilder {
        private final String orgId;
        private final String id;

        private GetSpecificPoolRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Build call for getSpecificPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificPoolCall(orgId, id, _callback);
        }


        /**
         * Execute getSpecificPool request
         * @return BudgetPool
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public BudgetPool execute() throws ApiException {
            ApiResponse<BudgetPool> localVarResp = getSpecificPoolWithHttpInfo(orgId, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPool request with HTTP info returned
         * @return ApiResponse&lt;BudgetPool&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BudgetPool> executeWithHttpInfo() throws ApiException {
            return getSpecificPoolWithHttpInfo(orgId, id);
        }

        /**
         * Execute getSpecificPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BudgetPool> _callback) throws ApiException {
            return getSpecificPoolAsync(orgId, id, _callback);
        }
    }

    /**
     * Get a specific budget pool
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param id ID of the desired budget pool (required)
     * @return GetSpecificPoolRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPoolRequestBuilder getSpecificPool(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSpecificPoolRequestBuilder(orgId, id);
    }
    private okhttp3.Call updateBudgetPoolCall(String orgId, String id, UpdateBudgetPool updateBudgetPool, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBudgetPool;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/budget-pool/{id}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBudgetPoolValidateBeforeCall(String orgId, String id, UpdateBudgetPool updateBudgetPool, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateBudgetPool(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBudgetPool(Async)");
        }

        return updateBudgetPoolCall(orgId, id, updateBudgetPool, _callback);

    }


    private ApiResponse<Void> updateBudgetPoolWithHttpInfo(String orgId, String id, UpdateBudgetPool updateBudgetPool) throws ApiException {
        okhttp3.Call localVarCall = updateBudgetPoolValidateBeforeCall(orgId, id, updateBudgetPool, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBudgetPoolAsync(String orgId, String id, UpdateBudgetPool updateBudgetPool, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBudgetPoolValidateBeforeCall(orgId, id, updateBudgetPool, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBudgetPoolRequestBuilder {
        private final String orgId;
        private final String id;
        private String label;
        private String participantsExpr;
        private String appliedField;
        private String sourceField;
        private String basisType;
        private Money fixedAmount;
        private Double fixedValue;
        private BasisFieldMatrix basisFieldMatrix;
        private Map<String, Money> fixedBudgetMap;
        private String basisExpr;
        private String defaultCurrency;

        private UpdateBudgetPoolRequestBuilder(String orgId, String id) {
            this.orgId = orgId;
            this.id = id;
        }

        /**
         * Set label
         * @param label unique label (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set participantsExpr
         * @param participantsExpr expression that determines if a particular job is included in this budget pool (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder participantsExpr(String participantsExpr) {
            this.participantsExpr = participantsExpr;
            return this;
        }
        
        /**
         * Set appliedField
         * @param appliedField the field this budget pool applies to (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder appliedField(String appliedField) {
            this.appliedField = appliedField;
            return this;
        }
        
        /**
         * Set sourceField
         * @param sourceField the field this budget pool is calculated from (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder sourceField(String sourceField) {
            this.sourceField = sourceField;
            return this;
        }
        
        /**
         * Set basisType
         * @param basisType the method for calculating the amount in the budget (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder basisType(String basisType) {
            this.basisType = basisType;
            return this;
        }
        
        /**
         * Set fixedAmount
         * @param fixedAmount  (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder fixedAmount(Money fixedAmount) {
            this.fixedAmount = fixedAmount;
            return this;
        }
        
        /**
         * Set fixedValue
         * @param fixedValue a fixed amount for the budget (used with basisType&#x3D;FIXED || basisType&#x3D;PERCENTAGE) (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder fixedValue(Double fixedValue) {
            this.fixedValue = fixedValue;
            return this;
        }
        
        /**
         * Set basisFieldMatrix
         * @param basisFieldMatrix  (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder basisFieldMatrix(BasisFieldMatrix basisFieldMatrix) {
            this.basisFieldMatrix = basisFieldMatrix;
            return this;
        }
        
        /**
         * Set fixedBudgetMap
         * @param fixedBudgetMap a map of reviewer job IDs to fixed budget money amounts (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder fixedBudgetMap(Map<String, Money> fixedBudgetMap) {
            this.fixedBudgetMap = fixedBudgetMap;
            return this;
        }
        
        /**
         * Set basisExpr
         * @param basisExpr expression that calculates how much each job contributes to the budget (used with basisType&#x3D;CUSTOM) (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder basisExpr(String basisExpr) {
            this.basisExpr = basisExpr;
            return this;
        }
        
        /**
         * Set defaultCurrency
         * @param defaultCurrency Default currency used when calculating budget pool, falls back to org primary currency if not set (optional)
         * @return UpdateBudgetPoolRequestBuilder
         */
        public UpdateBudgetPoolRequestBuilder defaultCurrency(String defaultCurrency) {
            this.defaultCurrency = defaultCurrency;
            return this;
        }
        
        /**
         * Build call for updateBudgetPool
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateBudgetPool updateBudgetPool = buildBodyParams();
            return updateBudgetPoolCall(orgId, id, updateBudgetPool, _callback);
        }

        private UpdateBudgetPool buildBodyParams() {
            UpdateBudgetPool updateBudgetPool = new UpdateBudgetPool();
            updateBudgetPool.label(this.label);
            updateBudgetPool.participantsExpr(this.participantsExpr);
            updateBudgetPool.appliedField(this.appliedField);
            updateBudgetPool.sourceField(this.sourceField);
            if (this.basisType != null)
            updateBudgetPool.basisType(UpdateBudgetPool.BasisTypeEnum.fromValue(this.basisType));
            updateBudgetPool.fixedAmount(this.fixedAmount);
            updateBudgetPool.fixedValue(this.fixedValue);
            updateBudgetPool.basisFieldMatrix(this.basisFieldMatrix);
            updateBudgetPool.fixedBudgetMap(this.fixedBudgetMap);
            updateBudgetPool.basisExpr(this.basisExpr);
            updateBudgetPool.defaultCurrency(this.defaultCurrency);
            return updateBudgetPool;
        }

        /**
         * Execute updateBudgetPool request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateBudgetPool updateBudgetPool = buildBodyParams();
            updateBudgetPoolWithHttpInfo(orgId, id, updateBudgetPool);
        }

        /**
         * Execute updateBudgetPool request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateBudgetPool updateBudgetPool = buildBodyParams();
            return updateBudgetPoolWithHttpInfo(orgId, id, updateBudgetPool);
        }

        /**
         * Execute updateBudgetPool request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateBudgetPool updateBudgetPool = buildBodyParams();
            return updateBudgetPoolAsync(orgId, id, updateBudgetPool, _callback);
        }
    }

    /**
     * Update a budget pool
     * 
     * @param orgId Org identifier (either id or slug (required)
     * @param id ID of the desired budget pool (required)
     * @return UpdateBudgetPoolRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBudgetPoolRequestBuilder updateBudgetPool(String orgId, String id) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateBudgetPoolRequestBuilder(orgId, id);
    }
}
