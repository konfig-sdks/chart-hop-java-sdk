/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.RecordMetricRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetricApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetricApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call recordDailyMetricCall(String orgId, RecordMetricRequest recordMetricRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recordMetricRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/metric"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recordDailyMetricValidateBeforeCall(String orgId, RecordMetricRequest recordMetricRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling recordDailyMetric(Async)");
        }

        return recordDailyMetricCall(orgId, recordMetricRequest, _callback);

    }


    private ApiResponse<Void> recordDailyMetricWithHttpInfo(String orgId, RecordMetricRequest recordMetricRequest) throws ApiException {
        okhttp3.Call localVarCall = recordDailyMetricValidateBeforeCall(orgId, recordMetricRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call recordDailyMetricAsync(String orgId, RecordMetricRequest recordMetricRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = recordDailyMetricValidateBeforeCall(orgId, recordMetricRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RecordDailyMetricRequestBuilder {
        private final String metric;
        private final Double value;
        private final String orgId;
        private LocalDate date;

        private RecordDailyMetricRequestBuilder(String metric, double value, String orgId) {
            this.metric = metric;
            this.value = value;
            this.orgId = orgId;
        }

        /**
         * Set date
         * @param date the date that the metric applies to (if blank, will default to today) (optional)
         * @return RecordDailyMetricRequestBuilder
         */
        public RecordDailyMetricRequestBuilder date(LocalDate date) {
            this.date = date;
            return this;
        }
        
        /**
         * Build call for recordDailyMetric
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecordMetricRequest recordMetricRequest = buildBodyParams();
            return recordDailyMetricCall(orgId, recordMetricRequest, _callback);
        }

        private RecordMetricRequest buildBodyParams() {
            RecordMetricRequest recordMetricRequest = new RecordMetricRequest();
            recordMetricRequest.metric(this.metric);
            recordMetricRequest.value(this.value);
            recordMetricRequest.date(this.date);
            return recordMetricRequest;
        }

        /**
         * Execute recordDailyMetric request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RecordMetricRequest recordMetricRequest = buildBodyParams();
            recordDailyMetricWithHttpInfo(orgId, recordMetricRequest);
        }

        /**
         * Execute recordDailyMetric request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RecordMetricRequest recordMetricRequest = buildBodyParams();
            return recordDailyMetricWithHttpInfo(orgId, recordMetricRequest);
        }

        /**
         * Execute recordDailyMetric request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RecordMetricRequest recordMetricRequest = buildBodyParams();
            return recordDailyMetricAsync(orgId, recordMetricRequest, _callback);
        }
    }

    /**
     * Record a daily metric
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return RecordDailyMetricRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RecordDailyMetricRequestBuilder recordDailyMetric(String metric, double value, String orgId) throws IllegalArgumentException {
        if (metric == null) throw new IllegalArgumentException("\"metric\" is required but got null");
            

        
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RecordDailyMetricRequestBuilder(metric, value, orgId);
    }
}
