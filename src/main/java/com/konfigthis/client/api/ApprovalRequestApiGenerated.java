/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApprovalRequestScenarioResponse;
import com.konfigthis.client.model.ResultsApprovalRequestScenarioResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApprovalRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApprovalRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApprovalRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllApprovalRequestScenarioResponsesCall(String orgId, Integer limit, String entityIds, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-request/entity/scenario"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (entityIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityIds", entityIds));
        }

        if (includeDeleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeDeleted", includeDeleted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllApprovalRequestScenarioResponsesValidateBeforeCall(String orgId, Integer limit, String entityIds, Boolean includeDeleted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllApprovalRequestScenarioResponses(Async)");
        }

        return getAllApprovalRequestScenarioResponsesCall(orgId, limit, entityIds, includeDeleted, _callback);

    }


    private ApiResponse<ResultsApprovalRequestScenarioResponse> getAllApprovalRequestScenarioResponsesWithHttpInfo(String orgId, Integer limit, String entityIds, Boolean includeDeleted) throws ApiException {
        okhttp3.Call localVarCall = getAllApprovalRequestScenarioResponsesValidateBeforeCall(orgId, limit, entityIds, includeDeleted, null);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestScenarioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllApprovalRequestScenarioResponsesAsync(String orgId, Integer limit, String entityIds, Boolean includeDeleted, final ApiCallback<ResultsApprovalRequestScenarioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllApprovalRequestScenarioResponsesValidateBeforeCall(orgId, limit, entityIds, includeDeleted, _callback);
        Type localVarReturnType = new TypeToken<ResultsApprovalRequestScenarioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllApprovalRequestScenarioResponsesRequestBuilder {
        private final String orgId;
        private Integer limit;
        private String entityIds;
        private Boolean includeDeleted;

        private GetAllApprovalRequestScenarioResponsesRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllApprovalRequestScenarioResponsesRequestBuilder
         */
        public GetAllApprovalRequestScenarioResponsesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set entityIds
         * @param entityIds entity ids to filter on (optional)
         * @return GetAllApprovalRequestScenarioResponsesRequestBuilder
         */
        public GetAllApprovalRequestScenarioResponsesRequestBuilder entityIds(String entityIds) {
            this.entityIds = entityIds;
            return this;
        }
        
        /**
         * Set includeDeleted
         * @param includeDeleted Include deleted approval requests (optional)
         * @return GetAllApprovalRequestScenarioResponsesRequestBuilder
         */
        public GetAllApprovalRequestScenarioResponsesRequestBuilder includeDeleted(Boolean includeDeleted) {
            this.includeDeleted = includeDeleted;
            return this;
        }
        
        /**
         * Build call for getAllApprovalRequestScenarioResponses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllApprovalRequestScenarioResponsesCall(orgId, limit, entityIds, includeDeleted, _callback);
        }


        /**
         * Execute getAllApprovalRequestScenarioResponses request
         * @return ResultsApprovalRequestScenarioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsApprovalRequestScenarioResponse execute() throws ApiException {
            ApiResponse<ResultsApprovalRequestScenarioResponse> localVarResp = getAllApprovalRequestScenarioResponsesWithHttpInfo(orgId, limit, entityIds, includeDeleted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllApprovalRequestScenarioResponses request with HTTP info returned
         * @return ApiResponse&lt;ResultsApprovalRequestScenarioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsApprovalRequestScenarioResponse> executeWithHttpInfo() throws ApiException {
            return getAllApprovalRequestScenarioResponsesWithHttpInfo(orgId, limit, entityIds, includeDeleted);
        }

        /**
         * Execute getAllApprovalRequestScenarioResponses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsApprovalRequestScenarioResponse> _callback) throws ApiException {
            return getAllApprovalRequestScenarioResponsesAsync(orgId, limit, entityIds, includeDeleted, _callback);
        }
    }

    /**
     * Return all approval request scenario responses for an org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllApprovalRequestScenarioResponsesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllApprovalRequestScenarioResponsesRequestBuilder getAllApprovalRequestScenarioResponses(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllApprovalRequestScenarioResponsesRequestBuilder(orgId);
    }
    private okhttp3.Call getApprovalRequestScenarioResponseByJobIdCall(String orgId, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-request/scenario-job/{jobId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApprovalRequestScenarioResponseByJobIdValidateBeforeCall(String orgId, String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getApprovalRequestScenarioResponseByJobId(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getApprovalRequestScenarioResponseByJobId(Async)");
        }

        return getApprovalRequestScenarioResponseByJobIdCall(orgId, jobId, _callback);

    }


    private ApiResponse<ApprovalRequestScenarioResponse> getApprovalRequestScenarioResponseByJobIdWithHttpInfo(String orgId, String jobId) throws ApiException {
        okhttp3.Call localVarCall = getApprovalRequestScenarioResponseByJobIdValidateBeforeCall(orgId, jobId, null);
        Type localVarReturnType = new TypeToken<ApprovalRequestScenarioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApprovalRequestScenarioResponseByJobIdAsync(String orgId, String jobId, final ApiCallback<ApprovalRequestScenarioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApprovalRequestScenarioResponseByJobIdValidateBeforeCall(orgId, jobId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequestScenarioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApprovalRequestScenarioResponseByJobIdRequestBuilder {
        private final String orgId;
        private final String jobId;

        private GetApprovalRequestScenarioResponseByJobIdRequestBuilder(String orgId, String jobId) {
            this.orgId = orgId;
            this.jobId = jobId;
        }

        /**
         * Build call for getApprovalRequestScenarioResponseByJobId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApprovalRequestScenarioResponseByJobIdCall(orgId, jobId, _callback);
        }


        /**
         * Execute getApprovalRequestScenarioResponseByJobId request
         * @return ApprovalRequestScenarioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalRequestScenarioResponse execute() throws ApiException {
            ApiResponse<ApprovalRequestScenarioResponse> localVarResp = getApprovalRequestScenarioResponseByJobIdWithHttpInfo(orgId, jobId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApprovalRequestScenarioResponseByJobId request with HTTP info returned
         * @return ApiResponse&lt;ApprovalRequestScenarioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalRequestScenarioResponse> executeWithHttpInfo() throws ApiException {
            return getApprovalRequestScenarioResponseByJobIdWithHttpInfo(orgId, jobId);
        }

        /**
         * Execute getApprovalRequestScenarioResponseByJobId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalRequestScenarioResponse> _callback) throws ApiException {
            return getApprovalRequestScenarioResponseByJobIdAsync(orgId, jobId, _callback);
        }
    }

    /**
     * Return a particular approval request scenario response by jobId
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param jobId Job id (required)
     * @return GetApprovalRequestScenarioResponseByJobIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetApprovalRequestScenarioResponseByJobIdRequestBuilder getApprovalRequestScenarioResponseByJobId(String orgId, String jobId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (jobId == null) throw new IllegalArgumentException("\"jobId\" is required but got null");
            

        return new GetApprovalRequestScenarioResponseByJobIdRequestBuilder(orgId, jobId);
    }
    private okhttp3.Call getScenarioResponseByIdCall(String orgId, String approvalRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/approval-request/{approvalRequestId}/scenario-response"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "approvalRequestId" + "}", localVarApiClient.escapeString(approvalRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScenarioResponseByIdValidateBeforeCall(String orgId, String approvalRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getScenarioResponseById(Async)");
        }

        // verify the required parameter 'approvalRequestId' is set
        if (approvalRequestId == null) {
            throw new ApiException("Missing the required parameter 'approvalRequestId' when calling getScenarioResponseById(Async)");
        }

        return getScenarioResponseByIdCall(orgId, approvalRequestId, _callback);

    }


    private ApiResponse<ApprovalRequestScenarioResponse> getScenarioResponseByIdWithHttpInfo(String orgId, String approvalRequestId) throws ApiException {
        okhttp3.Call localVarCall = getScenarioResponseByIdValidateBeforeCall(orgId, approvalRequestId, null);
        Type localVarReturnType = new TypeToken<ApprovalRequestScenarioResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScenarioResponseByIdAsync(String orgId, String approvalRequestId, final ApiCallback<ApprovalRequestScenarioResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScenarioResponseByIdValidateBeforeCall(orgId, approvalRequestId, _callback);
        Type localVarReturnType = new TypeToken<ApprovalRequestScenarioResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetScenarioResponseByIdRequestBuilder {
        private final String orgId;
        private final String approvalRequestId;

        private GetScenarioResponseByIdRequestBuilder(String orgId, String approvalRequestId) {
            this.orgId = orgId;
            this.approvalRequestId = approvalRequestId;
        }

        /**
         * Build call for getScenarioResponseById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScenarioResponseByIdCall(orgId, approvalRequestId, _callback);
        }


        /**
         * Execute getScenarioResponseById request
         * @return ApprovalRequestScenarioResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApprovalRequestScenarioResponse execute() throws ApiException {
            ApiResponse<ApprovalRequestScenarioResponse> localVarResp = getScenarioResponseByIdWithHttpInfo(orgId, approvalRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getScenarioResponseById request with HTTP info returned
         * @return ApiResponse&lt;ApprovalRequestScenarioResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApprovalRequestScenarioResponse> executeWithHttpInfo() throws ApiException {
            return getScenarioResponseByIdWithHttpInfo(orgId, approvalRequestId);
        }

        /**
         * Execute getScenarioResponseById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApprovalRequestScenarioResponse> _callback) throws ApiException {
            return getScenarioResponseByIdAsync(orgId, approvalRequestId, _callback);
        }
    }

    /**
     * Return a particular approval request scenario response by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param approvalRequestId Approval request id (required)
     * @return GetScenarioResponseByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetScenarioResponseByIdRequestBuilder getScenarioResponseById(String orgId, String approvalRequestId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (approvalRequestId == null) throw new IllegalArgumentException("\"approvalRequestId\" is required but got null");
            

        return new GetScenarioResponseByIdRequestBuilder(orgId, approvalRequestId);
    }
}
