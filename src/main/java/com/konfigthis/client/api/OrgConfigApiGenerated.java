/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BuiltInCategoryMap;
import com.konfigthis.client.model.BuiltInFieldConfig;
import com.konfigthis.client.model.CompensationBandsConfig;
import com.konfigthis.client.model.CreateOrgConfig;
import com.konfigthis.client.model.GrantAlias;
import com.konfigthis.client.model.OrgConfig;
import com.konfigthis.client.model.SmartCurrencyOption;
import com.konfigthis.client.model.UpdateOrgConfig;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrgConfigApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrgConfigApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrgConfigApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIfNotExistsCall(String orgId, CreateOrgConfig createOrgConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOrgConfig;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/config"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIfNotExistsValidateBeforeCall(String orgId, CreateOrgConfig createOrgConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createIfNotExists(Async)");
        }

        return createIfNotExistsCall(orgId, createOrgConfig, _callback);

    }


    private ApiResponse<OrgConfig> createIfNotExistsWithHttpInfo(String orgId, CreateOrgConfig createOrgConfig) throws ApiException {
        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, createOrgConfig, null);
        Type localVarReturnType = new TypeToken<OrgConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIfNotExistsAsync(String orgId, CreateOrgConfig createOrgConfig, final ApiCallback<OrgConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, createOrgConfig, _callback);
        Type localVarReturnType = new TypeToken<OrgConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIfNotExistsRequestBuilder {
        private final String orgId;
        private final String orgId;
        private Set<String> hiddenFieldIds;
        private Set<BuiltInCategoryMap> builtinCategoryMap;
        private Set<BuiltInFieldConfig> builtinFieldConfig;
        private CompensationBandsConfig compensationBandsConfig;
        private List<SmartCurrencyOption> smartCurrencyOptions;
        private String smartCurrencyDefault;
        private Set<String> requiredJobFields;
        private Map<String, String> scenarioApprovalChains;
        private Boolean isOpenJobRoleApprovalEnabled;
        private Set<GrantAlias> grantConfiguration;

        private CreateIfNotExistsRequestBuilder(String orgId, String orgId) {
            this.orgId = orgId;
            this.orgId = orgId;
        }

        /**
         * Set hiddenFieldIds
         * @param hiddenFieldIds set of hidden field ids of an org (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder hiddenFieldIds(Set<String> hiddenFieldIds) {
            this.hiddenFieldIds = hiddenFieldIds;
            return this;
        }
        
        /**
         * Set builtinCategoryMap
         * @param builtinCategoryMap set of maps of the custom fields that belongs to a built-in category (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder builtinCategoryMap(Set<BuiltInCategoryMap> builtinCategoryMap) {
            this.builtinCategoryMap = builtinCategoryMap;
            return this;
        }
        
        /**
         * Set builtinFieldConfig
         * @param builtinFieldConfig Org configuration for built-in fields (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder builtinFieldConfig(Set<BuiltInFieldConfig> builtinFieldConfig) {
            this.builtinFieldConfig = builtinFieldConfig;
            return this;
        }
        
        /**
         * Set compensationBandsConfig
         * @param compensationBandsConfig  (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder compensationBandsConfig(CompensationBandsConfig compensationBandsConfig) {
            this.compensationBandsConfig = compensationBandsConfig;
            return this;
        }
        
        /**
         * Set smartCurrencyOptions
         * @param smartCurrencyOptions Options for where to source a currency to use when currency is unknown. order specific (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder smartCurrencyOptions(List<SmartCurrencyOption> smartCurrencyOptions) {
            this.smartCurrencyOptions = smartCurrencyOptions;
            return this;
        }
        
        /**
         * Set smartCurrencyDefault
         * @param smartCurrencyDefault The default currency to use when currency is unknown and there are no options set in smartCurrencyOptions (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder smartCurrencyDefault(String smartCurrencyDefault) {
            this.smartCurrencyDefault = smartCurrencyDefault;
            return this;
        }
        
        /**
         * Set requiredJobFields
         * @param requiredJobFields Org configuration for required job fields (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder requiredJobFields(Set<String> requiredJobFields) {
            this.requiredJobFields = requiredJobFields;
            return this;
        }
        
        /**
         * Set scenarioApprovalChains
         * @param scenarioApprovalChains Configures which approval chains to use with specific scenario types (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder scenarioApprovalChains(Map<String, String> scenarioApprovalChains) {
            this.scenarioApprovalChains = scenarioApprovalChains;
            return this;
        }
        
        /**
         * Set isOpenJobRoleApprovalEnabled
         * @param isOpenJobRoleApprovalEnabled Whether to show open job approval on Open Job Profile page (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder isOpenJobRoleApprovalEnabled(Boolean isOpenJobRoleApprovalEnabled) {
            this.isOpenJobRoleApprovalEnabled = isOpenJobRoleApprovalEnabled;
            return this;
        }
        
        /**
         * Set grantConfiguration
         * @param grantConfiguration Org Grant Configuration (optional)
         * @return CreateIfNotExistsRequestBuilder
         */
        public CreateIfNotExistsRequestBuilder grantConfiguration(Set<GrantAlias> grantConfiguration) {
            this.grantConfiguration = grantConfiguration;
            return this;
        }
        
        /**
         * Build call for createIfNotExists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOrgConfig createOrgConfig = buildBodyParams();
            return createIfNotExistsCall(orgId, createOrgConfig, _callback);
        }

        private CreateOrgConfig buildBodyParams() {
            CreateOrgConfig createOrgConfig = new CreateOrgConfig();
            createOrgConfig.orgId(this.orgId);
            createOrgConfig.hiddenFieldIds(this.hiddenFieldIds);
            createOrgConfig.builtinCategoryMap(this.builtinCategoryMap);
            createOrgConfig.builtinFieldConfig(this.builtinFieldConfig);
            createOrgConfig.compensationBandsConfig(this.compensationBandsConfig);
            createOrgConfig.smartCurrencyOptions(this.smartCurrencyOptions);
            createOrgConfig.smartCurrencyDefault(this.smartCurrencyDefault);
            createOrgConfig.requiredJobFields(this.requiredJobFields);
            createOrgConfig.scenarioApprovalChains(this.scenarioApprovalChains);
            createOrgConfig.isOpenJobRoleApprovalEnabled(this.isOpenJobRoleApprovalEnabled);
            createOrgConfig.grantConfiguration(this.grantConfiguration);
            return createOrgConfig;
        }

        /**
         * Execute createIfNotExists request
         * @return OrgConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public OrgConfig execute() throws ApiException {
            CreateOrgConfig createOrgConfig = buildBodyParams();
            ApiResponse<OrgConfig> localVarResp = createIfNotExistsWithHttpInfo(orgId, createOrgConfig);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIfNotExists request with HTTP info returned
         * @return ApiResponse&lt;OrgConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgConfig> executeWithHttpInfo() throws ApiException {
            CreateOrgConfig createOrgConfig = buildBodyParams();
            return createIfNotExistsWithHttpInfo(orgId, createOrgConfig);
        }

        /**
         * Execute createIfNotExists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgConfig> _callback) throws ApiException {
            CreateOrgConfig createOrgConfig = buildBodyParams();
            return createIfNotExistsAsync(orgId, createOrgConfig, _callback);
        }
    }

    /**
     * Create an org config if it doesn&#39;t exist
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateIfNotExistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public CreateIfNotExistsRequestBuilder createIfNotExists(String orgId, String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateIfNotExistsRequestBuilder(orgId, orgId);
    }
    private okhttp3.Call getByOrgIdCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/config"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByOrgIdValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getByOrgId(Async)");
        }

        return getByOrgIdCall(orgId, _callback);

    }


    private ApiResponse<OrgConfig> getByOrgIdWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getByOrgIdValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<OrgConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByOrgIdAsync(String orgId, final ApiCallback<OrgConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByOrgIdValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<OrgConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByOrgIdRequestBuilder {
        private final String orgId;

        private GetByOrgIdRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getByOrgId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByOrgIdCall(orgId, _callback);
        }


        /**
         * Execute getByOrgId request
         * @return OrgConfig
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public OrgConfig execute() throws ApiException {
            ApiResponse<OrgConfig> localVarResp = getByOrgIdWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByOrgId request with HTTP info returned
         * @return ApiResponse&lt;OrgConfig&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgConfig> executeWithHttpInfo() throws ApiException {
            return getByOrgIdWithHttpInfo(orgId);
        }

        /**
         * Execute getByOrgId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgConfig> _callback) throws ApiException {
            return getByOrgIdAsync(orgId, _callback);
        }
    }

    /**
     * Return config for a given org
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetByOrgIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetByOrgIdRequestBuilder getByOrgId(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetByOrgIdRequestBuilder(orgId);
    }
    private okhttp3.Call patchExistingConfigCall(String orgId, UpdateOrgConfig updateOrgConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrgConfig;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/config"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchExistingConfigValidateBeforeCall(String orgId, UpdateOrgConfig updateOrgConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling patchExistingConfig(Async)");
        }

        return patchExistingConfigCall(orgId, updateOrgConfig, _callback);

    }


    private ApiResponse<Void> patchExistingConfigWithHttpInfo(String orgId, UpdateOrgConfig updateOrgConfig) throws ApiException {
        okhttp3.Call localVarCall = patchExistingConfigValidateBeforeCall(orgId, updateOrgConfig, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call patchExistingConfigAsync(String orgId, UpdateOrgConfig updateOrgConfig, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchExistingConfigValidateBeforeCall(orgId, updateOrgConfig, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PatchExistingConfigRequestBuilder {
        private final String orgId;
        private Set<String> hiddenFieldIds;
        private Set<BuiltInCategoryMap> builtinCategoryMap;
        private Set<BuiltInFieldConfig> builtinFieldConfig;
        private CompensationBandsConfig compensationBandsConfig;
        private List<SmartCurrencyOption> smartCurrencyOptions;
        private String smartCurrencyDefault;
        private Set<String> requiredJobFields;
        private Map<String, String> scenarioApprovalChains;
        private Boolean isOpenJobRoleApprovalEnabled;
        private Set<GrantAlias> grantConfiguration;

        private PatchExistingConfigRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set hiddenFieldIds
         * @param hiddenFieldIds set of hidden field ids of an org (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder hiddenFieldIds(Set<String> hiddenFieldIds) {
            this.hiddenFieldIds = hiddenFieldIds;
            return this;
        }
        
        /**
         * Set builtinCategoryMap
         * @param builtinCategoryMap set of maps of the custom fields that belongs to a built-in category (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder builtinCategoryMap(Set<BuiltInCategoryMap> builtinCategoryMap) {
            this.builtinCategoryMap = builtinCategoryMap;
            return this;
        }
        
        /**
         * Set builtinFieldConfig
         * @param builtinFieldConfig Org configuration for built-in fields (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder builtinFieldConfig(Set<BuiltInFieldConfig> builtinFieldConfig) {
            this.builtinFieldConfig = builtinFieldConfig;
            return this;
        }
        
        /**
         * Set compensationBandsConfig
         * @param compensationBandsConfig  (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder compensationBandsConfig(CompensationBandsConfig compensationBandsConfig) {
            this.compensationBandsConfig = compensationBandsConfig;
            return this;
        }
        
        /**
         * Set smartCurrencyOptions
         * @param smartCurrencyOptions Options for where to source a currency to use when currency is unknown. order specific (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder smartCurrencyOptions(List<SmartCurrencyOption> smartCurrencyOptions) {
            this.smartCurrencyOptions = smartCurrencyOptions;
            return this;
        }
        
        /**
         * Set smartCurrencyDefault
         * @param smartCurrencyDefault The default currency to use when currency is unknown and there are no options set in smartCurrencyOptions (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder smartCurrencyDefault(String smartCurrencyDefault) {
            this.smartCurrencyDefault = smartCurrencyDefault;
            return this;
        }
        
        /**
         * Set requiredJobFields
         * @param requiredJobFields Org configuration for required job fields (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder requiredJobFields(Set<String> requiredJobFields) {
            this.requiredJobFields = requiredJobFields;
            return this;
        }
        
        /**
         * Set scenarioApprovalChains
         * @param scenarioApprovalChains Configures which approval chains to use with specific scenario types (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder scenarioApprovalChains(Map<String, String> scenarioApprovalChains) {
            this.scenarioApprovalChains = scenarioApprovalChains;
            return this;
        }
        
        /**
         * Set isOpenJobRoleApprovalEnabled
         * @param isOpenJobRoleApprovalEnabled Whether to show open job approval on Open Job Profile page (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder isOpenJobRoleApprovalEnabled(Boolean isOpenJobRoleApprovalEnabled) {
            this.isOpenJobRoleApprovalEnabled = isOpenJobRoleApprovalEnabled;
            return this;
        }
        
        /**
         * Set grantConfiguration
         * @param grantConfiguration Org Grant Configuration (optional)
         * @return PatchExistingConfigRequestBuilder
         */
        public PatchExistingConfigRequestBuilder grantConfiguration(Set<GrantAlias> grantConfiguration) {
            this.grantConfiguration = grantConfiguration;
            return this;
        }
        
        /**
         * Build call for patchExistingConfig
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateOrgConfig updateOrgConfig = buildBodyParams();
            return patchExistingConfigCall(orgId, updateOrgConfig, _callback);
        }

        private UpdateOrgConfig buildBodyParams() {
            UpdateOrgConfig updateOrgConfig = new UpdateOrgConfig();
            updateOrgConfig.hiddenFieldIds(this.hiddenFieldIds);
            updateOrgConfig.builtinCategoryMap(this.builtinCategoryMap);
            updateOrgConfig.builtinFieldConfig(this.builtinFieldConfig);
            updateOrgConfig.compensationBandsConfig(this.compensationBandsConfig);
            updateOrgConfig.smartCurrencyOptions(this.smartCurrencyOptions);
            updateOrgConfig.smartCurrencyDefault(this.smartCurrencyDefault);
            updateOrgConfig.requiredJobFields(this.requiredJobFields);
            updateOrgConfig.scenarioApprovalChains(this.scenarioApprovalChains);
            updateOrgConfig.isOpenJobRoleApprovalEnabled(this.isOpenJobRoleApprovalEnabled);
            updateOrgConfig.grantConfiguration(this.grantConfiguration);
            return updateOrgConfig;
        }

        /**
         * Execute patchExistingConfig request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateOrgConfig updateOrgConfig = buildBodyParams();
            patchExistingConfigWithHttpInfo(orgId, updateOrgConfig);
        }

        /**
         * Execute patchExistingConfig request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateOrgConfig updateOrgConfig = buildBodyParams();
            return patchExistingConfigWithHttpInfo(orgId, updateOrgConfig);
        }

        /**
         * Execute patchExistingConfig request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateOrgConfig updateOrgConfig = buildBodyParams();
            return patchExistingConfigAsync(orgId, updateOrgConfig, _callback);
        }
    }

    /**
     * Update an existing org config
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return PatchExistingConfigRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PatchExistingConfigRequestBuilder patchExistingConfig(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new PatchExistingConfigRequestBuilder(orgId);
    }
}
