/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccessTokenRequest;
import com.konfigthis.client.model.AccessTokenResponse;
import com.konfigthis.client.model.IdpAccessTokenResponse;
import com.konfigthis.client.model.OauthAuthorizeUserTokenRequest;
import java.net.URI;
import com.konfigthis.client.model.ViewAsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OauthApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authorizeUserTokenCall(String grantType, String username, String password, String scope, String code, URI redirectUri, String clientId, String refreshToken, OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = oauthAuthorizeUserTokenRequest;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (username != null) {
            localVarFormParams.put("username", username);
        }

        if (password != null) {
            localVarFormParams.put("password", password);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeUserTokenValidateBeforeCall(String grantType, String username, String password, String scope, String code, URI redirectUri, String clientId, String refreshToken, OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest, final ApiCallback _callback) throws ApiException {
        return authorizeUserTokenCall(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest, _callback);

    }


    private ApiResponse<AccessTokenResponse> authorizeUserTokenWithHttpInfo(String grantType, String username, String password, String scope, String code, URI redirectUri, String clientId, String refreshToken, OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizeUserTokenValidateBeforeCall(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authorizeUserTokenAsync(String grantType, String username, String password, String scope, String code, URI redirectUri, String clientId, String refreshToken, OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeUserTokenValidateBeforeCall(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthorizeUserTokenRequestBuilder {
        private String grantType;
        private String username;
        private String password;
        private String scope;
        private String code;
        private URI redirectUri;
        private String clientId;
        private String refreshToken;

        private AuthorizeUserTokenRequestBuilder() {
        }

        /**
         * Set grantType
         * @param grantType Type of grant; &#39;password&#39;, &#39;refresh_token&#39;, &#39;authorization_code&#39; supported (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set username
         * @param username Username to authenticate (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set password
         * @param password Password to authenticate (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder password(String password) {
            this.password = password;
            return this;
        }
        
        /**
         * Set scope
         * @param scope Requested access scope or scopes (space separated) (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set code
         * @param code Authorization code (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri Redirect URI (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder redirectUri(URI redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set clientId
         * @param clientId Client id (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set refreshToken
         * @param refreshToken Refresh token (optional)
         * @return AuthorizeUserTokenRequestBuilder
         */
        public AuthorizeUserTokenRequestBuilder refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        
        /**
         * Build call for authorizeUserToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest = buildBodyParams();
            return authorizeUserTokenCall(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest, _callback);
        }

        private OauthAuthorizeUserTokenRequest buildBodyParams() {
            OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest = new OauthAuthorizeUserTokenRequest();
            oauthAuthorizeUserTokenRequest.grantType(this.grantType);
            oauthAuthorizeUserTokenRequest.username(this.username);
            oauthAuthorizeUserTokenRequest.password(this.password);
            oauthAuthorizeUserTokenRequest.scope(this.scope);
            oauthAuthorizeUserTokenRequest.code(this.code);
            oauthAuthorizeUserTokenRequest.redirectUri(this.redirectUri);
            oauthAuthorizeUserTokenRequest.clientId(this.clientId);
            oauthAuthorizeUserTokenRequest.refreshToken(this.refreshToken);
            return oauthAuthorizeUserTokenRequest;
        }

        /**
         * Execute authorizeUserToken request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest = buildBodyParams();
            ApiResponse<AccessTokenResponse> localVarResp = authorizeUserTokenWithHttpInfo(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authorizeUserToken request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest = buildBodyParams();
            return authorizeUserTokenWithHttpInfo(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest);
        }

        /**
         * Execute authorizeUserToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            OauthAuthorizeUserTokenRequest oauthAuthorizeUserTokenRequest = buildBodyParams();
            return authorizeUserTokenAsync(grantType, username, password, scope, code, redirectUri, clientId, refreshToken, oauthAuthorizeUserTokenRequest, _callback);
        }
    }

    /**
     * Return an Oauth2 Authorization bearer token, given a username and password
     * 
     * @return AuthorizeUserTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeUserTokenRequestBuilder authorizeUserToken() throws IllegalArgumentException {
        return new AuthorizeUserTokenRequestBuilder();
    }
    private okhttp3.Call exchangeIdpAccessTokenResponseCall(String idp, String authCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/sso/{idp}/access-token"
            .replace("{" + "idp" + "}", localVarApiClient.escapeString(idp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authCode", authCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeIdpAccessTokenResponseValidateBeforeCall(String idp, String authCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idp' is set
        if (idp == null) {
            throw new ApiException("Missing the required parameter 'idp' when calling exchangeIdpAccessTokenResponse(Async)");
        }

        return exchangeIdpAccessTokenResponseCall(idp, authCode, _callback);

    }


    private ApiResponse<IdpAccessTokenResponse> exchangeIdpAccessTokenResponseWithHttpInfo(String idp, String authCode) throws ApiException {
        okhttp3.Call localVarCall = exchangeIdpAccessTokenResponseValidateBeforeCall(idp, authCode, null);
        Type localVarReturnType = new TypeToken<IdpAccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exchangeIdpAccessTokenResponseAsync(String idp, String authCode, final ApiCallback<IdpAccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeIdpAccessTokenResponseValidateBeforeCall(idp, authCode, _callback);
        Type localVarReturnType = new TypeToken<IdpAccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExchangeIdpAccessTokenResponseRequestBuilder {
        private final String idp;
        private String authCode;

        private ExchangeIdpAccessTokenResponseRequestBuilder(String idp) {
            this.idp = idp;
        }

        /**
         * Set authCode
         * @param authCode A one-time use Auth Code (optional)
         * @return ExchangeIdpAccessTokenResponseRequestBuilder
         */
        public ExchangeIdpAccessTokenResponseRequestBuilder authCode(String authCode) {
            this.authCode = authCode;
            return this;
        }
        
        /**
         * Build call for exchangeIdpAccessTokenResponse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exchangeIdpAccessTokenResponseCall(idp, authCode, _callback);
        }


        /**
         * Execute exchangeIdpAccessTokenResponse request
         * @return IdpAccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public IdpAccessTokenResponse execute() throws ApiException {
            ApiResponse<IdpAccessTokenResponse> localVarResp = exchangeIdpAccessTokenResponseWithHttpInfo(idp, authCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exchangeIdpAccessTokenResponse request with HTTP info returned
         * @return ApiResponse&lt;IdpAccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IdpAccessTokenResponse> executeWithHttpInfo() throws ApiException {
            return exchangeIdpAccessTokenResponseWithHttpInfo(idp, authCode);
        }

        /**
         * Execute exchangeIdpAccessTokenResponse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IdpAccessTokenResponse> _callback) throws ApiException {
            return exchangeIdpAccessTokenResponseAsync(idp, authCode, _callback);
        }
    }

    /**
     * Exchange a one-time use Auth Code for the IDP access token response
     * 
     * @param idp Identity provider of SSO login (e.g. adp) (required)
     * @return ExchangeIdpAccessTokenResponseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ExchangeIdpAccessTokenResponseRequestBuilder exchangeIdpAccessTokenResponse(String idp) throws IllegalArgumentException {
        if (idp == null) throw new IllegalArgumentException("\"idp\" is required but got null");
            

        return new ExchangeIdpAccessTokenResponseRequestBuilder(idp);
    }
    private okhttp3.Call generateBearerTokenFromSSOCall(String type, Boolean createOrg, String signupSource, String utmParams, String email, AccessTokenRequest accessTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accessTokenRequest;

        // create path and map variables
        String localVarPath = "/oauth/token/sso/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createOrg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createOrg", createOrg));
        }

        if (signupSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signupSource", signupSource));
        }

        if (utmParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("utmParams", utmParams));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateBearerTokenFromSSOValidateBeforeCall(String type, Boolean createOrg, String signupSource, String utmParams, String email, AccessTokenRequest accessTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling generateBearerTokenFromSSO(Async)");
        }

        return generateBearerTokenFromSSOCall(type, createOrg, signupSource, utmParams, email, accessTokenRequest, _callback);

    }


    private ApiResponse<AccessTokenResponse> generateBearerTokenFromSSOWithHttpInfo(String type, Boolean createOrg, String signupSource, String utmParams, String email, AccessTokenRequest accessTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = generateBearerTokenFromSSOValidateBeforeCall(type, createOrg, signupSource, utmParams, email, accessTokenRequest, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateBearerTokenFromSSOAsync(String type, Boolean createOrg, String signupSource, String utmParams, String email, AccessTokenRequest accessTokenRequest, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateBearerTokenFromSSOValidateBeforeCall(type, createOrg, signupSource, utmParams, email, accessTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateBearerTokenFromSSORequestBuilder {
        private final String idToken;
        private final String scope;
        private final String type;
        private String fromToken;
        private Boolean createOrg;
        private String signupSource;
        private String utmParams;
        private String email;

        private GenerateBearerTokenFromSSORequestBuilder(String idToken, String scope, String type) {
            this.idToken = idToken;
            this.scope = scope;
            this.type = type;
        }

        /**
         * Set fromToken
         * @param fromToken an existing token (optional)
         * @return GenerateBearerTokenFromSSORequestBuilder
         */
        public GenerateBearerTokenFromSSORequestBuilder fromToken(String fromToken) {
            this.fromToken = fromToken;
            return this;
        }
        
        /**
         * Set createOrg
         * @param createOrg automatically create org if possible to do so (optional)
         * @return GenerateBearerTokenFromSSORequestBuilder
         */
        public GenerateBearerTokenFromSSORequestBuilder createOrg(Boolean createOrg) {
            this.createOrg = createOrg;
            return this;
        }
        
        /**
         * Set signupSource
         * @param signupSource sign up source (self-serve, connect, or sequoia) (optional)
         * @return GenerateBearerTokenFromSSORequestBuilder
         */
        public GenerateBearerTokenFromSSORequestBuilder signupSource(String signupSource) {
            this.signupSource = signupSource;
            return this;
        }
        
        /**
         * Set utmParams
         * @param utmParams utm params (used in salesforce for lead tracking) (optional)
         * @return GenerateBearerTokenFromSSORequestBuilder
         */
        public GenerateBearerTokenFromSSORequestBuilder utmParams(String utmParams) {
            this.utmParams = utmParams;
            return this;
        }
        
        /**
         * Set email
         * @param email sign up email address (optional)
         * @return GenerateBearerTokenFromSSORequestBuilder
         */
        public GenerateBearerTokenFromSSORequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for generateBearerTokenFromSSO
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccessTokenRequest accessTokenRequest = buildBodyParams();
            return generateBearerTokenFromSSOCall(type, createOrg, signupSource, utmParams, email, accessTokenRequest, _callback);
        }

        private AccessTokenRequest buildBodyParams() {
            AccessTokenRequest accessTokenRequest = new AccessTokenRequest();
            accessTokenRequest.idToken(this.idToken);
            accessTokenRequest.scope(this.scope);
            accessTokenRequest.fromToken(this.fromToken);
            return accessTokenRequest;
        }

        /**
         * Execute generateBearerTokenFromSSO request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            AccessTokenRequest accessTokenRequest = buildBodyParams();
            ApiResponse<AccessTokenResponse> localVarResp = generateBearerTokenFromSSOWithHttpInfo(type, createOrg, signupSource, utmParams, email, accessTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateBearerTokenFromSSO request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            AccessTokenRequest accessTokenRequest = buildBodyParams();
            return generateBearerTokenFromSSOWithHttpInfo(type, createOrg, signupSource, utmParams, email, accessTokenRequest);
        }

        /**
         * Execute generateBearerTokenFromSSO request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            AccessTokenRequest accessTokenRequest = buildBodyParams();
            return generateBearerTokenFromSSOAsync(type, createOrg, signupSource, utmParams, email, accessTokenRequest, _callback);
        }
    }

    /**
     * Return an Oauth2 Authorization bearer token, given a SSO id token
     * 
     * @param type type of SSO request (google or microsoft) (required)
     * @return GenerateBearerTokenFromSSORequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public GenerateBearerTokenFromSSORequestBuilder generateBearerTokenFromSSO(String idToken, String scope, String type) throws IllegalArgumentException {
        if (idToken == null) throw new IllegalArgumentException("\"idToken\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GenerateBearerTokenFromSSORequestBuilder(idToken, scope, type);
    }
    private okhttp3.Call loginViaIdpCall(String idp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/sso/{idp}/login"
            .replace("{" + "idp" + "}", localVarApiClient.escapeString(idp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginViaIdpValidateBeforeCall(String idp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idp' is set
        if (idp == null) {
            throw new ApiException("Missing the required parameter 'idp' when calling loginViaIdp(Async)");
        }

        return loginViaIdpCall(idp, _callback);

    }


    private ApiResponse<Void> loginViaIdpWithHttpInfo(String idp) throws ApiException {
        okhttp3.Call localVarCall = loginViaIdpValidateBeforeCall(idp, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call loginViaIdpAsync(String idp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginViaIdpValidateBeforeCall(idp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class LoginViaIdpRequestBuilder {
        private final String idp;

        private LoginViaIdpRequestBuilder(String idp) {
            this.idp = idp;
        }

        /**
         * Build call for loginViaIdp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return loginViaIdpCall(idp, _callback);
        }


        /**
         * Execute loginViaIdp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            loginViaIdpWithHttpInfo(idp);
        }

        /**
         * Execute loginViaIdp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return loginViaIdpWithHttpInfo(idp);
        }

        /**
         * Execute loginViaIdp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return loginViaIdpAsync(idp, _callback);
        }
    }

    /**
     * Login via the auth endpoint
     * 
     * @param idp Identity provider of SSO login (e.g. adp) (required)
     * @return LoginViaIdpRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public LoginViaIdpRequestBuilder loginViaIdp(String idp) throws IllegalArgumentException {
        if (idp == null) throw new IllegalArgumentException("\"idp\" is required but got null");
            

        return new LoginViaIdpRequestBuilder(idp);
    }
    private okhttp3.Call processOauthRedirectRequestCall(String appName, String token, String state, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/app/{appName}"
            .replace("{" + "appName" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (token != null) {
            localVarCookieParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processOauthRedirectRequestValidateBeforeCall(String appName, String token, String state, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling processOauthRedirectRequest(Async)");
        }

        return processOauthRedirectRequestCall(appName, token, state, code, _callback);

    }


    private ApiResponse<Void> processOauthRedirectRequestWithHttpInfo(String appName, String token, String state, String code) throws ApiException {
        okhttp3.Call localVarCall = processOauthRedirectRequestValidateBeforeCall(appName, token, state, code, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call processOauthRedirectRequestAsync(String appName, String token, String state, String code, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = processOauthRedirectRequestValidateBeforeCall(appName, token, state, code, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ProcessOauthRedirectRequestRequestBuilder {
        private final String appName;
        private String token;
        private String state;
        private String code;

        private ProcessOauthRedirectRequestRequestBuilder(String appName) {
            this.appName = appName;
        }

        /**
         * Set token
         * @param token  (optional)
         * @return ProcessOauthRedirectRequestRequestBuilder
         */
        public ProcessOauthRedirectRequestRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set state
         * @param state State, containing orgId and appUserId (optional)
         * @return ProcessOauthRedirectRequestRequestBuilder
         */
        public ProcessOauthRedirectRequestRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set code
         * @param code Temporary authorization code (optional)
         * @return ProcessOauthRedirectRequestRequestBuilder
         */
        public ProcessOauthRedirectRequestRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Build call for processOauthRedirectRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processOauthRedirectRequestCall(appName, token, state, code, _callback);
        }


        /**
         * Execute processOauthRedirectRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            processOauthRedirectRequestWithHttpInfo(appName, token, state, code);
        }

        /**
         * Execute processOauthRedirectRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return processOauthRedirectRequestWithHttpInfo(appName, token, state, code);
        }

        /**
         * Execute processOauthRedirectRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return processOauthRedirectRequestAsync(appName, token, state, code, _callback);
        }
    }

    /**
     * Process an Oauth2 redirect request from an access request for an app installation, storing the accessToken and refreshToken as secrets for the app
     * 
     * @param appName App name (required)
     * @return ProcessOauthRedirectRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ProcessOauthRedirectRequestRequestBuilder processOauthRedirectRequest(String appName) throws IllegalArgumentException {
        if (appName == null) throw new IllegalArgumentException("\"appName\" is required but got null");
            

        return new ProcessOauthRedirectRequestRequestBuilder(appName);
    }
    private okhttp3.Call returnViewTokenCall(ViewAsRequest viewAsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = viewAsRequest;

        // create path and map variables
        String localVarPath = "/oauth/token/view";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call returnViewTokenValidateBeforeCall(ViewAsRequest viewAsRequest, final ApiCallback _callback) throws ApiException {
        return returnViewTokenCall(viewAsRequest, _callback);

    }


    private ApiResponse<AccessTokenResponse> returnViewTokenWithHttpInfo(ViewAsRequest viewAsRequest) throws ApiException {
        okhttp3.Call localVarCall = returnViewTokenValidateBeforeCall(viewAsRequest, null);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call returnViewTokenAsync(ViewAsRequest viewAsRequest, final ApiCallback<AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = returnViewTokenValidateBeforeCall(viewAsRequest, _callback);
        Type localVarReturnType = new TypeToken<AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReturnViewTokenRequestBuilder {
        private final String orgId;
        private final String scope;
        private String personId;
        private String userId;
        private String roleId;

        private ReturnViewTokenRequestBuilder(String orgId, String scope) {
            this.orgId = orgId;
            this.scope = scope;
        }

        /**
         * Set personId
         * @param personId person id (optional)
         * @return ReturnViewTokenRequestBuilder
         */
        public ReturnViewTokenRequestBuilder personId(String personId) {
            this.personId = personId;
            return this;
        }
        
        /**
         * Set userId
         * @param userId user id (optional)
         * @return ReturnViewTokenRequestBuilder
         */
        public ReturnViewTokenRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set roleId
         * @param roleId role id (optional)
         * @return ReturnViewTokenRequestBuilder
         */
        public ReturnViewTokenRequestBuilder roleId(String roleId) {
            this.roleId = roleId;
            return this;
        }
        
        /**
         * Build call for returnViewToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ViewAsRequest viewAsRequest = buildBodyParams();
            return returnViewTokenCall(viewAsRequest, _callback);
        }

        private ViewAsRequest buildBodyParams() {
            ViewAsRequest viewAsRequest = new ViewAsRequest();
            viewAsRequest.orgId(this.orgId);
            viewAsRequest.personId(this.personId);
            viewAsRequest.userId(this.userId);
            viewAsRequest.roleId(this.roleId);
            viewAsRequest.scope(this.scope);
            return viewAsRequest;
        }

        /**
         * Execute returnViewToken request
         * @return AccessTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public AccessTokenResponse execute() throws ApiException {
            ViewAsRequest viewAsRequest = buildBodyParams();
            ApiResponse<AccessTokenResponse> localVarResp = returnViewTokenWithHttpInfo(viewAsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute returnViewToken request with HTTP info returned
         * @return ApiResponse&lt;AccessTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccessTokenResponse> executeWithHttpInfo() throws ApiException {
            ViewAsRequest viewAsRequest = buildBodyParams();
            return returnViewTokenWithHttpInfo(viewAsRequest);
        }

        /**
         * Execute returnViewToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccessTokenResponse> _callback) throws ApiException {
            ViewAsRequest viewAsRequest = buildBodyParams();
            return returnViewTokenAsync(viewAsRequest, _callback);
        }
    }

    /**
     * Return a view-as token
     * 
     * @return ReturnViewTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid credentials </td><td>  -  </td></tr>
     </table>
     */
    public ReturnViewTokenRequestBuilder returnViewToken(String orgId, String scope) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        return new ReturnViewTokenRequestBuilder(orgId, scope);
    }
    private okhttp3.Call revokeBearerTokenCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeBearerTokenValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return revokeBearerTokenCall(_callback);

    }


    private ApiResponse<Void> revokeBearerTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = revokeBearerTokenValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeBearerTokenAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeBearerTokenValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeBearerTokenRequestBuilder {

        private RevokeBearerTokenRequestBuilder() {
        }

        /**
         * Build call for revokeBearerToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeBearerTokenCall(_callback);
        }


        /**
         * Execute revokeBearerToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> not authorized </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeBearerTokenWithHttpInfo();
        }

        /**
         * Execute revokeBearerToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> not authorized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeBearerTokenWithHttpInfo();
        }

        /**
         * Execute revokeBearerToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> not authorized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeBearerTokenAsync(_callback);
        }
    }

    /**
     * Delete the current Oauth2 bearer token (for signout)
     * 
     * @return RevokeBearerTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> not authorized </td><td>  -  </td></tr>
     </table>
     */
    public RevokeBearerTokenRequestBuilder revokeBearerToken() throws IllegalArgumentException {
        return new RevokeBearerTokenRequestBuilder();
    }
}
