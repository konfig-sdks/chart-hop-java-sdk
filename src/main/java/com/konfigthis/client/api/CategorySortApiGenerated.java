/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CategorySort;
import com.konfigthis.client.model.CreateCategorySort;
import com.konfigthis.client.model.UpdateCategorySort;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategorySortApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategorySortApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategorySortApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIfNotExistsCall(String orgId, CreateCategorySort createCategorySort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCategorySort;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIfNotExistsValidateBeforeCall(String orgId, CreateCategorySort createCategorySort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createIfNotExists(Async)");
        }

        return createIfNotExistsCall(orgId, createCategorySort, _callback);

    }


    private ApiResponse<CategorySort> createIfNotExistsWithHttpInfo(String orgId, CreateCategorySort createCategorySort) throws ApiException {
        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, createCategorySort, null);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIfNotExistsAsync(String orgId, CreateCategorySort createCategorySort, final ApiCallback<CategorySort> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIfNotExistsValidateBeforeCall(orgId, createCategorySort, _callback);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIfNotExistsRequestBuilder {
        private final String orgId;
        private final List<String> categoryIds;
        private final String orgId;

        private CreateIfNotExistsRequestBuilder(String orgId, List<String> categoryIds, String orgId) {
            this.orgId = orgId;
            this.categoryIds = categoryIds;
            this.orgId = orgId;
        }

        /**
         * Build call for createIfNotExists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateCategorySort createCategorySort = buildBodyParams();
            return createIfNotExistsCall(orgId, createCategorySort, _callback);
        }

        private CreateCategorySort buildBodyParams() {
            CreateCategorySort createCategorySort = new CreateCategorySort();
            createCategorySort.orgId(this.orgId);
            createCategorySort.categoryIds(this.categoryIds);
            return createCategorySort;
        }

        /**
         * Execute createIfNotExists request
         * @return CategorySort
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public CategorySort execute() throws ApiException {
            CreateCategorySort createCategorySort = buildBodyParams();
            ApiResponse<CategorySort> localVarResp = createIfNotExistsWithHttpInfo(orgId, createCategorySort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIfNotExists request with HTTP info returned
         * @return ApiResponse&lt;CategorySort&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategorySort> executeWithHttpInfo() throws ApiException {
            CreateCategorySort createCategorySort = buildBodyParams();
            return createIfNotExistsWithHttpInfo(orgId, createCategorySort);
        }

        /**
         * Execute createIfNotExists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategorySort> _callback) throws ApiException {
            CreateCategorySort createCategorySort = buildBodyParams();
            return createIfNotExistsAsync(orgId, createCategorySort, _callback);
        }
    }

    /**
     * Create a category sort order if it doesn&#39;t exist
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateIfNotExistsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public CreateIfNotExistsRequestBuilder createIfNotExists(String orgId, List<String> categoryIds, String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (categoryIds == null) throw new IllegalArgumentException("\"categoryIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateIfNotExistsRequestBuilder(orgId, categoryIds, orgId);
    }
    private okhttp3.Call createOrUpdateSortCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategorySort;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateSortValidateBeforeCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createOrUpdateSort(Async)");
        }

        return createOrUpdateSortCall(orgId, updateCategorySort, _callback);

    }


    private ApiResponse<CategorySort> createOrUpdateSortWithHttpInfo(String orgId, UpdateCategorySort updateCategorySort) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateSortValidateBeforeCall(orgId, updateCategorySort, null);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateSortAsync(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback<CategorySort> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateSortValidateBeforeCall(orgId, updateCategorySort, _callback);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateSortRequestBuilder {
        private final String orgId;
        private List<String> categoryIds;

        private CreateOrUpdateSortRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set categoryIds
         * @param categoryIds ordered list of category ids of an org (optional)
         * @return CreateOrUpdateSortRequestBuilder
         */
        public CreateOrUpdateSortRequestBuilder categoryIds(List<String> categoryIds) {
            this.categoryIds = categoryIds;
            return this;
        }
        
        /**
         * Build call for createOrUpdateSort
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortCall(orgId, updateCategorySort, _callback);
        }

        private UpdateCategorySort buildBodyParams() {
            UpdateCategorySort updateCategorySort = new UpdateCategorySort();
            updateCategorySort.categoryIds(this.categoryIds);
            return updateCategorySort;
        }

        /**
         * Execute createOrUpdateSort request
         * @return CategorySort
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public CategorySort execute() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            ApiResponse<CategorySort> localVarResp = createOrUpdateSortWithHttpInfo(orgId, updateCategorySort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdateSort request with HTTP info returned
         * @return ApiResponse&lt;CategorySort&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategorySort> executeWithHttpInfo() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortWithHttpInfo(orgId, updateCategorySort);
        }

        /**
         * Execute createOrUpdateSort request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategorySort> _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortAsync(orgId, updateCategorySort, _callback);
        }
    }

    /**
     * Create or update category sort order for a given org and return the sort data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateOrUpdateSortRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateSortRequestBuilder createOrUpdateSort(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateOrUpdateSortRequestBuilder(orgId);
    }
    private okhttp3.Call createOrUpdateSortOrderCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategorySort;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort/upsert"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateSortOrderValidateBeforeCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createOrUpdateSortOrder(Async)");
        }

        return createOrUpdateSortOrderCall(orgId, updateCategorySort, _callback);

    }


    private ApiResponse<CategorySort> createOrUpdateSortOrderWithHttpInfo(String orgId, UpdateCategorySort updateCategorySort) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateSortOrderValidateBeforeCall(orgId, updateCategorySort, null);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateSortOrderAsync(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback<CategorySort> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateSortOrderValidateBeforeCall(orgId, updateCategorySort, _callback);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateSortOrderRequestBuilder {
        private final String orgId;
        private List<String> categoryIds;

        private CreateOrUpdateSortOrderRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set categoryIds
         * @param categoryIds ordered list of category ids of an org (optional)
         * @return CreateOrUpdateSortOrderRequestBuilder
         */
        public CreateOrUpdateSortOrderRequestBuilder categoryIds(List<String> categoryIds) {
            this.categoryIds = categoryIds;
            return this;
        }
        
        /**
         * Build call for createOrUpdateSortOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortOrderCall(orgId, updateCategorySort, _callback);
        }

        private UpdateCategorySort buildBodyParams() {
            UpdateCategorySort updateCategorySort = new UpdateCategorySort();
            updateCategorySort.categoryIds(this.categoryIds);
            return updateCategorySort;
        }

        /**
         * Execute createOrUpdateSortOrder request
         * @return CategorySort
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public CategorySort execute() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            ApiResponse<CategorySort> localVarResp = createOrUpdateSortOrderWithHttpInfo(orgId, updateCategorySort);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdateSortOrder request with HTTP info returned
         * @return ApiResponse&lt;CategorySort&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategorySort> executeWithHttpInfo() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortOrderWithHttpInfo(orgId, updateCategorySort);
        }

        /**
         * Execute createOrUpdateSortOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategorySort> _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return createOrUpdateSortOrderAsync(orgId, updateCategorySort, _callback);
        }
    }

    /**
     * Create or update category sort order for a given org and return the sort data
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateOrUpdateSortOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> categoryIds cannot be empty </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateSortOrderRequestBuilder createOrUpdateSortOrder(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateOrUpdateSortOrderRequestBuilder(orgId);
    }
    private okhttp3.Call deleteSortOrderCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSortOrderValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling deleteSortOrder(Async)");
        }

        return deleteSortOrderCall(orgId, _callback);

    }


    private ApiResponse<Void> deleteSortOrderWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = deleteSortOrderValidateBeforeCall(orgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSortOrderAsync(String orgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSortOrderValidateBeforeCall(orgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSortOrderRequestBuilder {
        private final String orgId;

        private DeleteSortOrderRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for deleteSortOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSortOrderCall(orgId, _callback);
        }


        /**
         * Execute deleteSortOrder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSortOrderWithHttpInfo(orgId);
        }

        /**
         * Execute deleteSortOrder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSortOrderWithHttpInfo(orgId);
        }

        /**
         * Execute deleteSortOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSortOrderAsync(orgId, _callback);
        }
    }

    /**
     * Delete a category sort order
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return DeleteSortOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSortOrderRequestBuilder deleteSortOrder(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new DeleteSortOrderRequestBuilder(orgId);
    }
    private okhttp3.Call getCategorySortOrderCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategorySortOrderValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getCategorySortOrder(Async)");
        }

        return getCategorySortOrderCall(orgId, _callback);

    }


    private ApiResponse<CategorySort> getCategorySortOrderWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getCategorySortOrderValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategorySortOrderAsync(String orgId, final ApiCallback<CategorySort> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategorySortOrderValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<CategorySort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategorySortOrderRequestBuilder {
        private final String orgId;

        private GetCategorySortOrderRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getCategorySortOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategorySortOrderCall(orgId, _callback);
        }


        /**
         * Execute getCategorySortOrder request
         * @return CategorySort
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public CategorySort execute() throws ApiException {
            ApiResponse<CategorySort> localVarResp = getCategorySortOrderWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategorySortOrder request with HTTP info returned
         * @return ApiResponse&lt;CategorySort&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategorySort> executeWithHttpInfo() throws ApiException {
            return getCategorySortOrderWithHttpInfo(orgId);
        }

        /**
         * Execute getCategorySortOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategorySort> _callback) throws ApiException {
            return getCategorySortOrderAsync(orgId, _callback);
        }
    }

    /**
     * Return category sort order
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetCategorySortOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public GetCategorySortOrderRequestBuilder getCategorySortOrder(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetCategorySortOrderRequestBuilder(orgId);
    }
    private okhttp3.Call updateExistingCategorySortCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCategorySort;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/category-sort"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingCategorySortValidateBeforeCall(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingCategorySort(Async)");
        }

        return updateExistingCategorySortCall(orgId, updateCategorySort, _callback);

    }


    private ApiResponse<Void> updateExistingCategorySortWithHttpInfo(String orgId, UpdateCategorySort updateCategorySort) throws ApiException {
        okhttp3.Call localVarCall = updateExistingCategorySortValidateBeforeCall(orgId, updateCategorySort, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingCategorySortAsync(String orgId, UpdateCategorySort updateCategorySort, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingCategorySortValidateBeforeCall(orgId, updateCategorySort, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingCategorySortRequestBuilder {
        private final String orgId;
        private List<String> categoryIds;

        private UpdateExistingCategorySortRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set categoryIds
         * @param categoryIds ordered list of category ids of an org (optional)
         * @return UpdateExistingCategorySortRequestBuilder
         */
        public UpdateExistingCategorySortRequestBuilder categoryIds(List<String> categoryIds) {
            this.categoryIds = categoryIds;
            return this;
        }
        
        /**
         * Build call for updateExistingCategorySort
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return updateExistingCategorySortCall(orgId, updateCategorySort, _callback);
        }

        private UpdateCategorySort buildBodyParams() {
            UpdateCategorySort updateCategorySort = new UpdateCategorySort();
            updateCategorySort.categoryIds(this.categoryIds);
            return updateCategorySort;
        }

        /**
         * Execute updateExistingCategorySort request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            updateExistingCategorySortWithHttpInfo(orgId, updateCategorySort);
        }

        /**
         * Execute updateExistingCategorySort request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return updateExistingCategorySortWithHttpInfo(orgId, updateCategorySort);
        }

        /**
         * Execute updateExistingCategorySort request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateCategorySort updateCategorySort = buildBodyParams();
            return updateExistingCategorySortAsync(orgId, updateCategorySort, _callback);
        }
    }

    /**
     * Update an existing category sort order
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateExistingCategorySortRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Not Implemented </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingCategorySortRequestBuilder updateExistingCategorySort(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateExistingCategorySortRequestBuilder(orgId);
    }
}
