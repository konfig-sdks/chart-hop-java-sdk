/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateField;
import com.konfigthis.client.model.EnumValue;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.FieldRemoveCategoryRequest;
import com.konfigthis.client.model.FieldRemoveOverrideRequest;
import com.konfigthis.client.model.FieldStatusUpdateRequest;
import com.konfigthis.client.model.ResultsField;
import com.konfigthis.client.model.ResultsPartialField;
import com.konfigthis.client.model.TableRef;
import com.konfigthis.client.model.UpdateField;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FieldApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FieldApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FieldApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewFieldCall(String orgId, String tableType, CreateField createField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createField;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tableType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tableType", tableType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFieldValidateBeforeCall(String orgId, String tableType, CreateField createField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createNewField(Async)");
        }

        return createNewFieldCall(orgId, tableType, createField, _callback);

    }


    private ApiResponse<Field> createNewFieldWithHttpInfo(String orgId, String tableType, CreateField createField) throws ApiException {
        okhttp3.Call localVarCall = createNewFieldValidateBeforeCall(orgId, tableType, createField, null);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFieldAsync(String orgId, String tableType, CreateField createField, final ApiCallback<Field> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFieldValidateBeforeCall(orgId, tableType, createField, _callback);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFieldRequestBuilder {
        private final String name;
        private final String label;
        private final String type;
        private final String entityType;
        private final String sensitive;
        private final Boolean isUnique;
        private final Boolean isRequired;
        private final String orgId;
        private String description;
        private String orgId;
        private String question;
        private Boolean inUse;
        private String expr;
        private String exprType;
        private String plural;
        private List<EnumValue> values;
        private Object defaultValue;
        private Object options;
        private Boolean hideExpr;
        private Integer expireDays;
        private String status;
        private String tableId;
        private TableRef tableRef;
        private Boolean isEffectiveDated;
        private Set<String> dataFetchTypes;
        private Set<String> aliases;
        private String calc;
        private String categoryId;
        private String classification;
        private Integer places;
        private String tableType;

        private CreateNewFieldRequestBuilder(String name, String label, String type, String entityType, String sensitive, Boolean isUnique, Boolean isRequired, String orgId) {
            this.name = name;
            this.label = label;
            this.type = type;
            this.entityType = entityType;
            this.sensitive = sensitive;
            this.isUnique = isUnique;
            this.isRequired = isRequired;
            this.orgId = orgId;
        }

        /**
         * Set description
         * @param description description of field (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set orgId
         * @param orgId parent organization id (empty if global) (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set question
         * @param question human-readable question associated with field (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder question(String question) {
            this.question = question;
            return this;
        }
        
        /**
         * Set inUse
         * @param inUse disallow any updates to this Field (except for field.question string) (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder inUse(Boolean inUse) {
            this.inUse = inUse;
            return this;
        }
        
        /**
         * Set expr
         * @param expr calculated expression (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder expr(String expr) {
            this.expr = expr;
            return this;
        }
        
        /**
         * Set exprType
         * @param exprType the expected type of the evaluated expression (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder exprType(String exprType) {
            this.exprType = exprType;
            return this;
        }
        
        /**
         * Set plural
         * @param plural plural type of the field (either SINGLE, LIST, or SET) (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder plural(String plural) {
            this.plural = plural;
            return this;
        }
        
        /**
         * Set values
         * @param values possible values (enum type only) (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder values(List<EnumValue> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Set defaultValue
         * @param defaultValue default value if field is not set (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder defaultValue(Object defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        
        /**
         * Set options
         * @param options validation options (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set hideExpr
         * @param hideExpr hide expression-derived values from non-sensitive users (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder hideExpr(Boolean hideExpr) {
            this.hideExpr = hideExpr;
            return this;
        }
        
        /**
         * Set expireDays
         * @param expireDays number of days after which the data becomes invalid (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder expireDays(Integer expireDays) {
            this.expireDays = expireDays;
            return this;
        }
        
        /**
         * Set status
         * @param status the status of the field (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set tableId
         * @param tableId the table id this field applies to, only applicable when EntityType equals TABLE (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder tableId(String tableId) {
            this.tableId = tableId;
            return this;
        }
        
        /**
         * Set tableRef
         * @param tableRef  (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder tableRef(TableRef tableRef) {
            this.tableRef = tableRef;
            return this;
        }
        
        /**
         * Set isEffectiveDated
         * @param isEffectiveDated indicates that this field value is effective-dated (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder isEffectiveDated(Boolean isEffectiveDated) {
            this.isEffectiveDated = isEffectiveDated;
            return this;
        }
        
        /**
         * Set dataFetchTypes
         * @param dataFetchTypes set of data fetch types (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder dataFetchTypes(Set<String> dataFetchTypes) {
            this.dataFetchTypes = dataFetchTypes;
            return this;
        }
        
        /**
         * Set aliases
         * @param aliases set of aliases for this field (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder aliases(Set<String> aliases) {
            this.aliases = aliases;
            return this;
        }
        
        /**
         * Set calc
         * @param calc unique ID for the function that runs to calculate the value of this field. For native fields only (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder calc(String calc) {
            this.calc = calc;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId ID of the category to which this field belongs, if any (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set classification
         * @param classification indicates how this field is calculated (whether it&#39;s stored in the DB, evaluated through the expression service, or compound) (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder classification(String classification) {
            this.classification = classification;
            return this;
        }
        
        /**
         * Set places
         * @param places number of decimal places for money values (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder places(Integer places) {
            this.places = places;
            return this;
        }
        
        /**
         * Set tableType
         * @param tableType table type to add the field to (optional)
         * @return CreateNewFieldRequestBuilder
         */
        public CreateNewFieldRequestBuilder tableType(String tableType) {
            this.tableType = tableType;
            return this;
        }
        
        /**
         * Build call for createNewField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateField createField = buildBodyParams();
            return createNewFieldCall(orgId, tableType, createField, _callback);
        }

        private CreateField buildBodyParams() {
            CreateField createField = new CreateField();
            createField.description(this.description);
            createField.orgId(this.orgId);
            createField.name(this.name);
            createField.label(this.label);
            createField.question(this.question);
            createField.inUse(this.inUse);
            createField.expr(this.expr);
            if (this.exprType != null)
            createField.exprType(CreateField.ExprTypeEnum.fromValue(this.exprType));
            if (this.type != null)
            createField.type(CreateField.TypeEnum.fromValue(this.type));
            if (this.plural != null)
            createField.plural(CreateField.PluralEnum.fromValue(this.plural));
            createField.values(this.values);
            createField.defaultValue(this.defaultValue);
            createField.options(this.options);
            if (this.entityType != null)
            createField.entityType(CreateField.EntityTypeEnum.fromValue(this.entityType));
            if (this.sensitive != null)
            createField.sensitive(CreateField.SensitiveEnum.fromValue(this.sensitive));
            createField.hideExpr(this.hideExpr);
            createField.expireDays(this.expireDays);
            if (this.status != null)
            createField.status(CreateField.StatusEnum.fromValue(this.status));
            createField.tableId(this.tableId);
            createField.tableRef(this.tableRef);
            createField.isUnique(this.isUnique);
            createField.isRequired(this.isRequired);
            createField.isEffectiveDated(this.isEffectiveDated);
            if (this.dataFetchTypes != null)
            createField.dataFetchTypes(CreateField.DataFetchTypesEnum.fromValue(this.dataFetchTypes));
            createField.aliases(this.aliases);
            if (this.calc != null)
            createField.calc(CreateField.CalcEnum.fromValue(this.calc));
            createField.categoryId(this.categoryId);
            if (this.classification != null)
            createField.classification(CreateField.ClassificationEnum.fromValue(this.classification));
            createField.places(this.places);
            return createField;
        }

        /**
         * Execute createNewField request
         * @return Field
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public Field execute() throws ApiException {
            CreateField createField = buildBodyParams();
            ApiResponse<Field> localVarResp = createNewFieldWithHttpInfo(orgId, tableType, createField);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewField request with HTTP info returned
         * @return ApiResponse&lt;Field&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Field> executeWithHttpInfo() throws ApiException {
            CreateField createField = buildBodyParams();
            return createNewFieldWithHttpInfo(orgId, tableType, createField);
        }

        /**
         * Execute createNewField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Field> _callback) throws ApiException {
            CreateField createField = buildBodyParams();
            return createNewFieldAsync(orgId, tableType, createField, _callback);
        }
    }

    /**
     * Create a field
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return CreateNewFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFieldRequestBuilder createNewField(String name, String label, String type, String entityType, String sensitive, Boolean isUnique, Boolean isRequired, String orgId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (label == null) throw new IllegalArgumentException("\"label\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (entityType == null) throw new IllegalArgumentException("\"entityType\" is required but got null");
            

        if (sensitive == null) throw new IllegalArgumentException("\"sensitive\" is required but got null");
            

        if (isUnique == null) throw new IllegalArgumentException("\"isUnique\" is required but got null");
        if (isRequired == null) throw new IllegalArgumentException("\"isRequired\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new CreateNewFieldRequestBuilder(name, label, type, entityType, sensitive, isUnique, isRequired, orgId);
    }
    private okhttp3.Call getAllPaginatedCall(String orgId, String from, Integer limit, String ids, String table, String tableType, String form, String builtin, Boolean includeTtst, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (table != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("table", table));
        }

        if (tableType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tableType", tableType));
        }

        if (form != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("form", form));
        }

        if (builtin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("builtin", builtin));
        }

        if (includeTtst != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTtst", includeTtst));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaginatedValidateBeforeCall(String orgId, String from, Integer limit, String ids, String table, String tableType, String form, String builtin, Boolean includeTtst, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getAllPaginated(Async)");
        }

        return getAllPaginatedCall(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst, _callback);

    }


    private ApiResponse<ResultsField> getAllPaginatedWithHttpInfo(String orgId, String from, Integer limit, String ids, String table, String tableType, String form, String builtin, Boolean includeTtst) throws ApiException {
        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst, null);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPaginatedAsync(String orgId, String from, Integer limit, String ids, String table, String tableType, String form, String builtin, Boolean includeTtst, final ApiCallback<ResultsField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaginatedValidateBeforeCall(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst, _callback);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllPaginatedRequestBuilder {
        private final String orgId;
        private String from;
        private Integer limit;
        private String ids;
        private String table;
        private String tableType;
        private String form;
        private String builtin;
        private Boolean includeTtst;

        private GetAllPaginatedRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set from
         * @param from Field id to start paginating from (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder from(String from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set ids
         * @param ids Comma separated Field Ids to find (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder ids(String ids) {
            this.ids = ids;
            return this;
        }
        
        /**
         * Set table
         * @param table Retrieve fields from a particular table (id or name); if not passed, returns non-table fields (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder table(String table) {
            this.table = table;
            return this;
        }
        
        /**
         * Set tableType
         * @param tableType Retrieve fields from a particular table type; ignored if table not passed (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder tableType(String tableType) {
            this.tableType = tableType;
            return this;
        }
        
        /**
         * Set form
         * @param form Retrieve fields relating to a particular form (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder form(String form) {
            this.form = form;
            return this;
        }
        
        /**
         * Set builtin
         * @param builtin Include built-in (builtin), custom (custom) or all fields - defaults to custom (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder builtin(String builtin) {
            this.builtin = builtin;
            return this;
        }
        
        /**
         * Set includeTtst
         * @param includeTtst Include custom ttst fields - defaults to false (optional)
         * @return GetAllPaginatedRequestBuilder
         */
        public GetAllPaginatedRequestBuilder includeTtst(Boolean includeTtst) {
            this.includeTtst = includeTtst;
            return this;
        }
        
        /**
         * Build call for getAllPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPaginatedCall(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst, _callback);
        }


        /**
         * Execute getAllPaginated request
         * @return ResultsField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsField execute() throws ApiException {
            ApiResponse<ResultsField> localVarResp = getAllPaginatedWithHttpInfo(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllPaginated request with HTTP info returned
         * @return ApiResponse&lt;ResultsField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsField> executeWithHttpInfo() throws ApiException {
            return getAllPaginatedWithHttpInfo(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst);
        }

        /**
         * Execute getAllPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsField> _callback) throws ApiException {
            return getAllPaginatedAsync(orgId, from, limit, ids, table, tableType, form, builtin, includeTtst, _callback);
        }
    }

    /**
     * Return all fields in the organization paginated
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetAllPaginatedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetAllPaginatedRequestBuilder getAllPaginated(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetAllPaginatedRequestBuilder(orgId);
    }
    private okhttp3.Call getBuiltInFieldsCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/built-in"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBuiltInFieldsValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getBuiltInFields(Async)");
        }

        return getBuiltInFieldsCall(orgId, _callback);

    }


    private ApiResponse<ResultsPartialField> getBuiltInFieldsWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getBuiltInFieldsValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<ResultsPartialField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBuiltInFieldsAsync(String orgId, final ApiCallback<ResultsPartialField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBuiltInFieldsValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<ResultsPartialField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBuiltInFieldsRequestBuilder {
        private final String orgId;

        private GetBuiltInFieldsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getBuiltInFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBuiltInFieldsCall(orgId, _callback);
        }


        /**
         * Execute getBuiltInFields request
         * @return ResultsPartialField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsPartialField execute() throws ApiException {
            ApiResponse<ResultsPartialField> localVarResp = getBuiltInFieldsWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBuiltInFields request with HTTP info returned
         * @return ApiResponse&lt;ResultsPartialField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsPartialField> executeWithHttpInfo() throws ApiException {
            return getBuiltInFieldsWithHttpInfo(orgId);
        }

        /**
         * Execute getBuiltInFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsPartialField> _callback) throws ApiException {
            return getBuiltInFieldsAsync(orgId, _callback);
        }
    }

    /**
     * Get built-in fields
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetBuiltInFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetBuiltInFieldsRequestBuilder getBuiltInFields(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetBuiltInFieldsRequestBuilder(orgId);
    }
    private okhttp3.Call getByIdCall(String orgId, String fieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/{fieldId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orgId, String fieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getById(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling getById(Async)");
        }

        return getByIdCall(orgId, fieldId, _callback);

    }


    private ApiResponse<Field> getByIdWithHttpInfo(String orgId, String fieldId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, fieldId, null);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orgId, String fieldId, final ApiCallback<Field> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orgId, fieldId, _callback);
        Type localVarReturnType = new TypeToken<Field>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orgId;
        private final String fieldId;

        private GetByIdRequestBuilder(String orgId, String fieldId) {
            this.orgId = orgId;
            this.fieldId = fieldId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orgId, fieldId, _callback);
        }


        /**
         * Execute getById request
         * @return Field
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public Field execute() throws ApiException {
            ApiResponse<Field> localVarResp = getByIdWithHttpInfo(orgId, fieldId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Field&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Field> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orgId, fieldId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Field> _callback) throws ApiException {
            return getByIdAsync(orgId, fieldId, _callback);
        }
    }

    /**
     * Return a particular field by id
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fieldId Field id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orgId, String fieldId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new GetByIdRequestBuilder(orgId, fieldId);
    }
    private okhttp3.Call getFieldsInCategoryCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/category/{categoryId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "categoryId" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFieldsInCategoryValidateBeforeCall(String orgId, String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getFieldsInCategory(Async)");
        }

        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getFieldsInCategory(Async)");
        }

        return getFieldsInCategoryCall(orgId, categoryId, _callback);

    }


    private ApiResponse<ResultsField> getFieldsInCategoryWithHttpInfo(String orgId, String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getFieldsInCategoryValidateBeforeCall(orgId, categoryId, null);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFieldsInCategoryAsync(String orgId, String categoryId, final ApiCallback<ResultsField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFieldsInCategoryValidateBeforeCall(orgId, categoryId, _callback);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFieldsInCategoryRequestBuilder {
        private final String orgId;
        private final String categoryId;

        private GetFieldsInCategoryRequestBuilder(String orgId, String categoryId) {
            this.orgId = orgId;
            this.categoryId = categoryId;
        }

        /**
         * Build call for getFieldsInCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFieldsInCategoryCall(orgId, categoryId, _callback);
        }


        /**
         * Execute getFieldsInCategory request
         * @return ResultsField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsField execute() throws ApiException {
            ApiResponse<ResultsField> localVarResp = getFieldsInCategoryWithHttpInfo(orgId, categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFieldsInCategory request with HTTP info returned
         * @return ApiResponse&lt;ResultsField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsField> executeWithHttpInfo() throws ApiException {
            return getFieldsInCategoryWithHttpInfo(orgId, categoryId);
        }

        /**
         * Execute getFieldsInCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsField> _callback) throws ApiException {
            return getFieldsInCategoryAsync(orgId, categoryId, _callback);
        }
    }

    /**
     * Return fields in a particular category
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param categoryId Category id (required)
     * @return GetFieldsInCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetFieldsInCategoryRequestBuilder getFieldsInCategory(String orgId, String categoryId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetFieldsInCategoryRequestBuilder(orgId, categoryId);
    }
    private okhttp3.Call getUncategorizedFieldsCall(String orgId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/category"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUncategorizedFieldsValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getUncategorizedFields(Async)");
        }

        return getUncategorizedFieldsCall(orgId, _callback);

    }


    private ApiResponse<ResultsField> getUncategorizedFieldsWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = getUncategorizedFieldsValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUncategorizedFieldsAsync(String orgId, final ApiCallback<ResultsField> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUncategorizedFieldsValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<ResultsField>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUncategorizedFieldsRequestBuilder {
        private final String orgId;

        private GetUncategorizedFieldsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Build call for getUncategorizedFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUncategorizedFieldsCall(orgId, _callback);
        }


        /**
         * Execute getUncategorizedFields request
         * @return ResultsField
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsField execute() throws ApiException {
            ApiResponse<ResultsField> localVarResp = getUncategorizedFieldsWithHttpInfo(orgId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUncategorizedFields request with HTTP info returned
         * @return ApiResponse&lt;ResultsField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsField> executeWithHttpInfo() throws ApiException {
            return getUncategorizedFieldsWithHttpInfo(orgId);
        }

        /**
         * Execute getUncategorizedFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsField> _callback) throws ApiException {
            return getUncategorizedFieldsAsync(orgId, _callback);
        }
    }

    /**
     * Return uncategorized fields
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetUncategorizedFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetUncategorizedFieldsRequestBuilder getUncategorizedFields(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetUncategorizedFieldsRequestBuilder(orgId);
    }
    private okhttp3.Call removeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/delete"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String orgId, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling remove(Async)");
        }

        return removeCall(orgId, requestBody, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(String orgId, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(orgId, requestBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(String orgId, List<String> requestBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(orgId, requestBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String orgId;
        private List<String> requestBody;

        private RemoveRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set requestBody
         * @param requestBody Field ids (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder requestBody(List<String> requestBody) {
            this.requestBody = requestBody;
            return this;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return removeCall(orgId, requestBody, _callback);
        }

        private List<String> buildBodyParams() {
            return this.requestBody;
        }

        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            List<String> requestBody = buildBodyParams();
            removeWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            List<String> requestBody = buildBodyParams();
            return removeWithHttpInfo(orgId, requestBody);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            List<String> requestBody = buildBodyParams();
            return removeAsync(orgId, requestBody, _callback);
        }
    }

    /**
     * Delete fields
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RemoveRequestBuilder(orgId);
    }
    private okhttp3.Call removeByIdCall(String orgId, String fieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/{fieldId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeByIdValidateBeforeCall(String orgId, String fieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeById(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling removeById(Async)");
        }

        return removeByIdCall(orgId, fieldId, _callback);

    }


    private ApiResponse<Void> removeByIdWithHttpInfo(String orgId, String fieldId) throws ApiException {
        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, fieldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeByIdAsync(String orgId, String fieldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeByIdValidateBeforeCall(orgId, fieldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveByIdRequestBuilder {
        private final String orgId;
        private final String fieldId;

        private RemoveByIdRequestBuilder(String orgId, String fieldId) {
            this.orgId = orgId;
            this.fieldId = fieldId;
        }

        /**
         * Build call for removeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeByIdCall(orgId, fieldId, _callback);
        }


        /**
         * Execute removeById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeByIdWithHttpInfo(orgId, fieldId);
        }

        /**
         * Execute removeById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeByIdWithHttpInfo(orgId, fieldId);
        }

        /**
         * Execute removeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeByIdAsync(orgId, fieldId, _callback);
        }
    }

    /**
     * Delete a field
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fieldId Field id (required)
     * @return RemoveByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveByIdRequestBuilder removeById(String orgId, String fieldId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new RemoveByIdRequestBuilder(orgId, fieldId);
    }
    private okhttp3.Call removeFieldOverridesCall(String orgId, FieldRemoveOverrideRequest fieldRemoveOverrideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldRemoveOverrideRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/remove-overrides"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFieldOverridesValidateBeforeCall(String orgId, FieldRemoveOverrideRequest fieldRemoveOverrideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeFieldOverrides(Async)");
        }

        return removeFieldOverridesCall(orgId, fieldRemoveOverrideRequest, _callback);

    }


    private ApiResponse<Void> removeFieldOverridesWithHttpInfo(String orgId, FieldRemoveOverrideRequest fieldRemoveOverrideRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFieldOverridesValidateBeforeCall(orgId, fieldRemoveOverrideRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFieldOverridesAsync(String orgId, FieldRemoveOverrideRequest fieldRemoveOverrideRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFieldOverridesValidateBeforeCall(orgId, fieldRemoveOverrideRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFieldOverridesRequestBuilder {
        private final Set<String> fieldIds;
        private final String orgId;

        private RemoveFieldOverridesRequestBuilder(Set<String> fieldIds, String orgId) {
            this.fieldIds = fieldIds;
            this.orgId = orgId;
        }

        /**
         * Build call for removeFieldOverrides
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldRemoveOverrideRequest fieldRemoveOverrideRequest = buildBodyParams();
            return removeFieldOverridesCall(orgId, fieldRemoveOverrideRequest, _callback);
        }

        private FieldRemoveOverrideRequest buildBodyParams() {
            FieldRemoveOverrideRequest fieldRemoveOverrideRequest = new FieldRemoveOverrideRequest();
            fieldRemoveOverrideRequest.fieldIds(this.fieldIds);
            return fieldRemoveOverrideRequest;
        }

        /**
         * Execute removeFieldOverrides request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FieldRemoveOverrideRequest fieldRemoveOverrideRequest = buildBodyParams();
            removeFieldOverridesWithHttpInfo(orgId, fieldRemoveOverrideRequest);
        }

        /**
         * Execute removeFieldOverrides request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FieldRemoveOverrideRequest fieldRemoveOverrideRequest = buildBodyParams();
            return removeFieldOverridesWithHttpInfo(orgId, fieldRemoveOverrideRequest);
        }

        /**
         * Execute removeFieldOverrides request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FieldRemoveOverrideRequest fieldRemoveOverrideRequest = buildBodyParams();
            return removeFieldOverridesAsync(orgId, fieldRemoveOverrideRequest, _callback);
        }
    }

    /**
     * Remove overrides from fields
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return RemoveFieldOverridesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFieldOverridesRequestBuilder removeFieldOverrides(Set<String> fieldIds, String orgId) throws IllegalArgumentException {
        if (fieldIds == null) throw new IllegalArgumentException("\"fieldIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RemoveFieldOverridesRequestBuilder(fieldIds, orgId);
    }
    private okhttp3.Call removeFromCategoriesCall(String orgId, FieldRemoveCategoryRequest fieldRemoveCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldRemoveCategoryRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/remove-category"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromCategoriesValidateBeforeCall(String orgId, FieldRemoveCategoryRequest fieldRemoveCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling removeFromCategories(Async)");
        }

        return removeFromCategoriesCall(orgId, fieldRemoveCategoryRequest, _callback);

    }


    private ApiResponse<Void> removeFromCategoriesWithHttpInfo(String orgId, FieldRemoveCategoryRequest fieldRemoveCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFromCategoriesValidateBeforeCall(orgId, fieldRemoveCategoryRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFromCategoriesAsync(String orgId, FieldRemoveCategoryRequest fieldRemoveCategoryRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromCategoriesValidateBeforeCall(orgId, fieldRemoveCategoryRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFromCategoriesRequestBuilder {
        private final Set<String> fieldIds;
        private final String orgId;

        private RemoveFromCategoriesRequestBuilder(Set<String> fieldIds, String orgId) {
            this.fieldIds = fieldIds;
            this.orgId = orgId;
        }

        /**
         * Build call for removeFromCategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldRemoveCategoryRequest fieldRemoveCategoryRequest = buildBodyParams();
            return removeFromCategoriesCall(orgId, fieldRemoveCategoryRequest, _callback);
        }

        private FieldRemoveCategoryRequest buildBodyParams() {
            FieldRemoveCategoryRequest fieldRemoveCategoryRequest = new FieldRemoveCategoryRequest();
            fieldRemoveCategoryRequest.fieldIds(this.fieldIds);
            return fieldRemoveCategoryRequest;
        }

        /**
         * Execute removeFromCategories request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FieldRemoveCategoryRequest fieldRemoveCategoryRequest = buildBodyParams();
            removeFromCategoriesWithHttpInfo(orgId, fieldRemoveCategoryRequest);
        }

        /**
         * Execute removeFromCategories request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FieldRemoveCategoryRequest fieldRemoveCategoryRequest = buildBodyParams();
            return removeFromCategoriesWithHttpInfo(orgId, fieldRemoveCategoryRequest);
        }

        /**
         * Execute removeFromCategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FieldRemoveCategoryRequest fieldRemoveCategoryRequest = buildBodyParams();
            return removeFromCategoriesAsync(orgId, fieldRemoveCategoryRequest, _callback);
        }
    }

    /**
     * Remove field from all associated categories
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return RemoveFromCategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromCategoriesRequestBuilder removeFromCategories(Set<String> fieldIds, String orgId) throws IllegalArgumentException {
        if (fieldIds == null) throw new IllegalArgumentException("\"fieldIds\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new RemoveFromCategoriesRequestBuilder(fieldIds, orgId);
    }
    private okhttp3.Call updateExistingFieldCall(String orgId, String fieldId, UpdateField updateField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateField;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/{fieldId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingFieldValidateBeforeCall(String orgId, String fieldId, UpdateField updateField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateExistingField(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateExistingField(Async)");
        }

        return updateExistingFieldCall(orgId, fieldId, updateField, _callback);

    }


    private ApiResponse<Void> updateExistingFieldWithHttpInfo(String orgId, String fieldId, UpdateField updateField) throws ApiException {
        okhttp3.Call localVarCall = updateExistingFieldValidateBeforeCall(orgId, fieldId, updateField, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateExistingFieldAsync(String orgId, String fieldId, UpdateField updateField, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingFieldValidateBeforeCall(orgId, fieldId, updateField, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateExistingFieldRequestBuilder {
        private final String orgId;
        private final String fieldId;
        private String description;
        private String name;
        private String label;
        private String question;
        private Boolean inUse;
        private String expr;
        private String exprType;
        private String type;
        private String plural;
        private List<EnumValue> values;
        private Object defaultValue;
        private Object options;
        private String sensitive;
        private Boolean hideExpr;
        private Integer expireDays;
        private String status;
        private TableRef tableRef;
        private Boolean isUnique;
        private Boolean isRequired;
        private Boolean isEffectiveDated;
        private Set<String> dataFetchTypes;
        private Set<String> aliases;
        private String calc;
        private String categoryId;
        private String classification;
        private Integer places;

        private UpdateExistingFieldRequestBuilder(String orgId, String fieldId) {
            this.orgId = orgId;
            this.fieldId = fieldId;
        }

        /**
         * Set description
         * @param description description of field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name short field name (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable full name of field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set question
         * @param question human-readable question associated with field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder question(String question) {
            this.question = question;
            return this;
        }
        
        /**
         * Set inUse
         * @param inUse disallow any updates to this Field (except for field.question string) (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder inUse(Boolean inUse) {
            this.inUse = inUse;
            return this;
        }
        
        /**
         * Set expr
         * @param expr calculated expression (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder expr(String expr) {
            this.expr = expr;
            return this;
        }
        
        /**
         * Set exprType
         * @param exprType the expected type of the evaluated expression (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder exprType(String exprType) {
            this.exprType = exprType;
            return this;
        }
        
        /**
         * Set type
         * @param type type of field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set plural
         * @param plural plural type of the field (either SINGLE, LIST, or SET) (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder plural(String plural) {
            this.plural = plural;
            return this;
        }
        
        /**
         * Set values
         * @param values possible values (enum type only) (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder values(List<EnumValue> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Set defaultValue
         * @param defaultValue default value if field is not set (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder defaultValue(Object defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        
        /**
         * Set options
         * @param options validation options (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of data (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set hideExpr
         * @param hideExpr hide expression-derived values from non-sensitive users (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder hideExpr(Boolean hideExpr) {
            this.hideExpr = hideExpr;
            return this;
        }
        
        /**
         * Set expireDays
         * @param expireDays number of days after which the data becomes invalid (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder expireDays(Integer expireDays) {
            this.expireDays = expireDays;
            return this;
        }
        
        /**
         * Set status
         * @param status the status of the field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set tableRef
         * @param tableRef  (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder tableRef(TableRef tableRef) {
            this.tableRef = tableRef;
            return this;
        }
        
        /**
         * Set isUnique
         * @param isUnique indicates that this field value is unique in conjunction with entityType PERSON or JOB (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder isUnique(Boolean isUnique) {
            this.isUnique = isUnique;
            return this;
        }
        
        /**
         * Set isRequired
         * @param isRequired indicates that this field value is required (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder isRequired(Boolean isRequired) {
            this.isRequired = isRequired;
            return this;
        }
        
        /**
         * Set isEffectiveDated
         * @param isEffectiveDated indicates that this field value is effective-dated (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder isEffectiveDated(Boolean isEffectiveDated) {
            this.isEffectiveDated = isEffectiveDated;
            return this;
        }
        
        /**
         * Set dataFetchTypes
         * @param dataFetchTypes set of data fetch types (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder dataFetchTypes(Set<String> dataFetchTypes) {
            this.dataFetchTypes = dataFetchTypes;
            return this;
        }
        
        /**
         * Set aliases
         * @param aliases set of aliases for this field (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder aliases(Set<String> aliases) {
            this.aliases = aliases;
            return this;
        }
        
        /**
         * Set calc
         * @param calc unique ID for the function that runs to calculate the value of this field. For native fields only (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder calc(String calc) {
            this.calc = calc;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId ID of the category to which this field belongs, if any (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set classification
         * @param classification indicates how this field is calculated (whether it&#39;s stored in the DB, evaluated through the expression service, or compound) (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder classification(String classification) {
            this.classification = classification;
            return this;
        }
        
        /**
         * Set places
         * @param places number of decimal places for money values (optional)
         * @return UpdateExistingFieldRequestBuilder
         */
        public UpdateExistingFieldRequestBuilder places(Integer places) {
            this.places = places;
            return this;
        }
        
        /**
         * Build call for updateExistingField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateExistingFieldCall(orgId, fieldId, updateField, _callback);
        }

        private UpdateField buildBodyParams() {
            UpdateField updateField = new UpdateField();
            updateField.description(this.description);
            updateField.name(this.name);
            updateField.label(this.label);
            updateField.question(this.question);
            updateField.inUse(this.inUse);
            updateField.expr(this.expr);
            if (this.exprType != null)
            updateField.exprType(UpdateField.ExprTypeEnum.fromValue(this.exprType));
            if (this.type != null)
            updateField.type(UpdateField.TypeEnum.fromValue(this.type));
            if (this.plural != null)
            updateField.plural(UpdateField.PluralEnum.fromValue(this.plural));
            updateField.values(this.values);
            updateField.defaultValue(this.defaultValue);
            updateField.options(this.options);
            if (this.sensitive != null)
            updateField.sensitive(UpdateField.SensitiveEnum.fromValue(this.sensitive));
            updateField.hideExpr(this.hideExpr);
            updateField.expireDays(this.expireDays);
            if (this.status != null)
            updateField.status(UpdateField.StatusEnum.fromValue(this.status));
            updateField.tableRef(this.tableRef);
            updateField.isUnique(this.isUnique);
            updateField.isRequired(this.isRequired);
            updateField.isEffectiveDated(this.isEffectiveDated);
            if (this.dataFetchTypes != null)
            updateField.dataFetchTypes(UpdateField.DataFetchTypesEnum.fromValue(this.dataFetchTypes));
            updateField.aliases(this.aliases);
            if (this.calc != null)
            updateField.calc(UpdateField.CalcEnum.fromValue(this.calc));
            updateField.categoryId(this.categoryId);
            if (this.classification != null)
            updateField.classification(UpdateField.ClassificationEnum.fromValue(this.classification));
            updateField.places(this.places);
            return updateField;
        }

        /**
         * Execute updateExistingField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateField updateField = buildBodyParams();
            updateExistingFieldWithHttpInfo(orgId, fieldId, updateField);
        }

        /**
         * Execute updateExistingField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateExistingFieldWithHttpInfo(orgId, fieldId, updateField);
        }

        /**
         * Execute updateExistingField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateExistingFieldAsync(orgId, fieldId, updateField, _callback);
        }
    }

    /**
     * Update an existing field
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fieldId Field id (required)
     * @return UpdateExistingFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingFieldRequestBuilder updateExistingField(String orgId, String fieldId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new UpdateExistingFieldRequestBuilder(orgId, fieldId);
    }
    private okhttp3.Call updateFieldDryRunCall(String orgId, String fieldId, UpdateField updateField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateField;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/{fieldId}/dryrun"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldDryRunValidateBeforeCall(String orgId, String fieldId, UpdateField updateField, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateFieldDryRun(Async)");
        }

        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateFieldDryRun(Async)");
        }

        return updateFieldDryRunCall(orgId, fieldId, updateField, _callback);

    }


    private ApiResponse<Void> updateFieldDryRunWithHttpInfo(String orgId, String fieldId, UpdateField updateField) throws ApiException {
        okhttp3.Call localVarCall = updateFieldDryRunValidateBeforeCall(orgId, fieldId, updateField, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateFieldDryRunAsync(String orgId, String fieldId, UpdateField updateField, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldDryRunValidateBeforeCall(orgId, fieldId, updateField, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateFieldDryRunRequestBuilder {
        private final String orgId;
        private final String fieldId;
        private String description;
        private String name;
        private String label;
        private String question;
        private Boolean inUse;
        private String expr;
        private String exprType;
        private String type;
        private String plural;
        private List<EnumValue> values;
        private Object defaultValue;
        private Object options;
        private String sensitive;
        private Boolean hideExpr;
        private Integer expireDays;
        private String status;
        private TableRef tableRef;
        private Boolean isUnique;
        private Boolean isRequired;
        private Boolean isEffectiveDated;
        private Set<String> dataFetchTypes;
        private Set<String> aliases;
        private String calc;
        private String categoryId;
        private String classification;
        private Integer places;

        private UpdateFieldDryRunRequestBuilder(String orgId, String fieldId) {
            this.orgId = orgId;
            this.fieldId = fieldId;
        }

        /**
         * Set description
         * @param description description of field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name short field name (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set label
         * @param label human-readable full name of field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder label(String label) {
            this.label = label;
            return this;
        }
        
        /**
         * Set question
         * @param question human-readable question associated with field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder question(String question) {
            this.question = question;
            return this;
        }
        
        /**
         * Set inUse
         * @param inUse disallow any updates to this Field (except for field.question string) (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder inUse(Boolean inUse) {
            this.inUse = inUse;
            return this;
        }
        
        /**
         * Set expr
         * @param expr calculated expression (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder expr(String expr) {
            this.expr = expr;
            return this;
        }
        
        /**
         * Set exprType
         * @param exprType the expected type of the evaluated expression (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder exprType(String exprType) {
            this.exprType = exprType;
            return this;
        }
        
        /**
         * Set type
         * @param type type of field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set plural
         * @param plural plural type of the field (either SINGLE, LIST, or SET) (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder plural(String plural) {
            this.plural = plural;
            return this;
        }
        
        /**
         * Set values
         * @param values possible values (enum type only) (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder values(List<EnumValue> values) {
            this.values = values;
            return this;
        }
        
        /**
         * Set defaultValue
         * @param defaultValue default value if field is not set (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder defaultValue(Object defaultValue) {
            this.defaultValue = defaultValue;
            return this;
        }
        
        /**
         * Set options
         * @param options validation options (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder options(Object options) {
            this.options = options;
            return this;
        }
        
        /**
         * Set sensitive
         * @param sensitive sensitivity level of data (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder sensitive(String sensitive) {
            this.sensitive = sensitive;
            return this;
        }
        
        /**
         * Set hideExpr
         * @param hideExpr hide expression-derived values from non-sensitive users (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder hideExpr(Boolean hideExpr) {
            this.hideExpr = hideExpr;
            return this;
        }
        
        /**
         * Set expireDays
         * @param expireDays number of days after which the data becomes invalid (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder expireDays(Integer expireDays) {
            this.expireDays = expireDays;
            return this;
        }
        
        /**
         * Set status
         * @param status the status of the field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set tableRef
         * @param tableRef  (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder tableRef(TableRef tableRef) {
            this.tableRef = tableRef;
            return this;
        }
        
        /**
         * Set isUnique
         * @param isUnique indicates that this field value is unique in conjunction with entityType PERSON or JOB (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder isUnique(Boolean isUnique) {
            this.isUnique = isUnique;
            return this;
        }
        
        /**
         * Set isRequired
         * @param isRequired indicates that this field value is required (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder isRequired(Boolean isRequired) {
            this.isRequired = isRequired;
            return this;
        }
        
        /**
         * Set isEffectiveDated
         * @param isEffectiveDated indicates that this field value is effective-dated (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder isEffectiveDated(Boolean isEffectiveDated) {
            this.isEffectiveDated = isEffectiveDated;
            return this;
        }
        
        /**
         * Set dataFetchTypes
         * @param dataFetchTypes set of data fetch types (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder dataFetchTypes(Set<String> dataFetchTypes) {
            this.dataFetchTypes = dataFetchTypes;
            return this;
        }
        
        /**
         * Set aliases
         * @param aliases set of aliases for this field (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder aliases(Set<String> aliases) {
            this.aliases = aliases;
            return this;
        }
        
        /**
         * Set calc
         * @param calc unique ID for the function that runs to calculate the value of this field. For native fields only (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder calc(String calc) {
            this.calc = calc;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId ID of the category to which this field belongs, if any (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set classification
         * @param classification indicates how this field is calculated (whether it&#39;s stored in the DB, evaluated through the expression service, or compound) (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder classification(String classification) {
            this.classification = classification;
            return this;
        }
        
        /**
         * Set places
         * @param places number of decimal places for money values (optional)
         * @return UpdateFieldDryRunRequestBuilder
         */
        public UpdateFieldDryRunRequestBuilder places(Integer places) {
            this.places = places;
            return this;
        }
        
        /**
         * Build call for updateFieldDryRun
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateFieldDryRunCall(orgId, fieldId, updateField, _callback);
        }

        private UpdateField buildBodyParams() {
            UpdateField updateField = new UpdateField();
            updateField.description(this.description);
            updateField.name(this.name);
            updateField.label(this.label);
            updateField.question(this.question);
            updateField.inUse(this.inUse);
            updateField.expr(this.expr);
            if (this.exprType != null)
            updateField.exprType(UpdateField.ExprTypeEnum.fromValue(this.exprType));
            if (this.type != null)
            updateField.type(UpdateField.TypeEnum.fromValue(this.type));
            if (this.plural != null)
            updateField.plural(UpdateField.PluralEnum.fromValue(this.plural));
            updateField.values(this.values);
            updateField.defaultValue(this.defaultValue);
            updateField.options(this.options);
            if (this.sensitive != null)
            updateField.sensitive(UpdateField.SensitiveEnum.fromValue(this.sensitive));
            updateField.hideExpr(this.hideExpr);
            updateField.expireDays(this.expireDays);
            if (this.status != null)
            updateField.status(UpdateField.StatusEnum.fromValue(this.status));
            updateField.tableRef(this.tableRef);
            updateField.isUnique(this.isUnique);
            updateField.isRequired(this.isRequired);
            updateField.isEffectiveDated(this.isEffectiveDated);
            if (this.dataFetchTypes != null)
            updateField.dataFetchTypes(UpdateField.DataFetchTypesEnum.fromValue(this.dataFetchTypes));
            updateField.aliases(this.aliases);
            if (this.calc != null)
            updateField.calc(UpdateField.CalcEnum.fromValue(this.calc));
            updateField.categoryId(this.categoryId);
            if (this.classification != null)
            updateField.classification(UpdateField.ClassificationEnum.fromValue(this.classification));
            updateField.places(this.places);
            return updateField;
        }

        /**
         * Execute updateFieldDryRun request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateField updateField = buildBodyParams();
            updateFieldDryRunWithHttpInfo(orgId, fieldId, updateField);
        }

        /**
         * Execute updateFieldDryRun request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateFieldDryRunWithHttpInfo(orgId, fieldId, updateField);
        }

        /**
         * Execute updateFieldDryRun request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateField updateField = buildBodyParams();
            return updateFieldDryRunAsync(orgId, fieldId, updateField, _callback);
        }
    }

    /**
     * Perform a dry-run of an update to an existing field that will require migrations
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param fieldId Field id (required)
     * @return UpdateFieldDryRunRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldDryRunRequestBuilder updateFieldDryRun(String orgId, String fieldId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new UpdateFieldDryRunRequestBuilder(orgId, fieldId);
    }
    private okhttp3.Call updateStatusForExistingFieldsCall(String orgId, FieldStatusUpdateRequest fieldStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fieldStatusUpdateRequest;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/field/status"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusForExistingFieldsValidateBeforeCall(String orgId, FieldStatusUpdateRequest fieldStatusUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling updateStatusForExistingFields(Async)");
        }

        return updateStatusForExistingFieldsCall(orgId, fieldStatusUpdateRequest, _callback);

    }


    private ApiResponse<Void> updateStatusForExistingFieldsWithHttpInfo(String orgId, FieldStatusUpdateRequest fieldStatusUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStatusForExistingFieldsValidateBeforeCall(orgId, fieldStatusUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateStatusForExistingFieldsAsync(String orgId, FieldStatusUpdateRequest fieldStatusUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusForExistingFieldsValidateBeforeCall(orgId, fieldStatusUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateStatusForExistingFieldsRequestBuilder {
        private final String updateStatus;
        private final List<String> fieldIds;
        private final List<String> reservedFieldNames;
        private final String orgId;

        private UpdateStatusForExistingFieldsRequestBuilder(String updateStatus, List<String> fieldIds, List<String> reservedFieldNames, String orgId) {
            this.updateStatus = updateStatus;
            this.fieldIds = fieldIds;
            this.reservedFieldNames = reservedFieldNames;
            this.orgId = orgId;
        }

        /**
         * Build call for updateStatusForExistingFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FieldStatusUpdateRequest fieldStatusUpdateRequest = buildBodyParams();
            return updateStatusForExistingFieldsCall(orgId, fieldStatusUpdateRequest, _callback);
        }

        private FieldStatusUpdateRequest buildBodyParams() {
            FieldStatusUpdateRequest fieldStatusUpdateRequest = new FieldStatusUpdateRequest();
            if (this.updateStatus != null)
            fieldStatusUpdateRequest.updateStatus(FieldStatusUpdateRequest.UpdateStatusEnum.fromValue(this.updateStatus));
            fieldStatusUpdateRequest.fieldIds(this.fieldIds);
            fieldStatusUpdateRequest.reservedFieldNames(this.reservedFieldNames);
            return fieldStatusUpdateRequest;
        }

        /**
         * Execute updateStatusForExistingFields request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            FieldStatusUpdateRequest fieldStatusUpdateRequest = buildBodyParams();
            updateStatusForExistingFieldsWithHttpInfo(orgId, fieldStatusUpdateRequest);
        }

        /**
         * Execute updateStatusForExistingFields request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            FieldStatusUpdateRequest fieldStatusUpdateRequest = buildBodyParams();
            return updateStatusForExistingFieldsWithHttpInfo(orgId, fieldStatusUpdateRequest);
        }

        /**
         * Execute updateStatusForExistingFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            FieldStatusUpdateRequest fieldStatusUpdateRequest = buildBodyParams();
            return updateStatusForExistingFieldsAsync(orgId, fieldStatusUpdateRequest, _callback);
        }
    }

    /**
     * Update status for existing fields
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return UpdateStatusForExistingFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusForExistingFieldsRequestBuilder updateStatusForExistingFields(String updateStatus, List<String> fieldIds, List<String> reservedFieldNames, String orgId) throws IllegalArgumentException {
        if (updateStatus == null) throw new IllegalArgumentException("\"updateStatus\" is required but got null");
            

        if (fieldIds == null) throw new IllegalArgumentException("\"fieldIds\" is required but got null");
        if (reservedFieldNames == null) throw new IllegalArgumentException("\"reservedFieldNames\" is required but got null");
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new UpdateStatusForExistingFieldsRequestBuilder(updateStatus, fieldIds, reservedFieldNames, orgId);
    }
}
