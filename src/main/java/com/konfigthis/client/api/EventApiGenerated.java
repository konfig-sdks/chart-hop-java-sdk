/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.ResultsEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInboundNotificationCall(String orgId, String appId, String inboundId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/event/notify/inbound/{appId}/{inboundId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "inboundId" + "}", localVarApiClient.escapeString(inboundId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboundNotificationValidateBeforeCall(String orgId, String appId, String inboundId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createInboundNotification(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createInboundNotification(Async)");
        }

        // verify the required parameter 'inboundId' is set
        if (inboundId == null) {
            throw new ApiException("Missing the required parameter 'inboundId' when calling createInboundNotification(Async)");
        }

        return createInboundNotificationCall(orgId, appId, inboundId, processId, requestBody, _callback);

    }


    private ApiResponse<String> createInboundNotificationWithHttpInfo(String orgId, String appId, String inboundId, String processId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createInboundNotificationValidateBeforeCall(orgId, appId, inboundId, processId, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInboundNotificationAsync(String orgId, String appId, String inboundId, String processId, Map<String, Object> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboundNotificationValidateBeforeCall(orgId, appId, inboundId, processId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInboundNotificationRequestBuilder {
        private final String orgId;
        private final String appId;
        private final String inboundId;
        private String processId;

        private CreateInboundNotificationRequestBuilder(String orgId, String appId, String inboundId) {
            this.orgId = orgId;
            this.appId = appId;
            this.inboundId = inboundId;
        }

        /**
         * Set processId
         * @param processId Process id (optional)
         * @return CreateInboundNotificationRequestBuilder
         */
        public CreateInboundNotificationRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for createInboundNotification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createInboundNotificationCall(orgId, appId, inboundId, processId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute createInboundNotification request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<String> localVarResp = createInboundNotificationWithHttpInfo(orgId, appId, inboundId, processId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInboundNotification request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createInboundNotificationWithHttpInfo(orgId, appId, inboundId, processId, requestBody);
        }

        /**
         * Execute createInboundNotification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createInboundNotificationAsync(orgId, appId, inboundId, processId, requestBody, _callback);
        }
    }

    /**
     * Create an inbound event
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appId App id (required)
     * @param inboundId Inbound id (required)
     * @return CreateInboundNotificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateInboundNotificationRequestBuilder createInboundNotification(String orgId, String appId, String inboundId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        if (inboundId == null) throw new IllegalArgumentException("\"inboundId\" is required but got null");
            

        return new CreateInboundNotificationRequestBuilder(orgId, appId, inboundId);
    }
    private okhttp3.Call createOutboundEventCall(String orgId, String appId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/event/notify/outbound/app/{appId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOutboundEventValidateBeforeCall(String orgId, String appId, String processId, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling createOutboundEvent(Async)");
        }

        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createOutboundEvent(Async)");
        }

        return createOutboundEventCall(orgId, appId, processId, requestBody, _callback);

    }


    private ApiResponse<String> createOutboundEventWithHttpInfo(String orgId, String appId, String processId, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = createOutboundEventValidateBeforeCall(orgId, appId, processId, requestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOutboundEventAsync(String orgId, String appId, String processId, Map<String, Object> requestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOutboundEventValidateBeforeCall(orgId, appId, processId, requestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOutboundEventRequestBuilder {
        private final String orgId;
        private final String appId;
        private String processId;

        private CreateOutboundEventRequestBuilder(String orgId, String appId) {
            this.orgId = orgId;
            this.appId = appId;
        }

        /**
         * Set processId
         * @param processId Process id (optional)
         * @return CreateOutboundEventRequestBuilder
         */
        public CreateOutboundEventRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Build call for createOutboundEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOutboundEventCall(orgId, appId, processId, requestBody, _callback);
        }

        private Map<String, Object> buildBodyParams() {
            Map<String, Object> requestBody = new HashMap<String, Object>();
            return requestBody;
        }

        /**
         * Execute createOutboundEvent request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            ApiResponse<String> localVarResp = createOutboundEventWithHttpInfo(orgId, appId, processId, requestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOutboundEvent request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOutboundEventWithHttpInfo(orgId, appId, processId, requestBody);
        }

        /**
         * Execute createOutboundEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Map<String, Object> requestBody = buildBodyParams();
            return createOutboundEventAsync(orgId, appId, processId, requestBody, _callback);
        }
    }

    /**
     * Create an outbound event
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param appId App id (required)
     * @return CreateOutboundEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public CreateOutboundEventRequestBuilder createOutboundEvent(String orgId, String appId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            

        return new CreateOutboundEventRequestBuilder(orgId, appId);
    }
    private okhttp3.Call getEventPayloadCall(String orgId, String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/event/{eventId}"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventPayloadValidateBeforeCall(String orgId, String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getEventPayload(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventPayload(Async)");
        }

        return getEventPayloadCall(orgId, eventId, _callback);

    }


    private ApiResponse<Event> getEventPayloadWithHttpInfo(String orgId, String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventPayloadValidateBeforeCall(orgId, eventId, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventPayloadAsync(String orgId, String eventId, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventPayloadValidateBeforeCall(orgId, eventId, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventPayloadRequestBuilder {
        private final String orgId;
        private final String eventId;

        private GetEventPayloadRequestBuilder(String orgId, String eventId) {
            this.orgId = orgId;
            this.eventId = eventId;
        }

        /**
         * Build call for getEventPayload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventPayloadCall(orgId, eventId, _callback);
        }


        /**
         * Execute getEventPayload request
         * @return Event
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Event execute() throws ApiException {
            ApiResponse<Event> localVarResp = getEventPayloadWithHttpInfo(orgId, eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEventPayload request with HTTP info returned
         * @return ApiResponse&lt;Event&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Event> executeWithHttpInfo() throws ApiException {
            return getEventPayloadWithHttpInfo(orgId, eventId);
        }

        /**
         * Execute getEventPayload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Event> _callback) throws ApiException {
            return getEventPayloadAsync(orgId, eventId, _callback);
        }
    }

    /**
     * Return individual event, including payload
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param eventId  (required)
     * @return GetEventPayloadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetEventPayloadRequestBuilder getEventPayload(String orgId, String eventId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventPayloadRequestBuilder(orgId, eventId);
    }
    private okhttp3.Call getPastEventsCall(String orgId, String userId, String entityId, String entityType, String parentEntityId, String scenarioId, String processId, String fields, String code, Long from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/event"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (parentEntityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parentEntityId", parentEntityId));
        }

        if (scenarioId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarioId", scenarioId));
        }

        if (processId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processId", processId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPastEventsValidateBeforeCall(String orgId, String userId, String entityId, String entityType, String parentEntityId, String scenarioId, String processId, String fields, String code, Long from, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getPastEvents(Async)");
        }

        return getPastEventsCall(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit, _callback);

    }


    private ApiResponse<ResultsEvent> getPastEventsWithHttpInfo(String orgId, String userId, String entityId, String entityType, String parentEntityId, String scenarioId, String processId, String fields, String code, Long from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPastEventsValidateBeforeCall(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsEvent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPastEventsAsync(String orgId, String userId, String entityId, String entityType, String parentEntityId, String scenarioId, String processId, String fields, String code, Long from, Integer limit, final ApiCallback<ResultsEvent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPastEventsValidateBeforeCall(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsEvent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPastEventsRequestBuilder {
        private final String orgId;
        private String userId;
        private String entityId;
        private String entityType;
        private String parentEntityId;
        private String scenarioId;
        private String processId;
        private String fields;
        private String code;
        private Long from;
        private Integer limit;

        private GetPastEventsRequestBuilder(String orgId) {
            this.orgId = orgId;
        }

        /**
         * Set userId
         * @param userId User id (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set entityId
         * @param entityId Entity id (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder entityId(String entityId) {
            this.entityId = entityId;
            return this;
        }
        
        /**
         * Set entityType
         * @param entityType Entity type (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder entityType(String entityType) {
            this.entityType = entityType;
            return this;
        }
        
        /**
         * Set parentEntityId
         * @param parentEntityId Parent entity id (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder parentEntityId(String parentEntityId) {
            this.parentEntityId = parentEntityId;
            return this;
        }
        
        /**
         * Set scenarioId
         * @param scenarioId Scenario id (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder scenarioId(String scenarioId) {
            this.scenarioId = scenarioId;
            return this;
        }
        
        /**
         * Set processId
         * @param processId Process id (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder processId(String processId) {
            this.processId = processId;
            return this;
        }
        
        /**
         * Set fields
         * @param fields Fields that were modified (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder fields(String fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set code
         * @param code Event code to search for (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set from
         * @param from Timestamp to start search at (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder from(Long from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetPastEventsRequestBuilder
         */
        public GetPastEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getPastEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPastEventsCall(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit, _callback);
        }


        /**
         * Execute getPastEvents request
         * @return ResultsEvent
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsEvent execute() throws ApiException {
            ApiResponse<ResultsEvent> localVarResp = getPastEventsWithHttpInfo(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPastEvents request with HTTP info returned
         * @return ApiResponse&lt;ResultsEvent&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsEvent> executeWithHttpInfo() throws ApiException {
            return getPastEventsWithHttpInfo(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit);
        }

        /**
         * Execute getPastEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsEvent> _callback) throws ApiException {
            return getPastEventsAsync(orgId, userId, entityId, entityType, parentEntityId, scenarioId, processId, fields, code, from, limit, _callback);
        }
    }

    /**
     * Return past events, paginated, without payloads present
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @return GetPastEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetPastEventsRequestBuilder getPastEvents(String orgId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        return new GetPastEventsRequestBuilder(orgId);
    }
    private okhttp3.Call resendAssociatedNotificationsCall(String orgId, String eventId, String app, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/org/{orgId}/event/{eventId}/notify"
            .replace("{" + "orgId" + "}", localVarApiClient.escapeString(orgId.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (app != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app", app));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendAssociatedNotificationsValidateBeforeCall(String orgId, String eventId, String app, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling resendAssociatedNotifications(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling resendAssociatedNotifications(Async)");
        }

        return resendAssociatedNotificationsCall(orgId, eventId, app, _callback);

    }


    private ApiResponse<Void> resendAssociatedNotificationsWithHttpInfo(String orgId, String eventId, String app) throws ApiException {
        okhttp3.Call localVarCall = resendAssociatedNotificationsValidateBeforeCall(orgId, eventId, app, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resendAssociatedNotificationsAsync(String orgId, String eventId, String app, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendAssociatedNotificationsValidateBeforeCall(orgId, eventId, app, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResendAssociatedNotificationsRequestBuilder {
        private final String orgId;
        private final String eventId;
        private String app;

        private ResendAssociatedNotificationsRequestBuilder(String orgId, String eventId) {
            this.orgId = orgId;
            this.eventId = eventId;
        }

        /**
         * Set app
         * @param app App name to restrict notifications to (optional)
         * @return ResendAssociatedNotificationsRequestBuilder
         */
        public ResendAssociatedNotificationsRequestBuilder app(String app) {
            this.app = app;
            return this;
        }
        
        /**
         * Build call for resendAssociatedNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resendAssociatedNotificationsCall(orgId, eventId, app, _callback);
        }


        /**
         * Execute resendAssociatedNotifications request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            resendAssociatedNotificationsWithHttpInfo(orgId, eventId, app);
        }

        /**
         * Execute resendAssociatedNotifications request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return resendAssociatedNotificationsWithHttpInfo(orgId, eventId, app);
        }

        /**
         * Execute resendAssociatedNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return resendAssociatedNotificationsAsync(orgId, eventId, app, _callback);
        }
    }

    /**
     * Resend all associated notifications for a previous event (superusers only)
     * 
     * @param orgId Org identifier (either id or slug) (required)
     * @param eventId Event id (required)
     * @return ResendAssociatedNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public ResendAssociatedNotificationsRequestBuilder resendAssociatedNotifications(String orgId, String eventId) throws IllegalArgumentException {
        if (orgId == null) throw new IllegalArgumentException("\"orgId\" is required but got null");
            

        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new ResendAssociatedNotificationsRequestBuilder(orgId, eventId);
    }
}
