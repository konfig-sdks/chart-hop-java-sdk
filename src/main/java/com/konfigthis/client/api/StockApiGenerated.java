/*
 * ChartHop API
 * REST API for ChartHop
 *
 * The version of the OpenAPI document: V1.0.0
 * Contact: support@charthop.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import com.konfigthis.client.model.ResultsStockPrice;
import com.konfigthis.client.model.StockPrice;
import com.konfigthis.client.model.UpdateStockPrice;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StockApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StockApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StockApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getHistoryCall(String symbol, String type, LocalDate from, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHistoryValidateBeforeCall(String symbol, String type, LocalDate from, Integer limit, final ApiCallback _callback) throws ApiException {
        return getHistoryCall(symbol, type, from, limit, _callback);

    }


    private ApiResponse<ResultsStockPrice> getHistoryWithHttpInfo(String symbol, String type, LocalDate from, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(symbol, type, from, limit, null);
        Type localVarReturnType = new TypeToken<ResultsStockPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHistoryAsync(String symbol, String type, LocalDate from, Integer limit, final ApiCallback<ResultsStockPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHistoryValidateBeforeCall(symbol, type, from, limit, _callback);
        Type localVarReturnType = new TypeToken<ResultsStockPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHistoryRequestBuilder {
        private String symbol;
        private String type;
        private LocalDate from;
        private Integer limit;

        private GetHistoryRequestBuilder() {
        }

        /**
         * Set symbol
         * @param symbol Symbol to query (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder symbol(String symbol) {
            this.symbol = symbol;
            return this;
        }
        
        /**
         * Set type
         * @param type Types of valuations to retrieve (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set from
         * @param from Date to start from (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder from(LocalDate from) {
            this.from = from;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Number of results to return (optional)
         * @return GetHistoryRequestBuilder
         */
        public GetHistoryRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHistoryCall(symbol, type, from, limit, _callback);
        }


        /**
         * Execute getHistory request
         * @return ResultsStockPrice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ResultsStockPrice execute() throws ApiException {
            ApiResponse<ResultsStockPrice> localVarResp = getHistoryWithHttpInfo(symbol, type, from, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHistory request with HTTP info returned
         * @return ApiResponse&lt;ResultsStockPrice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultsStockPrice> executeWithHttpInfo() throws ApiException {
            return getHistoryWithHttpInfo(symbol, type, from, limit);
        }

        /**
         * Execute getHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultsStockPrice> _callback) throws ApiException {
            return getHistoryAsync(symbol, type, from, limit, _callback);
        }
    }

    /**
     * Return the history of stock prices
     * 
     * @return GetHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public GetHistoryRequestBuilder getHistory() throws IllegalArgumentException {
        return new GetHistoryRequestBuilder();
    }
    private okhttp3.Call getPriceByDateTypeCall(String symbol, LocalDate date, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stock/{symbol}/{date}/{type}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPriceByDateTypeValidateBeforeCall(String symbol, LocalDate date, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling getPriceByDateType(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getPriceByDateType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getPriceByDateType(Async)");
        }

        return getPriceByDateTypeCall(symbol, date, type, _callback);

    }


    private ApiResponse<StockPrice> getPriceByDateTypeWithHttpInfo(String symbol, LocalDate date, String type) throws ApiException {
        okhttp3.Call localVarCall = getPriceByDateTypeValidateBeforeCall(symbol, date, type, null);
        Type localVarReturnType = new TypeToken<StockPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPriceByDateTypeAsync(String symbol, LocalDate date, String type, final ApiCallback<StockPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPriceByDateTypeValidateBeforeCall(symbol, date, type, _callback);
        Type localVarReturnType = new TypeToken<StockPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPriceByDateTypeRequestBuilder {
        private final String symbol;
        private final LocalDate date;
        private final String type;

        private GetPriceByDateTypeRequestBuilder(String symbol, LocalDate date, String type) {
            this.symbol = symbol;
            this.date = date;
            this.type = type;
        }

        /**
         * Build call for getPriceByDateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPriceByDateTypeCall(symbol, date, type, _callback);
        }


        /**
         * Execute getPriceByDateType request
         * @return StockPrice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public StockPrice execute() throws ApiException {
            ApiResponse<StockPrice> localVarResp = getPriceByDateTypeWithHttpInfo(symbol, date, type);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPriceByDateType request with HTTP info returned
         * @return ApiResponse&lt;StockPrice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StockPrice> executeWithHttpInfo() throws ApiException {
            return getPriceByDateTypeWithHttpInfo(symbol, date, type);
        }

        /**
         * Execute getPriceByDateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StockPrice> _callback) throws ApiException {
            return getPriceByDateTypeAsync(symbol, date, type, _callback);
        }
    }

    /**
     * Get a stock price as of a particular date
     * 
     * @param symbol Stock symbol (required)
     * @param date Date to update information for (required)
     * @param type Type of stock price to retrieve (for example &#39;public&#39;) (required)
     * @return GetPriceByDateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public GetPriceByDateTypeRequestBuilder getPriceByDateType(String symbol, LocalDate date, String type) throws IllegalArgumentException {
        if (symbol == null) throw new IllegalArgumentException("\"symbol\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new GetPriceByDateTypeRequestBuilder(symbol, date, type);
    }
    private okhttp3.Call removePriceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/stock/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePriceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removePrice(Async)");
        }

        return removePriceCall(id, _callback);

    }


    private ApiResponse<Void> removePriceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removePriceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePriceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePriceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePriceRequestBuilder {
        private final String id;

        private RemovePriceRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removePrice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePriceCall(id, _callback);
        }


        /**
         * Execute removePrice request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePriceWithHttpInfo(id);
        }

        /**
         * Execute removePrice request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePriceWithHttpInfo(id);
        }

        /**
         * Execute removePrice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePriceAsync(id, _callback);
        }
    }

    /**
     * Delete a stock price
     * 
     * @param id Stock entry id (required)
     * @return RemovePriceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> not found </td><td>  -  </td></tr>
     </table>
     */
    public RemovePriceRequestBuilder removePrice(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemovePriceRequestBuilder(id);
    }
    private okhttp3.Call upsertPriceByDateTypeCall(String symbol, LocalDate date, String type, UpdateStockPrice updateStockPrice, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStockPrice;

        // create path and map variables
        String localVarPath = "/v1/stock/{symbol}/{date}/{type}"
            .replace("{" + "symbol" + "}", localVarApiClient.escapeString(symbol.toString()))
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()))
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertPriceByDateTypeValidateBeforeCall(String symbol, LocalDate date, String type, UpdateStockPrice updateStockPrice, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling upsertPriceByDateType(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling upsertPriceByDateType(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling upsertPriceByDateType(Async)");
        }

        return upsertPriceByDateTypeCall(symbol, date, type, updateStockPrice, _callback);

    }


    private ApiResponse<StockPrice> upsertPriceByDateTypeWithHttpInfo(String symbol, LocalDate date, String type, UpdateStockPrice updateStockPrice) throws ApiException {
        okhttp3.Call localVarCall = upsertPriceByDateTypeValidateBeforeCall(symbol, date, type, updateStockPrice, null);
        Type localVarReturnType = new TypeToken<StockPrice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call upsertPriceByDateTypeAsync(String symbol, LocalDate date, String type, UpdateStockPrice updateStockPrice, final ApiCallback<StockPrice> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertPriceByDateTypeValidateBeforeCall(symbol, date, type, updateStockPrice, _callback);
        Type localVarReturnType = new TypeToken<StockPrice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpsertPriceByDateTypeRequestBuilder {
        private final String symbol;
        private final LocalDate date;
        private final String type;
        private String orgId;
        private Double price;
        private Long total;

        private UpsertPriceByDateTypeRequestBuilder(String symbol, LocalDate date, String type) {
            this.symbol = symbol;
            this.date = date;
            this.type = type;
        }

        /**
         * Set orgId
         * @param orgId org id that this stock price derives from (optional)
         * @return UpsertPriceByDateTypeRequestBuilder
         */
        public UpsertPriceByDateTypeRequestBuilder orgId(String orgId) {
            this.orgId = orgId;
            return this;
        }
        
        /**
         * Set price
         * @param price price per share (optional)
         * @return UpsertPriceByDateTypeRequestBuilder
         */
        public UpsertPriceByDateTypeRequestBuilder price(Double price) {
            this.price = price;
            return this;
        }
        
        /**
         * Set total
         * @param total total shares outstanding (optional)
         * @return UpsertPriceByDateTypeRequestBuilder
         */
        public UpsertPriceByDateTypeRequestBuilder total(Long total) {
            this.total = total;
            return this;
        }
        
        /**
         * Build call for upsertPriceByDateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateStockPrice updateStockPrice = buildBodyParams();
            return upsertPriceByDateTypeCall(symbol, date, type, updateStockPrice, _callback);
        }

        private UpdateStockPrice buildBodyParams() {
            UpdateStockPrice updateStockPrice = new UpdateStockPrice();
            updateStockPrice.orgId(this.orgId);
            updateStockPrice.price(this.price);
            updateStockPrice.total(this.total);
            return updateStockPrice;
        }

        /**
         * Execute upsertPriceByDateType request
         * @return StockPrice
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public StockPrice execute() throws ApiException {
            UpdateStockPrice updateStockPrice = buildBodyParams();
            ApiResponse<StockPrice> localVarResp = upsertPriceByDateTypeWithHttpInfo(symbol, date, type, updateStockPrice);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upsertPriceByDateType request with HTTP info returned
         * @return ApiResponse&lt;StockPrice&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StockPrice> executeWithHttpInfo() throws ApiException {
            UpdateStockPrice updateStockPrice = buildBodyParams();
            return upsertPriceByDateTypeWithHttpInfo(symbol, date, type, updateStockPrice);
        }

        /**
         * Execute upsertPriceByDateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StockPrice> _callback) throws ApiException {
            UpdateStockPrice updateStockPrice = buildBodyParams();
            return upsertPriceByDateTypeAsync(symbol, date, type, updateStockPrice, _callback);
        }
    }

    /**
     * Upsert a stock price
     * 
     * @param symbol Stock symbol (required)
     * @param date Date to update information for (required)
     * @param type Type of stock price to upsert (required)
     * @return UpsertPriceByDateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid data </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> not authorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> permission denied </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> org not found </td><td>  -  </td></tr>
     </table>
     */
    public UpsertPriceByDateTypeRequestBuilder upsertPriceByDateType(String symbol, LocalDate date, String type) throws IllegalArgumentException {
        if (symbol == null) throw new IllegalArgumentException("\"symbol\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new UpsertPriceByDateTypeRequestBuilder(symbol, date, type);
    }
}
